Ä˝detachtoString_containerLayerestimatedBoundsrepaintCompositedChild_repaintCompositedChildupdateLayerProperties%debugInstrumentRepaintCompositedChild
paintChild_compositeChildappendLayer_isRecording_currentLayer	_recorder_canvascanvas_startRecordingaddCompositionCallbackstopRecordingIfNeededsetIsComplexHintsetWillChangeHintaddLayer	pushLayercreateChildContextpushClipRectpushClipRRectpushClipPathpushColorFilterpushTransformpushOpacityisTightisNormalizeddebugAssertIsValid_ownerlistenerdisposeonNeedVisualUpdateonSemanticsOwnerCreatedonSemanticsUpdateonSemanticsOwnerDisposedrequestVisualUpdaterootNode	_rootNode_shouldMergeDirtyNodes_nodesNeedingLayoutdebugDoingLayout_debugDoingLayout_debugDoingChildLayoutflushLayout#_debugAllowMutationsToDirtySubtrees_enableMutationsToDirtySubtrees"_nodesNeedingCompositingBitsUpdateflushCompositingBits_nodesNeedingPaintdebugDoingPaint_debugDoingPaint
flushPaintsemanticsOwner_semanticsOwner debugOutstandingSemanticsHandles_outstandingSemanticsHandlesensureSemantics_updateSemanticsOwner_didDisposeSemanticsHandle_debugDoingSemantics_nodesNeedingSemanticsflushSemanticsdebugDescribeChildrendebugFillProperties	_children	_manifold_debugParent_debugSetParent%_debugRootSuffixForTimelineEventNamesattach!_debugAllowChildListModifications
adoptChild	dropChildvisitChildrensemanticsEnabled
reassembledebugDisposed_debugDisposed
parentDatasetupParentDatadepth_depthredepthChildredepthChildrenparent_parentdebugCreator_reportExceptiondebugDoingThisResize_debugDoingThisResizedebugDoingThisLayout_debugDoingThisLayoutdebugActiveLayout_debugActiveLayout_withDebugActiveLayoutCleareddebugCanParentUseSize_debugCanParentUseSize_debugMutationsLocked_debugCanPerformMutationsdebugLayoutParentownerattacheddebugNeedsLayout_needsLayout_relayoutBoundary debugDoingThisLayoutWithCallback_doingThisLayoutWithCallbackconstraints_constraintsdebugAssertDoesMeetConstraintsdebugCheckingIntrinsics1_debugSubtreeRelayoutRootAlreadyMarkedNeedsLayoutmarkNeedsLayoutmarkParentNeedsLayout%markNeedsLayoutForSizedByParentChange_cleanRelayoutBoundary_propagateRelayoutBoundary_cleanChildRelayoutBoundary!_propagateRelayoutBoundaryToChildscheduleInitialLayout_layoutWithoutResizelayoutdebugResetSizesizedByParentperformResizeperformLayoutinvokeLayoutCallbackdebugDoingThisPaint_debugDoingThisPaintdebugActivePaint_debugActivePaintisRepaintBoundary!debugRegisterRepaintBoundaryPaintalwaysNeedsCompositing_wasRepaintBoundaryupdateCompositedLayerlayer_layerHandle
debugLayer_needsCompositingBitsUpdatemarkNeedsCompositingBitsUpdate_needsCompositingneedsCompositing_updateCompositingBitsdebugNeedsPaint_needsPaintdebugNeedsCompositedLayerUpdate_needsCompositedLayerUpdatemarkNeedsPaintmarkNeedsCompositedLayerUpdate_skippedPaintingOnLayerscheduleInitialPaintreplaceRootLayer_paintWithContextpaintBounds
debugPaintpaintapplyPaintTransformpaintsChildgetTransformTodescribeApproximatePaintClipdescribeSemanticsClipscheduleInitialSemanticsdescribeSemanticsConfigurationsendSemanticsEvent_cachedSemanticsConfiguration_semanticsConfigurationsemanticBounds_needsSemanticsUpdate
_semanticsdebugSemanticsclearSemanticsmarkNeedsSemanticsUpdate_updateSemantics_getSemanticsForParent_marksExplicitInMergeGroupvisitChildrenForSemanticsassembleSemanticsNodehandleEventtoStringShorttoStringDeeptoStringShallowshowOnScreendescribeForErrordebugValidateChild_childchildpreviousSiblingnextSibling_debugUltimatePreviousSiblingOf_debugUltimateNextSiblingOf_childCount
childCount_firstChild
_lastChild_insertIntoChildListinsertaddaddAll_removeFromChildListremove	removeAllmove
firstChild	lastChildchildBefore
childAftersystemFontsDidChange'_hasPendingSystemFontsDidChangeCallBack_scheduleSystemFontsUpdate dropsSemanticsOfPreviousSiblingsmergeUpFragmentssiblingMergeGroups_ancestorChaincompileChildrenconfigmarkAsExplicithasConfigForParent_tagsForChildrenaddTagsaddAncestor_mergeIntoParent_config_isConfigWritable_mergesToSibling_siblingMergeGroups_mergeSiblingGroup_computeSemanticsGeometry_ensureConfigIsWritable_isExplicit_needsGeometryUpdate_paintClipRect_semanticsClipRect
_transform_rect	transformsemanticsClipRectpaintClipRectrect_computeValues_transformRect!_applyIntermediatePaintTransforms_temporaryTransformHolder_computeClipRect_intersectRectsdropFromTreemarkAsHidden_markAsHidden
ParentDataPaintingContextCallbackPaintingContextConstraintsRenderObjectVisitorLayoutCallback_LocalSemanticsHandlePipelineOwnerPipelineOwnerVisitorPipelineManifold_flutterRenderingLibraryRenderObjectRenderObjectWithChildMixinContainerParentDataMixinContainerRenderObjectMixin"RelayoutWhenSystemFontsChangeMixin_SemanticsFragment_ContainerSemanticsFragment_InterestingSemanticsFragment_RootSemanticsFragment_IncompleteSemanticsFragment_SwitchableSemanticsFragment_SemanticsGeometryDiagnosticsDebugCreatorÅ›PictureRecorderDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsPropertyDoublePropertyEnumPropertyErrorDescription	ErrorHintErrorSummaryFlagPropertyFlutterErrorInformationCollectorIntPropertyStringPropertyHitTestEntryHitTestResultsetupParentData	protectedmustCallSupervoidoverrideStringcanvasOffsetCanvasrepaintCompositedChildClipContextContainerLayerRectisRepaintBoundarybool_needsPaintdebugAlsoPaintedParent!debugRegisterRepaintBoundaryPaintincludedParentincludedChildOffsetLayer_layerHandlelayerupdateCompositedLayeroldLayerattachedoffsetremoveAllChildren	identical_needsCompositedLayerUpdatedebugCreatorruntimeTypechildContextpaintBounds_paintWithContextzerostopRecordingIfNeeded_wasRepaintBoundarycustomContextdebugOnProfilePaintcallgetSaveCountLayerremoveappendPictureLayerCompositionCallbackaddCompositionCallbackVoidCallbackdebugRepaintRainbowEnabledPaintstylePaintingStylestrokestrokeWidthcolordebugCurrentRepaintColortoColordrawRectdeflatedebugPaintLayerBordersEnabledColorpictureendRecordingisComplexHintwillChangeHintalwaysNeedsCompositinghasChildrenchildPaintBoundsneedsCompositingClipRectLayerCliphardEdgeclipBehaviornoneshiftclipRectclipRectAndPaintClipRRectLayerRRect	antiAlias	clipRRectclipRRectAndPaintPathClipPathLayerclipPathclipPathAndPaintColorFilterColorFilterLayercolorFilterMatrix4TransformLayertranslationValuesdxdymultiply	translate	transformMatrixUtilsinverseTransformRectsavestoragerestoreOpacityLayerintalphaobjectRuntimeTypehashCodeBoxConstraintsdebugAssertIsValid==toStringdebugDumpRenderTree	immutabledoublenanRenderConstrainedBoxadditionalConstraintslayoutvisitChildrenvisitChildrenForSemanticsinvokeLayoutCallbackTSemanticsHandle kFlutterMemoryAllocationsEnabledFlutterMemoryAllocationsinstancedispatchObjectCreatedlibrary	classNameobjectsemanticsOwneraddListenerdispatchObjectDisposedremoveListener_didDisposeSemanticsHandleRendererBindingDiagnosticableTreeMixinrequestVisualUpdateSemanticsUpdateFlutterViewSemanticsUpdateCallbackdetachattachListkReleaseModeMap#debugEnhanceLayoutTimelineArgumentslengthFlutterTimeline	startSync	arguments
isNotEmptysortadepthbiaddAllgetRange_needsLayoutowner_layoutWithoutResizechildflushLayoutisEmpty
finishSyncnode_needsCompositingBitsUpdate_updateCompositingBitsclearflushCompositingBits"debugEnhancePaintTimelineArgumentsupdateLayerProperties_skippedPaintingOnLayer
flushPaintsemanticsEnabledSemanticsOwnerdisposelistenerSemanticsBindingensureSemantics_onSemanticsUpdateSetscheduleInitialSemanticstoList_needsSemanticsUpdate_updateSemanticssendSemanticsUpdateflushSemanticstoDiagnosticsNodedebugFillPropertiesadddefaultValue_debugParent	drawFramecontainsforEach
adoptChild
ListenableonNeedVisualUpdateSchedulerBindingensureVisualUpdate	RenderBoxRenderObjectElementPictureImageSizesize
RenderViewhitTestmarkNeedsLayoutHitTestTargetdebugPaintSizeEnabledBindingBasereassembleApplication
reassemble
parentData_depthredepthChildren_parentparent_cleanRelayoutBoundaryDebugCreatorwidgetsObject
StackTracereportErrorFlutterErrorDetails	exceptionstackcontextinformationCollector
kDebugModeDiagnosticsTreeStyletruncateChildrenpragma	fromPartserrorPropertydebugDoingLayout#_debugAllowMutationsToDirtySubtrees_doingThisLayoutWithCallback_debugMutationsLockeddebugLayoutParentdebugActiveLayoutdebugDoingThisLayoutperformLayoutisSemanticBoundary
StateError_relayoutBoundary_debugDoingThisLayoutdebugPrintMarkNeedsLayoutStacksdebugPrintStacklabel_nodesNeedingLayout_propagateRelayoutBoundary_debugDoingLayoutdebugPrintLayouts
debugPrintedebugProfileLayoutsEnabledtoTimelineArgumentsisAppliedConstraintcurrentsplitPatternRegExpmatchAsPrefixMatch
groupCountgrouptrimparentUsesSizeisTightcomputeDryLayout	GlobalKey_enableMutationsToDirtySubtreesRepaintBoundaryLayerHandlemarkNeedsCompositingBitsUpdate"_nodesNeedingCompositingBitsUpdate_nodesNeedingPaintdebugDoingPaintdebugPrintMarkNeedsPaintStacksmarkNeedsPaintRenderOpacity_debugDoingPaintdebugProfilePaintsEnableddescribeForError
paintChildRenderOffstagerootNoderendereridentityindexapplyPaintTransformpushClipRectSemanticsNodeRenderViewportBasecacheExtent_debugDoingSemantics_semanticsOwner_nodesNeedingSemanticsSemanticsConfigurationSemanticsEvent	sendEventisMergedIntoParentsendSemanticsEventexplicitChildNodeschildConfigurationsDelegateclearSemantics_semanticsConfiguration
_semanticsmergeIntoParentisPartOfNodeMergingblockUserActionsareUserActionsBlockedcompileChildrenparentSemanticsClipRectparentPaintClipRectelevationAdjustmentresultsiblingNodesconfigany+isBlockingSemanticsOfPreviouslyPaintedNodeshasBeenAnnotatedisBlockingUserActionsisMergingSemanticsOfDescendants$ChildSemanticsConfigurationsDelegatetagsForChildrenrenderChild_getSemanticsForParent dropsSemanticsOfPreviousSiblingsmergeUpFragmentsfragmentaddAncestoraddTagssiblingMergeGroupssiblingMergeGroupsiblingMergingFragmentmarkAsExplicit"ChildSemanticsConfigurationsResultmergeUpmapIterable	isMergeUphasConfigForParentisCompatibleWithj
updateWithchildrenInInversePaintOrderPointerEventdescribeIdentityDiagnosticLevelinfodebugtoStringDeepprefixLineOneprefixOtherLinesminLeveltoStringShallowjoinervalueifTrueleveltooltipmissingIfNullshowInViewportSingleChildScrollViewDurationCurveCurveseaseshowOnScreen
descendantrectdurationcurveshallownameSingleChildRenderObjectWidget	ChildTypeErrorSpacer_child	dropChildredepthChildnextSiblingpreviousSibling
firstChild	lastChildParentDataTypeRenderBoxContainerDefaultsMixinContainerBoxParentDataMultiChildRenderObjectWidget!SlottedContainerRenderObjectMixinequals_childCountafter_firstChild
_lastChild_debugUltimatePreviousSiblingOf_debugUltimateNextSiblingOf_insertIntoChildListinsert_removeFromChildListsystemFontsDidChangeTextPainter	ParagraphSchedulerPhasetransientCallbacksidleschedulerPhase'_hasPendingSystemFontsDidChangeCallBackscheduleFrameCallbackdebugDisposedPaintingBindingsystemFonts_scheduleSystemFontsUpdatefirstSemanticsTagchildren_tagsForChildren_ancestorChainrootmatrixEqualssemanticBoundsisInvisible_mergesToSiblingabsorb_computeSemanticsGeometrytransformRectexpandToIncludesemanticsClipRect	intersectpaintClipRectidtags
followedBysiblingGrouplast_isExplicitskip	elevationdropFromTreemarkAsHiddenisHiddenassembleSemanticsNodesiblingNode	ancestorsaddTagForChildrencopydescribeSemanticsClipdescribeApproximatePaintClipisZeroinvertsetZerosetIdentitySemanticsFlaghidden
ClipContextSemanticsHandleDiagnosticableTreeMixin
ListenableHitTestTargetRenderObject
ParentData_SemanticsFragment_InterestingSemanticsFragmentDiagnosticsProperty`¥—•˙ü∑1ÆáÓ(ÏŸÓ ÇÉDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsPropertyDoublePropertyEnumPropertyErrorDescription	ErrorHintErrorSummaryFlagPropertyFlutterErrorInformationCollectorIntPropertyStringProperty ÅÙpackage:flutter/foundation.dartÉ>É^HitTestEntryHitTestResult Épackage:flutter/gestures.dart  É`package:flutter/painting.dart
ÄºÄ–PictureRecorder Ä¶  Ä∂uiÄπdart:ui  Ä‘  package:flutter/animation.dart  Ä˝  package:flutter/foundation.dart  Å'  package:flutter/gestures.dart  ÅO  package:flutter/painting.dart  Åw  package:flutter/scheduler.dart  Å†  package:flutter/semantics.dart  Å   
debug.dart  Åﬂ  
layer.dart    	dart:core¿¿É ¿1Êîë <ÄÜÄ§Ä•Ä“Ä”Ä¸Å&ÅNÅvÅüÅ»Å…ÅﬁÅÛÅÙÇ"ÇAÇTÇkÇ}ÇçÇ°ÇÆÇæÇŒÇﬁÇˆÉÉÉ`ÉàÉâÉ—É’ÑÑgÑõÑüÑ≠Ñ±Ñ¸ÖAÖTÖëÖûÖØÖ√ÖƒÖ–ÖÒÖÛÖÙÜ)Ü-Ü~Ü ÜŒáá]á^átáxá ààYàmàqà¬ââbâ¨â∆â ääOä{ä|äûä§äÏãããOãPãxãyã∆åååNåTå†åæåøåÊåÏç7çÑç’çÒç˜ééé]é~é‚èèè+èaèhèlèmèîèÆè◊è˙êê&ê6êmêúêÃêÈêÚëëëWëuëõëÀëÃíídíØí÷ì#ìXìeì¢ì¿ì“ìˇîî îFî†î“ï&ïâï”ï‹ñññFñGñÑñπñ…óó&ó0ó1óvóÆóØó˛ò2òoòôòùòûòÏòÚô=ôäôÿööö)ö/öö†ö⁄õõ<õjõkõ∏õ‘õ‰úú!ú+úÉú≥ùùfùÆùµùËûûûûiûπûÌûÛüü	üVüpü•üøüË†††+†J†Y†ë†∂†ø†“†‹†‡†·°°°Y°®°¯¢/¢?¢g¢z¢Ñ¢Ö¢®¢«¢Ì£9£Ä£¨£„§
§7§D§q§w§{§|§∏§”§¯•5•6•x•≥•ˆ¶¶2¶X¶`¶r¶´¶ﬁß,ßAßMßSßàß€®®$®(®)®u®Ñ®ä®”©©F©L©ô©¨©π©€©ˆ™
™-™1™2™L™x™à™ü™∆™È´
´´@´c´Ñ´å´ü´©´ø´√´ƒ´Ÿ´¯¨¨,¨-¨Q¨W¨°¨Î≠
≠≠,≠G≠`≠f≠â≠û≠¢≠£≠æ≠ŸÆÆ2ÆTÆÄÆÑÆÖÆ÷ÆÂÆÎØ9ØáØ—∞∞∞S∞Y∞i∞î∞⁄±±±±W±]±©±¯≤G≤T≤Z≤©≤Ù≥≥≥$≥E≥^≥l≥r≥Ç≥™≥Œ≥˜¥¥M¥ã¥ì¥æ¥‚µµ)µVµáµèµ¢µ¨µ‰µ˛∂∂(∂,∂-∂}∂ë∂ó∂Ê∑/∑>∑D∑è∑ﬂ∏+∏M∏i∏ä∏£∏©∏“∏÷∏◊π*π0πÄπ…∫∫H∫N∫ô∫Èª5ªWªtªïªÆª¥ªﬁª‚ª„ºººoº™º∞º˝ΩOΩüΩÂΩÎΩ˚ææOæ\æ{æòæ∞æ¥æµøøUø•ø«øÕ¿ @¿ @`¿ @t¿ @z¿ @ø¿ A¿ A_¿ A≠¿ A¿ B¿ B¿ B\¿ B≠¿ B˙¿ CK¿ Cõ¿ CŸ¿ Cﬂ¿ CÔ¿ Cı¿ D@¿ DT¿ DŒ¿ E¿ Em¿ Eè¿ Eµ¿ Eª¿ Eÿ¿ Eı¿ Fc¿ Fd¿ Fá¿ F±¿ Fµ¿ F∂¿ F˛¿ G¿ GJ¿ GW¿ G¶¿ G÷¿ G⁄¿ G€¿ H
¿ H¿ Hb¿ H™¿ H·¿ I-¿ I}¿ Iª¿ Iˇ¿ J¿ JS¿ Jó¿ J¨¿ J≤¿ J˙¿ KC¿ Kå¿ K°¿ Kß¿ K¯¿ L@¿ LP¿ LV¿ L¶¿ LÁ¿ LÌ¿ M6¿ M<¿ MÜ¿ M”¿ N¿ Ng¿ N∑¿ Nˇ¿ OK¿ OÅ¿ Oñ¿ PL¿ Pq¿ Pé¿ P°¿ Pß¿ Pﬂ¿ P˚¿ Q:¿ QF¿ Qj¿ Që¿ Q‹¿ Q¿ Q˝¿ R`¿ Rs¿ Ry¿ R}¿ R~¿ Rµ¿ Rª¿ S
¿ S¿ SU¿ S[¿ S´¿ SÓ¿ SÙ¿ TD¿ Tè¿ T∂¿ Tº¿ U¿ UO¿ UU¿ U¶¿ U¨¿ UÛ¿ Vº¿ V·¿ V˛¿ W¿ W¿ WK¿ WÜ¿ W¢¿ W„¿ WÔ¿ X¿ X<¿ XÖ¿ Xô¿ X¶¿ Y	¿ Y¿ Y"¿ Y&¿ Y'¿ YQ¿ YW¿ Y¶¿ Y¨¿ YÒ¿ Y˜¿ ZG¿ Zä¿ Zê¿ Zﬂ¿ [*¿ [F¿ [L¿ [ú¿ [›¿ [„¿ \'¿ \-¿ \t¿ ]8¿ ]]¿ ]z¿ ]ç¿ ]ì¿ ]«¿ ]ˇ¿ ^¿ ^Z¿ ^f¿ ^ä¿ ^±¿ ^˙¿ _¿ _¿ _|¿ _è¿ _ï¿ _ô¿ _ö¿ _Ã¿ _“¿ `¿ `¿ `k¿ `ë¿ `ó¿ `Á¿ a.¿ a4¿ a{¿ aÅ¿ aŒ¿ b ¿ bp¿ b∂¿ cD¿ cá¿ c¨¿ c”¿ cÂ¿ cÈ¿ cÍ¿ d¿ d!¿ dp¿ dv¿ d«¿ dÌ¿ dÛ¿ e?¿ eê¿ e…¿ eœ¿ f ¿ fb¿ fh¿ fØ¿ gI¿ g•¿ gÂ¿ h¿ hB¿ hn¿ h¿ hé¿ hü¿ hØ¿ i¿ i¿ i-¿ i:¿ iG¿ iX¿ iâ¿ i¶¿ iæ¿ i—¿ i◊¿ i€¿ i‹¿ j¿ j¿ ja¿ jç¿ jì¿ j„¿ k,¿ k|¿ kÇ¿ kœ¿ l¿ l¿ l\¿ lb¿ lØ¿ m¿ mQ¿ mó¿ n¿ nF¿ nP¿ nf¿ n¿ n´¿ nΩ¿ n¡¿ n¬¿ nŒ¿ oZ¿ o\¿ o]¿ oà¿ oå¿ oÿ¿ p¿ p¿ pC¿ pG¿ pó¿ p„¿ q¿ q¿ qZ¿ q™¿ q˜¿ q˚¿ rK¿ rô¿ rÁ¿ s4¿ sA¿ sE¿ sç¿ s‹¿ t&¿ tg¿ t∑¿ u¿ uU¿ uõ¿ u∑¿ uª¿ v
¿ vU¿ v§¿ vÓ¿ w$¿ wt¿ wå¿ wê¿ wﬁ¿ x,¿ x{¿ xï¿ xô¿ xÈ¿ y:¿ yE¿ yb¿ y≥¿ y˚¿ z¿ z¿ z]¿ zq¿ zr¿ z¥¿ zÕ¿ zŒ¿ z¸¿ {¿ {E¿ {K¿ {ö¿ {∂¿ {º¿ |
¿ |Z¿ |©¿ |Ú¿ }+¿ }|¿ }Õ¿ }ﬁ¿ }‰¿ ~2¿ ~¿ ~∏¿ ~æ¿  ¿ ¿ B¿ r¿ y¿ ì¿ ¨¿ ∞¿ ≤¿ ≥¿ ¯¿ ¸¿ ÄS¿ Äî¿ Äï¿ Ä–¿ Ä‘¿ Å¿ ÅS¿ ÅT¿ Åç¿ ÅÀ¿ Å‰¿ Ç$¿ Ç\¿ Çà¿ Ç«¿ Ç˙¿ É'¿ É=¿ ÉF¿ ÉL¿ ÉM¿ Éi¿ Éû¿ É§¿ É®¿ É©¿ É«¿ É»¿ Ñ¿ Ñ2¿ Ñ3¿ Ñ?¿ ÑR¿ Ñí¿ Ñ ¿ Ñˆ¿ ÖD¿ ÖJ¿ ÖK¿ Ög¿ Öü¿ Ö•¿ ÖŒ¿ Ö“¿ Ö‘¿ Ö’¿ Ü¿ Ü¿ Ü`¿ Ü±¿ Ü˛¿ á¿ á¿ áe¿ á¨¿ áˆ¿ à"¿ àk¿ àπ¿ â	¿ âZ¿ â®¿ â¿ ä6¿ äÑ¿ äœ¿ ã¿ ã[¿ ã©¿ ãˆ¿ ã˙¿ åI¿ åì¿ å‡¿ å˛¿ ç¿ çS¿ ç°¿ ç¿ é=¿ éâ¿ é◊¿ è¿ è¿ èh¿ è∂¿ ê¿ êP¿ ê¿ ê≤¿ ê“¿ êÿ¿ ë%¿ ër¿ ëò¿ ë™¿ ë«¿ ëÈ¿ í¿ í(¿ í.¿ ín¿ í¶¿ í“¿ ì¿ ìD¿ ìi¿ ì¿ ìà¿ ìé¿ ìí¿ ìì¿ ì„¿ î¿ î¿ î^¿ î´¿ î¯¿ ï¿ ï¿ ïd¿ ï±¿ ï˙¿ ñ$¿ ñ%¿ ñk¿ ñq¿ ñπ¿ ñœ¿ ñ˛¿ ñˇ¿ óV¿ ó\¿ ó±¿ óﬁ¿ ò¿ ò¿ ò[¿ òa¿ ò¢¿ ò“¿ ò”¿ ô¿ ô¿ ôo¿ ôñ¿ ôµ¿ ô€¿ ô¯¿ ö¿ ö-¿ ö3¿ ö7¿ ö8¿ ö}¿ ö®¿ ö√¿ öÈ¿ õ¿ õ¿ õ¿ õ4¿ õK¿ õh¿ õl¿ õm¿ õπ¿ ú¿ úA¿ úF¿ úè¿ ú€¿ ù$¿ ù\¿ ùa¿ ùù¿ ùÌ¿ û;¿ ûá¿ ûú¿ û√¿ ü ¿ ü¿ ü?¿ üE¿ üÖ¿ üã¿ üŒ¿ üÍ¿ †¿ †>¿ †e¿ †f¿ †®¿ †Æ¿ †˛¿ °I¿ °¿ °Ö¿ °Œ¿ °Â¿ °˛¿ ¢1¿ ¢C¿ ¢v¿ ¢´¿ ¢Á¿ £¿ £&¿ £0¿ £E¿ £Q¿ £r¿ £™¿ £’¿ £ﬁ¿ £‰¿ £Ù¿ §¿ §'¿ §1¿ §;¿ §j¿ §ì¿ §÷¿ •¿ •V¿ •å¿ •¥¿ •‡¿ ¶¿ ¶g¿ ¶|¿ ¶ä¿ ¶ñ¿ ¶…¿ ß¿ ß+¿ ß7¿ ßA¿ ßå¿ ßØ¿ ß◊¿ ßﬂ¿ ß‡¿ ßÚ¿ ®¿ ®.¿ ®:¿ ®o¿ ®å¿ ®î¿ ®˝¿ ©¿ ©3¿ ©E¿ ©h¿ ©ê¿ ©•¿ ©±¿ ©Ã¿ ©Ú¿ ©˙¿ ™ ¿ ™¿ ™¿ ™S¿ ™§¿ ™Ò¿ ´@¿ ´m¿ ´°¿ ´¢¿ ´–¿ ¨¿ ¨/¿ ¨C¿ ¨S¿ ¨â¿ ¨ª¿ ¨Œ¿ ¨ÿ¿ ¨‚¿ ¨Ù¿ ≠¿ ≠)¿ ≠;¿ ≠t¿ ≠â¿ ≠ï¿ ≠õ¿ ≠ü¿ ≠†¿ ≠Ú¿ Æ*¿ Æ0¿ Æ~¿ Æí¿ Æ≤¿ ÆÀ¿ Ø/¿ Ø5¿ Øô¿ Ø„¿ ∞'¿ ∞N¿ ∞V¿ ∞\¿ ∞å¿ ∞ø¿ ∞„¿ ∞È¿ ±_¿ ±x¿ ±ú¿ ±¢¿ ±¶¿ ±ß¿ ±„¿ ±‰¿ ≤!¿ ≤'¿ ≤f¿ ≤l¿ ≤™¿ ≤À¿ ≤˚¿ ≥¿ ≥¿ ≥T¿ ≥Z¿ ≥£¿ ≥Û¿ ¥D¿ ¥J¿ ¥ì¿ ¥©¿ ¥¬¿ ¥ı¿ µ¿ µ9¿ µn¿ µ©¿ µ⁄¿ µÁ¿ µÒ¿ ∂¿ ∂¿ ∂3¿ ∂j¿ ∂ï¿ ∂û¿ ∂§¿ ∂Æ¿ ∂¿¿ ∂·¿ ∂ˆ¿ ∑¿ ∑B¿ ∑o¿ ∑p¿ ∑∞¿ ∏!¿ ∏R¿ ∏Æ¿ ∏·¿ π¿ π1¿ πm¿ πÇ¿ πΩ¿ πÀ¿ πﬁ¿ ∫
¿ ∫¿ ∫ ¿ ∫(¿ ∫]¿ ∫y¿ ∫Å¿ ∫È¿ ∫˘¿ ª¿ ª-¿ ªB¿ ªN¿ ªi¿ ªè¿ ªó¿ ªù¿ ª°¿ ª¢¿ ªÔ¿ ªı¿ ºF¿ ºñ¿ º«¿ Ω¿ Ω[¿ Ω®¿ Ω∫¿ Ω¿¿ æ	¿ æ&¿ æ_¿ æÇ¿ æÉ¿ æ√¿ æ…¿ ø¿ øJ¿ øñ¿ øæ¿ øø¿ ¿¿ ¿\¿ ¿b¿ ¿≥¿ ¿Â¿ ¡4¿ ¡N¿ ¡T¿ ¡•¿ ¡ı¿ ¬>¿ ¬\¿ ¬b¿ ¬ù¿ ¬È¿ √9¿ √_¿ √ü¿ √∆¿ √„¿ ƒ¿ ƒ¿ ƒ¿ ƒ=¿ ƒì¿ ƒ∏¿ ≈7¿ ≈à¿ ≈±¿ ≈π¿ ≈„¿ ∆¿ ∆#¿ ∆K¿ ∆Q¿ ∆U¿ ∆V¿ ∆|¿ ∆°¿ ∆»¿ ∆Â¿ ∆È¿ ∆Í¿ «¿ «T¿ «U¿ «°¿ «Ø¿ «µ¿ «Í¿ »3¿ »9¿ »Ü¿ »¡¿ … ¿ …¿ …O¿ …i¿ …å¿ …ö¿ …†¿ …π¿  ¿  ¿  8¿  H¿  k¿  ~¿  à¿  í¿  ‚¿ À)¿ ÀO¿ Àá¿ À«¿ ÀÍ¿ ÀÙ¿ À¸¿ Ã*¿ Ã_¿ Ã¿ Ãá¿ ÃÛ¿ Õ¿ Õ¿ Õ;¿ ÕP¿ Õ\¿ Õw¿ Õù¿ Õ•¿ Õ´¿ ÕØ¿ Õ∞¿ Õº¿ ÕÓ¿ Œ¿ Œ?¿ Œb¿ Œi¿ Œm¿ Œn¿ Œz¿ Œø¿ ŒÍ¿ œK¿ œO¿ œP¿ œe¿ œf¿ œ†¿ œø¿ œ¿¿ œﬂ¿ –$¿ –E¿ –V¿ –Z¿ –[¿ –∏¿ –π¿ —¿ —¿ —W¿ —¶¿ —…¿ —Ù¿ “¿ “-¿ “`¿ “}¿ “~¿ “±¿ “œ¿ “’¿ “Ÿ¿ “⁄¿ ”¿ ”¿ ”X¿ ”©¿ ”À¿ ”›¿ ”¸¿ ‘2¿ ‘H¿ ‘ó¿ ‘Ë¿ ’)¿ ’*¿ ’]¿ ’s¿ ’y¿ ’}¿ ’~¿ ’√¿ ÷
¿ ÷X¿ ÷ß¿ ◊¿ ◊¿ ◊K¿ ◊Q¿ ◊†¿ ◊Ì¿ ÿ:¿ ÿÖ¿ ÿ“¿ Ÿ!¿ Ÿr¿ Ÿí¿ Ÿò¿ ŸŸ¿ Ÿ˝¿ ⁄¿ ⁄T¿ ⁄£¿ ⁄©¿ ⁄‘¿ ⁄˝¿ €%¿ €M¿ €¶¿ €¿¿ €Ÿ¿ €˝¿ ‹¿ ‹ ¿ ‹@¿ ‹F¿ ‹J¿ ‹K¿ ‹î¿ ‹ö¿ ‹Î¿ ‹˝¿ ›¿ ›R¿ ›°¿ ›…¿ ›Ò¿ ﬁ¿ ﬁq¿ ﬁé¿ ﬁß¿ ﬁÀ¿ ﬁ—¿ ﬁÓ¿ ﬂ¿ ﬂ
¿ ﬂ¿ ﬂ¿ ﬂW¿ ﬂ]¿ ﬂm¿ ﬂs¿ ﬂô¿ ﬂ¡¿ ﬂˆ¿ ‡¿ ‡¿ ‡¿ ‡T¿ ‡Z¿ ‡©¿ ‡¯¿ ·I¿ ·O¿ ·ã¿ ·û¿ ·Ω¿ ·€¿ ·˙¿ ‚¿ ‚H¿ ‚ñ¿ ‚ú¿ ‚º¿ ‚ÿ¿ ‚˘¿ „)¿ „I¿ „m¿ „q¿ „s¿ „t¿ „µ¿ „π¿ „Ê¿ ‰)¿ ‰*¿ ‰R¿ ‰V¿ ‰ñ¿ ‰„¿ Â2¿ ÂÄ¿ ÂÕ¿ ÂÙ¿ Â¯¿ ÊH¿ Êô¿ Êﬂ¿ Êˇ¿ Á¿ ÁQ¿ Áù¿ Á’¿ Ë ¿ Ëb¿ Ëh¿ Ë∏¿ Ë˙¿ È ¿ È¿ È¿ È]¿ Èõ¿ È∏¿ Èπ¿ Í¿ ÍU¿ Ín¿ Ít¿ Í≈¿ Î¿ Î_¿ Î~¿ ÎÑ¿ ÎÀ¿ Ï¿ Ïh¿ Ïn¿ Ï~¿ ÏÑ¿ ÏÕ¿ Ì¿ Ì-¿ Ì/¿ Ì0¿ Ìz¿ Ì{¿ Ìù¿ Ì°¿ ÌÂ¿ Ó¿ Ó	¿ ÓL¿ ÓP¿ Óú¿ ÓÏ¿ Ô7¿ ÔW¿ Ô[¿ Ô¶¿ ÔÙ¿ =¿ ç¿ ⁄¿ Ò)¿ Òy¿ Ò†¿ Ò§¿ ÒË¿ Ú¿ Ú¿ Ú$¿ Ú(¿ Úu¿ Ú≈¿ Û¿ Û0¿ Û4¿ ÛÄ¿ ÛŒ¿ Ù¿ Ùo¿ Ù≠¿ Ù±¿ Ùÿ¿ Ù‹¿ ı"¿ ıp¿ ıΩ¿ ˆ¿ ˆW¿ ˆ•¿ ˆı¿ ˜C¿ ˜ã¿ ˜⁄¿ ¯'¿ ¯r¿ ¯≥¿ ¯∑¿ ˘¿ ˘V¿ ˘ß¿ ˘„¿ ˘Á¿ ˘ˆ¿ ˘˙¿ ˙A¿ ˙à¿ ˙§¿ ˙®¿ ˙ˆ¿ ˚G¿ ˚ì¿ ˚‡¿ ¸%¿ ¸f¿ ¸j¿ ¸∫¿ ¸Ì¿ ¸Ò¿ ˝¿ ˝	¿ ˝T¿ ˝É¿ ˝á¿ ˝‘¿ ˛"¿ ˛s¿ ˛ª¿ ˇ¿ ˇS¿ ˇ†¿ ˇ≈¿ ˇ…¿ ˇ˜¿ ˇ˚¿ L¿ ù¿ Ë¿8¿â¿†¿§¿Ù¿¿¿H¿ñ¿ß¿´¿¯¿G¿K¿~¿Ç¿‘¿$¿s¿æ¿	¿¿[¿®¿˜¿C¿í¿·¿¿g¿∑¿ƒ¿¿J¿]¿â¿»¿Û¿	¿	-¿	6¿	<¿	Å¿	Æ¿	≤¿	≥¿
¿
Q¿
ú¿
À¿
—¿¿c¿Ø¿Œ¿‘¿ ¿&¿6¿<¿i¿¿ñ¿º¿“¿Ú¿¿5¿=¿A¿B¿h¿n¿´¿«¿€¿Î¿¿¿)¿>¿B¿C¿b¿c¿õ¿°¿Ï¿;¿Ü¿≈¿¿^¿v¿|¿«¿Ó¿Ù¿0¿A¿T¿q¿ù¿Î¿Ò¿¿ ¿m¿¿≠¿¿¿„¿Q¿_¿l¿â¿ú¿¶¿™¿´¿∑¿∏¿Ë¿Ó¿;¿ä¿⁄¿¿¿i¿ò¿Ë¿&¿w¿√¿¿J¿d¿e¿¶¿¨¿¸¿-¿d¿ã¿∂¿›¿„¿Á¿Ë¿"¿(¿x¿¿¿˝¿¿Q¿ú¿Ï¿;¿Å¿—¿◊¿¿o¿é¿©¿ª¿º¿¿¿"¿c¿p¿ö¿º¿ﬁ¿ˇ¿¿$¿(¿)¿c¿i¿∫¿Ú¿ˇ¿¿¿X¿^¿û¿≈¿ﬁ¿ﬂ¿ '¿ -¿ |¿ œ¿ ‡¿ Ì¿!¿!8¿!H¿!h¿!å¿!©¿!±¿!˙¿"¿"¿"¿"4¿"K¿"q¿"ë¿"´¿"ø¿"‹¿"‚¿"˚¿"ˇ¿# ¿#R¿#X¿#ß¿#˙¿$¿$¿$?¿$b¿$ä¿$∞¿$‘¿$Ù¿%¿%+¿%?¿%U¿%[¿%r¿%ò¿%∏¿%º¿%Ω¿&¿&¿&W¿&ç¿&é¿&Ã¿&“¿&¿&ˆ¿'¿'¿'`¿'x¿'y¿'∆¿'¯¿(¿((¿(L¿(Å¿(∂¿)¿)1¿)a¿)ì¿)¸¿*K¿*ö¿*Â¿+¿+v¿+¿+á¿+ã¿+å¿+◊¿+›¿,*¿,7¿,q¿,ó¿,ò¿,„¿,È¿-6¿-C¿-}¿-£¿-§¿-ﬂ¿-Â¿.2¿.>¿.Ç¿.≠¿.Æ¿.ı¿/>¿/å¿/©¿/«¿0	¿06¿0F¿0|¿0ù¿0∞¿0∫¿0ÿ¿0Ë¿1¿11¿1;¿1N¿1R¿1S¿1£¿1Ø¿1µ¿1ı¿1˚¿2A¿2~¿2û¿2ü¿2≈¿2∆¿2¸¿3¿3R¿3¢¿3‰¿3Í¿48¿4_¿4u¿4Ö¿4°¿4Ÿ¿5¿5F¿5s¿5Ö¿5º¿5…¿5’¿5›¿5ﬁ¿6¿6[¿6¨¿6ƒ¿6˙¿7¿7&¿7.¿7/¿7\¿7Ö¿8 ¿8\¿8í¿8Â¿92¿9Å¿9©¿:¿:-¿:D¿:N¿:O¿:Ü¿:Ã¿;¿;¿;=¿;N¿;X¿;`¿;a¿;Ø¿<"¿<Ñ¿<ö¿<õ¿<¡¿<˘¿=J¿=f¿=Ã¿=Ÿ¿>¿>8¿>J¿>Å¿>é¿>ª¿?¿?&¿?]¿?j¿?v¿?~¿?¿?•¿?›¿@A¿@§¿@—¿A¿A¿AL¿AY¿A»¿A‘¿A‹¿A›¿BG¿Bï¿B ¿C'¿Cà¿C∑¿C∏¿CÓ¿Cˇ¿D&¿DQ¿DÅ¿Dë¿D∆¿D—¿D¸¿Eo¿Eå¿E¡¿EÃ¿F¿F8¿FT¿Fâ¿Fî¿Fß¿G+¿Gé¿Gô¿G£¿G≠¿G¿¿Gƒ¿G≈¿H¿HC¿HI¿Hö¿HÁ¿I0¿I6¿IÅ¿I∫¿J
¿J[¿Jp¿J}¿J•¿J≈¿J’¿JÚ¿K¿K¿K(¿K,¿K-¿Kj¿Kp¿K∞¿K–¿Kˆ¿L¿L¿Ln¿Lt¿L©¿LØ¿LÂ¿M¿M¿MK¿MQ¿Mù¿M”¿MŸ¿N¿NM¿Nî¿N•¿N ¿NÁ¿O¿O¿Oe¿O¨¿O·¿P!¿PQ¿Pm¿PÜ¿På¿P≥¿Pﬁ¿Q¿Q¿QA¿QÄ¿QØ¿Q ¿Q‚¿QË¿R7¿RÄ¿R≥¿Rÿ¿R˙¿S ¿S¿S¿SI¿SO¿Sü¿S ¿S–¿T¿TT¿Tr¿TÉ¿Tï¿T±¿Tƒ¿U ¿U¿U¿UE¿UK¿Uú¿UË¿V5¿Vl¿Vr¿V®¿V∆¿V‹¿VÏ¿W	¿W¿W&¿W9¿W=¿WY¿WZ¿W}¿W~¿W–¿X¿XJ¿XK¿Xé¿Xî¿X’¿X˚¿Y¿Y(¿YH¿Y≠¿Y≥¿YÕ¿Y—¿YÓ¿YÔ¿Z2¿Zv¿Zº¿[¿[9¿[F¿[o¿[p¿[Ø¿[¿\¿\¿\\¿\ù¿\‹¿]!¿]U¿]Ñ¿]¡¿]Ê¿^!¿^4¿^:¿^X¿^Ä¿^ª¿^ﬁ¿^˘¿_<¿_R¿_Z¿_`¿_å¿_ù¿_°¿_¢¿_Û¿`D¿`ä¿`ê¿`§¿`™¿`˚¿aI¿añ¿a’¿a€¿b+¿b`¿bf¿b∂¿bˇ¿cO¿cú¿cÈ¿d6¿dp¿dv¿d∑¿e¿eH¿eN¿ee¿ek¿e¥¿e˛¿fM¿få¿f…¿g¿g6¿g<¿gh¿g¥¿gœ¿gˆ¿h¿hQ¿h_¿he¿hä¿h•¿h¡¿i¿i]¿iÅ¿i¢¿i™¿i∏¿iæ¿i„¿j¿j¿j*¿jE¿jY¿jä¿j‘¿j‡¿j˜¿k¿k3¿kY¿ka¿kg¿kk¿kl¿kª¿kÕ¿k”¿l¿lh¿l∑¿lË¿lÓ¿m¿m)¿mJ¿mq¿mä¿m´¿mŸ¿n¿n"¿n/¿n[¿na¿nÑ¿nà¿nâ¿nÀ¿o¿oW¿o]¿o¶¿o¨¿o⁄¿p¿p"¿p?¿pC¿pD¿pf¿pã¿p´¿p›¿p„¿pÁ¿pË¿q¿q3¿qA¿qG¿qì¿qø¿qˆ¿r(¿r`¿rf¿rj¿rk¿r®¿rË¿s¿s¿s¿sW¿s¿sÉ¿sÑ¿s–¿s÷¿t#¿tI¿tO¿tì¿t¥¿t—¿tÁ¿u¿u3¿uZ¿ux¿uà¿uÆ¿u¡¿uÀ¿uı¿u˘¿u˙¿v'¿vG¿vn¿võ¿vø¿vÍ¿w¿w&¿wJ¿wn¿w§¿w≈¿w‰¿x¿x%¿x8¿xB¿xL¿xc¿xÖ¿xû¿x—¿x◊¿xÁ¿y¿yB¿yg¿yz¿yÑ¿yû¿y¥¿y∏¿yπ¿yÍ¿y¿z?¿zé¿zﬁ¿{¿{¿{`¿{∞¿|¿|M¿|ë¿|·¿}¿}"¿}o¿}∫¿~¿~¿~V¿~•¿~Ú¿¿L¿ñ¿≥¿Í¿Ä¿Ä/¿Äb¿Ä∞¿Ä∫¿Äœ¿Ä€¿Ä¸¿Å¿Å?¿ÅH¿ÅN¿Åy¿Åö¿Åª¿Ç	¿Ç#¿ÇÉ¿Ç∑¿Ç˚¿É¿ÉH¿É[¿Ég¿Éq¿É≤¿É˚¿Ñ[¿Ñ¸¿Ö ¿Ö>¿Öí¿Ö„¿Ü¿Ü:¿ÜI¿ÜV¿Ü`¿ÜÑ¿Üç¿Üï¿Üπ¿Ü›¿áU¿á∑¿á«¿áˆ¿à	¿à¿à¿àL¿à^¿à¨¿àÌ¿â¿âL¿âò¿âª¿â’¿ä¿ä4¿ä[¿äp¿ä|¿ä}¿ä∞¿äﬁ¿ã¿ã ¿ã!¿ãZ¿ãÄ¿ãà¿ãñ¿ãú¿ãº¿å
¿åY¿åß¿åŸ¿ç¿ç¿ç;¿ç_¿çä¿çö¿çæ¿ç›¿éI¿éQ¿éd¿én¿éá¿éô¿éø¿é‘¿é‡¿éÏ¿è¿è¿èE¿è\¿èj¿èÖ¿è∫¿è¬¿è‘¿è˚¿ê¿ê¿ê"¿êO¿ê_¿êÉ¿êπ¿ê⁄¿êÌ¿ê˜¿ë¿ë¿ë:¿ëL¿ëv¿ëã¿ëó¿ë∞¿ë„¿ëÈ¿ë˘¿í/¿íT¿íy¿íå¿íñ¿í∞¿í∆¿í«¿í˛¿ì"¿ì(¿ì,¿ì-¿ìy¿ì¬¿î¿î[¿î¨¿îŸ¿îÊ¿ï¿ï¿ïP¿ï¿ïÖ¿ïÕ¿ñ¿ñ^¿ñd¿ñ¥¿ó¿ó2¿ó8¿óà¿óŒ¿ò¿ò0¿ò=¿ò`¿òa¿ò†¿ò‚¿òË¿ô7¿ôÇ¿ôÕ¿ö¿ö¿öK¿ö`¿öf¿ö∑¿õ¿õ2¿õ?¿õW¿õX¿õö¿õ†¿õÔ¿ú:¿úÖ¿úæ¿úƒ¿ù¿ùe¿ù≥¿û¿û¿û¿ûg¿ûµ¿û˙¿üJ¿üì¿üÀ¿üÿ¿ü¿üÒ¿†8¿†à¿†’¿°!¿°=¿°C¿°î¿°‚¿¢3¿¢|¿¢Ç¿¢”¿£#¿£)¿£_¿£l¿£Ω¿£‡¿§¿§.¿§W¿§a¿§≥¿§√¿§Ô¿§ı¿§˘¿§˙¿•¿•	¿•L¿•R¿•ü¿•¨¿•‰¿¶	¿¶
¿¶=¿¶C¿¶ê¿¶ú¿¶ﬁ¿ß¿ß	¿ßO¿ßU¿ß¶¿ßÔ¿®@¿®R¿®X¿®®¿®˛¿©D¿©ò¿©¬¿©»¿™¿™*¿™0¿™à¿™Ø¿™∞¿™˝¿´6¿´<¿´å¿´©¿¨¿¨¿¨N¿¨T¿¨¢¿¨Ò¿≠¿≠!¿≠r¿≠¿¿≠Õ¿≠˘¿≠˙¿Æ¿Æ¿Æ[¿Æa¿Æ∞¿Æ∂¿Ø¿ØP¿Ø°¿Ø¿∞;¿∞K¿∞Q¿∞û¿∞»¿∞Œ¿±!¿±r¿±ø¿≤¿≤$¿≤{¿≤…¿≥¿≥:¿≥`¿≥d¿≥e¿≥™¿≥∞¿¥ ¿¥M¿¥ö¿¥È¿µ<¿µä¿µ–¿∂¿∂j¿∂ü¿∂•¿∂Ú¿∑@¿∑ä¿∑÷¿∏%¿∏t¿∏ì¿∏ô¿∏Ë¿π5¿πÅ¿πé¿πõ¿ππ¿∫¿∫;¿∫?¿∫@¿∫M¿∫u¿∫Å¿∫õ¿∫„¿ª*¿ªK¿ªR¿ªu¿ªy¿ªz¿ªÃ¿ªÕ¿º!¿º'¿ºx¿ºÀ¿º€¿º·¿Ω¿Ω1¿ΩM¿Ω]¿ΩÄ¿Ωì¿Ωù¿Ω∞¿Ω¥¿Ωµ¿æ¿æH¿æN¿æû¿æÓ¿æ˚¿ø¿ø=¿øÑ¿øÀ¿¿¿¿W¿¿å¿¿í¿¿◊¿¡¿¡V¿¡Ä¿¡ù¿¡ƒ¿¡“¿¡ÿ¿¬ ¿¬"¿¬R¿¬Ç¿¬í¿¬ö¿¬õ¿¬Ú¿√#¿√3¿√;¿√A¿√~¿√ó¿√“¿√ÿ¿√‹¿√›¿ƒ¿ƒb¿ƒh¿ƒπ¿ƒ·¿ƒÁ¿≈&¿≈c¿≈Å¿≈ﬂ¿≈˝¿∆¿∆¿∆$¿∆L¿∆Z¿∆`¿∆ò¿∆∑¿∆‡¿«¿«*¿«L¿«T¿«\¿«ì¿«≥¿«π¿»¿»S¿»ü¿»ˆ¿…A¿…v¿…ë¿…º¿…Í¿ ¿ -¿ h¿ ì¿ ´¿ ∏¿ „¿ È¿ Ì¿ Ó¿À-¿À3¿ÀÑ¿À–¿Ã¿ÃV¿Ã\¿Ãí¿Ãò¿Ã‰¿Õ3¿Õx¿Õƒ¿Õˇ¿Œ¿Œ2¿ŒB¿Œ^¿Œq¿Œ{¿Œé¿Œí¿Œ≠¿ŒÆ¿ŒÌ¿ŒÛ¿œD¿œê¿œ›¿–¿–¿–R¿–¿–ï¿–•¿–—¿–‰¿–Ó¿—¿—¿—1¿—2¿—y¿—¿—ƒ¿“¿“a¿“∞¿“»¿“Œ¿”¿”U¿”[¿”õ¿”Ë¿‘*¿‘0¿‘@¿‘F¿‘î¿‘Ê¿‘ˆ¿’¿’-¿’c¿’z¿’à¿’é¿’¶¿’Ï¿÷¿÷B¿÷T¿÷Ç¿÷…¿÷”¿÷Ë¿÷Ù¿◊7¿◊m¿◊û¿◊π¿◊Ê¿ÿ¿ÿ¿ÿ=¿ÿ]¿ÿj¿ÿ|¿ÿ™¿Ÿ¿Ÿ¿Ÿ&¿Ÿ2¿Ÿ|¿Ÿ∆¿⁄
¿⁄H¿⁄Q¿⁄é¿⁄Õ¿⁄Ë¿€¿€¿€¿€ ¿€!¿€n¿€{¿€Å¿€“¿‹&¿‹q¿‹¿¿›	¿›¿›`¿›∞¿›”¿›Ÿ¿›È¿›Ô¿ﬁ?¿ﬁ~¿ﬁ®¿ﬁ≈¿ﬁ˚¿ﬂ1¿ﬂ?¿ﬂE¿ﬂm¿ﬂ≥¿ﬂ’¿‡	¿‡L¿‡Ç¿‡¨¿‡«¿‡Ù¿·¿·"¿·/¿·G¿·M¿·Q¿·R¿·¢¿·¿‚A¿‚ä¿‚√¿‚Ê¿‚¸¿„¿„S¿„{¿„¶¿„«¿„Í¿‰¿‰=¿‰î¿‰•¿‰Ø¿‰‡¿Â<¿ÂM¿ÂW¿Âx¿ÂÄ¿Âö¿Â†¿Â§¿Â•¿Â¿Âˆ¿ÊD¿Êl¿Êr¿Ê∂¿ÊÓ¿Á¿Á$¿ÁI¿Áo¿Áé¿Á∂¿Á⁄¿ÁÛ¿Ë¿Ë ¿Ë!¿Ëf¿Ëß¿Ëπ¿Ëø¿È¿È5¿ÈR¿Èr¿Èà¿È≠¿È”¿ÈÚ¿ÍE¿Íg¿Íã¿Í°¿Í•¿Í¶¿ÍÈ¿Î¿Î¿Î8¿Îp¿Î∂¿Î“¿Ï"¿Ï?¿ÏL¿Ïh¿Ï≥¿ÏŒ¿Ï€¿ÏÁ¿ÏÔ¿Ì¿Ì¿ÌX¿Ì¶¿ÌÙ¿ÓC¿Óè¿Ó‹¿Ô%¿Ô=¿ÔK¿ÔQ¿Ôá¿Ô∫¿ÔÃ¿Ô˛¿L¿V¿k¿w¿ò¿∞¿€¿‰¿Í¿˙¿Ò#¿ÒI¿Ò}¿Ò•¿Ò€¿Ò¸¿Ú"¿Ú0¿Ú>¿Ú`¿Úú¿Ú∏¿Û¿Û)¿Û:¿Ûa¿ÛÉ¿Ûî¿Û¥¿ÛÍ¿Û˚¿Ù¿Ùl¿Ù¿¿ı¿ı¿ı.¿ıÇ¿ıì¿ı£¿ıØ¿ıπ¿ıÒ¿ˆ	¿ˆW¿ˆo¿ˆ|¿ˆò¿ˆÈ¿˜¿˜*¿˜F¿˜î¿˜·¿¯!¿¯.¿¯C¿¯ì¿¯†¿¯¨¿¯¥¿¯«¿¯—¿¯˘¿˘	¿˘,¿˘\¿˘|¿˘º¿˘œ¿˘Ÿ¿˘Ú¿˙¿˙H¿˙R¿˙p¿˙…¿˚!¿˚:¿˚e¿˚k¿˚{¿˚û¿˚Œ¿˚Ú¿¸¿¸¿¸E¿¸i¿¸o¿¸s¿¸t¿¸¿¿˝
¿˝¿˝`¿˝y¿˝ë¿˝í¿˝Õ¿˛¿˛¿˛W¿˛]¿˛©¿˛Ó¿ˇ<¿ˇâ¿ˇØ¿ˇµ¿ ¿ S¿ °¿ ∏¿ æ¿
¿T¿£¿’¿¿¿_¿z¿Ä¿–¿¿¿i¿µ¿¿J¿ñ¿œ¿¿?¿C¿D¿ã¿ë¿·¿-¿~¿ó¿ù¿‰¿1¿}¿Õ¿¿:¿m¿è¿†¿§¿•¿Â¿	"¿	(¿	r¿	ô¿	ü¿	Ï¿
0¿
P¿
e¿
k¿
∑¿¿T¿£¿µ¿Ë¿¿3¿O¿Ö¿´¿»¿–¿÷¿¿m¿å¿ﬂ¿Â¿¿"¿(¿Z¿û¿Î¿Ò¿¿¿¿¿T¿ñ¿◊¿›¿¿¿_¿Ü¿å¿‹¿)¿y¿≥¿ˇ¿ ¿G¿ñ¿‚¿.¿¿À¿¿#¿)¿t¿¡¿¿(¿.¿¿Õ¿¿k¿∫¿ˇ¿¿¿¿g¿£¿È¿Í¿˘¿˙¿A¿f¿l¿≥¿ ¿–¿¿=¿Z¿p¿ï¿ø¿ﬂ¿¿.¿[¿}¿Å¿Ç¿”¿Ÿ¿$¿@¿F¿è¿⁄¿)¿q¿¡¿¿¿$¿*¿z¿ç¿ì¿°¿Ë¿˙¿G¿¿ê¿±¿◊¿ˆ¿ ¿¿"¿=¿G¿O¿Y¿k¿x¿ø¿‡¿‰¿Â¿ :¿ @¿ ã¿ ∆¿ Ã¿!¿!¿!Y¿!î¿!Ω¿!À¿!—¿"¿"?¿"`¿"í¿"ò¿"ú¿"ù¿"À¿#¿#¿#<¿#m¿#≠¿#Û¿$¿$É¿$˜¿% ¿%¿%1¿%5¿%6¿%v¿%†¿%ª¿%º¿%·¿%˛¿%ˇ¿&*¿&0¿&~¿&¬¿&È¿&Ô¿'=¿'I¿'o¿'à¿'°¿'ß¿'∏¿'º¿'Ω¿(¿(¿([¿(a¿(™¿(ˆ¿)¿)!¿)C¿)Z¿)É¿)°¿)©¿)≠¿)Æ¿)ˆ¿)¸¿*C¿*î¿*¿¿*‰¿+¿+8¿+o¿+õ¿+©¿+Ø¿+∞¿+˚¿,E¿,ï¿,·¿,‚¿-\¿-]¿-¿-À¿.¿.8¿.9¿.•¿.√¿.ƒ¿/¿/c¿/≠¿/À¿0*¿0b¿0q¿0y¿0¢¿0Ù¿1E¿1t¿1û¿1∆¿1Œ¿1œ¿1Í¿2@¿2Ö¿2ÿ¿3*¿3s¿3É¿3ã¿3ë¿3ÿ¿4)¿4m¿4º¿5¿5[¿5m¿5∏¿5Í¿5¿6¿6@¿6[¿6≥¿6‰¿7
¿7¿7¿7¿7¿7Z¿7v¿7¿¿7ÿ¿8&¿8x¿8Ü¿8å¿8•¿8ﬂ¿8Â¿9%¿9n¿9≤¿9π¿9“¿9ˆ¿9¸¿:3¿:ú¿:÷¿;¿;¿;0¿;n¿;t¿;ù¿;·¿<¿<`¿<v¿<ò¿<ü¿<∏¿<‹¿<‚¿=/¿=ô¿=ù¿=û¿=Í¿>¿>;¿>_¿>f¿> ¿>À¿?¿?m¿?»¿@"¿@Ü¿@ﬂ¿A/¿A°¿B4¿Bò¿C¿CX¿Cì¿C∞¿D¿D6¿Dh¿Dq¿DÆ¿D”¿Dı¿E!¿EK¿E}¿Eá¿Eè¿EÌ¿F¿F(¿F]¿Fg¿Fµ¿G¿G"¿GW¿Gê¿G°¿GÀ¿G’¿G›¿H¿Hd¿Hô¿I
¿Il¿I¢¿IΩ¿J¿J¿J¿J[¿Je¿Jm¿Ju¿Jv¿J√¿Jƒ¿J·¿K0¿KS¿K[¿Kë¿K˚¿L¿Lv¿L ¿LÏ¿M6¿Ml¿Mô¿MÁ¿MÛ¿N¿N¿N#¿N{¿N£¿N¯¿Ob¿Oy¿OÑ¿Oå¿Oí¿Oì¿O∂¿O∑¿O‹¿Oˆ¿P¿P>¿Pp¿Pµ¿P˚¿Q"¿Q7¿QÇ¿Qã¿Qµ¿Q·¿R¿Rd¿Rm¿Rz¿Rø¿S¿S2¿SJ¿Sv¿S†¿Sÿ¿SÌ¿T8¿TA¿Th¿T∆¿TÈ¿TÒ¿T˜¿U¿U/¿U3¿U4¿U¢¿V¿V6¿Vz¿V§¿V∂¿Væ¿W¿W7¿W?¿Wb¿Wï¿W‚¿X,¿XR¿X¿Xâ¿Xë¿Xó¿X‡¿Y¿Y¿Y¿Y¿YE¿YK¿Yõ¿Y‰¿Yˆ¿Y¸¿Z5¿Zy¿Zπ¿Z’¿ZŸ¿Z⁄¿[¿[¿[K¿[ú¿[Ê¿\6¿\a¿\g¿\≥¿\À¿\—¿]¿]i¿]ö¿]∏¿]–¿]Û¿^¿^¿^?¿^∏¿_¿_¿_ ¿_,¿_-¿_~¿_ä¿_”¿_‘¿_’¿_Ê¿_Á¿`5¿`}¿`ï¿`ö¿`Ÿ¿a%¿a:¿aä¿aŸ¿b'¿bT¿bè¿bñ¿bõ¿bÏ¿c ¿c!¿c"¿cM¿cY¿ct¿c†¿cπ¿c’¿cÙ¿d¿d¿dW¿dn¿dï¿d’¿d˜¿e¿e¿eG¿eO¿ei¿eå¿eî¿e≠¿eœ¿e◊¿f ¿f4¿f<¿fS¿fr¿fz¿fÄ¿fì¿fó¿fò¿f§¿fˇ¿g ¿g=¿gÖ¿g¨¿g∏¿g–¿gÔ¿h¿hH¿hO¿hí¿h∫¿hË¿i¿i¿i¿i¿i[¿iä¿iê¿i€¿j¿j#¿j>¿jX¿jé¿jï¿k ¿k¿k¿k¿k¿kc¿ké¿k˚¿lx¿m ¿mà¿mÁ¿nQ¿nª¿n‹¿o¿oc¿oπ¿o¡¿pI¿pM¿pN¿pZ¿p¢¿p£¿pÙ¿q¿q¿qV¿qö¿q†¿q¿r/¿r|¿r«¿s¿s,¿s2¿s}¿sø¿s≈¿s’¿s€¿t'¿t`¿tv¿tî¿t§¿tÀ¿tÍ¿tÒ¿u¿u/¿uW¿uk¿uá¿uù¿u¶¿u¨¿u∞¿u±¿v¿v¿v¿vn¿vΩ¿vÎ¿vÒ¿wA¿wé¿wˇ¿x7¿x;¿x=¿x>¿xs¿xw¿x∏¿x¯¿x¸¿yA¿yk¿yæ¿z¿z4¿z:¿zi¿zo¿zä¿z∫¿z ¿zÎ¿{#¿{;¿{å¿{ø¿{Ã¿{Ë¿|4¿|¿|—¿}"¿}/¿}H¿}p¿}¿¿}⁄¿~¿~¿~7¿~_¿~≤¿~–¿~¿'¿4¿@¿H¿[¿e¿v¿z¿{¿ê¿∏¿⁄¿˙¿Ä¿Ä.¿Ä4¿ÄH¿Äb¿Ä}¿ÄÉ¿Äá¿Äà¿Äî¿Äπ¿Ä“¿ÄÌ¿ÄÒ¿ÄÚ¿Ä˛¿Å¿Å$¿Å:¿Å>¿Å?¿ÅK¿Åf¿ÅÄ¿Åù¿Å£¿Åß¿Å®¿Å¥¿ÅË¿Ç¿Ç¿Ç ¿Ç$¿Ç%¿Ç1¿Çc¿Ç–¿Ç‘¿Ç÷¿Ç◊¿É¿É¿Éd¿É•¿É·¿Ñ¿Ñ\¿Ñì¿Ñ±¿Ñ‰¿Ñ˛¿Ñˇ¿Ö!¿Ö-¿Ö?¿Ö®¿Ü¿Ü!¿Ü%¿Ü'¿Ü(¿Üf¿Üj¿Üª¿Ü—¿Ü’¿á(¿á>¿áB¿áë¿á›¿à¿à`¿àd¿à∑¿â	¿â¿â¿âÑ¿âà¿âñ¿âö¿â„¿ä¿äì¿ä‰¿ã.¿ãd¿ãú¿ãÃ¿å	¿å¿å+¿å/¿å|¿å∆¿å¯¿ç,¿çX¿çï¿çõ¿ç∑¿çª¿çº¿ç”¿çÒ¿é¿é¿éh¿éç¿éì¿é¬¿é»¿é„¿è¿è#¿èD¿è|¿èî¿èÂ¿ê¿ê%¿êA¿êç¿êÿ¿ë*¿ë{¿ëà¿ë°¿ë…¿í¿í3¿íj¿íw¿íê¿í∏¿ì¿ì)¿ìI¿ìÄ¿ìç¿ìô¿ì°¿ì¥¿ìæ¿ìœ¿ì”¿ì‘¿ìÓ¿î¿îL¿îú¿îÕ¿ï¿ï¿ï5¿ïN¿ïy¿ï™¿ïÀ¿ñ+¿ña¿ñi¿ñÑ¿ñ†¿ñ≠¿ñ–¿ñÚ¿ó=¿óÉ¿ó’¿ò¿òX¿ò}¿òÆ¿ò€¿ò˜¿ô¿ôP¿ô¿ô¬¿ôÛ¿ö"¿ö†¿õ¿õR¿õé¿õƒ¿õÃ¿õ“¿õ÷¿õ◊¿ú&¿ú,¿ú|¿úÆ¿úÂ¿ù2¿ù±¿û ¿û"¿ûC¿ûZ¿ûâ¿ûç¿ûé¿û–¿ûÓ¿ü¿ü¿ü¿üc¿üé¿ü™¿üÆ¿üØ¿üﬁ¿†.¿†w¿†ª¿†Ÿ¿°¿°0¿°a¿°n¿°Í¿¢:¿¢@¿¢o¿¢í¿¢∆¿¢”¿£G¿£õ¿£°¿£Õ¿£ı¿§¿§¿§¿§=¿§C¿§}¿§û¿§ø¿§’¿§Ÿ¿§⁄¿• ¿•&¿•\¿•q¿•ï¿•±¿¶¿¶>¿¶l¿¶ñ¿¶Æ¿¶¬¿¶»¿¶‡¿¶˜¿ß¿ß¿ß¿ß[¿ßa¿ß∞¿®¿®6¿®k¿®Ü¿®°¿®Ω¿®ﬂ¿©/¿©c¿©q¿©w¿©ò¿©«¿©ﬁ¿©‚¿©„¿©Ô¿™¿™-¿™Q¿™m¿™à¿™⁄¿´¿´¿´¿´¿´¿´.¿´B¿´f¿´Ç¿´ò¿´Í¿¨¿¨¿¨¿¨ ¿¨,¿¨G¿¨k¿¨á¿¨¢¿¨Ù¿≠¿≠%¿≠)¿≠*¿≠6¿≠j¿≠é¿≠™¿≠¿¿Æ¿Æ=¿ÆC¿ÆG¿ÆH¿Æq¿Æù¿Æû¿Æ∆¿Æ¿ÆÒ¿Ø4¿Ø`¿ØÇ¿Ø“¿Ø˛¿∞¿∞¿∞A¿∞l¿∞é¿∞ﬁ¿±¿±
¿±¿±¿±I¿±â¿±ß¿±Ã¿±·¿±ˆ¿≤;¿≤]¿≤n¿≤x¿≤å¿≤‡¿≥¿≥¿≥¿≥1¿≥5¿≥7¿≥8¿≥à¿≥°¿≥•¿≥Ú¿¥A¿¥f¿¥°¿¥¢¿¥‚¿¥Ë¿µ)¿µl¿µº¿∂¿∂¿∂X¿∂w¿∂}¿∂Õ¿∂Ï¿∂˘¿∑
¿∑*¿∑A¿∑E¿∑F¿∑~¿∑§¿∑∞¿∑˜¿∏^¿∏¢¿∏©¿∏‹¿∏Í¿∏¿π$¿πo¿π¶¿π›¿πÎ¿∫¿∫}¿∫Ü¿∫ú¿∫º¿∫ƒ¿∫Ã¿∫–¿∫—¿∫›¿ª¿ª¿ªh¿ª∂¿º¿º<¿ºé¿ºí¿ºì¿ºü¿º±¿ºÁ¿Ω<¿ΩP¿ΩT¿ΩV¿ΩW¿Ω§¿Ω∞¿Ω¥¿Ω◊¿æ(¿æG¿æô¿æÂ¿ø	¿ø ¿øT¿øZ¿ø[¿øõ¿ø›¿øﬁ¿¿%¿¿v¿¿|¿¿å¿¿í¿¿‡¿¡¿¡M¿¡N¿¡õ¿¡‹¿¬¿¬¿¬¿¬h¿¬õ¿¬ü¿¬Ë¿√¿√L¿√l¿√°¿√«¿√Õ¿√Œ¿ƒ¿ƒ¿ƒ!¿ƒd¿ƒå¿ƒê¿ƒë¿ƒù¿ƒˇ¿≈¿≈¿≈P¿≈ò¿≈ú¿≈Ì¿∆>¿∆l¿∆∂¿∆ÿ¿∆˘¿«.¿«]¿«^¿«¨¿«≈¿«˜¿«¯¿»#¿»$¿»R¿»X¿»h¿»n¿»Ω¿»Ò¿…<¿…l¿…∑¿…Á¿  ¿ ,¿ T¿ }¿ ¶¿ ’¿ €¿ ‹¿À*¿Àn¿Àî¿Àï¿À‡¿À˜¿À˝¿ÃK¿ÃÖ¿Ãû¿Ãü¿Ã»¿ÃŒ¿Õ¿Õh¿Õ°¿Õß¿ÕÒ¿Œ4¿Œ@¿ŒÇ¿ŒÉ¿Œ”¿ŒÍ¿œ¿œ¿œ(¿œç¿œé¿œµ¿œ∂¿œ¯¿œ˛¿–¿–L¿–i¿–î¿–∏¿–º¿–Ω¿— ¿—¿—M¿—å¿—®¿—Æ¿—˜¿“4¿“`¿“Ç¿“Ü¿“à¿“â¿“⁄¿“Ú¿“ˆ¿”E¿”U¿”ö¿”µ¿”œ¿‘¿‘
¿‘¿‘¿‘0¿‘S¿‘r¿‘õ¿‘ƒ¿‘Û¿‘˙¿’=¿’j¿’ì¿’ª¿’„¿’‰¿÷¿÷9¿÷d¿÷k¿÷ù¿÷Á¿◊¿◊G¿◊H¿◊n¿◊o¿◊´¿◊Ò¿ÿ¿ÿ8¿ÿr¿ÿ§¿ÿ∆¿ÿ‡¿Ÿ¿Ÿ¿Ÿ¿Ÿ`¿ŸÇ¿ŸÃ¿ŸÕ¿⁄¿⁄f¿⁄∑¿€¿€¿€D¿€Z¿€^¿€_¿€k¿€ô¿€ö¿€ı¿€ˆ¿‹¿‹¿‹J¿‹N¿‹O¿‹[¿‹û¿‹ø¿‹√¿‹≈¿‹∆¿›¿›[¿›_¿›≤¿›Ï¿ﬁ7¿ﬁX¿ﬁr¿ﬁå¿ﬁ√¿ﬁƒ¿ﬁ–¿ﬂ¿ﬂK¿ﬂO¿ﬂP¿ﬂ\¿ﬂu¿ﬂ°¿ﬂ…¿ﬂÚ¿‡¿‡J¿‡Q¿‡ù¿‡∫¿‡æ¿‡ø¿‡À¿‡Ú¿‡Û¿‡ˇ¿·¿·%¿·2¿·]¿·™¿·…¿·–¿·‘¿·÷¿·◊¿‚$¿‚H¿‚L¿‚î¿‚‚¿„¿„¿„R¿„°¿„Ô¿‰@¿‰å¿‰«¿‰À¿Â¿Âd¿Â¨¿Â¡¿Ê¿Ê-¿ÊP¿Êt¿Ê†¿ÊÎ¿Á¿Á:¿Ák¿Áñ¿Á∞¿ÁÓ¿Ë¿Ë;¿ËA¿ËE¿ËF¿Ëe¿Ëá¿Ë©¿Ë ¿ËÀ¿È¿È¿È†¿ÈÛ¿Í¿Í$¿Í?¿Íl¿Íº¿Î¿ÎW¿Îj¿Î°¿Îº¿Ï ¿Ï'¿Ïì¿Ï…¿Ï˜¿Ì-¿Ìi¿Ì∂¿ÌÕ¿Ó)¿Óg¿Óù¿Ó´¿Ô¿ÔS¿Ôá¿ÔÒ¿=¿I¿y¿ﬂ¿Ò#¿Ò/¿Òl¿Ò´¿Ò∑¿Ò¡¿Ò…¿Ú¿ÚE¿Úá¿Ú…¿Ú”¿Ú˙¿Û¿Û¿Û7¿Ûâ¿Û¡¿ÛÚ¿Ù8¿Ùa¿Ùè¿Ùõ¿Ù•¿Ù’¿ÙÔ¿Ù˜¿Ù˝¿ı¿ı¿ı]¿ı^¿ıj¿ıÉ¿ı¶¿ı≈¿ıÓ¿ˆ¿ˆF¿ˆM¿ˆ|¿ˆ»¿˜"¿˜j¿˜p¿˜à¿˜ß¿˜»¿˜–¿˜Í¿¯¿¯(¿¯>¿¯X¿¯a¿¯≤¿¯¯¿˘0¿˘~¿˘Ã¿˙¿˙(¿˙[¿˙•¿˙”¿˙ﬂ¿˙È¿˚)¿˚K¿˚á¿˚ª¿¸	¿¸X¿¸ß¿¸Ô¿˝	¿˝/¿˝:¿˝B¿˝P¿˝V¿˝W¿˝õ¿˝”¿˛¿˛
¿˛¿˛M¿˛ã¿˛ë¿˛í¿˛¯¿ˇ¿ˇ¿ˇN¿ˇt¿ˇï¿ˇ≈¿ˇÀ¿ˇÃ¿ˇË¿ ¿ ¿ 6¿ _¿ û¿ ÷¿¿1¿R¿Z¿`¿ú¿¥¿ÿ¿¯¿¿$¿+¿z¿∞¿¸¿H¿|¿†¿—¿¿E¿O¿W¿û¿æ¿˝¿4¿V¿p¿ô¿¢¿–¿÷¿◊¿˝¿9¿F¿ï¿õ¿±¿¯¿4¿Ü¿ÿ¿¿5¿c¿â¿∏¿Ì¿ı¿˚¿	¿	6¿	:¿	;¿	m¿	ô¿	¡¿	»¿	Ë¿
z¿
à¿
å¿
ç¿
ô¿
¿¿
È¿
Ì¿
Ó¿
˙¿=¿É¿¢¿«¿Ÿ¿·¿¿*¿0¿4¿5¿A¿o¿à¿÷¿¿:¿[¿ä¿ê¿î¿ï¿∏¿÷¿ˆ¿¿¿ ¿!¿=¿>¿J¿d¿|¿Ä¿Å¿ø¿¡¿¬¿
¿¿\¿î¿Ø¿∞¿¯¿˛¿M¿ö¿Î¿;¿R¿~¿¶¿—¿ÿ¿%¿)¿*¿B¿^¿y¿å¿ç¿∏¿ﬂ¿‡¿¿N¿O¿Ñ¿±¿≤¿ÿ¿Ú¿Û¿J¿P¿`¿f¿À¿3¿£¿≈¿∆¿Î¿¿G¿H¿ä¿«¿¿[¿\¿õ¿„¿5¿N¿≠¿º¿¿\¿g¿ª¿¿¿@¿Ç¿§¿ ¿‘¿¿d¿Ñ¿≥¿Ê¿¿N¿•¿«¿”¿›¿Â¿Î¿Ï¿¿u¿ó¿÷¿¿-¿H¿P¿V¿Z¿[¿â¿»¿‡¿Û¿˘¿'¿?¿E¿É¿á¿à¿«¿ ¿  ¿ %¿ u¿ ¥¿ Â¿!¿!0¿!G¿!M¿!{¿!ß¿!“¿!”¿!ˆ¿"¿"B¿"C¿"e¿"€¿#¿#J¿#e¿#m¿#è¿$¿$5¿$ó¿$Æ¿$∂¿$º¿$Ω¿$¿%+¿%h¿%w¿%î¿%ú¿%¢¿%¶¿%ß¿%›¿%‚¿&1¿&H¿&M¿&ú¿&Ê¿')¿'*¿'v¿'ƒ¿'…¿(¿(B¿(ø¿(Ï¿)9¿)a¿)≥¿)ı¿)ˆ¿*H¿*m¿*Æ¿*œ¿*÷¿*◊¿*˘¿+¿+'¿+Ø¿,¿,
¿,¿,¿,B¿,W¿,g¿,m¿,é¿,í¿,ì¿,Ê¿-1¿-N¿-h¿-ô¿-ù¿-û¿-È¿.3¿.L¿.R¿.ú¿.ﬁ¿.‰¿.Ù¿.˙¿/I¿/s¿/ë¿/ì¿/î¿/Ë¿/Ï¿0C¿0ì¿0¶¿0Í¿15¿1X¿1Ä¿1ç¿1•¿1¥¿1€¿1‰¿1Ê    	Ä•Ä∫ÄºÄ–Ä”  Ä¸  Å&  ÅN  Åv  Åü  Å…  Åﬁ  ÅÙÇÉÉÉ>É^É`  ÉâÇiÖGÅ∑/// Base class for data associated with a [RenderObject] by its parent.
///
/// Some render objects wish to store data on their children, such as the
/// children's input parameters to the parent's layout algorithm or the
/// children's position relative to other children.
///
/// See also:
///
///  * [RenderObject.setupParentData], which [RenderObject] subclasses may
///    override to attach specific types of parent data to children.    ÖVlÖ∂:/// Called when the RenderObject is removed from the tree.  ÖìÖîÖ†Ö°Ö∆*ÖŸ   Ö∆Ö« á^¿ g˝äUÇ/// A place to paint.
///
/// Rather than holding a canvas directly, [RenderObject]s paint using a painting
/// context. The painting context has a [Canvas], which receives the
/// individual draw operations, and also has functions for painting child
/// render objects.
///
/// When painting a child render object, the canvas held by the painting context
/// can change because the draw operations issued before and after painting the
/// child might be recorded in separate compositing layers. For this reason, do
/// not hold a reference to the canvas across operations that might paint
/// child render objects.
///
/// New [PaintingContext] objects are created automatically when using
/// [PaintingContext.repaintCompositedChild] and [pushLayer]. ä~Ä– ãã!~/// Creates a painting context.
///
/// Typically only called by [PaintingContext.repaintCompositedChild]
/// and [pushLayer].ã"ã(  ã8ã>  ãããR$ãg  ã{ÅAå≠Å/// An estimate of the bounds within which the painting context's [canvas]
/// will record painting commands. This can be useful for debugging.
///
/// The canvas will allow painting outside these bounds.
///
/// The [estimatedBounds] rectangle is in the [canvas] coordinate system. ´€´È  ´˙¨  ¨¨#  ™4Åé™=    ¨/År≠#Ä“/// The canvas on which to paint.
///
/// The current canvas can change whenever you paint a child using this
/// context, which means it's fragile to hold a reference to the canvas
/// returned by this getter.  ≠≠å¡Ç™éåÅ®/// Repaint the given render object.
///
/// The render object must be attached to a [PipelineOwner], must have a
/// composited layer, and must be in need of painting. The render object's
/// layer, if any, is re-used, along with any layers in the subtree that don't
/// need to be repainted.
///
/// See also:
///
///  * [RenderObject.isRepaintBoundary], which determines if a [RenderObject]
///    has a composited layer. é£é±  éπ#éø  é◊èoâ-è{  èòè¶  è≤#è∏  è€èÌ  è–ò†ÖzöÆÅÎ/// Update the composited layer of [child] without repainting its children.
///
/// The render object must be attached to a [PipelineOwner], must have a
/// composited layer, and must be in need of a composited layer update but
/// not in need of painting. The render object's layer is re-used, and none
/// of its children are repaint or their layers updated.
///
/// See also:
///
///  * [RenderObject.isRepaintBoundary], which determines if a [RenderObject]
///    has a composited layer. öƒö“   ûÇ¡ü~ÅC/// In debug mode, repaint the given render object using a custom painting
/// context that can record the results of the painting operation in addition
/// to performing the regular paint of the child.
///
/// See also:
///
///  * [repaintCompositedChild], for repainting a composited child without
///    instrumentation. ü©ü∑  ü√#ü…  üÏ&†  ü·†„Éó°ˇÅ/// Paint a child [RenderObject].
///
/// If the child has its own composited layer, the child will be composited
/// into the layer subtree associated with this painting context. Otherwise,
/// the child will be painted into the current PictureLayer for this context. ¢
¢  ¢¢&   §~É©§É  §ì§°  §ß§Ø   ®+Ç©¿Åp/// Adds a layer to the recording requiring that the recording is already
/// stopped.
///
/// Do not call this function directly: call [addLayer] or [pushLayer]
/// instead. This function is called internally when all layers not
/// generated from the [canvas] are added.
///
/// Subclasses that need to customize how layers are added should override
/// this method. ©Ã©”  ©Æ©Ø≠•Äﬁ≠™    ÆáÇì∞£Åˆ/// Adds a [CompositionCallback] for the current [ContainerLayer] used by this
/// context.
///
/// Composition callbacks are called whenever the layer tree containing the
/// current layer of this painting context gets composited, or when it gets
/// detached and will not be rendered again. This happens regardless of
/// whether the layer is added via retained rendering or not.
///
/// {@macro flutter.rendering.Layer.compositionCallbacks}
///
/// See also:
///   *  [Layer.addCompositionCallback]. ∞∫∞œ   ±Ö≥+Å’/// Stop recording to a canvas if recording has started.
///
/// Do not call this function directly: functions in this class will call
/// this method as needed. This function is called internally to ensure that
/// recording is stopped before adding layers or finalizing the results of a
/// paint.
///
/// Subclasses that need to customize how recording to a canvas is performed
/// should override this method to save the results of the custom canvas
/// recordings.  ≥≥	≥≥∂/Ç¶∏TÇ	/// Hints that the painting in the current layer is complex and would benefit
/// from caching.
///
/// If this hint is not set, the compositor will apply its own heuristics to
/// decide whether the current layer is complex enough to benefit from
/// caching.
///
/// Calling this ensures a [Canvas] is available. Only draw calls on the
/// current canvas will be hinted; the hint is not propagated to new canvases
/// created after a new layer is added to the painting context (e.g. with
/// [addLayer] or [pushLayer]).   ∏ŸÉª^Çi/// Hints that the painting in the current layer is likely to change next frame.
///
/// This hint tells the compositor not to cache the current layer because the
/// cache will not be used in the future. If this hint is not set, the
/// compositor will apply its own heuristics to decide whether the current
/// layer is likely to be reused in the future.
///
/// Calling this ensures a [Canvas] is available. Only draw calls on the
/// current canvas will be hinted; the hint is not propagated to new canvases
/// created after a new layer is added to the painting context (e.g. with
/// [addLayer] or [pushLayer]).   ªÂÇŒæcÇ\/// Adds a composited leaf layer to the recording.
///
/// After calling this function, the [canvas] property will change to refer to
/// a new [Canvas] that draws on top of the given layer.
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips.
///
/// See also:
///
///  * [pushLayer], for adding a layer and painting further contents within
///    it. ælæs   æ∑á˝¿ D[Öh/// Appends the given layer to the recording, and calls the `painter` callback
/// with that layer, providing the `childPaintBounds` as the estimated paint
/// bounds of the child. The `childPaintBounds` can be used for debugging but
/// have no effect on painting.
///
/// The given layer must be an unattached orphan. (Providing a newly created
/// object, rather than reusing an existing layer, satisfies that
/// requirement.)
///
/// {@template flutter.rendering.PaintingContext.pushLayer.offset}
/// The `offset` is the offset to pass to the `painter`. In particular, it is
/// not an offset applied to the layer itself. Layers conceptually by default
/// have no position or size, though they can transform their contents. For
/// example, an [OffsetLayer] applies an offset to its children.
/// {@endtemplate}
///
/// If the `childPaintBounds` are not specified then the current layer's paint
/// bounds are used. This is appropriate if the child layer does not apply any
/// transformation or clipping to its contents. The `childPaintBounds`, if
/// specified, must be in the coordinate system of the new layer (i.e. as seen
/// by its children after it applies whatever transform to its contents), and
/// should not go outside the current layer's paint bounds.
///
/// See also:
///
///  * [addLayer], for pushing a layer without painting further contents
///    within it. ¿ De¿ Du  ¿ DÄ¿ Dô  ¿ D°¿ D©  ¿ D≤¿ Dπ   ¿ F∏Å!¿ GiÄç/// Creates a painting context configured to paint into [childLayer].
///
/// The `bounds` are estimated paint bounds for debugging purposes. ¿ G|¿ Gå  ¿ Gó¿ Gù  ¿ GL¿ GM¿ G›äü¿ Oßáp/// Clip further painting using a rectangle.
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
/// The `needsCompositing` argument specifies whether the child needs
/// compositing. Typically this matches the value of
/// [RenderObject.needsCompositing] for the caller. If false, this method
/// returns null, indicating that a layer is no longer necessary. If a render
/// object calling this method stores the `oldLayer` in its
/// [RenderObject.layer] field, it should set that field to null.
///
/// When `needsCompositing` is false, this method will use a more efficient
/// way to apply the layer effect than actually creating a layer.
/// {@endtemplate}
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.offset}
/// The `offset` argument is the offset from the origin of the canvas'
/// coordinate system to the origin of the caller's coordinate system.
/// {@endtemplate}
///
/// The `clipRect` is the rectangle (in the caller's coordinate system) to use
/// to clip the painting done by [painter]. It should not include the
/// `offset`.
///
/// The `painter` callback will be called while the `clipRect` is applied. It
/// is called synchronously during the call to [pushClipRect].
///
/// The `clipBehavior` argument controls how the rectangle is clipped.
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.oldLayer}
/// For the `oldLayer` argument, specify the layer created in the previous
/// frame. This gives the engine more information for performance
/// optimizations. Typically this is the value of [RenderObject.layer] that a
/// render object creates once, then reuses for all subsequent frames until a
/// layer is no longer needed (e.g. the render object no longer needs
/// compositing) or until the render object changes the type of the layer
/// (e.g. from opacity layer to a clip rect layer).
/// {@endtemplate} ¿ O¥¿ O∫  ¿ OÀ¿ O”  ¿ O⁄¿ O‡  ¿ OÈ¿ P  ¿ P!¿ P  ¿ P/¿ P?  ¿ P ¿ P$¿ P%¿ RÄÜ•¿ VÉN/// Clip further painting using a rounded rectangle.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipRRect` argument specifies the rounded-rectangle (in the caller's
/// coordinate system) to use to clip the painting done by `painter`. It
/// should not include the `offset`.
///
/// The `painter` callback will be called while the `clipRRect` is applied. It
/// is called synchronously during the call to [pushClipRRect].
///
/// The `clipBehavior` argument controls how the rounded rectangle is clipped.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ V¿ V  ¿ V*¿ V2  ¿ V9¿ V?  ¿ VF¿ VM  ¿ VW¿ Vp  ¿ Vz"¿ VÄ  ¿ Vû¿ VØ  ¿ Vé¿ Ví¿ Vì¿ Y)Üo¿ \ÖÉ&/// Clip further painting using a path.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipPath` argument specifies the [Path] (in the caller's coordinate
/// system) to use to clip the painting done by `painter`. It should not
/// include the `offset`.
///
/// The `painter` callback will be called while the `clipPath` is applied. It
/// is called synchronously during the call to [pushClipPath].
///
/// The `clipBehavior` argument controls how the path is clipped.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ \í¿ \ò  ¿ \©¿ \±  ¿ \∏¿ \æ  ¿ \≈¿ \À  ¿ \‘¿ \Ì  ¿ \˜"¿ \˝  ¿ ]¿ ]+  ¿ ]¿ ]¿ ]¿ _úÑL¿ b…Ç˚/// Blend further painting with a color filter.
///
/// {@macro flutter.rendering.PaintingContext.pushLayer.offset}
///
/// The `colorFilter` argument is the [ColorFilter] value to use when blending
/// the painting done by `painter`.
///
/// The `painter` callback will be called while the `colorFilter` is applied.
/// It is called synchronously during the call to [pushColorFilter].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer}
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips. ¿ bŸ¿ b·  ¿ bË¿ bı  ¿ c¿ c  ¿ c$¿ c7   ¿ cÏÖÓ¿ f¡Ç¶/// Transform further painting using a matrix.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// The `offset` argument is the offset to pass to `painter` and the offset to
/// the origin used by `transform`.
///
/// The `transform` argument is the [Matrix4] with which to transform the
/// coordinate system while calling `painter`. It should not include `offset`.
/// It is applied effectively after applying `offset`.
///
/// The `painter` callback will be called while the `transform` is applied. It
/// is called synchronously during the call to [pushTransform].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ fœ¿ f’  ¿ fÊ¿ fÓ  ¿ fı¿ f˛  ¿ g¿ g!  ¿ g+¿ g<   ¿ iﬁÑ‚¿ m¶Éñ/// Blend further painting with an alpha value.
///
/// The `offset` argument indicates an offset to apply to all the children
/// (the rendering created by `painter`).
///
/// The `alpha` argument is the alpha value to use when blending the painting
/// done by `painter`. An alpha value of 0 means the painting is fully
/// transparent and an alpha value of 255 means the painting is fully opaque.
///
/// The `painter` callback will be called while the `alpha` is applied. It
/// is called synchronously during the call to [pushOpacity].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer}
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips. ¿ m≤¿ m∫  ¿ m¡	¿ m∆  ¿ mÃ¿ mÂ  ¿ mÔ¿ m˛   ¿ nƒÄï¿ n◊   ¿ nƒ¿ n≈ ¿ o]êT¿ yTâ‹/// An abstract set of layout constraints.
///
/// Concrete layout models (such as box) will create concrete subclasses to
/// communicate layout constraints between parents and children.
///
/// ## Writing a Constraints subclass
///
/// When creating a new [RenderObject] subclass with a new layout protocol, one
/// will usually need to create a new [Constraints] subclass to express the
/// input to the layout algorithms.
///
/// A [Constraints] subclass should be immutable (all fields final). There are
/// several members to implement, in addition to whatever fields, constructors,
/// and helper methods one may find useful for a particular layout protocol:
///
/// * The [isTight] getter, which should return true if the object represents a
///   case where the [RenderObject] class has no choice for how to lay itself
///   out. For example, [BoxConstraints] returns true for [isTight] when both
///   the minimum and maximum widths and the minimum and maximum heights are
///   equal.
///
/// * The [isNormalized] getter, which should return true if the object
///   represents its data in its canonical form. Sometimes, it is possible for
///   fields to be redundant with each other, such that several different
///   representations have the same implications. For example, a
///   [BoxConstraints] instance with its minimum width greater than its maximum
///   width is equivalent to one where the maximum width is set to that minimum
///   width (`2<w<1` is equivalent to `2<w<2`, since minimum constraints have
///   priority). This getter is used by the default implementation of
///   [debugAssertIsValid].
///
/// * The [debugAssertIsValid] method, which should assert if there's anything
///   wrong with the constraints object. (We use this approach rather than
///   asserting in constructors so that our constructors can be `const` and so
///   that it is possible to create invalid constraints temporarily while
///   building valid ones.) See the implementation of
///   [BoxConstraints.debugAssertIsValid] for an example of the detailed checks
///   that can be made.
///
/// * The [==] operator and the [hashCode] getter, so that constraints can be
///   compared for equality. If a render object is given constraints that are
///   equal, then the rendering library will avoid laying the object out again
///   if it is not dirty.
///
/// * The [toString] method, which should describe the constraints so that they
///   appear in a usefully readable form in the output of [debugDumpRenderTree]. ¿ ydÄ≠ ¿ z¿ zÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.   ¿ z[¿ zhG/// Whether there is exactly one size possible given these constraints.   ¿ ztX¿ zø?/// Whether the constraint is expressed in a consistent manner.   ¿ z–Ñﬂ¿ Ñ/// Asserts that the constraints are valid.
///
/// This might involve checks more detailed than [isNormalized].
///
/// For example, the [BoxConstraints] subclass verifies that the constraints
/// are not [double.nan].
///
/// If the `isAppliedConstraint` argument is true, then even stricter rules
/// are enforced. This argument is set to true when checking constraints that
/// are about to be applied to a [RenderObject] during layout, as opposed to
/// constraints that may be further affected by other constraints. For
/// example, the asserts for verifying the validity of
/// [RenderConstrainedBox.additionalConstraints] do not set this argument, but
/// the asserts for verifying the argument passed to the [RenderObject.layout]
/// method do.
///
/// The `informationCollector` argument takes an optional callback which is
/// called when an exception is to be thrown. The collected information is
/// then included in the message after the error line.
///
/// Returns the same as [isNormalized] if asserts are disabled. ¿   ¿ &  ¿ F*¿ ]  ¿ ;¿ y:¿ y;¿ ÅTÑ¿ ÅZ  ¿ ÅèÇ¿ Å§¿ Å•¿ Å¶ ¿ Åß¿ Å∂  ¿ Åº¿ Å¬  ¿ Å⁄¿ Å”¿ Å‹¿ É´¿ Éø  ¿ É f¿ Ñ(G/// The callback that will be notified when the semantics tree updates.  ¿ Ñ5Åú¿ ÑF   ¿ Ñ5¿ Ñ6 ¿ Ö’¿ ]ù¿ êÖä©/// The pipeline owner manages the rendering pipeline.
///
/// The pipeline owner provides an interface for driving the rendering pipeline
/// and stores the state about which render objects have requested to be visited
/// in each stage of the pipeline. To flush the pipeline, call the following
/// functions in order:
///
/// 1. [flushLayout] updates any render objects that need to compute their
///    layout. During this phase, the size and position of each render
///    object is calculated. Render objects might dirty their painting or
///    compositing state during this phase.
/// 2. [flushCompositingBits] updates any render objects that have dirty
///    compositing bits. During this phase, each render object learns whether
///    any of its children require compositing. This information is used during
///    the painting phase when selecting how to implement visual effects such as
///    clipping. If a render object has a composited child, it needs to use a
///    [Layer] to create the clip in order for the clip to apply to the
///    composited child (which will be painted into its own [Layer]).
/// 3. [flushPaint] visits any render objects that need to paint. During this
///    phase, render objects get a chance to record painting commands into
///    [PictureLayer]s and construct other composited [Layer]s.
/// 4. Finally, if semantics are enabled, [flushSemantics] will compile the
///    semantics for the render objects. This semantic information is used by
///    assistive technology to improve the accessibility of the render tree.
///
/// The [RendererBinding] holds the pipeline owner for the render objects that
/// are visible on screen. You can create other pipeline owners to manage
/// off-screen objects, which can flush their pipelines independently of the
/// on-screen render objects.
///
/// [PipelineOwner]s can be organized in a tree to manage multiple render trees,
/// where each [PipelineOwner] is responsible for one of the render trees. To
/// build or modify the tree, call [adoptChild] or [dropChild]. During each of
/// the different flush phases described above, a [PipelineOwner] will first
/// perform the phase on the nodes it manages in its own render tree before
/// calling the same flush method on its children. No assumption must be made
/// about the order in which child [PipelineOwner]s are flushed.
///
/// A [PipelineOwner] may also be [attach]ed to a [PipelineManifold], which
/// gives it access to platform functionality usually exposed by the bindings
/// without tying it to a specific binding implementation. All [PipelineOwner]s
/// in a given tree must be attached to the same [PipelineManifold]. This
/// happens automatically during [adoptChild]. ¿ ê¥Ç› ¿ ëö¿ ëßÄ€/// Creates a pipeline owner.
///
/// Typically created by the binding (e.g., [RendererBinding]), but can be
/// created separately from the binding to drive off-screen render objects
/// through the rendering pipeline.¿ ëÆ¿ ë¥  ¿ ëÀ¿ ë—  ¿ ëÌ¿ ëÛ  ¿ í	¿ í   ¿ ìïÇç¿ ñÇP/// Called when a render object associated with this pipeline owner wishes to
/// update its visual appearance.
///
/// Typical implementations of this function will schedule a task to flush the
/// various stages of the pipeline. This function might be called multiple
/// times in quick succession. Implementations should take care to discard
/// duplicate calls quickly.
///
/// When the [PipelineOwner] is attached to a [PipelineManifold] and
/// [onNeedVisualUpdate] is provided, the [onNeedVisualUpdate] callback is
/// invoked instead of calling [PipelineManifold.requestVisualUpdate]. ¿ ñ'Ä’¿ ñÂÄ°/// Called whenever this pipeline owner creates a semantics object.
///
/// Typical implementations will schedule the creation of the initial
/// semantics tree. ¿ óÅ¿ óˇÄ÷/// Called whenever this pipeline owner's semantics owner emits a [SemanticsUpdate].
///
/// Typical implementations will delegate the [SemanticsUpdate] to a [FlutterView]
/// that can handle the [SemanticsUpdate]. ¿ òÄª¿ ò∏Äà/// Called whenever this pipeline owner disposes its semantics owner.
///
/// Typical implementations will tear down the semantics tree. ¿ ö™¿ ö∏  ¿ ûû#¿ û£ ¿ ûº¿ û≈9¿ ûÿ ¿ û¸¿ û˝¿ ûÓ¿ û˚¿ ûÔ¿ †¿ †# ¿ †7¿ †@#¿ †E ¿ †^¿ ´o0¿ ´t ¿ ´ö¿ ≠¢N¿ ≠ª ¿ ≠Ó¿ ≠Ô¿ ≠‡¿ ≠Ì¿ ≠·¿ ±©8¿ ±º ¿ ±ﬂ¿ ±‡¿ ±—¿ ±ﬁ¿ ±“¿ ≤˝¿ ≥ ¿ ≥¿ æa¿ æq  ¿ øò$¿ øú ¿ øª¿ ∆Ï!¿ ∆Ò ¿ «¿ «A¿ «) ¿ «P¿ «Q¿ «B¿ «O¿ «C¿ œh6¿ œÅ ¿ œú¿ œù¿ œç¿ œõ¿ œé¿ œ¢¿ œ¥  ¿ œ¬¿ œ—  ¿ ö:m¿ öëB/// The unique object managed by this pipeline that has no parent.   ¿ ö≈Ä¶¿ ö…  ¿ ö“¿ ö·   ¿ üÅ¿ üıÄ‹/// Whether this pipeline is currently in the layout phase.
///
/// Specifically, whether [flushLayout] is currently running.
///
/// Only valid when asserts are enabled; in release builds, this
/// always returns false.   ¿ ±ÊÅ¿ ≤÷Ä⁄/// Whether this pipeline is currently in the paint phase.
///
/// Specifically, whether [flushPaint] is currently running.
///
/// Only valid when asserts are enabled. In release builds,
/// this always returns false.   ¿ ª§Ç∫¿ æ<Çk/// The object that is managing semantics for this pipeline owner, if any.
///
/// An owner is created by [ensureSemantics] or when the [PipelineManifold] to
/// which this owner is connected has [PipelineManifold.semanticsEnabled] set
/// to true. The owner is valid for as long as
/// [PipelineManifold.semanticsEnabled] remains true or while there are
/// outstanding [SemanticsHandle]s from calls to [ensureSemantics]. The
/// [semanticsOwner] field will revert to null once both conditions are no
/// longer met.
///
/// When [semanticsOwner] is null, the [PipelineOwner] skips all steps
/// relating to semantics.   ¿ æÖÅ¿ øTÄæ/// The number of clients registered to listen for semantics.
///
/// The number is increased whenever [ensureSemantics] is called and decreased
/// when [SemanticsHandle.dispose] is called.   ¿ –]Z¿ –h    ¿ ÷©t¿ ÷≤    ¿ ò’Åa¿ ôùÄ∫/// Calls [onNeedVisualUpdate] if [onNeedVisualUpdate] is not null.
///
/// Used to notify the pipeline owner that an associated render object wishes
/// to update its visual appearance.   ¿ †hâõ¿ °’ÅY/// Update the layout information for all dirty render objects.
///
/// This function is one of the core stages of the rendering pipeline. Layout
/// information is cleaned prior to painting so that render objects will
/// appear on screen in their up-to-date locations.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ ´“ÅÃ¿ ´◊  ¿ ´˜¿ ¨   ¿ ≠ÙÉ±¿ ÆôÄó/// Updates the [RenderObject.needsCompositing] bits.
///
/// Called as part of the rendering pipeline after [flushLayout] and before
/// [flushPaint].   ¿ ≥àÅ¿ ¥öÅg/// Update the display lists for all render objects.
///
/// This function is one of the core stages of the rendering pipeline.
/// Painting occurs after layout and before the scene is recomposited so that
/// scene is composited with up-to-date display lists for every render object.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ ø¡ÑY¿ √qÉ}/// Opens a [SemanticsHandle] and calls [listener] whenever the semantics tree
/// generated from the render tree owned by this [PipelineOwner] updates.
///
/// Calling this method only ensures that this particular [PipelineOwner] will
/// generate a semantics tree. Consider calling
/// [SemanticsBinding.ensureSemantics] instead to turn on semantics globally
/// for the entire app.
///
/// The [PipelineOwner] updates the semantics tree only when there are clients
/// that wish to use the semantics tree. These clients express their interest
/// by holding [SemanticsHandle] objects that notify them whenever the
/// semantics tree updates.
///
/// Clients can close their [SemanticsHandle] by calling
/// [SemanticsHandle.dispose]. Once all the outstanding [SemanticsHandle]
/// objects for a given [PipelineOwner] are closed, the [PipelineOwner] stops
/// maintaining the semantics tree. ¿ √É¿ √í   ¿ ƒÇ6¿ ƒ#    ¿ ∆XÄê¿ ∆]    ¿ «WÜW¿ …VÅ„/// Update the semantics for render objects marked as needing a semantics
/// update.
///
/// Initially, only the root node, as scheduled by
/// [RenderObject.scheduleInitialSemantics], needs a semantics update.
///
/// This function is one of the core stages of the rendering pipeline. The
/// semantics are compiled after painting and only after
/// [RenderObject.scheduleInitialSemantics] has been called.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ Õ≤Ä∫¿ Õ‘   ¿ Õ≤¿ Õ≥¿ ŒpÄﬁ¿ ŒÅ  ¿ Œï&¿ Œ≤  ¿ Œp¿ Œq¿ œ·x¿ œÊ  ¿ œˆ¿ –  ¿ –¿ –   ¿ –ªÇ¿ —–Å/// Mark this [PipelineOwner] as attached to the given [PipelineManifold].
///
/// Typically, this is only called directly on the root [PipelineOwner].
/// Children are automatically attached to their parent's [PipelineManifold]
/// when [adoptChild] is called. ¿ —◊¿ —È   ¿ “‹Ç†¿ ”“ÄÊ/// Mark this [PipelineOwner] as detached.
///
/// Typically, this is only called directly on the root [PipelineOwner].
/// Children are automatically detached from their parent's [PipelineManifold]
/// when [dropChild] is called.   ¿ ◊!Ö(¿ ⁄€Éê/// Adds `child` to this [PipelineOwner].
///
/// During the phases of frame production (see [RendererBinding.drawFrame]),
/// the parent [PipelineOwner] will complete a phase for the nodes it owns
/// directly before invoking the flush method corresponding to the current
/// phase on its child [PipelineOwner]s. For example, during layout, the
/// parent [PipelineOwner] will first lay out its own nodes before calling
/// [flushLayout] on its children. During paint, it will first paint its own
/// nodes before calling [flushPaint] on its children. This order also applies
/// for all the other phases.
///
/// No assumptions must be made about the order in which child
/// [PipelineOwner]s are flushed.
///
/// No new children may be added after the [PipelineOwner] has started calling
/// [flushLayout] on any of its children until the end of the current frame.
///
/// To remove a child, call [dropChild]. ¿ ⁄Ê¿ ⁄ı   ¿ ‹MÇ¿¿ ›®ÅG/// Removes a child [PipelineOwner] previously added via [adoptChild].
///
/// This node will cease to call the flush methods on the `child` during frame
/// production.
///
/// No children may be removed after the [PipelineOwner] has started calling
/// [flushLayout] on any of its children until the end of the current frame. ¿ ›≤¿ ›¡   ¿ ﬂÅ¿ ﬂ»Ä•/// Calls `visitor` for each immediate child of this [PipelineOwner].
///
/// See also:
///
///  * [adoptChild] to add a child.
///  * [dropChild] to remove a child. ¿ ﬂ÷¿ ﬂÏ   ¿ ‡ÉS¿ ·íÅa/// Release any resources held by this pipeline owner.
///
/// Prior to calling this method the pipeline owner must be removed from the
/// pipeline owner tree, i.e. it must have neither a parent nor any children
/// (see [dropChild]). It also must be [detach]ed from any [PipelineManifold].
///
/// The object is no longer usable after calling dispose.    ¿ ‰*â¿ Á¨Ér/// Manages a tree of [PipelineOwner]s.
///
/// All [PipelineOwner]s within a tree are attached to the same
/// [PipelineManifold], which gives them access to shared functionality such
/// as requesting a visual update (by calling [requestVisualUpdate]). As such,
/// the [PipelineManifold] gives the [PipelineOwner]s access to functionality
/// usually provided by the bindings without tying the [PipelineOwner]s to a
/// particular binding implementation.
///
/// The root of the [PipelineOwner] tree is attached to a [PipelineManifold] by
/// passing the manifold to [PipelineOwner.attach]. Children are attached to the
/// same [PipelineManifold] as their parent when they are adopted via
/// [PipelineOwner.adoptChild].
///
/// [PipelineOwner]s can register listeners with the [PipelineManifold] to be
/// informed when certain values provided by the [PipelineManifold] change.   ¿ Á◊Å‡¿ È¶Å±/// Whether [PipelineOwner]s connected to this [PipelineManifold] should
/// collect semantics information and produce a semantics tree.
///
/// The [PipelineManifold] notifies its listeners (managed with [addListener]
/// and [removeListener]) when this property changes its value.
///
/// See also:
///
///  * [SemanticsBinding.semanticsEnabled], which [PipelineManifold]
///    implementations typically use to back this property.   ¿ ÈªÉq¿ ÌÉ3/// Called by a [PipelineOwner] connected to this [PipelineManifold] when a
/// [RenderObject] associated with that pipeline owner wishes to update its
/// visual appearance.
///
/// Typical implementations of this function will schedule a task to flush the
/// various stages of the pipeline. This function might be called multiple
/// times in quick succession. Implementations should take care to discard
/// duplicate calls quickly.
///
/// A [PipelineOwner] connected to this [PipelineManifold] will call
/// [PipelineOwner.onNeedVisualUpdate] instead of this method if it has been
/// configured with a non-null [PipelineOwner.onNeedVisualUpdate] callback.
///
/// See also:
///
///  * [SchedulerBinding.ensureVisualUpdate], which [PipelineManifold]
///    implementations typically call to implement this method.    ¿ Ì{¿ä¡¿”öH/// An object in the render tree.
///
/// The [RenderObject] class hierarchy is the core of the rendering
/// library's reason for being.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=zmbmrw07qBc}
///
/// [RenderObject]s have a [parent], and have a slot called [parentData] in
/// which the parent [RenderObject] can store child-specific data, for example,
/// the child position. The [RenderObject] class also implements the basic
/// layout and paint protocols.
///
/// The [RenderObject] class, however, does not define a child model (e.g.
/// whether a node has zero, one, or more children). It also doesn't define a
/// coordinate system (e.g. whether children are positioned in Cartesian
/// coordinates, in polar coordinates, etc) or a specific layout protocol (e.g.
/// whether the layout is width-in-height-out, or constraint-in-size-out, or
/// whether the parent sets the size and position of the child before or after
/// the child lays out, etc; or indeed whether the children are allowed to read
/// their parent's [parentData] slot).
///
/// The [RenderBox] subclass introduces the opinion that the layout
/// system uses Cartesian coordinates.
///
/// ## Lifecycle
///
/// A [RenderObject] must [dispose] when it is no longer needed. The creator
/// of the object is responsible for disposing of it. Typically, the creator is
/// a [RenderObjectElement], and that element will dispose the object it creates
/// when it is unmounted.
///
/// [RenderObject]s are responsible for cleaning up any expensive resources
/// they hold when [dispose] is called, such as [Picture] or [Image] objects.
/// This includes any [Layer]s that the render object has directly created. The
/// base implementation of dispose will nullify the [layer] property. Subclasses
/// must also nullify any other layer(s) it directly creates.
///
/// ## Writing a RenderObject subclass
///
/// In most cases, subclassing [RenderObject] itself is overkill, and
/// [RenderBox] would be a better starting point. However, if a render object
/// doesn't want to use a Cartesian coordinate system, then it should indeed
/// inherit from [RenderObject] directly. This allows it to define its own
/// layout protocol by using a new subclass of [Constraints] rather than using
/// [BoxConstraints], and by potentially using an entirely new set of objects
/// and values to represent the result of the output rather than just a [Size].
/// This increased flexibility comes at the cost of not being able to rely on
/// the features of [RenderBox]. For example, [RenderBox] implements an
/// intrinsic sizing protocol that allows you to measure a child without fully
/// laying it out, in such a way that if that child changes size, the parent
/// will be laid out again (to take into account the new dimensions of the
/// child). This is a subtle and bug-prone feature to get right.
///
/// Most aspects of writing a [RenderBox] apply to writing a [RenderObject] as
/// well, and therefore the discussion at [RenderBox] is recommended background
/// reading. The main differences are around layout and hit testing, since those
/// are the aspects that [RenderBox] primarily specializes.
///
/// ### Layout
///
/// A layout protocol begins with a subclass of [Constraints]. See the
/// discussion at [Constraints] for more information on how to write a
/// [Constraints] subclass.
///
/// The [performLayout] method should take the [constraints], and apply them.
/// The output of the layout algorithm is fields set on the object that describe
/// the geometry of the object for the purposes of the parent's layout. For
/// example, with [RenderBox] the output is the [RenderBox.size] field. This
/// output should only be read by the parent if the parent specified
/// `parentUsesSize` as true when calling [layout] on the child.
///
/// Anytime anything changes on a render object that would affect the layout of
/// that object, it should call [markNeedsLayout].
///
/// ### Hit Testing
///
/// Hit testing is even more open-ended than layout. There is no method to
/// override, you are expected to provide one.
///
/// The general behavior of your hit-testing method should be similar to the
/// behavior described for [RenderBox]. The main difference is that the input
/// need not be an [Offset]. You are also allowed to use a different subclass of
/// [HitTestEntry] when adding entries to the [HitTestResult]. When the
/// [handleEvent] method is called, the same object that was added to the
/// [HitTestResult] will be passed in, so it can be used to track information
/// like the precise coordinate of the hit, in whatever coordinate system is
/// used by the new layout protocol.
///
/// ### Adapting from one protocol to another
///
/// In general, the root of a Flutter render object tree is a [RenderView]. This
/// object has a single child, which must be a [RenderBox]. Thus, if you want to
/// have a custom [RenderObject] subclass in the render tree, you have two
/// choices: you either need to replace the [RenderView] itself, or you need to
/// have a [RenderBox] that has your class as its child. (The latter is the much
/// more common case.)
///
/// This [RenderBox] subclass converts from the box protocol to the protocol of
/// your class.
///
/// In particular, this means that for hit testing it overrides
/// [RenderBox.hitTest], and calls whatever method you have in your class for
/// hit testing.
///
/// Similarly, it overrides [performLayout] to create a [Constraints] object
/// appropriate for your class and passes that to the child's [layout] method.
///
/// ### Layout interactions between render objects
///
/// In general, the layout of a render object should only depend on the output of
/// its child's layout, and then only if `parentUsesSize` is set to true in the
/// [layout] call. Furthermore, if it is set to true, the parent must call the
/// child's [layout] if the child is to be rendered, because otherwise the
/// parent will not be notified when the child changes its layout outputs.
///
/// It is possible to set up render object protocols that transfer additional
/// information. For example, in the [RenderBox] protocol you can query your
/// children's intrinsic dimensions and baseline geometry. However, if this is
/// done then it is imperative that the child call [markNeedsLayout] on the
/// parent any time that additional information changes, if the parent used it
/// in the last layout phase. For an example of how to implement this, see the
/// [RenderBox.markNeedsLayout] method. It overrides
/// [RenderObject.markNeedsLayout] so that if a parent has queried the intrinsic
/// or baseline information, it gets marked dirty whenever the child's geometry
/// changes. ¿Åó ¿L¿X//// Initializes internal fields for subclasses.  ¿E¿J ¿[¿∫É®¿XÉs/// Data for use by the parent render object.
///
/// The parent data is used by the render object that lays out this object
/// (typically this object's parent in the render tree) to store information
/// relevant to itself and to any other nodes who happen to know exactly what
/// the data means. The parent data is opaque to the child.
///
///  * The parent data field must not be directly set, except by calling
///    [setupParentData] on the parent node.
///  * The parent data can be set before the child is added to the parent, by
///    calling [setupParentData] on the future parent node.
///  * The conventions for using the parent data depend on the layout protocol
///    used between the parent and child. For example, in box layout, the
///    parent data is completely opaque but in sector layout the child is
///    permitted to read some fields of the parent data. ¿´¿Ø ¿∏¿«¿’  ¿&êÄÊ¿'jÄ√/// The object responsible for creating this render object.
///
/// Used in debug messages.
///
/// See also:
///
///  * [DebugCreator], which the [widgets] library uses as values for this field. ¿,s"¿,x ¿,ê¿-"¿-Ñ ¿-ú¿.Ñ'¿.ô  ¿2Ä¿2Ü  ¿2°"¿2¶ ¿2æ¿K¯¿L  ¿W?¿WD ¿WS¿W\¿Wj  ¿X)¿X$ ¿XC¿Y”¿Y‡  ¿[rÇ¿]cÅ“/// When true, debugAssertDoesMeetConstraints() is currently
/// executing asserts for verifying the consistent behavior of
/// intrinsic dimensions methods.
///
/// This should only be set by debugAssertDoesMeetConstraints()
/// implementations. It is used by tests to selectively ignore
/// custom layout callbacks. It should not be set outside of
/// debugAssertDoesMeetConstraints(), and should not be checked in
/// release mode (where it will always be false).¿]}¿•Ê!¿•Î ¿¶¿¶‡&¿¶ı  ¿≠¸¿Æ  ¿ª|N¿ªû ¿ª≠¿ª∏¿ª«¿ªπ¿ª»¿ª…¿Ω∑(¿Ωº ¿Ω⁄¿√ﬂ¿√È  ¿Œî¿Œô ¿Œß¿—(¿— ¿—*¿"Õ5¿"Â  ¿%æ!¿%√ ¿%€¿%„¿%Ú  ¿DÄ˝¿∑b/// Whether this has been disposed.
///
/// If asserts are disabled, this property is always null.   ¿ÍÉæ¿òÉÖ/// The depth of this render object in the render tree.
///
/// The depth of nodes in a tree monotonically increases as you traverse down
/// the tree: a node always has a [depth] greater than its ancestors.
/// There's no guarantee regarding depth between siblings.
///
/// The [depth] of a child can be more than one greater than the [depth] of
/// the parent, because the [depth] values are never decreased: all that
/// matters is that it's greater than the parent. Consider a tree with a root
/// node A, a child B, and a grandchild C. Initially, A will have [depth] 0,
/// B [depth] 1, and C [depth] 2. If C is moved to be a child of A,
/// sibling of B, then the numbers won't change. C's [depth] will still be 2.
///
/// The depth of a node is used to ensure that nodes are processed in
/// depth order.  The [depth] is automatically maintained by the [adoptChild]
/// and [dropChild] methods.   ¿Ä•¿≤z/// The parent of this render object in the render tree.
///
/// The [parent] of the root node in the render tree is null.   ¿+éÄ‚¿,BÄ¢/// Whether [performResize] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿,öÄ‚¿-NÄ¢/// Whether [performLayout] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿-¶Ä€¿.YÄë/// The render object that is actively computing layout.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// null.   ¿1UÅ(¿2LÄ·/// Whether the parent render object is permitted to use this render object's
/// size.
///
/// Determined by the `parentUsesSize` parameter to [layout].
///
/// Only valid when asserts are enabled. In release builds, throws.   ¿2»î˚¿4CÅc/// Whether tree mutations are currently permitted.
///
/// This is only useful during layout. One should also not mutate the tree at
/// other times (e.g. during paint or while assembling the semantic tree) but
/// this function does not currently enforce those conventions.
///
/// Only valid when asserts are enabled. This will throw in release builds.   ¿G«Éd¿JëÇí/// The [RenderObject] that's expected to call [layout] on this [RenderObject]
/// in its [performLayout] implementation.
///
/// This method is used to implement an assert that ensures the render subtree
/// actively performing layout can not get accidentally mutated. It's only
/// implemented in debug mode and always returns null in release mode.
///
/// The default implementation returns [parent] and overriding is rarely
/// needed. A [RenderObject] subclass that expects its
/// [RenderObject.performLayout] to be called from a different [RenderObject]
/// that's not its [parent] should override this property to return the actual
/// layout parent.  ¿Jr¿Js¿K/Ä∆¿KÂÄö/// The owner for this render object (null if unattached).
///
/// The entire render tree that this render object belongs to
/// will have the same owner.   ¿LÄ˘¿LÄ /// Whether the render tree this render object belongs to is attached to a [PipelineOwner].
///
/// This becomes true during the call to [attach].
///
/// This becomes false during the call to [detach].   ¿UÇ5¿V≥Åí/// Whether this render object's layout information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. In release builds, this throws.
///
/// It is intended to be used by tests and asserts.   ¿WÄÄú¿W€O/// Whether [invokeLayoutCallback] for this render object is currently running.   ¿XMÅÉ¿YÄß/// The layout constraints most recently supplied by the parent.
///
/// If layout has not yet happened, accessing this getter will
/// throw a [StateError] exception.  ¿X˝¿X˛¿ïÉZ¿òHÉ/// Whether the constraints are the only input to the sizing algorithm (in
/// particular, child nodes have no impact).
///
/// Returning false is always correct, but returning true can be more
/// efficient when computing the size of this render object because we don't
/// need to recompute the size if the constraints don't change.
///
/// Typically, subclasses will always return the same value. If the value can
/// change, then, when it does change, the subclass should make sure to call
/// [markNeedsLayoutForSizedByParentChange].
///
/// Subclasses that return true must not change the dimensions of this render
/// object in [performLayout]. Instead, that work should be done by
/// [performResize] or - for subclasses of [RenderBox] - in
/// [RenderBox.computeDryLayout].  ¿ò2¿ò3¿•Äÿ¿•∑Äö/// Whether [paint] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿¶Ä—¿¶∑Äâ/// The render object that is actively painting.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// null.   ¿ßÉ£¿™ìÉ\/// Whether this render object repaints separately from its parent.
///
/// Override this in subclasses to indicate that instances of your class ought
/// to repaint independently. For example, render objects that repaint
/// frequently might want to repaint themselves without requiring their parent
/// to repaint.
///
/// If this getter returns true, the [paintBounds] are applied to this object
/// and all descendants. The framework invokes [RenderObject.updateCompositedLayer]
/// to create an [OffsetLayer] and assigns it to the [layer] field.
/// Render objects that declare themselves as repaint boundaries must not replace
/// the layer created by the framework.
///
/// If the value of this getter changes, [markNeedsCompositingBitsUpdate] must
/// be called.
///
/// See [RepaintBoundary] for more information about how repaint boundaries function.   ¿¨Å„¿≠ÿÅú/// Whether this render object always needs compositing.
///
/// Override this in subclasses to indicate that your paint function always
/// creates at least one composited layer. For example, videos should return
/// true if they use hardware decoders.
///
/// You must call [markNeedsCompositingBitsUpdate] if the value of this getter
/// changes. (This is implied when [adoptChild] or [dropChild] are called.)  ¿≠¬¿≠√¿≥gÜ◊¿π±Öˆ/// The compositing layer that this render object uses to repaint.
///
/// If this render object is not a repaint boundary, it is the responsibility
/// of the [paint] method to populate this field. If [needsCompositing] is
/// true, this field may be populated with the root-most layer used by the
/// render object implementation. When repainting, instead of creating a new
/// layer the render object may update the layer stored in this field for better
/// performance. It is also OK to leave this field as null and create a new
/// layer on every repaint, but without the performance benefit. If
/// [needsCompositing] is false, this field must be set to null either by
/// never populating this field, or by setting it to null when the value of
/// [needsCompositing] changes from true to false.
///
/// If a new layer is created and stored in some other field on the render
/// object, the render object must use a [LayerHandle] to store it. A layer
/// handle will prevent the layer from being disposed before the render
/// object is finished with it, and it will also make sure that the layer
/// gets appropriately disposed when the render object creates a replacement
/// or nulls it out. The render object must null out the [LayerHandle.layer]
/// in its [dispose] method.
///
/// If this render object is a repaint boundary, the framework automatically
/// creates an [OffsetLayer] and populates this field prior to calling the
/// [paint] method. The [paint] method must not replace the value of this
/// field.  ¿πê¿πë¿∫BÅ6¿∫S  ¿∫Y¿∫j  ¿∫B¿∫C¿ªœÅ‰¿Ω$Å2/// In debug mode, the compositing layer that this render object uses to repaint.
///
/// This getter is intended for debugging purposes only. In release builds, it
/// always returns null. In debug builds, it returns the layer even if the layer
/// is dirty.
///
/// For production code, consider [layer].   ¿ƒ Å‡¿≈nÅ6/// Whether we or one of our descendants has a compositing layer.
///
/// If this node needs compositing as indicated by this bit, then all ancestor
/// nodes will also need compositing.
///
/// Only legal to call after [PipelineOwner.flushLayout] and
/// [PipelineOwner.flushCompositingBits] have been called.   ¿ É°¿Œ
ÇÙ/// Whether this render object's paint information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. (In release builds, this throws.)
///
/// It is intended to be used by tests and asserts.
///
/// It is possible (and indeed, quite common) for [debugNeedsPaint] to be
/// false and [debugNeedsLayout] to be true. The render object will still be
/// repainted in the next frame when this is the case, because the
/// [markNeedsPaint] method is implicitly called by the framework after a
/// render object is laid out, prior to the paint phase.   ¿Œ∞ÇT¿–]Åì/// Whether this render object's layer information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. (In release builds, this throws.)
///
/// It is intended to be used by tests and asserts.   ¿¸vÅ¿˝ÑÄ˙/// An estimate of the bounds within which this render object will paint.
/// Useful for debugging flags such as [debugPaintLayerBordersEnabled].
///
/// These are also the bounds used by [showOnScreen] to make a [RenderObject]
/// visible on screen.   ¿#Ç-¿#"    ¿%8ÄÇ¿%´e/// The bounding box, in the local coordinate system, of this
/// object, for accessibility purposes.   ¿&Å∫¿'^Å9/// The semantics of this render object.
///
/// Exposed only for testing and debugging. To learn about the semantics of
/// render objects in production, obtain a [SemanticsHandle] from
/// [PipelineOwner.ensureSemantics].
///
/// Only valid in debug and profile mode. In release builds, always returns
/// null.   @¿	µÉã¿pÇó/// Cause the entire subtree rooted at the given [RenderObject] to be marked
/// dirty for layout, paint, etc, so that the effects of a hot reload can be
/// seen, or so that the effect of changing a global debug flag (such as
/// [debugPaintSizeEnabled]) can be applied.
///
/// This is called by the [RendererBinding] in response to the
/// `ext.flutter.reassemble` hook, which is used by development tools when the
/// application code has changed, to cause the widget tree to pick up any
/// changed implementations.
///
/// This is expensive and should not be called except during development.
///
/// See also:
///
///  * [BindingBase.reassembleApplication]   ¿eÖD¿HÇ∞/// Release any resources held by this render object.
///
/// The object that creates a RenderObject is in charge of disposing it.
/// If this render object has created any children directly, it must dispose
/// of those children in this method as well. It must not dispose of any
/// children that were created by some other object, such as
/// a [RenderObjectElement]. Those children will be disposed when that
/// element unmounts, which may be delayed if the element is moved to another
/// part of the tree.
///
/// Implementations of this method must end with a call to the inherited
/// method, as in `super.dispose()`.
///
/// The object is no longer usable after calling dispose.  ¿2¿3¿gÅ¿4Äø/// Override to setup parent data correctly for your children.
///
/// You can call this function to set up the parent data for child before the
/// child is added to the parent's child list. ¿D¿\   ¿æÅi¿wÄû/// Adjust the [depth] of the given [child] to be greater than this node's own
/// [depth].
///
/// Only call this method from overrides of [redepthChildren]. ¿Ñ¿í  ¿e¿f¿+Ä¿Ä¿/// Adjust the [depth] of this node's children, if any.
///
/// Override this method in subclasses with child nodes to call [redepthChild]
/// for each child. Do not call this method directly.  ¿Ù¿ı¿·É¿ ÙÄÁ/// Called by subclasses when they decide a render object is a child.
///
/// Only for use by subclasses when changing their child lists. Calling this
/// in other cases will lead to an inconsistent tree and probably cause crashes. ¿ ˇ¿!  ¿ —¿ “¿ ‚¿ „¿#Çπ¿$ÄÒ/// Called by subclasses when they decide a render object is no longer a child.
///
/// Only for use by subclasses when changing their child lists. Calling this
/// in other cases will lead to an inconsistent tree and probably cause crashes. ¿$)¿$7  ¿#¸¿#˝¿$¿$¿%øÄÕ¿&^Äì/// Calls visitor for each immediate child of this render object.
///
/// Override in subclasses with children and call the visitor for each child. ¿&l¿&Å   ¿'{Ñ¿'Ä  ¿'ë¿'ô  ¿'†¿'®  ¿'≤¿'æ   ¿.∞Ç°¿/“ÄÚ/// Set [debugActiveLayout] to null when [inner] callback is called.
/// This is useful when you have to temporarily clear that variable to
/// disable some false-positive checks, such as when computing toStringDeep
/// or using custom trees.¿/¿/¿/Û¿0  ¿/´¿/¨¿/≤¿/≈¿/≥¿MÖÙ¿N¨Åv/// Mark this render object as attached to the given owner.
///
/// Typically called only from the [parent]'s [attach] method, and by the
/// [owner] to mark the root of a tree as attached.
///
/// Subclasses with children should override this method to
/// [attach] all their children to the same [owner]
/// after calling the inherited method, as in `super.attach(owner)`. ¿N≥¿N¬  ¿Nñ¿Nó¿SÅ¸¿TäÅ\/// Mark this render object as detached from its [PipelineOwner].
///
/// Typically called only from the [parent]'s [detach], and by the [owner] to
/// mark the root of a tree as detached.
///
/// Subclasses with children should override this method to
/// [detach] all their children after calling the inherited method,
/// as in `super.detach()`.  ¿Tt¿Tu¿YÒÅ}¿[MÅ?/// Verify that the object's constraints are being met. Override
/// this function in a subclass to verify that your state matches
/// the constraints object. This function is only called in checked
/// mode and only when needsLayout is false. If the constraints are
/// not met, it should assert or throw an exception.  ¿[;¿[<¿]ÜÇ¿]ã    ¿_§ã∆¿gªá≈/// Mark this render object's layout information as dirty, and either register
/// this object with its [PipelineOwner], or defer to the parent, depending on
/// whether this object is a relayout boundary or not respectively.
///
/// ## Background
///
/// Rather than eagerly updating layout information in response to writes into
/// a render object, we instead mark the layout information as dirty, which
/// schedules a visual update. As part of the visual update, the rendering
/// pipeline updates the render object's layout information.
///
/// This mechanism batches the layout work so that multiple sequential writes
/// are coalesced, removing redundant computation.
///
/// If a render object's parent indicates that it uses the size of one of its
/// render object children when computing its layout information, this
/// function, when called for the child, will also mark the parent as needing
/// layout. In that case, since both the parent and the child need to have
/// their layout recomputed, the pipeline owner is only notified about the
/// parent; when the parent is laid out, it will call the child's [layout]
/// method and thus the child will be laid out as well.
///
/// Once [markNeedsLayout] has been called on a render object,
/// [debugNeedsLayout] returns true for that render object until just after
/// the pipeline owner has called [layout] on the render object.
///
/// ## Special cases
///
/// Some subclasses of [RenderObject], notably [RenderBox], have other
/// situations in which the parent needs to be notified if the child is
/// dirtied (e.g., if the child's intrinsic dimensions or baseline changes).
/// Such subclasses override markNeedsLayout and either call
/// `super.markNeedsLayout()`, in the normal case, or call
/// [markParentNeedsLayout], in the case where the parent needs to be laid out
/// as well as the child.
///
/// If [sizedByParent] has changed, calls
/// [markNeedsLayoutForSizedByParentChange] instead of [markNeedsLayout].   ¿knÉ¿m0Åù/// Mark this render object's layout information as dirty, and then defer to
/// the parent.
///
/// This function should only be called from [markNeedsLayout] or
/// [markNeedsLayoutForSizedByParentChange] implementations of subclasses that
/// introduce more reasons for deferring the handling of dirty layout to the
/// parent. See [markNeedsLayout] for details.
///
/// Only call this if [parent] is not null.  ¿m¿m¿nãÅ∑¿o·ÅB/// Mark this render object's layout information as dirty (like
/// [markNeedsLayout]), and additionally also handle any necessary work to
/// handle the case where [sizedByParent] has changed value.
///
/// This should be called whenever [sizedByParent] might have changed.
///
/// Only call this if [parent] is not null.   ¿pFÄ†¿pK    ¿pÍÅ¿pÔ    ¿r™e¿r∂  ¿r“¿r‡   ¿so¿s  ¿sA¿sO   ¿sÜÇr¿töÅ/// Bootstrap the rendering pipeline by scheduling the very first layout.
///
/// Requires this render object to be attached and that this render object
/// is the root of the render tree.
///
/// See [RenderView] for an example of how this function is used.   ¿u¸Éª¿v.   ¿u¸¿u˝¿v¿v%¿v¿yªôp¿SÖ7/// Compute the layout for this render object.
///
/// This method is the main entry point for parents to ask their children to
/// update their layout information. The parent passes a constraints object,
/// which informs the child as to which layouts are permissible. The child is
/// required to obey the given constraints.
///
/// If the parent reads information computed during the child's layout, the
/// parent must pass true for `parentUsesSize`. In that case, the parent will
/// be marked as needing layout whenever the child is marked as needing layout
/// because the parent's layout information depends on the child's layout
/// information. If the parent uses the default value (false) for
/// `parentUsesSize`, the child can change its layout information (subject to
/// the given constraints) without informing the parent.
///
/// Subclasses should not override [layout] directly. Instead, they should
/// override [performResize] and/or [performLayout]. The [layout] method
/// delegates the actual work to [performResize] and [performLayout].
///
/// The parent's [performLayout] method should call the [layout] of all its
/// children unconditionally. It is the [layout] method's responsibility (as
/// implemented here) to return early if the child does not need to do any
/// work to update its layout information. ¿Z¿g  ¿u¿{  ¿!¿"¿(¿J¿)¿ã¿ì/Å“¿îÌÅü/// If a subclass has a "size" (the state controlled by `parentUsesSize`,
/// whatever it is in the subclass, e.g. the actual `size` property of
/// [RenderBox]), and the subclass verifies that in debug mode this "size"
/// property isn't used when [debugCanParentUseSize] isn't set, then that
/// subclass should override [debugResetSize] to reapply the current values of
/// [debugCanParentUseSize] to that state.  ¿î€¿î‹¿òcÇÛ¿õFÇ¥/// {@template flutter.rendering.RenderObject.performResize}
/// Updates the render objects size using only the constraints.
///
/// Do not call this function directly: call [layout] instead. This function
/// is called by [layout] when there is actually work to be done by this
/// render object during layout. The layout constraints provided by your
/// parent are available via the [constraints] getter.
///
/// This function is called only if [sizedByParent] is true.
/// {@endtemplate}
///
/// Subclasses that set [sizedByParent] to true should override this method to
/// compute their size. Subclasses of [RenderBox] should consider overriding
/// [RenderBox.computeDryLayout] instead.  ¿õ4¿õ5¿õZÑï¿üﬂÑL/// Do the work of computing the layout for this render object.
///
/// Do not call this function directly: call [layout] instead. This function
/// is called by [layout] when there is actually work to be done by this
/// render object during layout. The layout constraints provided by your
/// parent are available via the [constraints] getter.
///
/// If [sizedByParent] is true, then this function should not actually change
/// the dimensions of this render object. Instead, that work should be done by
/// [performResize]. If [sizedByParent] is false, then this function should
/// both change the dimensions of this render object and instruct its children
/// to layout.
///
/// In implementing this function, you must call [layout] on each of your
/// children, passing true for parentUsesSize if your layout information is
/// dependent on your child's layout information. Passing true for
/// parentUsesSize ensures that this render object will undergo layout if the
/// child undergoes layout. Otherwise, the child can change its layout
/// information without informing this render object.  ¿üÕ¿üŒ¿üÛÖ¿£sÉO/// Allows mutations to be made to this object's child list (and any
/// descendants) as well as to any other dirty nodes in the render tree owned
/// by the same [PipelineOwner] as this object. The `callback` argument is
/// invoked synchronously, and the mutations are allowed only during that
/// callback's execution.
///
/// This exists to allow child lists to be built on-demand during layout (e.g.
/// based on the object's size), and to enable nodes to be moved around the
/// tree as this happens (e.g. to handle [GlobalKey] reparenting), while still
/// ensuring that any particular node is only laid out once per frame.
///
/// Calling this function disables a number of assertions that are intended to
/// catch likely bugs. As such, using this function is generally discouraged.
///
/// This function can only be called during layout.¿£à¿£à¿£ü¿£≤  ¿£a¿£b¿™≤Å_¿´∞ÄÓ/// Called, in debug mode, if [isRepaintBoundary] is true, when either the
/// this render object or its parent attempt to paint.
///
/// This can be used to record metrics about whether the node should actually
/// be a repaint boundary. ¿´‘¿´⁄  ¿´¿´ˆ  ¿´Í¿¨¿ÆÖE¿≤◊É·/// Update the composited layer owned by this render object.
///
/// This method is called by the framework when [isRepaintBoundary] is true.
///
/// If [oldLayer] is `null`, this method must return a new [OffsetLayer]
/// (or subtype thereof). If [oldLayer] is not `null`, then this method must
/// reuse the layer instance that is provided - it is an error to create a new
/// layer in this instance. The layer will be disposed by the framework when
/// either the render object is disposed or if it is no longer a repaint
/// boundary.
///
/// The [OffsetLayer.offset] property will be managed by the framework and
/// must not be updated by this method.
///
/// If a property of the composited layer needs to be updated, the render object
/// must call [markNeedsCompositedLayerUpdate] which will schedule this method
/// to be called without repainting children. If this widget was marked as
/// needing to paint and needing a composited layer update, this method is only
/// called once. ¿≤Ó(¿≥   ¿æÖ”¿¡]É//// Mark the compositing state for this render object as dirty.
///
/// This is called to indicate that the value for [needsCompositing] needs to
/// be recomputed during the next [PipelineOwner.flushCompositingBits] engine
/// phase.
///
/// When the subtree is mutated, we need to recompute our
/// [needsCompositing] bit, and some of our ancestors need to do the
/// same (in case ours changed in a way that will change theirs). To
/// this end, [adoptChild] and [dropChild] call this method, and, as
/// necessary, this method calls the parent's, etc, walking up the
/// tree to mark all the nodes that need updating.
///
/// This method does not schedule a rendering frame, because since
/// it cannot be the case that _only_ the compositing bits changed,
/// something else will have scheduled a frame for us.   ¿∆ÑË¿∆	    ¿—4âÎ¿‘˝Éõ/// Mark this render object as having changed its visual appearance.
///
/// Rather than eagerly updating this render object's display list
/// in response to writes, we instead mark the render object as needing to
/// paint, which schedules a visual update. As part of the visual update, the
/// rendering pipeline will give this render object an opportunity to update
/// its display list.
///
/// This mechanism batches the painting work so that multiple sequential
/// writes are coalesced, removing redundant computation.
///
/// Once [markNeedsPaint] has been called on a render object,
/// [debugNeedsPaint] returns true for that render object until just after
/// the pipeline owner has called [paint] on the render object.
///
/// See also:
///
///  * [RepaintBoundary], to scope a subtree of render objects to their own
///    layer, thus limiting the number of nodes that [markNeedsPaint] must mark
///    dirty.   ¿€#Ü-¿ﬁÖÉ:/// Mark this render object as having changed a property on its composited
/// layer.
///
/// Render objects that have a composited layer have [isRepaintBoundary] equal
/// to true may update the properties of that composited layer without repainting
/// their children. If this render object is a repaint boundary but does
/// not yet have a composited layer created for it, this method will instead
/// mark the nearest repaint boundary parent as needing to be painted.
///
/// If this method is called on a render object that is not a repaint boundary
/// or is a repaint boundary but hasn't been composited yet, it is equivalent
/// to calling [markNeedsPaint].
///
/// See also:
///
///  * [RenderOpacity], which uses this method when its opacity is updated to
///    update the layer opacity without repainting children.   ¿‚≈Çﬁ¿‚     ¿ÂßÇx¿ÊΩÅ/// Bootstrap the rendering pipeline by scheduling the very first paint.
///
/// Requires that this render object is attached, is the root of the render
/// tree, and has a composited layer.
///
/// See [RenderView] for an example of how this function is used. ¿Ê“¿Ê‚   ¿Ë#ÇÅ¿ÈÄÿ/// Replace the layer. This is only valid for the root of a render
/// object subtree (whatever object [scheduleInitialPaint] was
/// called on).
///
/// This might be called if, e.g., the device pixel ratio changed. ¿È¿È)   ¿Í®ë ¿Í≠  ¿Íø¿Í–  ¿Íÿ¿Í‡   ¿˝îv¿˝‘8/// Override this method to paint debugging information. ¿˝ﬂ¿˝  ¿˝¯¿˛    ¿˛Éˇ¿‹É¶/// Paint this render object into the given context at the given offset.
///
/// Subclasses should override this method to provide a visual appearance
/// for themselves. The render object's local coordinate system is
/// axis-aligned with the coordinate system of the context's canvas and the
/// render object's local origin (i.e, x=0 and y=0) is placed at the given
/// offset in the context's canvas.
///
/// Do not call this function directly. If you wish to paint yourself, call
/// [markNeedsPaint] instead to schedule a call to this function. If you wish
/// to paint one of your children, call [PaintingContext.paintChild] on the
/// given `context`.
///
/// When painting one of your children (via a paint child function on the
/// given context), the current canvas held by the context might change
/// because draw operations before and after painting children might need to
/// be recorded on separate compositing layers. ¿‚¿Û  ¿˚¿   ¿É1¿÷Çß/// Applies the transform that would be applied when painting the given child
/// to the given matrix.
///
/// Used by coordinate conversion functions to translate coordinates local to
/// one render object into coordinates local to another render object.
///
/// Some RenderObjects will provide a zeroed out matrix in this method,
/// indicating that the child should not paint anything or respond to hit
/// tests currently. A parent may supply a non-zero matrix even though it
/// does not paint its child currently, for example if the parent is a
/// [RenderOffstage] with `offstage` set to true. In both of these cases,
/// the parent must return `false` from [paintsChild]. ¿Í¿  ¿¿   ¿FÉ]¿AÇ€/// Whether the given child would be painted if [paint] were called.
///
/// Some RenderObjects skip painting their children if they are configured to
/// not produce any visible effects. For example, a [RenderOffstage] with
/// its `offstage` property set to true, or a [RenderOpacity] with its opacity
/// value set to zero.
///
/// In these cases, the parent may still supply a non-zero matrix in
/// [applyPaintTransform] to inform callers about where it would paint the
/// child if the child were painted at all. Alternatively, the parent may
/// supply a zeroed out matrix if it would not otherwise be able to determine
/// a valid matrix for the child and thus cannot meaningfully determine where
/// the child would paint. ¿M¿e   ¿ßÜc¿øÇÔ/// {@template flutter.rendering.RenderObject.getTransformTo}
/// Applies the paint transform up the tree to `ancestor`.
///
/// Returns a matrix that maps the local paint coordinate system to the
/// coordinate system of `ancestor`.
///
/// If `ancestor` is null, this method returns a matrix that maps from the
/// local paint coordinate system to the coordinate system of the
/// [PipelineOwner.rootNode].
/// {@endtemplate}
///
/// For the render tree owned by the [RendererBinding] (i.e. for the main
/// render tree displayed on the device) this means that this method maps to
/// the global coordinate system in logical pixels. To get physical pixels,
/// use [applyPaintTransform] from the [RenderView] to further transform the
/// coordinate. ¿Œ¿›   ¿ÇÔ¿ªÇã/// Returns a rect in this object's coordinate system that describes
/// the approximate bounding box of the clip rect that would be
/// applied to the given child during the paint phase, if any.
///
/// Returns null if the child would not be clipped.
///
/// This is used in the semantics phase to avoid including children
/// that are not physically visible.
///
/// RenderObjects that respect a [Clip] behavior when painting _must_ respect
/// that same behavior when describing this value. For example, if passing
/// [Clip.none] to [PaintingContext.pushClipRect] as the `clipBehavior`, then
/// the implementation of this method must return null. ¿ÿ¿   ¿ÖÊ¿´Öp/// Returns a rect in this object's coordinate system that describes
/// which [SemanticsNode]s produced by the `child` should be included in the
/// semantics tree. [SemanticsNode]s from the `child` that are positioned
/// outside of this rect will be dropped. Child [SemanticsNode]s that are
/// positioned inside this rect, but outside of [describeApproximatePaintClip]
/// will be included in the tree marked as hidden. Child [SemanticsNode]s
/// that are inside of both rect will be included in the tree as regular
/// nodes.
///
/// This method only returns a non-null value if the semantics clip rect
/// is different from the rect returned by [describeApproximatePaintClip].
/// If the semantics clip rect and the paint clip rect are the same, this
/// method returns null.
///
/// A viewport would typically implement this method to include semantic nodes
/// in the semantics tree that are currently hidden just before the leading
/// or just after the trailing edge. These nodes have to be included in the
/// semantics tree to implement implicit accessibility scrolling on iOS where
/// the viewport scrolls implicitly when moving the accessibility focus from
/// the last visible node in the viewport to the first hidden one.
///
/// See also:
///
/// * [RenderViewportBase.cacheExtent], used by viewports to extend their
///   semantics clip beyond their approximate paint clip. ¿¡¿⁄   ¿¸ÇÑ¿ Å/// Bootstrap the semantics reporting mechanism by marking this node
/// as needing a semantics update.
///
/// Requires that this render object is attached, and is the root of
/// the render tree.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ÑÖ_¿Ñ§/// Report the semantics of this node, for example for accessibility purposes.
///
/// This method should be overridden by subclasses that have interesting
/// semantic information.
///
/// The given [SemanticsConfiguration] object is mutable and should be
/// annotated in a manner that describes the current state. No reference
/// should be kept to that object; mutating it outside of the context of the
/// [describeSemanticsConfiguration] call (for example as a result of
/// asynchronous computation) will at best have no useful effect and at worse
/// will cause crashes as the data will be in an inconsistent state.
///
/// {@tool snippet}
///
/// The following snippet will describe the node as a button that responds to
/// tap actions.
///
/// ```dart
/// abstract class SemanticButtonRenderObject extends RenderObject {
///   @override
///   void describeSemanticsConfiguration(SemanticsConfiguration config) {
///     super.describeSemanticsConfiguration(config);
///     config
///       ..onTap = _handleTap
///       ..label = 'I am a button'
///       ..isButton = true;
///   }
///
///   void _handleTap() {
///     // Do something.
///   }
/// }
/// ```
/// {@end-tool} ¿û¿∂  ¿m¿n¿ÁÇ¥¿!`Åc/// Sends a [SemanticsEvent] associated with this render object's [SemanticsNode].
///
/// If this render object has no semantics information, the first parent
/// render object with a non-null semantic node is used.
///
/// If semantics are disabled, no events are dispatched.
///
/// See [SemanticsNode.sendEvent] for a full description of the behavior. ¿!s¿!É   ¿'øÅÌ¿)Å,/// Removes all semantics from this render object and its descendants.
///
/// Should only be called on objects whose [parent] is not a [RenderObject].
///
/// Override this method if you instantiate new [SemanticsNode]s in an
/// overridden [assembleSemanticsNode] method, to dispose of those nodes.  ¿(¯¿(˘¿)∞çk¿*«Å/// Mark this node as needing an update to its semantics description.
///
/// This must be called whenever the semantics configuration of this
/// [RenderObject] as annotated by [describeSemanticsConfiguration] changes in
/// any way to update the semantics tree.   ¿7Ü}¿7a:/// Updates the semantic information of the render object.   ¿=†óí¿=ˇI/// Returns the semantics that this node would like to add to its parent. ¿>¿>+  ¿>?¿>N   ¿U6É‘¿U;  ¿UV.¿U{  ¿Uá¿Uç  ¿Uò¿YÅ ¿ZÄÅ\/// Called when collecting the semantics of this node.
///
/// The implementation has to return the children in paint order skipping all
/// children that are not semantically relevant (e.g. because they are
/// invisible).
///
/// The default implementation mirrors the behavior of
/// [visitChildren] (which is supposed to walk all the children). ¿Zö¿ZØ   ¿Z‹ÑB¿]°Ç£/// Assemble the [SemanticsNode] for this [RenderObject].
///
/// If [describeSemanticsConfiguration] sets
/// [SemanticsConfiguration.isSemanticBoundary] to true, this method is called
/// with the `node` created for this [RenderObject], the `config` to be
/// applied to that node and the `children` [SemanticsNode]s that descendants
/// of this RenderObject have generated.
///
/// By default, the method will annotate `node` with `config` and add the
/// `children` to it.
///
/// Subclasses can override this method to add additional [SemanticsNode]s
/// to the tree. If new [SemanticsNode]s are instantiated in this method
/// they must be disposed in [clearSemantics]. ¿]º¿]À  ¿]‘¿]Ï  ¿]˜ ¿^   ¿_/Ä£¿_ëN/// Override this method to handle pointer events that hit this render object. ¿_ù¿_´  ¿_±¿_…  ¿_Ä¿_Å¿c$Ér¿cb(/// Returns a human understandable name.  ¿cO¿cP¿föd¿f≠  ¿f∏/¿f…  ¿fö¿fõ¿f”¿f‚¿f„¿gÇ¿g¡Ä•/// Returns a description of the tree rooted at this node.
/// If the prefix argument is provided, then every line in the output
/// will be prefixed by that string. ¿g‘¿g‹  ¿gÛ¿g¸  ¿h0¿h'  ¿gÆ¿gØ¿gÎ¿h¿h1¿h@¿hA¿iÅÍ¿j,Äı/// Returns a one-line detailed description of the render object.
/// This description is often somewhat long.
///
/// This includes the same information for this RenderObject as given by
/// [toStringDeep], but does not recurse to any children. ¿jB¿jJ  ¿j\0¿jm  ¿j¿j¿jR¿jw¿jÜ¿já¿kÖE¿k%  ¿k9&¿kV  ¿k¿k¿k¿k¿pPQ¿pr   ¿pP¿pQ¿p•Ö
¿tgÉî/// Attempt to make (a portion of) this or a descendant [RenderObject] visible
/// on screen.
///
/// If `descendant` is provided, that [RenderObject] is made visible. If
/// `descendant` is omitted, this [RenderObject] is made visible.
///
/// The optional `rect` parameter describes which area of that [RenderObject]
/// should be shown on screen. If `rect` is null, the entire
/// [RenderObject] (as defined by its [paintBounds]) will be revealed. The
/// `rect` parameter is interpreted relative to the coordinate system of
/// `descendant` if that argument is provided and relative to this
/// [RenderObject] otherwise.
///
/// The `duration` parameter can be set to a non-zero value to bring the
/// target object on screen in an animation defined by `curve`.
///
/// See also:
///
/// * [RenderViewportBase.showInViewport], which [RenderViewportBase] and
///   [SingleChildScrollView] delegate this method to. ¿tz¿tâ  ¿tò
¿tü  ¿t®!¿t≤  ¿tœ¿t÷  ¿tº¿tƒ¿t≈¿t›¿t„¿t‰¿u≥Çá¿w†Å /// Adds a debug representation of a [RenderObject] optimized for including in
/// error messages.
///
/// The default [style] of [DiagnosticsTreeStyle.shallow] ensures that all of
/// the properties of the render object are included in the error output but
/// none of the children of the object are.
///
/// You should always include a RenderObject in an error message if it is the
/// [RenderObject] causing the failure or contract violation of the error. ¿w±¿wπ  ¿w¿9¿w÷  ¿w›¿wÒ¿wÚ ¿ΩWÑ¬¿æÙÅç/// Describes the semantics information a [RenderObject] wants to add to its
/// parent.
///
/// It has two notable subclasses:
///  * [_InterestingSemanticsFragment] describing actual semantic information to
///    be added to the parent.
///  * [_ContainerSemanticsFragment]: a container class to transport the semantic
///    information of multiple [_InterestingSemanticsFragment] to a parent. ¿øN ¿ø¿ø ¿ø$.¿ø3   ¿ø‡Åk¿¡+Å1/// Whether this fragment wants to make the semantics information of
/// previously painted [RenderObject]s unreachable for accessibility purposes.
///
/// See also:
///
///  * [SemanticsConfiguration.isBlockingSemanticsOfPreviouslyPaintedNodes]
///    describes what semantics are dropped in more detail. ¿¡PÄ«¿¬Äâ/// Returns [_InterestingSemanticsFragment] describing the actual semantic
/// information that this fragment wants to add to the parent.   ¿ø]¿ø¢=/// Incorporate the fragments of children into this fragment. ¿ø©1¿ø“    ¿¬ÇÂ¿√ÄÒ/// A container used when a [RenderObject] wants to add multiple independent
/// [_InterestingSemanticsFragment] to its parent.
///
/// The [_InterestingSemanticsFragment] to be added to the parent can be
/// obtained via [mergeUpFragments]. ¿√N~ ¿√N¿√i ¿√p/¿√Ä  ¿√• ¿√¥   ¿√–B¿ƒ   ¿ƒìj¿ƒ… ¿ƒì¿ƒî¿ƒ˚¿ƒ¸¿ƒ‹¿ƒ˙¿ƒ› ¿ƒx¿ƒ(  ¿ƒ/1¿ƒX  ¿ƒ¿ƒ ¿≈çÖ¿∆{Åi/// A [_SemanticsFragment] that describes which concrete semantic information
/// a [RenderObject] wants to add to the [SemanticsNode] of its parent.
///
/// Specifically, it describes which children (as returned by [compileChildren])
/// should be added to the parent's [SemanticsNode] and which [config] should be
/// merged into the parent's [SemanticsNode]. ¿∆∏Ä§ ¿∆∏¿∆’ ¿∆‹¿∆Û  ¿∆˝/¿«  ¿«D¿«5¿«T¿«Z¿«F¿«S¿«G¿«U¿«˙'¿»  ¿œê#¿œ£  ¿«`Äñ¿«ÿb/// The [RenderObject] that owns this fragment (and any new [SemanticsNode]
/// introduced by it).   ¿ ﬁÄµ¿ÀåÄç/// The [SemanticsConfiguration] the child wants to merge into the parent's
/// [SemanticsNode] or null if it doesn't want to merge anything.   ¿ŒÖÄï¿Œıb/// Whether this fragment wants to add any semantic information to the parent
/// [SemanticsNode].   ¿œn¿œR   ¿œ¿œ¿»&Ç¥¿…ÓÅÆ/// The children to be added to the parent.
///
/// See also:
///
///  * [SemanticsNode.parentSemanticsClipRect] for the source and definition
///    of the `parentSemanticsClipRect` argument.
///  * [SemanticsNode.parentPaintClipRect] for the source and definition
///    of the `parentPaintClipRect` argument.
///  * [SemanticsNode.elevationAdjustment] for the source and definition
///    of the `elevationAdjustment` argument. ¿ &¿   ¿ 0"¿ @  ¿ X#¿ i  ¿ Å#¿ ü  ¿ ™)¿ »   ¿ÀóÅ¿ÃåÄÂ/// Disallows this fragment to merge any configuration into its parent's
/// [SemanticsNode].
///
/// After calling this, the fragment will only produce children to be added
/// to the parent and it will return null for [config].   ¿Ã°Å‡¿ŒGÅÑ/// Consume the fragments of children.
///
/// For each provided fragment it will add that fragment's children to
/// this fragment's children (as returned by [compileChildren]) and merge that
/// fragment's [config] into this fragment's [config].
///
/// If a provided fragment should not merge anything into [config] call
/// [markAsExplicit] before passing the fragment to this method. ¿ŒN1¿Œw  ¿Œ6¿Œ7¿œ∏Å¿–%a/// Tag all children produced by [compileChildren] with `tags`.
///
/// `tags` must not be empty. ¿–-¿–E   ¿–øÅ∆¿“;Åf/// Adds the geometric information of `ancestor` to this object.
///
/// Those information are required to properly compute the value for
/// [SemanticsNode.transform], [SemanticsNode.clipRect], and
/// [SemanticsNode.rect].
///
/// Ancestors have to be added in order from [owner] up until the next
/// [RenderObject] that owns a [SemanticsNode] is reached. ¿“G¿“U    ¿“âä;¿”[ÄÀ/// An [_InterestingSemanticsFragment] that produces the root [SemanticsNode] of
/// the semantics tree.
///
/// The root node is available as the only element in the Iterable returned by
/// [children]. ¿”úm ¿”ú¿”≤ ¿”π¿”…  ¿””/¿”„   ¿€úW¿€∆ ¿€Ò¿€Ú¿€“¿€¿€”¿€a7¿€â   ¿€a¿€b¿‘áP¿‘  ¿‘4¿‘;  ¿‘W¿‘^  ¿‘v#¿‘á  ¿‘ü#¿‘Ω  ¿‘»)¿‘Ê  ¿‘¿‘¿€¯U¿‹	   ¿€¯¿€˘¿‹Qq¿‹b  ¿‹i1¿‹í  ¿‹Q¿‹R ¿‹∆Ö¿›ÚÅ%/// A fragment with partial information that must not form an explicit
/// semantics node without merging into another _SwitchableSemanticsFragment.
///
/// This fragment is generated from synthetic SemanticsConfiguration returned from
/// [SemanticsConfiguration.childConfigurationsDelegate]. ¿ﬁ9Äâ ¿ﬁ9¿ﬁU ¿ﬁ\¿ﬁk  ¿ﬁv¿ﬁÜ  ¿ﬁì¿ﬁò¿ﬁ¿¿ﬁπ¿ﬁô¿ﬁª¿‡¡/¿‡Í ¿‡¡¿‡¬ ¿ﬁ∆Äà¿ﬁ◊  ¿ﬁﬁ1¿ﬂ  ¿ﬁ∆¿ﬁ«¿ﬂRÅk¿ﬂc  ¿ﬂy&¿ﬂâ  ¿ﬂ•"¿ﬂµ  ¿ﬂÕ#¿ﬂﬁ  ¿ﬂˆ#¿‡  ¿‡)¿‡=  ¿ﬂR¿ﬂS¿‡ıÄﬁ¿·   ¿‡ı¿‡ˆ ¿·◊¨È¿Â«ÉÈ/// An [_InterestingSemanticsFragment] that can be told to only add explicit
/// [SemanticsNode]s to the parent.
///
/// If [markAsExplicit] was not called before this fragment is added to
/// another fragment it will merge [config] into the parent's [SemanticsNode]
/// and add its [children] to it.
///
/// If [markAsExplicit] was called before adding this fragment to another
/// fragment it will create a new [SemanticsNode]. The newly created node will
/// be annotated with the [SemanticsConfiguration] that - without the call to
/// [markAsExplicit] - would have been merged into the parent's [SemanticsNode].
/// Similarly, the new node will also take over the children that otherwise
/// would have been added to the parent's [SemanticsNode].
///
/// After a call to [markAsExplicit] the only element returned by [children]
/// is the newly created node and [config] will return null as the fragment
/// no longer wants to merge any semantic information into the parent's
/// [SemanticsNode]. ¿ÊÇ6 ¿Ê¿Ê* ¿Ê1¿Ê@  ¿ÊT¿Êc  ¿Êx&¿Êô  ¿Ê§E¿Êÿ  ¿ÊÔ¿Êˇ  ¿Á	/¿Á  	¿ÁU¿ÁA¿ÁW¿ÁÉ¿Ár¿ÁÖ¿Á•¿Áù¿Áß¿ËH¿ËS  ¿Ëg¿Ë~  ¿Ëâ¿Ëé ¿Ë¢¿Ë´¿Ë∞ ¿Ë√¿ËÕC¿Ë˝  ¿ıW¿ı. ¿ıY¿ıZ¿ı:¿ıX¿ı;¿#¿( ¿6¿
è]¿
∑   ¿
è¿
ê¿É;¿å    ¿ÈãÎ¿È  ¿È-¿È4  ¿ÈL¿ÈS  ¿Èg¿È|  ¿ÈÉ¿Èç   ¿ı`ìŸ¿ıq  ¿ıá¿ıé  ¿ı™¿ı±  ¿ı…#¿ı⁄  ¿ıÚ#¿ˆ  ¿ˆ)¿ˆ9  ¿ı`¿ıa¿	=ÅN¿	Q  ¿	q&¿	Å  ¿	ù"¿	≠   ¿
ÅC¿  ¿1¿1  ¿
¿
Ò¿7Å\¿H  ¿P¿h  ¿7¿8¿óÄà¿ú    ¿@?¿Q   ¿@¿A ¿¬†–¿öÄ—/// Helper class that keeps track of the geometry of a [SemanticsNode].
///
/// It is used to annotate a [SemanticsNode] with the current information for
/// [SemanticsNode.rect] and [SemanticsNode.transform]. ¿≤Çv ¿=¿OÅ~/// The `parentClippingRect` may be null if no clip is to be applied.
///
/// The `ancestors` list has to include all [RenderObject] in order that are
/// located between the [SemanticsNode] whose geometry is represented here
/// (first [RenderObject] in the list) and its closest ancestor [RenderObject]
/// that also owns its own [SemanticsNode] (last [RenderObject] in the list).¿V&¿f  ¿Ç"¿í  ¿™%¿«   ¿,¿2  ¿D¿J  ¿`¿m  ¿{¿Ö  ¿&Ë?¿&˝ ¿'¿' ¿'!¿'%¿'&¿/u¿/z ¿/ä¿èO¿∆(/// Value for [SemanticsNode.transform].   ¿‚k¿%6/// Value for [SemanticsNode.parentSemanticsClipRect].   ¿Q_¿ê2/// Value for [SemanticsNode.parentPaintClipRect].   ¿¥=¿„#/// Value for [SemanticsNode.rect].   ¿,ïÅ¿-YÄ¥/// Whether the [SemanticsNode] annotated with the geometric information tracked
/// by this object can be dropped from the semantics tree without losing
/// semantics information.   ¿-†Å“¿/TÅñ/// Whether the [SemanticsNode] annotated with the geometric information
/// tracked by this object should be marked as hidden because it is not
/// visible on screen.
///
/// Hidden elements should still be included in the tree to work around
/// platform limitations (e.g. accessibility scrolling on iOS).
///
/// See also:
///
///  * [SemanticsFlag.isHidden] for the purpose of marking a node as hidden.   ¿ıäd¿:Å3/// Computes values, ensuring `rect` is properly bounded by ancestor clipping rects.
///
/// See also:
///
/// * [RenderObject.describeSemanticsClip], typically used to determine `parentSemanticsClipRect`.
/// * [RenderObject.describeApproximatePaintClip], typically used to determine `parentPaintClipRect`. ¿I¿P  ¿h¿o  ¿É¿ó   ¿]Å)¿ò+/// From parent to child coordinate system. ¿ß
¿Æ  ¿≥¿º   ¿ ∂ÑÔ¿ ¬  ¿ È ¿ ˜  ¿!¿!  ¿!4¿!=   ¿(DÉ…¿(I  ¿(Z¿(h  ¿(o¿(}  ¿(É¿(ä  ¿(¢¿(©   ¿,ÄÄ¿,  ¿,.¿,5  ¿,7¿,>    ¿/îÇQ¿0¨Å/// A class that creates [DiagnosticsNode] by wrapping [RenderObject.debugCreator].
///
/// Attach a [DiagnosticsDebugCreator] into [FlutterErrorDetails.informationCollector]
/// when a [RenderObject.debugCreator] is available. This will lead to improved
/// error message. ¿0ÏÄ˜ ¿1Z¿1qi/// Create a [DiagnosticsProperty] with its [value] initialized to input
/// [RenderObject.debugCreator].¿1r¿1z  
¿1Ü¿1ã¿1·¿1ï¿1≠¿1¡¿1º¿1√¿1“¿1”           ÖÙÅháÅ/// Signature for painting into a [PaintingContext].
///
/// The `offset` argument is the offset from the origin of the coordinate system
/// of the [PaintingContext.canvas] to the coordinate system of the callee.
///
/// Used by many of the methods of [PaintingContext].  á4áE  áMáU   ¿ ≥Ä‡¿ Ä[Äü/// Signature for a function that is called for each [RenderObject].
///
/// Used by [RenderObject.visitChildren] and [RenderObject.visitChildrenForSemantics].  ¿ Ä¿ Äç   ¿ ÄïÄΩ¿ Åo/// Signature for a function that is called during layout.
///
/// Used by [RenderObject.invokeLayoutCallback].¿ Å¿ Å ¿ ÅC¿ ÅF   ¿ „tÄ¥¿ „Óq/// Signature for the callback to [PipelineOwner.visitChildren].
///
/// The argument is the child being visited.  ¿ ‰¿ ‰"   ¿x>äó¿yqÅ,/// Generic mixin for render objects with one child.
///
/// Provides a child model for a render object subclass that has
/// a unique child, which is accessible via the [child] getter.
///
/// This mixin is typically used to implement render objects created
/// in a [SingleChildRenderObjectWidget].¿yå¿yå ¿}¿à  ¿íG¿…%/// The render object's unique child.   ¿‹Ä™¿‡  ¿Ê¿Ú   ¿y¿Öπ¿zëÄø/// Checks whether the given render object has the correct [runtimeType] to be
/// a child of this render object.
///
/// Does nothing if assertions are disabled.
///
/// Always returns true. ¿z§¿z≤   ¿Ääf¿Äõ  ¿Ä¢¿Ä±  ¿Ää¿Äã¿ÄÙI¿Å   ¿ÄÙ¿Äı¿ÅAe¿ÅR   ¿ÅA¿ÅB¿Å™y¿Åª  ¿Å…¿Åﬁ  ¿Å™¿Å´¿Ç'Ä¨¿ÇI   ¿Ç'¿Ç( ¿Ç◊ÉO¿ÑÅ5/// Parent data to support a doubly-linked list of children.
///
/// The children can be traversed using [nextSibling] or [previousSibling],
/// which can be called on the parent data of the render objects
/// obtained via [ContainerRenderObjectMixin.firstChild] or
/// [ContainerRenderObjectMixin.lastChild].¿Ñ,¿Ñ, ¿Ñ^Q¿Ñ†4/// The previous sibling in the parent's child list. ¿Ñ≥I¿ÑÒ0/// The next sibling in the parent's child list.  ¿ÖÅ#¿Ö4/// Clear the sibling pointers.  ¿Ö#¿Ö$ ¿Ü(≠¿ä
É€/// Generic mixin for render objects with a list of children.
///
/// Provides a child model for a render object subclass that has a doubly-linked
/// list of children.
///
/// The [ChildType] specifies the type of the children (extending [RenderObject]),
/// e.g. [RenderBox].
///
/// [ParentDataType] stores parent container data on its child render objects.
/// It must extend [ContainerParentDataMixin], which provides the interface
/// for visiting children. This data is populated by
/// [RenderObject.setupParentData] implemented by the class using this mixin.
///
/// When using [RenderBox] as the child type, you will usually want to make use of
/// [RenderBoxContainerDefaultsMixin] and extend [ContainerBoxParentData] for the
/// parent data.
///
/// Moreover, this is a required mixin for render objects returned to [MultiChildRenderObjectWidget].
///
/// See also:
///
///  * [SlottedContainerRenderObjectMixin], which organizes its children
///    in different named slots.¿ä%¿ä%¿äE:¿äE ¿çæ¿ç¬ ¿ç–¿ì÷¿ì·  ¿ì¿ì˚  ¿ç’@¿ç˚/// The number of children.   ¿ÆJR¿ÆÇ&/// The first child in the child list.   ¿Æ†O¿Æ◊%/// The last child in the child list.   ¿äïÅô¿äö  ¿ä∫¿ä≈  ¿äÕ¿äŸ   ¿å1Åâ¿å6  ¿åR¿å]  ¿åe¿åq   ¿éÖπ¿éÍÄø/// Checks whether the given render object has the correct [runtimeType] to be
/// a child of this render object.
///
/// Does nothing if assertions are disabled.
///
/// Always returns true. ¿é˝¿è   ¿î	áÃ¿î  ¿î#¿î.  ¿î6¿îB   ¿õŸÇ≥¿úµÄŒ/// Insert child into this render object's child list after the given child.
///
/// If `after` is null, then this inserts the child at the start of the list,
/// and the child becomes the new [firstChild]. ¿úº¿ú«  ¿úœ¿ú€   ¿ûêÄá¿û◊?/// Append child to the end of this render object's child list. ¿û€¿ûÊ   ¿üÄí¿üjG/// Add all the children to the end of this render object's child list. ¿üq¿üÉ   ¿ü±Ñ]¿ü∂  ¿üÀ¿ü÷   ¿§Ä∆¿§Ñf/// Remove this child from the child list.
///
/// Requires the child to be present in the child list. ¿§ã¿§ñ   ¿§‹Ç3¿•c{/// Remove all their children from this render object's child list.
///
/// More efficient than removing them individually.   ¿ßÇŒ¿®=Å/// Move the given `child` in the child list to be after another child.
///
/// More efficient than removing and re-adding the child. Requires the child
/// to already be in the child list at some position. Pass null for `after` to
/// move the child to the start of the child list. ¿®B¿®M  ¿®U¿®a   ¿©ÂÅ)¿©ˆ  ¿©˝¿™  ¿©Â¿©Ê¿´Å¿´#   ¿´¿´¿¨"Å¿¨3   ¿¨"¿¨#¿≠,Å¿≠=  ¿≠K¿≠`  ¿≠,¿≠-¿ÆÛÅ¿ØA@/// The previous child before the given child in the child list. ¿ØM¿ØX   ¿∞Å¿∞N;/// The next child after the given child in the child list. ¿∞Y¿∞d   ¿±Ç'¿±/   ¿±¿± ¿≥8ä¿¥lÅ-/// Mixin for [RenderObject] that will call [systemFontsDidChange] whenever the
/// system fonts change.
///
/// System fonts can change when the OS installs or removes a font. Use this
/// mixin if the [RenderObject] uses [TextPainter] or [Paragraph] to correctly
/// update the text when it happens.  ¿∑H4¿∑M ¿∑w ¿¥§Ç†¿∑Ç1/// A callback that is called when system fonts have changed.
///
/// The framework defers the invocation of the callback to the
/// [SchedulerPhase.transientCallbacks] phase to ensure that the
/// [RenderObject]'s text layout is still valid when user interactions are in
/// progress (which usually take place during the [SchedulerPhase.idle] phase).
///
/// By default, [markNeedsLayout] is called on the [RenderObject]
/// implementing this mixin.
///
/// Subclass should override this method to clear any extra cache that depend
/// on font-related metrics.  ¿∂Ó¿∂Ô¿∂˚¿∂¸¿∑ÄÉO¿∑Ö    ¿∫”Åæ¿∫‰  ¿∫Î¿∫˙  ¿∫”¿∫‘¿ºïÄæ¿º¶   ¿ºï¿ºñ ¿ Ì0H¿ Ì= ¿ ÌX  îë <ÄÜÄ§Ä•Ä“Ä”Ä¸Å&ÅNÅvÅüÅ»Å…ÅﬁÅÛÅÙÇ"ÇAÇTÇkÇ}ÇçÇ°ÇÆÇæÇŒÇﬁÇˆÉÉÉ`ÉàÉâÉ—É’ÑÑgÑõÑüÑ≠Ñ±Ñ¸ÖAÖTÖëÖûÖØÖ√ÖƒÖ–ÖÒÖÛÖÙÜ)Ü-Ü~Ü ÜŒáá]á^átáxá ààYàmàqà¬ââbâ¨â∆â ääOä{ä|äûä§äÏãããOãPãxãyã∆åååNåTå†åæåøåÊåÏç7çÑç’çÒç˜ééé]é~é‚èèè+èaèhèlèmèîèÆè◊è˙êê&ê6êmêúêÃêÈêÚëëëWëuëõëÀëÃíídíØí÷ì#ìXìeì¢ì¿ì“ìˇîî îFî†î“ï&ïâï”ï‹ñññFñGñÑñπñ…óó&ó0ó1óvóÆóØó˛ò2òoòôòùòûòÏòÚô=ôäôÿööö)ö/öö†ö⁄õõ<õjõkõ∏õ‘õ‰úú!ú+úÉú≥ùùfùÆùµùËûûûûiûπûÌûÛüü	üVüpü•üøüË†††+†J†Y†ë†∂†ø†“†‹†‡†·°°°Y°®°¯¢/¢?¢g¢z¢Ñ¢Ö¢®¢«¢Ì£9£Ä£¨£„§
§7§D§q§w§{§|§∏§”§¯•5•6•x•≥•ˆ¶¶2¶X¶`¶r¶´¶ﬁß,ßAßMßSßàß€®®$®(®)®u®Ñ®ä®”©©F©L©ô©¨©π©€©ˆ™
™-™1™2™L™x™à™ü™∆™È´
´´@´c´Ñ´å´ü´©´ø´√´ƒ´Ÿ´¯¨¨,¨-¨Q¨W¨°¨Î≠
≠≠,≠G≠`≠f≠â≠û≠¢≠£≠æ≠ŸÆÆ2ÆTÆÄÆÑÆÖÆ÷ÆÂÆÎØ9ØáØ—∞∞∞S∞Y∞i∞î∞⁄±±±±W±]±©±¯≤G≤T≤Z≤©≤Ù≥≥≥$≥E≥^≥l≥r≥Ç≥™≥Œ≥˜¥¥M¥ã¥ì¥æ¥‚µµ)µVµáµèµ¢µ¨µ‰µ˛∂∂(∂,∂-∂}∂ë∂ó∂Ê∑/∑>∑D∑è∑ﬂ∏+∏M∏i∏ä∏£∏©∏“∏÷∏◊π*π0πÄπ…∫∫H∫N∫ô∫Èª5ªWªtªïªÆª¥ªﬁª‚ª„ºººoº™º∞º˝ΩOΩüΩÂΩÎΩ˚ææOæ\æ{æòæ∞æ¥æµøøUø•ø«øÕ¿ @¿ @`¿ @t¿ @z¿ @ø¿ A¿ A_¿ A≠¿ A¿ B¿ B¿ B\¿ B≠¿ B˙¿ CK¿ Cõ¿ CŸ¿ Cﬂ¿ CÔ¿ Cı¿ D@¿ DT¿ DŒ¿ E¿ Em¿ Eè¿ Eµ¿ Eª¿ Eÿ¿ Eı¿ Fc¿ Fd¿ Fá¿ F±¿ Fµ¿ F∂¿ F˛¿ G¿ GJ¿ GW¿ G¶¿ G÷¿ G⁄¿ G€¿ H
¿ H¿ Hb¿ H™¿ H·¿ I-¿ I}¿ Iª¿ Iˇ¿ J¿ JS¿ Jó¿ J¨¿ J≤¿ J˙¿ KC¿ Kå¿ K°¿ Kß¿ K¯¿ L@¿ LP¿ LV¿ L¶¿ LÁ¿ LÌ¿ M6¿ M<¿ MÜ¿ M”¿ N¿ Ng¿ N∑¿ Nˇ¿ OK¿ OÅ¿ Oñ¿ PL¿ Pq¿ Pé¿ P°¿ Pß¿ Pﬂ¿ P˚¿ Q:¿ QF¿ Qj¿ Që¿ Q‹¿ Q¿ Q˝¿ R`¿ Rs¿ Ry¿ R}¿ R~¿ Rµ¿ Rª¿ S
¿ S¿ SU¿ S[¿ S´¿ SÓ¿ SÙ¿ TD¿ Tè¿ T∂¿ Tº¿ U¿ UO¿ UU¿ U¶¿ U¨¿ UÛ¿ Vº¿ V·¿ V˛¿ W¿ W¿ WK¿ WÜ¿ W¢¿ W„¿ WÔ¿ X¿ X<¿ XÖ¿ Xô¿ X¶¿ Y	¿ Y¿ Y"¿ Y&¿ Y'¿ YQ¿ YW¿ Y¶¿ Y¨¿ YÒ¿ Y˜¿ ZG¿ Zä¿ Zê¿ Zﬂ¿ [*¿ [F¿ [L¿ [ú¿ [›¿ [„¿ \'¿ \-¿ \t¿ ]8¿ ]]¿ ]z¿ ]ç¿ ]ì¿ ]«¿ ]ˇ¿ ^¿ ^Z¿ ^f¿ ^ä¿ ^±¿ ^˙¿ _¿ _¿ _|¿ _è¿ _ï¿ _ô¿ _ö¿ _Ã¿ _“¿ `¿ `¿ `k¿ `ë¿ `ó¿ `Á¿ a.¿ a4¿ a{¿ aÅ¿ aŒ¿ b ¿ bp¿ b∂¿ cD¿ cá¿ c¨¿ c”¿ cÂ¿ cÈ¿ cÍ¿ d¿ d!¿ dp¿ dv¿ d«¿ dÌ¿ dÛ¿ e?¿ eê¿ e…¿ eœ¿ f ¿ fb¿ fh¿ fØ¿ gI¿ g•¿ gÂ¿ h¿ hB¿ hn¿ h¿ hé¿ hü¿ hØ¿ i¿ i¿ i-¿ i:¿ iG¿ iX¿ iâ¿ i¶¿ iæ¿ i—¿ i◊¿ i€¿ i‹¿ j¿ j¿ ja¿ jç¿ jì¿ j„¿ k,¿ k|¿ kÇ¿ kœ¿ l¿ l¿ l\¿ lb¿ lØ¿ m¿ mQ¿ mó¿ n¿ nF¿ nP¿ nf¿ n¿ n´¿ nΩ¿ n¡¿ n¬¿ nŒ¿ oZ¿ o\¿ o]¿ oà¿ oå¿ oÿ¿ p¿ p¿ pC¿ pG¿ pó¿ p„¿ q¿ q¿ qZ¿ q™¿ q˜¿ q˚¿ rK¿ rô¿ rÁ¿ s4¿ sA¿ sE¿ sç¿ s‹¿ t&¿ tg¿ t∑¿ u¿ uU¿ uõ¿ u∑¿ uª¿ v
¿ vU¿ v§¿ vÓ¿ w$¿ wt¿ wå¿ wê¿ wﬁ¿ x,¿ x{¿ xï¿ xô¿ xÈ¿ y:¿ yE¿ yb¿ y≥¿ y˚¿ z¿ z¿ z]¿ zq¿ zr¿ z¥¿ zÕ¿ zŒ¿ z¸¿ {¿ {E¿ {K¿ {ö¿ {∂¿ {º¿ |
¿ |Z¿ |©¿ |Ú¿ }+¿ }|¿ }Õ¿ }ﬁ¿ }‰¿ ~2¿ ~¿ ~∏¿ ~æ¿  ¿ ¿ B¿ r¿ y¿ ì¿ ¨¿ ∞¿ ≤¿ ≥¿ ¯¿ ¸¿ ÄS¿ Äî¿ Äï¿ Ä–¿ Ä‘¿ Å¿ ÅS¿ ÅT¿ Åç¿ ÅÀ¿ Å‰¿ Ç$¿ Ç\¿ Çà¿ Ç«¿ Ç˙¿ É'¿ É=¿ ÉF¿ ÉL¿ ÉM¿ Éi¿ Éû¿ É§¿ É®¿ É©¿ É«¿ É»¿ Ñ¿ Ñ2¿ Ñ3¿ Ñ?¿ ÑR¿ Ñí¿ Ñ ¿ Ñˆ¿ ÖD¿ ÖJ¿ ÖK¿ Ög¿ Öü¿ Ö•¿ ÖŒ¿ Ö“¿ Ö‘¿ Ö’¿ Ü¿ Ü¿ Ü`¿ Ü±¿ Ü˛¿ á¿ á¿ áe¿ á¨¿ áˆ¿ à"¿ àk¿ àπ¿ â	¿ âZ¿ â®¿ â¿ ä6¿ äÑ¿ äœ¿ ã¿ ã[¿ ã©¿ ãˆ¿ ã˙¿ åI¿ åì¿ å‡¿ å˛¿ ç¿ çS¿ ç°¿ ç¿ é=¿ éâ¿ é◊¿ è¿ è¿ èh¿ è∂¿ ê¿ êP¿ ê¿ ê≤¿ ê“¿ êÿ¿ ë%¿ ër¿ ëò¿ ë™¿ ë«¿ ëÈ¿ í¿ í(¿ í.¿ ín¿ í¶¿ í“¿ ì¿ ìD¿ ìi¿ ì¿ ìà¿ ìé¿ ìí¿ ìì¿ ì„¿ î¿ î¿ î^¿ î´¿ î¯¿ ï¿ ï¿ ïd¿ ï±¿ ï˙¿ ñ$¿ ñ%¿ ñk¿ ñq¿ ñπ¿ ñœ¿ ñ˛¿ ñˇ¿ óV¿ ó\¿ ó±¿ óﬁ¿ ò¿ ò¿ ò[¿ òa¿ ò¢¿ ò“¿ ò”¿ ô¿ ô¿ ôo¿ ôñ¿ ôµ¿ ô€¿ ô¯¿ ö¿ ö-¿ ö3¿ ö7¿ ö8¿ ö}¿ ö®¿ ö√¿ öÈ¿ õ¿ õ¿ õ¿ õ4¿ õK¿ õh¿ õl¿ õm¿ õπ¿ ú¿ úA¿ úF¿ úè¿ ú€¿ ù$¿ ù\¿ ùa¿ ùù¿ ùÌ¿ û;¿ ûá¿ ûú¿ û√¿ ü ¿ ü¿ ü?¿ üE¿ üÖ¿ üã¿ üŒ¿ üÍ¿ †¿ †>¿ †e¿ †f¿ †®¿ †Æ¿ †˛¿ °I¿ °¿ °Ö¿ °Œ¿ °Â¿ °˛¿ ¢1¿ ¢C¿ ¢v¿ ¢´¿ ¢Á¿ £¿ £&¿ £0¿ £E¿ £Q¿ £r¿ £™¿ £’¿ £ﬁ¿ £‰¿ £Ù¿ §¿ §'¿ §1¿ §;¿ §j¿ §ì¿ §÷¿ •¿ •V¿ •å¿ •¥¿ •‡¿ ¶¿ ¶g¿ ¶|¿ ¶ä¿ ¶ñ¿ ¶…¿ ß¿ ß+¿ ß7¿ ßA¿ ßå¿ ßØ¿ ß◊¿ ßﬂ¿ ß‡¿ ßÚ¿ ®¿ ®.¿ ®:¿ ®o¿ ®å¿ ®î¿ ®˝¿ ©¿ ©3¿ ©E¿ ©h¿ ©ê¿ ©•¿ ©±¿ ©Ã¿ ©Ú¿ ©˙¿ ™ ¿ ™¿ ™¿ ™S¿ ™§¿ ™Ò¿ ´@¿ ´m¿ ´°¿ ´¢¿ ´–¿ ¨¿ ¨/¿ ¨C¿ ¨S¿ ¨â¿ ¨ª¿ ¨Œ¿ ¨ÿ¿ ¨‚¿ ¨Ù¿ ≠¿ ≠)¿ ≠;¿ ≠t¿ ≠â¿ ≠ï¿ ≠õ¿ ≠ü¿ ≠†¿ ≠Ú¿ Æ*¿ Æ0¿ Æ~¿ Æí¿ Æ≤¿ ÆÀ¿ Ø/¿ Ø5¿ Øô¿ Ø„¿ ∞'¿ ∞N¿ ∞V¿ ∞\¿ ∞å¿ ∞ø¿ ∞„¿ ∞È¿ ±_¿ ±x¿ ±ú¿ ±¢¿ ±¶¿ ±ß¿ ±„¿ ±‰¿ ≤!¿ ≤'¿ ≤f¿ ≤l¿ ≤™¿ ≤À¿ ≤˚¿ ≥¿ ≥¿ ≥T¿ ≥Z¿ ≥£¿ ≥Û¿ ¥D¿ ¥J¿ ¥ì¿ ¥©¿ ¥¬¿ ¥ı¿ µ¿ µ9¿ µn¿ µ©¿ µ⁄¿ µÁ¿ µÒ¿ ∂¿ ∂¿ ∂3¿ ∂j¿ ∂ï¿ ∂û¿ ∂§¿ ∂Æ¿ ∂¿¿ ∂·¿ ∂ˆ¿ ∑¿ ∑B¿ ∑o¿ ∑p¿ ∑∞¿ ∏!¿ ∏R¿ ∏Æ¿ ∏·¿ π¿ π1¿ πm¿ πÇ¿ πΩ¿ πÀ¿ πﬁ¿ ∫
¿ ∫¿ ∫ ¿ ∫(¿ ∫]¿ ∫y¿ ∫Å¿ ∫È¿ ∫˘¿ ª¿ ª-¿ ªB¿ ªN¿ ªi¿ ªè¿ ªó¿ ªù¿ ª°¿ ª¢¿ ªÔ¿ ªı¿ ºF¿ ºñ¿ º«¿ Ω¿ Ω[¿ Ω®¿ Ω∫¿ Ω¿¿ æ	¿ æ&¿ æ_¿ æÇ¿ æÉ¿ æ√¿ æ…¿ ø¿ øJ¿ øñ¿ øæ¿ øø¿ ¿¿ ¿\¿ ¿b¿ ¿≥¿ ¿Â¿ ¡4¿ ¡N¿ ¡T¿ ¡•¿ ¡ı¿ ¬>¿ ¬\¿ ¬b¿ ¬ù¿ ¬È¿ √9¿ √_¿ √ü¿ √∆¿ √„¿ ƒ¿ ƒ¿ ƒ¿ ƒ=¿ ƒì¿ ƒ∏¿ ≈7¿ ≈à¿ ≈±¿ ≈π¿ ≈„¿ ∆¿ ∆#¿ ∆K¿ ∆Q¿ ∆U¿ ∆V¿ ∆|¿ ∆°¿ ∆»¿ ∆Â¿ ∆È¿ ∆Í¿ «¿ «T¿ «U¿ «°¿ «Ø¿ «µ¿ «Í¿ »3¿ »9¿ »Ü¿ »¡¿ … ¿ …¿ …O¿ …i¿ …å¿ …ö¿ …†¿ …π¿  ¿  ¿  8¿  H¿  k¿  ~¿  à¿  í¿  ‚¿ À)¿ ÀO¿ Àá¿ À«¿ ÀÍ¿ ÀÙ¿ À¸¿ Ã*¿ Ã_¿ Ã¿ Ãá¿ ÃÛ¿ Õ¿ Õ¿ Õ;¿ ÕP¿ Õ\¿ Õw¿ Õù¿ Õ•¿ Õ´¿ ÕØ¿ Õ∞¿ Õº¿ ÕÓ¿ Œ¿ Œ?¿ Œb¿ Œi¿ Œm¿ Œn¿ Œz¿ Œø¿ ŒÍ¿ œK¿ œO¿ œP¿ œe¿ œf¿ œ†¿ œø¿ œ¿¿ œﬂ¿ –$¿ –E¿ –V¿ –Z¿ –[¿ –∏¿ –π¿ —¿ —¿ —W¿ —¶¿ —…¿ —Ù¿ “¿ “-¿ “`¿ “}¿ “~¿ “±¿ “œ¿ “’¿ “Ÿ¿ “⁄¿ ”¿ ”¿ ”X¿ ”©¿ ”À¿ ”›¿ ”¸¿ ‘2¿ ‘H¿ ‘ó¿ ‘Ë¿ ’)¿ ’*¿ ’]¿ ’s¿ ’y¿ ’}¿ ’~¿ ’√¿ ÷
¿ ÷X¿ ÷ß¿ ◊¿ ◊¿ ◊K¿ ◊Q¿ ◊†¿ ◊Ì¿ ÿ:¿ ÿÖ¿ ÿ“¿ Ÿ!¿ Ÿr¿ Ÿí¿ Ÿò¿ ŸŸ¿ Ÿ˝¿ ⁄¿ ⁄T¿ ⁄£¿ ⁄©¿ ⁄‘¿ ⁄˝¿ €%¿ €M¿ €¶¿ €¿¿ €Ÿ¿ €˝¿ ‹¿ ‹ ¿ ‹@¿ ‹F¿ ‹J¿ ‹K¿ ‹î¿ ‹ö¿ ‹Î¿ ‹˝¿ ›¿ ›R¿ ›°¿ ›…¿ ›Ò¿ ﬁ¿ ﬁq¿ ﬁé¿ ﬁß¿ ﬁÀ¿ ﬁ—¿ ﬁÓ¿ ﬂ¿ ﬂ
¿ ﬂ¿ ﬂ¿ ﬂW¿ ﬂ]¿ ﬂm¿ ﬂs¿ ﬂô¿ ﬂ¡¿ ﬂˆ¿ ‡¿ ‡¿ ‡¿ ‡T¿ ‡Z¿ ‡©¿ ‡¯¿ ·I¿ ·O¿ ·ã¿ ·û¿ ·Ω¿ ·€¿ ·˙¿ ‚¿ ‚H¿ ‚ñ¿ ‚ú¿ ‚º¿ ‚ÿ¿ ‚˘¿ „)¿ „I¿ „m¿ „q¿ „s¿ „t¿ „µ¿ „π¿ „Ê¿ ‰)¿ ‰*¿ ‰R¿ ‰V¿ ‰ñ¿ ‰„¿ Â2¿ ÂÄ¿ ÂÕ¿ ÂÙ¿ Â¯¿ ÊH¿ Êô¿ Êﬂ¿ Êˇ¿ Á¿ ÁQ¿ Áù¿ Á’¿ Ë ¿ Ëb¿ Ëh¿ Ë∏¿ Ë˙¿ È ¿ È¿ È¿ È]¿ Èõ¿ È∏¿ Èπ¿ Í¿ ÍU¿ Ín¿ Ít¿ Í≈¿ Î¿ Î_¿ Î~¿ ÎÑ¿ ÎÀ¿ Ï¿ Ïh¿ Ïn¿ Ï~¿ ÏÑ¿ ÏÕ¿ Ì¿ Ì-¿ Ì/¿ Ì0¿ Ìz¿ Ì{¿ Ìù¿ Ì°¿ ÌÂ¿ Ó¿ Ó	¿ ÓL¿ ÓP¿ Óú¿ ÓÏ¿ Ô7¿ ÔW¿ Ô[¿ Ô¶¿ ÔÙ¿ =¿ ç¿ ⁄¿ Ò)¿ Òy¿ Ò†¿ Ò§¿ ÒË¿ Ú¿ Ú¿ Ú$¿ Ú(¿ Úu¿ Ú≈¿ Û¿ Û0¿ Û4¿ ÛÄ¿ ÛŒ¿ Ù¿ Ùo¿ Ù≠¿ Ù±¿ Ùÿ¿ Ù‹¿ ı"¿ ıp¿ ıΩ¿ ˆ¿ ˆW¿ ˆ•¿ ˆı¿ ˜C¿ ˜ã¿ ˜⁄¿ ¯'¿ ¯r¿ ¯≥¿ ¯∑¿ ˘¿ ˘V¿ ˘ß¿ ˘„¿ ˘Á¿ ˘ˆ¿ ˘˙¿ ˙A¿ ˙à¿ ˙§¿ ˙®¿ ˙ˆ¿ ˚G¿ ˚ì¿ ˚‡¿ ¸%¿ ¸f¿ ¸j¿ ¸∫¿ ¸Ì¿ ¸Ò¿ ˝¿ ˝	¿ ˝T¿ ˝É¿ ˝á¿ ˝‘¿ ˛"¿ ˛s¿ ˛ª¿ ˇ¿ ˇS¿ ˇ†¿ ˇ≈¿ ˇ…¿ ˇ˜¿ ˇ˚¿ L¿ ù¿ Ë¿8¿â¿†¿§¿Ù¿¿¿H¿ñ¿ß¿´¿¯¿G¿K¿~¿Ç¿‘¿$¿s¿æ¿	¿¿[¿®¿˜¿C¿í¿·¿¿g¿∑¿ƒ¿¿J¿]¿â¿»¿Û¿	¿	-¿	6¿	<¿	Å¿	Æ¿	≤¿	≥¿
¿
Q¿
ú¿
À¿
—¿¿c¿Ø¿Œ¿‘¿ ¿&¿6¿<¿i¿¿ñ¿º¿“¿Ú¿¿5¿=¿A¿B¿h¿n¿´¿«¿€¿Î¿¿¿)¿>¿B¿C¿b¿c¿õ¿°¿Ï¿;¿Ü¿≈¿¿^¿v¿|¿«¿Ó¿Ù¿0¿A¿T¿q¿ù¿Î¿Ò¿¿ ¿m¿¿≠¿¿¿„¿Q¿_¿l¿â¿ú¿¶¿™¿´¿∑¿∏¿Ë¿Ó¿;¿ä¿⁄¿¿¿i¿ò¿Ë¿&¿w¿√¿¿J¿d¿e¿¶¿¨¿¸¿-¿d¿ã¿∂¿›¿„¿Á¿Ë¿"¿(¿x¿¿¿˝¿¿Q¿ú¿Ï¿;¿Å¿—¿◊¿¿o¿é¿©¿ª¿º¿¿¿"¿c¿p¿ö¿º¿ﬁ¿ˇ¿¿$¿(¿)¿c¿i¿∫¿Ú¿ˇ¿¿¿X¿^¿û¿≈¿ﬁ¿ﬂ¿ '¿ -¿ |¿ œ¿ ‡¿ Ì¿!¿!8¿!H¿!h¿!å¿!©¿!±¿!˙¿"¿"¿"¿"4¿"K¿"q¿"ë¿"´¿"ø¿"‹¿"‚¿"˚¿"ˇ¿# ¿#R¿#X¿#ß¿#˙¿$¿$¿$?¿$b¿$ä¿$∞¿$‘¿$Ù¿%¿%+¿%?¿%U¿%[¿%r¿%ò¿%∏¿%º¿%Ω¿&¿&¿&W¿&ç¿&é¿&Ã¿&“¿&¿&ˆ¿'¿'¿'`¿'x¿'y¿'∆¿'¯¿(¿((¿(L¿(Å¿(∂¿)¿)1¿)a¿)ì¿)¸¿*K¿*ö¿*Â¿+¿+v¿+¿+á¿+ã¿+å¿+◊¿+›¿,*¿,7¿,q¿,ó¿,ò¿,„¿,È¿-6¿-C¿-}¿-£¿-§¿-ﬂ¿-Â¿.2¿.>¿.Ç¿.≠¿.Æ¿.ı¿/>¿/å¿/©¿/«¿0	¿06¿0F¿0|¿0ù¿0∞¿0∫¿0ÿ¿0Ë¿1¿11¿1;¿1N¿1R¿1S¿1£¿1Ø¿1µ¿1ı¿1˚¿2A¿2~¿2û¿2ü¿2≈¿2∆¿2¸¿3¿3R¿3¢¿3‰¿3Í¿48¿4_¿4u¿4Ö¿4°¿4Ÿ¿5¿5F¿5s¿5Ö¿5º¿5…¿5’¿5›¿5ﬁ¿6¿6[¿6¨¿6ƒ¿6˙¿7¿7&¿7.¿7/¿7\¿7Ö¿8 ¿8\¿8í¿8Â¿92¿9Å¿9©¿:¿:-¿:D¿:N¿:O¿:Ü¿:Ã¿;¿;¿;=¿;N¿;X¿;`¿;a¿;Ø¿<"¿<Ñ¿<ö¿<õ¿<¡¿<˘¿=J¿=f¿=Ã¿=Ÿ¿>¿>8¿>J¿>Å¿>é¿>ª¿?¿?&¿?]¿?j¿?v¿?~¿?¿?•¿?›¿@A¿@§¿@—¿A¿A¿AL¿AY¿A»¿A‘¿A‹¿A›¿BG¿Bï¿B ¿C'¿Cà¿C∑¿C∏¿CÓ¿Cˇ¿D&¿DQ¿DÅ¿Dë¿D∆¿D—¿D¸¿Eo¿Eå¿E¡¿EÃ¿F¿F8¿FT¿Fâ¿Fî¿Fß¿G+¿Gé¿Gô¿G£¿G≠¿G¿¿Gƒ¿G≈¿H¿HC¿HI¿Hö¿HÁ¿I0¿I6¿IÅ¿I∫¿J
¿J[¿Jp¿J}¿J•¿J≈¿J’¿JÚ¿K¿K¿K(¿K,¿K-¿Kj¿Kp¿K∞¿K–¿Kˆ¿L¿L¿Ln¿Lt¿L©¿LØ¿LÂ¿M¿M¿MK¿MQ¿Mù¿M”¿MŸ¿N¿NM¿Nî¿N•¿N ¿NÁ¿O¿O¿Oe¿O¨¿O·¿P!¿PQ¿Pm¿PÜ¿På¿P≥¿Pﬁ¿Q¿Q¿QA¿QÄ¿QØ¿Q ¿Q‚¿QË¿R7¿RÄ¿R≥¿Rÿ¿R˙¿S ¿S¿S¿SI¿SO¿Sü¿S ¿S–¿T¿TT¿Tr¿TÉ¿Tï¿T±¿Tƒ¿U ¿U¿U¿UE¿UK¿Uú¿UË¿V5¿Vl¿Vr¿V®¿V∆¿V‹¿VÏ¿W	¿W¿W&¿W9¿W=¿WY¿WZ¿W}¿W~¿W–¿X¿XJ¿XK¿Xé¿Xî¿X’¿X˚¿Y¿Y(¿YH¿Y≠¿Y≥¿YÕ¿Y—¿YÓ¿YÔ¿Z2¿Zv¿Zº¿[¿[9¿[F¿[o¿[p¿[Ø¿[¿\¿\¿\\¿\ù¿\‹¿]!¿]U¿]Ñ¿]¡¿]Ê¿^!¿^4¿^:¿^X¿^Ä¿^ª¿^ﬁ¿^˘¿_<¿_R¿_Z¿_`¿_å¿_ù¿_°¿_¢¿_Û¿`D¿`ä¿`ê¿`§¿`™¿`˚¿aI¿añ¿a’¿a€¿b+¿b`¿bf¿b∂¿bˇ¿cO¿cú¿cÈ¿d6¿dp¿dv¿d∑¿e¿eH¿eN¿ee¿ek¿e¥¿e˛¿fM¿få¿f…¿g¿g6¿g<¿gh¿g¥¿gœ¿gˆ¿h¿hQ¿h_¿he¿hä¿h•¿h¡¿i¿i]¿iÅ¿i¢¿i™¿i∏¿iæ¿i„¿j¿j¿j*¿jE¿jY¿jä¿j‘¿j‡¿j˜¿k¿k3¿kY¿ka¿kg¿kk¿kl¿kª¿kÕ¿k”¿l¿lh¿l∑¿lË¿lÓ¿m¿m)¿mJ¿mq¿mä¿m´¿mŸ¿n¿n"¿n/¿n[¿na¿nÑ¿nà¿nâ¿nÀ¿o¿oW¿o]¿o¶¿o¨¿o⁄¿p¿p"¿p?¿pC¿pD¿pf¿pã¿p´¿p›¿p„¿pÁ¿pË¿q¿q3¿qA¿qG¿qì¿qø¿qˆ¿r(¿r`¿rf¿rj¿rk¿r®¿rË¿s¿s¿s¿sW¿s¿sÉ¿sÑ¿s–¿s÷¿t#¿tI¿tO¿tì¿t¥¿t—¿tÁ¿u¿u3¿uZ¿ux¿uà¿uÆ¿u¡¿uÀ¿uı¿u˘¿u˙¿v'¿vG¿vn¿võ¿vø¿vÍ¿w¿w&¿wJ¿wn¿w§¿w≈¿w‰¿x¿x%¿x8¿xB¿xL¿xc¿xÖ¿xû¿x—¿x◊¿xÁ¿y¿yB¿yg¿yz¿yÑ¿yû¿y¥¿y∏¿yπ¿yÍ¿y¿z?¿zé¿zﬁ¿{¿{¿{`¿{∞¿|¿|M¿|ë¿|·¿}¿}"¿}o¿}∫¿~¿~¿~V¿~•¿~Ú¿¿L¿ñ¿≥¿Í¿Ä¿Ä/¿Äb¿Ä∞¿Ä∫¿Äœ¿Ä€¿Ä¸¿Å¿Å?¿ÅH¿ÅN¿Åy¿Åö¿Åª¿Ç	¿Ç#¿ÇÉ¿Ç∑¿Ç˚¿É¿ÉH¿É[¿Ég¿Éq¿É≤¿É˚¿Ñ[¿Ñ¸¿Ö ¿Ö>¿Öí¿Ö„¿Ü¿Ü:¿ÜI¿ÜV¿Ü`¿ÜÑ¿Üç¿Üï¿Üπ¿Ü›¿áU¿á∑¿á«¿áˆ¿à	¿à¿à¿àL¿à^¿à¨¿àÌ¿â¿âL¿âò¿âª¿â’¿ä¿ä4¿ä[¿äp¿ä|¿ä}¿ä∞¿äﬁ¿ã¿ã ¿ã!¿ãZ¿ãÄ¿ãà¿ãñ¿ãú¿ãº¿å
¿åY¿åß¿åŸ¿ç¿ç¿ç;¿ç_¿çä¿çö¿çæ¿ç›¿éI¿éQ¿éd¿én¿éá¿éô¿éø¿é‘¿é‡¿éÏ¿è¿è¿èE¿è\¿èj¿èÖ¿è∫¿è¬¿è‘¿è˚¿ê¿ê¿ê"¿êO¿ê_¿êÉ¿êπ¿ê⁄¿êÌ¿ê˜¿ë¿ë¿ë:¿ëL¿ëv¿ëã¿ëó¿ë∞¿ë„¿ëÈ¿ë˘¿í/¿íT¿íy¿íå¿íñ¿í∞¿í∆¿í«¿í˛¿ì"¿ì(¿ì,¿ì-¿ìy¿ì¬¿î¿î[¿î¨¿îŸ¿îÊ¿ï¿ï¿ïP¿ï¿ïÖ¿ïÕ¿ñ¿ñ^¿ñd¿ñ¥¿ó¿ó2¿ó8¿óà¿óŒ¿ò¿ò0¿ò=¿ò`¿òa¿ò†¿ò‚¿òË¿ô7¿ôÇ¿ôÕ¿ö¿ö¿öK¿ö`¿öf¿ö∑¿õ¿õ2¿õ?¿õW¿õX¿õö¿õ†¿õÔ¿ú:¿úÖ¿úæ¿úƒ¿ù¿ùe¿ù≥¿û¿û¿û¿ûg¿ûµ¿û˙¿üJ¿üì¿üÀ¿üÿ¿ü¿üÒ¿†8¿†à¿†’¿°!¿°=¿°C¿°î¿°‚¿¢3¿¢|¿¢Ç¿¢”¿£#¿£)¿£_¿£l¿£Ω¿£‡¿§¿§.¿§W¿§a¿§≥¿§√¿§Ô¿§ı¿§˘¿§˙¿•¿•	¿•L¿•R¿•ü¿•¨¿•‰¿¶	¿¶
¿¶=¿¶C¿¶ê¿¶ú¿¶ﬁ¿ß¿ß	¿ßO¿ßU¿ß¶¿ßÔ¿®@¿®R¿®X¿®®¿®˛¿©D¿©ò¿©¬¿©»¿™¿™*¿™0¿™à¿™Ø¿™∞¿™˝¿´6¿´<¿´å¿´©¿¨¿¨¿¨N¿¨T¿¨¢¿¨Ò¿≠¿≠!¿≠r¿≠¿¿≠Õ¿≠˘¿≠˙¿Æ¿Æ¿Æ[¿Æa¿Æ∞¿Æ∂¿Ø¿ØP¿Ø°¿Ø¿∞;¿∞K¿∞Q¿∞û¿∞»¿∞Œ¿±!¿±r¿±ø¿≤¿≤$¿≤{¿≤…¿≥¿≥:¿≥`¿≥d¿≥e¿≥™¿≥∞¿¥ ¿¥M¿¥ö¿¥È¿µ<¿µä¿µ–¿∂¿∂j¿∂ü¿∂•¿∂Ú¿∑@¿∑ä¿∑÷¿∏%¿∏t¿∏ì¿∏ô¿∏Ë¿π5¿πÅ¿πé¿πõ¿ππ¿∫¿∫;¿∫?¿∫@¿∫M¿∫u¿∫Å¿∫õ¿∫„¿ª*¿ªK¿ªR¿ªu¿ªy¿ªz¿ªÃ¿ªÕ¿º!¿º'¿ºx¿ºÀ¿º€¿º·¿Ω¿Ω1¿ΩM¿Ω]¿ΩÄ¿Ωì¿Ωù¿Ω∞¿Ω¥¿Ωµ¿æ¿æH¿æN¿æû¿æÓ¿æ˚¿ø¿ø=¿øÑ¿øÀ¿¿¿¿W¿¿å¿¿í¿¿◊¿¡¿¡V¿¡Ä¿¡ù¿¡ƒ¿¡“¿¡ÿ¿¬ ¿¬"¿¬R¿¬Ç¿¬í¿¬ö¿¬õ¿¬Ú¿√#¿√3¿√;¿√A¿√~¿√ó¿√“¿√ÿ¿√‹¿√›¿ƒ¿ƒb¿ƒh¿ƒπ¿ƒ·¿ƒÁ¿≈&¿≈c¿≈Å¿≈ﬂ¿≈˝¿∆¿∆¿∆$¿∆L¿∆Z¿∆`¿∆ò¿∆∑¿∆‡¿«¿«*¿«L¿«T¿«\¿«ì¿«≥¿«π¿»¿»S¿»ü¿»ˆ¿…A¿…v¿…ë¿…º¿…Í¿ ¿ -¿ h¿ ì¿ ´¿ ∏¿ „¿ È¿ Ì¿ Ó¿À-¿À3¿ÀÑ¿À–¿Ã¿ÃV¿Ã\¿Ãí¿Ãò¿Ã‰¿Õ3¿Õx¿Õƒ¿Õˇ¿Œ¿Œ2¿ŒB¿Œ^¿Œq¿Œ{¿Œé¿Œí¿Œ≠¿ŒÆ¿ŒÌ¿ŒÛ¿œD¿œê¿œ›¿–¿–¿–R¿–¿–ï¿–•¿–—¿–‰¿–Ó¿—¿—¿—1¿—2¿—y¿—¿—ƒ¿“¿“a¿“∞¿“»¿“Œ¿”¿”U¿”[¿”õ¿”Ë¿‘*¿‘0¿‘@¿‘F¿‘î¿‘Ê¿‘ˆ¿’¿’-¿’c¿’z¿’à¿’é¿’¶¿’Ï¿÷¿÷B¿÷T¿÷Ç¿÷…¿÷”¿÷Ë¿÷Ù¿◊7¿◊m¿◊û¿◊π¿◊Ê¿ÿ¿ÿ¿ÿ=¿ÿ]¿ÿj¿ÿ|¿ÿ™¿Ÿ¿Ÿ¿Ÿ&¿Ÿ2¿Ÿ|¿Ÿ∆¿⁄
¿⁄H¿⁄Q¿⁄é¿⁄Õ¿⁄Ë¿€¿€¿€¿€ ¿€!¿€n¿€{¿€Å¿€“¿‹&¿‹q¿‹¿¿›	¿›¿›`¿›∞¿›”¿›Ÿ¿›È¿›Ô¿ﬁ?¿ﬁ~¿ﬁ®¿ﬁ≈¿ﬁ˚¿ﬂ1¿ﬂ?¿ﬂE¿ﬂm¿ﬂ≥¿ﬂ’¿‡	¿‡L¿‡Ç¿‡¨¿‡«¿‡Ù¿·¿·"¿·/¿·G¿·M¿·Q¿·R¿·¢¿·¿‚A¿‚ä¿‚√¿‚Ê¿‚¸¿„¿„S¿„{¿„¶¿„«¿„Í¿‰¿‰=¿‰î¿‰•¿‰Ø¿‰‡¿Â<¿ÂM¿ÂW¿Âx¿ÂÄ¿Âö¿Â†¿Â§¿Â•¿Â¿Âˆ¿ÊD¿Êl¿Êr¿Ê∂¿ÊÓ¿Á¿Á$¿ÁI¿Áo¿Áé¿Á∂¿Á⁄¿ÁÛ¿Ë¿Ë ¿Ë!¿Ëf¿Ëß¿Ëπ¿Ëø¿È¿È5¿ÈR¿Èr¿Èà¿È≠¿È”¿ÈÚ¿ÍE¿Íg¿Íã¿Í°¿Í•¿Í¶¿ÍÈ¿Î¿Î¿Î8¿Îp¿Î∂¿Î“¿Ï"¿Ï?¿ÏL¿Ïh¿Ï≥¿ÏŒ¿Ï€¿ÏÁ¿ÏÔ¿Ì¿Ì¿ÌX¿Ì¶¿ÌÙ¿ÓC¿Óè¿Ó‹¿Ô%¿Ô=¿ÔK¿ÔQ¿Ôá¿Ô∫¿ÔÃ¿Ô˛¿L¿V¿k¿w¿ò¿∞¿€¿‰¿Í¿˙¿Ò#¿ÒI¿Ò}¿Ò•¿Ò€¿Ò¸¿Ú"¿Ú0¿Ú>¿Ú`¿Úú¿Ú∏¿Û¿Û)¿Û:¿Ûa¿ÛÉ¿Ûî¿Û¥¿ÛÍ¿Û˚¿Ù¿Ùl¿Ù¿¿ı¿ı¿ı.¿ıÇ¿ıì¿ı£¿ıØ¿ıπ¿ıÒ¿ˆ	¿ˆW¿ˆo¿ˆ|¿ˆò¿ˆÈ¿˜¿˜*¿˜F¿˜î¿˜·¿¯!¿¯.¿¯C¿¯ì¿¯†¿¯¨¿¯¥¿¯«¿¯—¿¯˘¿˘	¿˘,¿˘\¿˘|¿˘º¿˘œ¿˘Ÿ¿˘Ú¿˙¿˙H¿˙R¿˙p¿˙…¿˚!¿˚:¿˚e¿˚k¿˚{¿˚û¿˚Œ¿˚Ú¿¸¿¸¿¸E¿¸i¿¸o¿¸s¿¸t¿¸¿¿˝
¿˝¿˝`¿˝y¿˝ë¿˝í¿˝Õ¿˛¿˛¿˛W¿˛]¿˛©¿˛Ó¿ˇ<¿ˇâ¿ˇØ¿ˇµ¿ ¿ S¿ °¿ ∏¿ æ¿
¿T¿£¿’¿¿¿_¿z¿Ä¿–¿¿¿i¿µ¿¿J¿ñ¿œ¿¿?¿C¿D¿ã¿ë¿·¿-¿~¿ó¿ù¿‰¿1¿}¿Õ¿¿:¿m¿è¿†¿§¿•¿Â¿	"¿	(¿	r¿	ô¿	ü¿	Ï¿
0¿
P¿
e¿
k¿
∑¿¿T¿£¿µ¿Ë¿¿3¿O¿Ö¿´¿»¿–¿÷¿¿m¿å¿ﬂ¿Â¿¿"¿(¿Z¿û¿Î¿Ò¿¿¿¿¿T¿ñ¿◊¿›¿¿¿_¿Ü¿å¿‹¿)¿y¿≥¿ˇ¿ ¿G¿ñ¿‚¿.¿¿À¿¿#¿)¿t¿¡¿¿(¿.¿¿Õ¿¿k¿∫¿ˇ¿¿¿¿g¿£¿È¿Í¿˘¿˙¿A¿f¿l¿≥¿ ¿–¿¿=¿Z¿p¿ï¿ø¿ﬂ¿¿.¿[¿}¿Å¿Ç¿”¿Ÿ¿$¿@¿F¿è¿⁄¿)¿q¿¡¿¿¿$¿*¿z¿ç¿ì¿°¿Ë¿˙¿G¿¿ê¿±¿◊¿ˆ¿ ¿¿"¿=¿G¿O¿Y¿k¿x¿ø¿‡¿‰¿Â¿ :¿ @¿ ã¿ ∆¿ Ã¿!¿!¿!Y¿!î¿!Ω¿!À¿!—¿"¿"?¿"`¿"í¿"ò¿"ú¿"ù¿"À¿#¿#¿#<¿#m¿#≠¿#Û¿$¿$É¿$˜¿% ¿%¿%1¿%5¿%6¿%v¿%†¿%ª¿%º¿%·¿%˛¿%ˇ¿&*¿&0¿&~¿&¬¿&È¿&Ô¿'=¿'I¿'o¿'à¿'°¿'ß¿'∏¿'º¿'Ω¿(¿(¿([¿(a¿(™¿(ˆ¿)¿)!¿)C¿)Z¿)É¿)°¿)©¿)≠¿)Æ¿)ˆ¿)¸¿*C¿*î¿*¿¿*‰¿+¿+8¿+o¿+õ¿+©¿+Ø¿+∞¿+˚¿,E¿,ï¿,·¿,‚¿-\¿-]¿-¿-À¿.¿.8¿.9¿.•¿.√¿.ƒ¿/¿/c¿/≠¿/À¿0*¿0b¿0q¿0y¿0¢¿0Ù¿1E¿1t¿1û¿1∆¿1Œ¿1œ¿1Í¿2@¿2Ö¿2ÿ¿3*¿3s¿3É¿3ã¿3ë¿3ÿ¿4)¿4m¿4º¿5¿5[¿5m¿5∏¿5Í¿5¿6¿6@¿6[¿6≥¿6‰¿7
¿7¿7¿7¿7¿7Z¿7v¿7¿¿7ÿ¿8&¿8x¿8Ü¿8å¿8•¿8ﬂ¿8Â¿9%¿9n¿9≤¿9π¿9“¿9ˆ¿9¸¿:3¿:ú¿:÷¿;¿;¿;0¿;n¿;t¿;ù¿;·¿<¿<`¿<v¿<ò¿<ü¿<∏¿<‹¿<‚¿=/¿=ô¿=ù¿=û¿=Í¿>¿>;¿>_¿>f¿> ¿>À¿?¿?m¿?»¿@"¿@Ü¿@ﬂ¿A/¿A°¿B4¿Bò¿C¿CX¿Cì¿C∞¿D¿D6¿Dh¿Dq¿DÆ¿D”¿Dı¿E!¿EK¿E}¿Eá¿Eè¿EÌ¿F¿F(¿F]¿Fg¿Fµ¿G¿G"¿GW¿Gê¿G°¿GÀ¿G’¿G›¿H¿Hd¿Hô¿I
¿Il¿I¢¿IΩ¿J¿J¿J¿J[¿Je¿Jm¿Ju¿Jv¿J√¿Jƒ¿J·¿K0¿KS¿K[¿Kë¿K˚¿L¿Lv¿L ¿LÏ¿M6¿Ml¿Mô¿MÁ¿MÛ¿N¿N¿N#¿N{¿N£¿N¯¿Ob¿Oy¿OÑ¿Oå¿Oí¿Oì¿O∂¿O∑¿O‹¿Oˆ¿P¿P>¿Pp¿Pµ¿P˚¿Q"¿Q7¿QÇ¿Qã¿Qµ¿Q·¿R¿Rd¿Rm¿Rz¿Rø¿S¿S2¿SJ¿Sv¿S†¿Sÿ¿SÌ¿T8¿TA¿Th¿T∆¿TÈ¿TÒ¿T˜¿U¿U/¿U3¿U4¿U¢¿V¿V6¿Vz¿V§¿V∂¿Væ¿W¿W7¿W?¿Wb¿Wï¿W‚¿X,¿XR¿X¿Xâ¿Xë¿Xó¿X‡¿Y¿Y¿Y¿Y¿YE¿YK¿Yõ¿Y‰¿Yˆ¿Y¸¿Z5¿Zy¿Zπ¿Z’¿ZŸ¿Z⁄¿[¿[¿[K¿[ú¿[Ê¿\6¿\a¿\g¿\≥¿\À¿\—¿]¿]i¿]ö¿]∏¿]–¿]Û¿^¿^¿^?¿^∏¿_¿_¿_ ¿_,¿_-¿_~¿_ä¿_”¿_‘¿_’¿_Ê¿_Á¿`5¿`}¿`ï¿`ö¿`Ÿ¿a%¿a:¿aä¿aŸ¿b'¿bT¿bè¿bñ¿bõ¿bÏ¿c ¿c!¿c"¿cM¿cY¿ct¿c†¿cπ¿c’¿cÙ¿d¿d¿dW¿dn¿dï¿d’¿d˜¿e¿e¿eG¿eO¿ei¿eå¿eî¿e≠¿eœ¿e◊¿f ¿f4¿f<¿fS¿fr¿fz¿fÄ¿fì¿fó¿fò¿f§¿fˇ¿g ¿g=¿gÖ¿g¨¿g∏¿g–¿gÔ¿h¿hH¿hO¿hí¿h∫¿hË¿i¿i¿i¿i¿i[¿iä¿iê¿i€¿j¿j#¿j>¿jX¿jé¿jï¿k ¿k¿k¿k¿k¿kc¿ké¿k˚¿lx¿m ¿mà¿mÁ¿nQ¿nª¿n‹¿o¿oc¿oπ¿o¡¿pI¿pM¿pN¿pZ¿p¢¿p£¿pÙ¿q¿q¿qV¿qö¿q†¿q¿r/¿r|¿r«¿s¿s,¿s2¿s}¿sø¿s≈¿s’¿s€¿t'¿t`¿tv¿tî¿t§¿tÀ¿tÍ¿tÒ¿u¿u/¿uW¿uk¿uá¿uù¿u¶¿u¨¿u∞¿u±¿v¿v¿v¿vn¿vΩ¿vÎ¿vÒ¿wA¿wé¿wˇ¿x7¿x;¿x=¿x>¿xs¿xw¿x∏¿x¯¿x¸¿yA¿yk¿yæ¿z¿z4¿z:¿zi¿zo¿zä¿z∫¿z ¿zÎ¿{#¿{;¿{å¿{ø¿{Ã¿{Ë¿|4¿|¿|—¿}"¿}/¿}H¿}p¿}¿¿}⁄¿~¿~¿~7¿~_¿~≤¿~–¿~¿'¿4¿@¿H¿[¿e¿v¿z¿{¿ê¿∏¿⁄¿˙¿Ä¿Ä.¿Ä4¿ÄH¿Äb¿Ä}¿ÄÉ¿Äá¿Äà¿Äî¿Äπ¿Ä“¿ÄÌ¿ÄÒ¿ÄÚ¿Ä˛¿Å¿Å$¿Å:¿Å>¿Å?¿ÅK¿Åf¿ÅÄ¿Åù¿Å£¿Åß¿Å®¿Å¥¿ÅË¿Ç¿Ç¿Ç ¿Ç$¿Ç%¿Ç1¿Çc¿Ç–¿Ç‘¿Ç÷¿Ç◊¿É¿É¿Éd¿É•¿É·¿Ñ¿Ñ\¿Ñì¿Ñ±¿Ñ‰¿Ñ˛¿Ñˇ¿Ö!¿Ö-¿Ö?¿Ö®¿Ü¿Ü!¿Ü%¿Ü'¿Ü(¿Üf¿Üj¿Üª¿Ü—¿Ü’¿á(¿á>¿áB¿áë¿á›¿à¿à`¿àd¿à∑¿â	¿â¿â¿âÑ¿âà¿âñ¿âö¿â„¿ä¿äì¿ä‰¿ã.¿ãd¿ãú¿ãÃ¿å	¿å¿å+¿å/¿å|¿å∆¿å¯¿ç,¿çX¿çï¿çõ¿ç∑¿çª¿çº¿ç”¿çÒ¿é¿é¿éh¿éç¿éì¿é¬¿é»¿é„¿è¿è#¿èD¿è|¿èî¿èÂ¿ê¿ê%¿êA¿êç¿êÿ¿ë*¿ë{¿ëà¿ë°¿ë…¿í¿í3¿íj¿íw¿íê¿í∏¿ì¿ì)¿ìI¿ìÄ¿ìç¿ìô¿ì°¿ì¥¿ìæ¿ìœ¿ì”¿ì‘¿ìÓ¿î¿îL¿îú¿îÕ¿ï¿ï¿ï5¿ïN¿ïy¿ï™¿ïÀ¿ñ+¿ña¿ñi¿ñÑ¿ñ†¿ñ≠¿ñ–¿ñÚ¿ó=¿óÉ¿ó’¿ò¿òX¿ò}¿òÆ¿ò€¿ò˜¿ô¿ôP¿ô¿ô¬¿ôÛ¿ö"¿ö†¿õ¿õR¿õé¿õƒ¿õÃ¿õ“¿õ÷¿õ◊¿ú&¿ú,¿ú|¿úÆ¿úÂ¿ù2¿ù±¿û ¿û"¿ûC¿ûZ¿ûâ¿ûç¿ûé¿û–¿ûÓ¿ü¿ü¿ü¿üc¿üé¿ü™¿üÆ¿üØ¿üﬁ¿†.¿†w¿†ª¿†Ÿ¿°¿°0¿°a¿°n¿°Í¿¢:¿¢@¿¢o¿¢í¿¢∆¿¢”¿£G¿£õ¿£°¿£Õ¿£ı¿§¿§¿§¿§=¿§C¿§}¿§û¿§ø¿§’¿§Ÿ¿§⁄¿• ¿•&¿•\¿•q¿•ï¿•±¿¶¿¶>¿¶l¿¶ñ¿¶Æ¿¶¬¿¶»¿¶‡¿¶˜¿ß¿ß¿ß¿ß[¿ßa¿ß∞¿®¿®6¿®k¿®Ü¿®°¿®Ω¿®ﬂ¿©/¿©c¿©q¿©w¿©ò¿©«¿©ﬁ¿©‚¿©„¿©Ô¿™¿™-¿™Q¿™m¿™à¿™⁄¿´¿´¿´¿´¿´¿´.¿´B¿´f¿´Ç¿´ò¿´Í¿¨¿¨¿¨¿¨ ¿¨,¿¨G¿¨k¿¨á¿¨¢¿¨Ù¿≠¿≠%¿≠)¿≠*¿≠6¿≠j¿≠é¿≠™¿≠¿¿Æ¿Æ=¿ÆC¿ÆG¿ÆH¿Æq¿Æù¿Æû¿Æ∆¿Æ¿ÆÒ¿Ø4¿Ø`¿ØÇ¿Ø“¿Ø˛¿∞¿∞¿∞A¿∞l¿∞é¿∞ﬁ¿±¿±
¿±¿±¿±I¿±â¿±ß¿±Ã¿±·¿±ˆ¿≤;¿≤]¿≤n¿≤x¿≤å¿≤‡¿≥¿≥¿≥¿≥1¿≥5¿≥7¿≥8¿≥à¿≥°¿≥•¿≥Ú¿¥A¿¥f¿¥°¿¥¢¿¥‚¿¥Ë¿µ)¿µl¿µº¿∂¿∂¿∂X¿∂w¿∂}¿∂Õ¿∂Ï¿∂˘¿∑
¿∑*¿∑A¿∑E¿∑F¿∑~¿∑§¿∑∞¿∑˜¿∏^¿∏¢¿∏©¿∏‹¿∏Í¿∏¿π$¿πo¿π¶¿π›¿πÎ¿∫¿∫}¿∫Ü¿∫ú¿∫º¿∫ƒ¿∫Ã¿∫–¿∫—¿∫›¿ª¿ª¿ªh¿ª∂¿º¿º<¿ºé¿ºí¿ºì¿ºü¿º±¿ºÁ¿Ω<¿ΩP¿ΩT¿ΩV¿ΩW¿Ω§¿Ω∞¿Ω¥¿Ω◊¿æ(¿æG¿æô¿æÂ¿ø	¿ø ¿øT¿øZ¿ø[¿øõ¿ø›¿øﬁ¿¿%¿¿v¿¿|¿¿å¿¿í¿¿‡¿¡¿¡M¿¡N¿¡õ¿¡‹¿¬¿¬¿¬¿¬h¿¬õ¿¬ü¿¬Ë¿√¿√L¿√l¿√°¿√«¿√Õ¿√Œ¿ƒ¿ƒ¿ƒ!¿ƒd¿ƒå¿ƒê¿ƒë¿ƒù¿ƒˇ¿≈¿≈¿≈P¿≈ò¿≈ú¿≈Ì¿∆>¿∆l¿∆∂¿∆ÿ¿∆˘¿«.¿«]¿«^¿«¨¿«≈¿«˜¿«¯¿»#¿»$¿»R¿»X¿»h¿»n¿»Ω¿»Ò¿…<¿…l¿…∑¿…Á¿  ¿ ,¿ T¿ }¿ ¶¿ ’¿ €¿ ‹¿À*¿Àn¿Àî¿Àï¿À‡¿À˜¿À˝¿ÃK¿ÃÖ¿Ãû¿Ãü¿Ã»¿ÃŒ¿Õ¿Õh¿Õ°¿Õß¿ÕÒ¿Œ4¿Œ@¿ŒÇ¿ŒÉ¿Œ”¿ŒÍ¿œ¿œ¿œ(¿œç¿œé¿œµ¿œ∂¿œ¯¿œ˛¿–¿–L¿–i¿–î¿–∏¿–º¿–Ω¿— ¿—¿—M¿—å¿—®¿—Æ¿—˜¿“4¿“`¿“Ç¿“Ü¿“à¿“â¿“⁄¿“Ú¿“ˆ¿”E¿”U¿”ö¿”µ¿”œ¿‘¿‘
¿‘¿‘¿‘0¿‘S¿‘r¿‘õ¿‘ƒ¿‘Û¿‘˙¿’=¿’j¿’ì¿’ª¿’„¿’‰¿÷¿÷9¿÷d¿÷k¿÷ù¿÷Á¿◊¿◊G¿◊H¿◊n¿◊o¿◊´¿◊Ò¿ÿ¿ÿ8¿ÿr¿ÿ§¿ÿ∆¿ÿ‡¿Ÿ¿Ÿ¿Ÿ¿Ÿ`¿ŸÇ¿ŸÃ¿ŸÕ¿⁄¿⁄f¿⁄∑¿€¿€¿€D¿€Z¿€^¿€_¿€k¿€ô¿€ö¿€ı¿€ˆ¿‹¿‹¿‹J¿‹N¿‹O¿‹[¿‹û¿‹ø¿‹√¿‹≈¿‹∆¿›¿›[¿›_¿›≤¿›Ï¿ﬁ7¿ﬁX¿ﬁr¿ﬁå¿ﬁ√¿ﬁƒ¿ﬁ–¿ﬂ¿ﬂK¿ﬂO¿ﬂP¿ﬂ\¿ﬂu¿ﬂ°¿ﬂ…¿ﬂÚ¿‡¿‡J¿‡Q¿‡ù¿‡∫¿‡æ¿‡ø¿‡À¿‡Ú¿‡Û¿‡ˇ¿·¿·%¿·2¿·]¿·™¿·…¿·–¿·‘¿·÷¿·◊¿‚$¿‚H¿‚L¿‚î¿‚‚¿„¿„¿„R¿„°¿„Ô¿‰@¿‰å¿‰«¿‰À¿Â¿Âd¿Â¨¿Â¡¿Ê¿Ê-¿ÊP¿Êt¿Ê†¿ÊÎ¿Á¿Á:¿Ák¿Áñ¿Á∞¿ÁÓ¿Ë¿Ë;¿ËA¿ËE¿ËF¿Ëe¿Ëá¿Ë©¿Ë ¿ËÀ¿È¿È¿È†¿ÈÛ¿Í¿Í$¿Í?¿Íl¿Íº¿Î¿ÎW¿Îj¿Î°¿Îº¿Ï ¿Ï'¿Ïì¿Ï…¿Ï˜¿Ì-¿Ìi¿Ì∂¿ÌÕ¿Ó)¿Óg¿Óù¿Ó´¿Ô¿ÔS¿Ôá¿ÔÒ¿=¿I¿y¿ﬂ¿Ò#¿Ò/¿Òl¿Ò´¿Ò∑¿Ò¡¿Ò…¿Ú¿ÚE¿Úá¿Ú…¿Ú”¿Ú˙¿Û¿Û¿Û7¿Ûâ¿Û¡¿ÛÚ¿Ù8¿Ùa¿Ùè¿Ùõ¿Ù•¿Ù’¿ÙÔ¿Ù˜¿Ù˝¿ı¿ı¿ı]¿ı^¿ıj¿ıÉ¿ı¶¿ı≈¿ıÓ¿ˆ¿ˆF¿ˆM¿ˆ|¿ˆ»¿˜"¿˜j¿˜p¿˜à¿˜ß¿˜»¿˜–¿˜Í¿¯¿¯(¿¯>¿¯X¿¯a¿¯≤¿¯¯¿˘0¿˘~¿˘Ã¿˙¿˙(¿˙[¿˙•¿˙”¿˙ﬂ¿˙È¿˚)¿˚K¿˚á¿˚ª¿¸	¿¸X¿¸ß¿¸Ô¿˝	¿˝/¿˝:¿˝B¿˝P¿˝V¿˝W¿˝õ¿˝”¿˛¿˛
¿˛¿˛M¿˛ã¿˛ë¿˛í¿˛¯¿ˇ¿ˇ¿ˇN¿ˇt¿ˇï¿ˇ≈¿ˇÀ¿ˇÃ¿ˇË¿ ¿ ¿ 6¿ _¿ û¿ ÷¿¿1¿R¿Z¿`¿ú¿¥¿ÿ¿¯¿¿$¿+¿z¿∞¿¸¿H¿|¿†¿—¿¿E¿O¿W¿û¿æ¿˝¿4¿V¿p¿ô¿¢¿–¿÷¿◊¿˝¿9¿F¿ï¿õ¿±¿¯¿4¿Ü¿ÿ¿¿5¿c¿â¿∏¿Ì¿ı¿˚¿	¿	6¿	:¿	;¿	m¿	ô¿	¡¿	»¿	Ë¿
z¿
à¿
å¿
ç¿
ô¿
¿¿
È¿
Ì¿
Ó¿
˙¿=¿É¿¢¿«¿Ÿ¿·¿¿*¿0¿4¿5¿A¿o¿à¿÷¿¿:¿[¿ä¿ê¿î¿ï¿∏¿÷¿ˆ¿¿¿ ¿!¿=¿>¿J¿d¿|¿Ä¿Å¿ø¿¡¿¬¿
¿¿\¿î¿Ø¿∞¿¯¿˛¿M¿ö¿Î¿;¿R¿~¿¶¿—¿ÿ¿%¿)¿*¿B¿^¿y¿å¿ç¿∏¿ﬂ¿‡¿¿N¿O¿Ñ¿±¿≤¿ÿ¿Ú¿Û¿J¿P¿`¿f¿À¿3¿£¿≈¿∆¿Î¿¿G¿H¿ä¿«¿¿[¿\¿õ¿„¿5¿N¿≠¿º¿¿\¿g¿ª¿¿¿@¿Ç¿§¿ ¿‘¿¿d¿Ñ¿≥¿Ê¿¿N¿•¿«¿”¿›¿Â¿Î¿Ï¿¿u¿ó¿÷¿¿-¿H¿P¿V¿Z¿[¿â¿»¿‡¿Û¿˘¿'¿?¿E¿É¿á¿à¿«¿ ¿  ¿ %¿ u¿ ¥¿ Â¿!¿!0¿!G¿!M¿!{¿!ß¿!“¿!”¿!ˆ¿"¿"B¿"C¿"e¿"€¿#¿#J¿#e¿#m¿#è¿$¿$5¿$ó¿$Æ¿$∂¿$º¿$Ω¿$¿%+¿%h¿%w¿%î¿%ú¿%¢¿%¶¿%ß¿%›¿%‚¿&1¿&H¿&M¿&ú¿&Ê¿')¿'*¿'v¿'ƒ¿'…¿(¿(B¿(ø¿(Ï¿)9¿)a¿)≥¿)ı¿)ˆ¿*H¿*m¿*Æ¿*œ¿*÷¿*◊¿*˘¿+¿+'¿+Ø¿,¿,
¿,¿,¿,B¿,W¿,g¿,m¿,é¿,í¿,ì¿,Ê¿-1¿-N¿-h¿-ô¿-ù¿-û¿-È¿.3¿.L¿.R¿.ú¿.ﬁ¿.‰¿.Ù¿.˙¿/I¿/s¿/ë¿/ì¿/î¿/Ë¿/Ï¿0C¿0ì¿0¶¿0Í¿15¿1X¿1Ä¿1ç¿1•¿1¥¿1€¿1‰¿1Ê    
ParentDataPaintingContextConstraints_LocalSemanticsHandlePipelineOwnerPipelineManifold_flutterRenderingLibraryRenderObjectRenderObjectWithChildMixinContainerParentDataMixinContainerRenderObjectMixin"RelayoutWhenSystemFontsChangeMixin_SemanticsFragment_ContainerSemanticsFragment_InterestingSemanticsFragment_RootSemanticsFragment_IncompleteSemanticsFragment_SwitchableSemanticsFragment_SemanticsGeometryDiagnosticsDebugCreator 9