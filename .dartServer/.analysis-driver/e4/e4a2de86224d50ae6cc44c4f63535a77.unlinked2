ÄıpopdoNotPopbubble	navigator
_navigatorsettings	_settingsrestorationScopeId_restorationScopeId_updateSettings_updateRestorationIdoverlayEntriesinstalldidPushdidAdd
didReplacewillPoppopDispositiononPopInvokedwillHandlePopInternallycurrentResultpopped_popCompleter_disposeCompleterdidPopdidComplete
didPopNextdidChangeNextdidChangePreviouschangedInternalStatechangedExternalStatedispose	isCurrentisFirsthasActiveRouteBelowisActivename	argumentstoStringkeyrestorationId	canUpdatecreateRoute_navigators	didRemovedidStartUserGesturedidStopUserGesture
controllermaybeOfofupdateShouldNotifyrouteisWaitingForEnteringDecisionisWaitingForExitingDecisionmarkForPush
markForAdd
markForPopmarkForCompletemarkForRemove_transitionresolvepages	onPopPagetransitionDelegateinitialRouteonGenerateRouteonUnknownRoute	observersrouteTraversalEdgeBehaviordefaultRouteNameonGenerateInitialRoutesreportsRouteUpdateToEngineclipBehaviorrequestFocus	pushNamedrestorablePushNamedpushReplacementNamedrestorablePushReplacementNamedpopAndPushNamedrestorablePopAndPushNamedpushNamedAndRemoveUntil!restorablePushNamedAndRemoveUntilpushrestorablePushpushReplacementrestorablePushReplacementpushAndRemoveUntilrestorablePushAndRemoveUntilreplacerestorableReplacereplaceRouteBelowrestorableReplaceRouteBelowcanPopmaybePoppopUntilremoveRouteremoveRouteBelowdefaultGenerateInitialRoutescreateStatestagingaddaddingpushReplacepushingidlecompleteremovepoppingremoving	disposingdisposedrestorationInformation	pageBasedkDebugPopAttemptLimitnotAnnouncedcurrentStatelastAnnouncedPreviousRoutelastAnnouncedPoppedNextRoutelastAnnouncedNextRoutelastFocusNodecanUpdateFrom	handleAdd
handlePushhandleDidPopNext	handlePophandleCompletehandleRemovalpendingResult_reportRemovalToObserverfinalizeforcedDisposewillBePresent	isPresentisPresentForRestorationsuitableForAnnouncementsuitableForTransitionAnimationshouldAnnounceChangeToNextisPresentPredicate'suitableForTransitionAnimationPredicatewillBePresentPredicateisRoutePredicate_isWaitingForExitingDecisionmarkNeedsExitingDecisionrestorationEnabledprimaryRoutesecondaryRoutenotify_value
indexWhereaddAllclearinsertremoveAt
removeLast[]iterator_overlayKey_history_entryWaitingForSubTreeDisposal_serializableHistory_observedRouteAdditions_observedRouteDeletions	focusNode_debugLocked_heroControllerFromScope_effectiveObservers_usingPagesAPI_handleHistoryChanged	initState_recordLastFocus"_rawNextPagelessRestorationScopeId_nextPagelessRestorationScopeIdrestoreStatedidToggleBucketdidChangeDependencies_forcedDisposeAllRouteEntries_disposeRouteEntry_updateHeroController_updateEffectiveObserversdidUpdateWidget_debugCheckDuplicatedPageKeys
deactivateactivateoverlay_allRouteOverlayEntries_lastAnnouncedRouteName_debugUpdatingPage_updatePages_flushingHistory_flushHistoryUpdates_flushObserverNotifications_flushRouteAnnouncement_getRouteBefore_getIndexBefore_getRouteAfter_routeNamed_debugIsStaticCallback
_pushEntry_afterNavigation_pushReplacementEntry_pushEntryAndRemoveUntil_replaceEntry_replaceEntryBelowfinalizeRoute_getRouteById_userGesturesInProgress_userGesturesInProgressCountuserGestureInProgressuserGestureInProgressNotifier_activePointers_handlePointerDown_handlePointerUpOrCancel_cancelActivePointers_firstRouteEntryWhereOrNull_lastRouteEntryWhereOrNullbuildnamed	anonymoustype_serializableDataisRestorablegetSerializableDatacomputeSerializableDatatoRouteEntryrouteBuilder_pageToPagelessRoutesupdate_finalizeEntry_debugMapsEqualhasDatarestoreEntriesForPagecreateDefaultValuefromPrimitivesinitWithValuetoPrimitivesenablednavigatorFinder	onPresent
onCompletepresent_route	_disposed_hookOntoRouteFuture_defaultNavigatorFindercanHandlePop( _kAndroidRefocusingDelayDurationRouteFactoryRouteListFactoryRestorableRouteBuilderRoutePredicateWillPopCallbackPopPageCallbackRoutePopDispositionRouteRouteSettingsPageNavigatorObserverHeroControllerScopeRouteTransitionRecordTransitionDelegateDefaultTransitionDelegate"kDefaultRouteTraversalEdgeBehavior	Navigator_RouteLifecycle_RouteEntryPredicate_NotAnnounced_RouteEntry_NavigatorObservation_NavigatorPushObservation_NavigatorPopObservation_NavigatorRemoveObservation_NavigatorReplaceObservation_IndexWhereCallback_HistoryNavigatorState_RouteRestorationType_RestorationInformation_NamedRestorationInformation _AnonymousRestorationInformation_HistoryPropertyNavigatorFinderCallbackRoutePresentationCallbackRouteCompletionCallbackRestorableRouteFutureNavigationNotificationÅÀDurationmillisecondsonGenerateRoutedynamiconGenerateInitialRoutesListStringrestorablePushTBuildContextObjectpopUntilboolpopForm	onWillPop
ModalRouteaddScopedWillPopCallbackremoveScopedWillPopCallbackWillPopScope
DeprecatedFuture	onPopPagedidPoppageswillPoppopDispositiondoNotPopbubbleSystemNavigatorOverlayOverlayEntryMaterialPageRoutecreateRoute kFlutterMemoryAllocationsEnabledFlutterMemoryAllocationsinstancedispatchObjectCreatedlibrary	classNameobjectRestorationScopeValueListenableValueNotifiervoidvalueremove	protectedmustCallSuperTickerFuturecompletethenwidgetrequestFocus	focusNodeenclosingScopemaybePopsetFrameworkHandlesBackcanPopPopScopefuture	CompleterfinalizeRoutepushReplacementdidStartUserGesturepushoffstageStatedidUpdateWidgetMaterialAppdidChangeDependenciescontextbarrierColordisposedispatchObjectDisposed_lastRouteEntryWhereOrNullisPresentPredicateroute_firstRouteEntryWhereOrNull_historyentrymaintainStateisRoutePredicate	isPresent	immutableoverrideobjectRuntimeTypecurrentResultpoppedLocalKeyRestorationManagerruntimeTypekeysettingsfactoryname	argumentsExpandochildInheritedWidgetHeroControllerof"dependOnInheritedWidgetOfExactType
controllermaybeOfFlutterErrorresolveisWaitingForEnteringDecisiontransitionDelegateIterableMapnewPageRouteHistorylocationToExitingPageRoutepageRouteToPagelessRoutestoListgrowableSetvaluestoSetexitingPageRouteisWaitingForExitingDecisioncontainsKeypagelessRouteintcast
routeEntrylengthcontainsisEmptymarkForPush
markForAdd
markForPopmarkForCompletemarkForRemovelastadd	pageRouterouteTraversalEdgeBehaviorTraversalEdgeBehaviorparentScopeRouterAppBarScaffoldappBar
WidgetsApp
PopupRoute
showDialogshowMenushowModalBottomSheetPopupMenuButtonDropdownButton	PageRoutePageRouteBuilderCupertinoTabViewBuilder	isCurrentrestorationIdrestorationScopeIdStatefulWidgetdefaultGenerateInitialRoutesCliphardEdgeWidgetElementRenderObjectcreateElementcreateStateRenderObjectWidgetcreateRenderObjectdefaultRouteNameRestorationBucketRestorationMixinselectSingleEntryHistory PlatformRouteInformationProviderrouternonedidPushdidChangeNext	observersonUnknownRouteoptionalTypeArgs	pushNamedStandardMessageCodecrestorablePushNamed
didReplacedidCompletepushReplacementNamedresultrestorablePushReplacementNamed
didPopNextTransitionRouteopaquepopAndPushNamedrestorablePopAndPushNamedwillHandlePopInternallywithName	didRemovepushNamedAndRemoveUntil!restorablePushNamedAndRemoveUntilrestorablePushReplacementpushAndRemoveUntilrestorablePushAndRemoveUntildidChangePreviousreplaceoldRoutenewRouterestorableReplacenewRouteBuilderreplaceRouteBelowanchorRouterestorableReplaceRouteBelowPopEntryisFirstLocalHistoryRouteremoveRouteremoveRouteBelowStatefulElementstaterootNavigatorfindRootAncestorStateOfTypefindAncestorStateOfType
startsWith	substring_routeNamed	allowNullsplit
isNotEmptypartreportErrorFlutterErrorDetails	exceptionclearremoveWhereinitialStatestagingpushReplaceWeakReference	canUpdate	navigator_debugLocked
_navigatorinstalloverlayEntriesadding_observedRouteAdditionspreviousPresentpushingwhenCompleteOrCancelidle_flushHistoryUpdatesprevious
isNewFirst_disposeCompleterdefaultTargetPlatformTargetPlatformandroiddelayedSystemChannelsaccessibilitysendFocusSemanticEventtoMapnodeIdreFocusNodeiOSpopping_popCompleterisCompletedremoving_observedRouteDeletionsdidAddonPopInvokedindex
isReplaceddisposed	disposingwhereemounted_entryWaitingForSubTreeDisposalVoidCallbackremoveListenereveryscheduleMicrotaskaddListenertargetsuitableForTransitionAnimationwillBePresent_updateRestorationIdprimaryRoutesecondaryRouteChangeNotifiermaybeDispatchObjectCreation
indexWherestartnotifyListenersaddAllinsertremoveAt
removeLastIteratoriteratortoStringTickerProviderStateMixin	GlobalKeyOverlayStateQueue	FocusNodeFocus
debugLabelcanHandlePopSchedulerBindingschedulerPhaseSchedulerPhasepostFrameCallbacksdispatchmidFrameMicrotaskspersistentCallbackstransientCallbacksaddPostFrameCallback	initStatestack
StackTracecurrentobserver_navigators'getElementForInheritedWidgetOfExactTypereportsRouteUpdateToEngineServicesBindingaccessibilityFocus
lastOrNulllastFocusNodeRestorableNumregisterForRestorationrestoreEntriesForPagepage	pageBasedhasDatainitialRoutemaprestorationInformationnameddidToggleBucketbucketupdatechangedExternalStateforcedDisposegracefuloverlayEntry_heroControllerFromScoperestorePendingKey
deactivateactivatecurrentStateputIfAbsentcanUpdateFrom_updateSettingsfrommarkNeedsExitingDecision_transitionrearrangeOverlay	handleAdd
handlePushhandleDidPopNext	handlePopwillBePresentPredicatehandleCompletehandleRemovalrouteInformationUpdateduriUriparse	rearrangeforEachnotifyremoveFirstsuitableForAnnouncement'suitableForTransitionAnimationPredicatelastAnnouncedNextRouteshouldAnnounceChangeToNextlastAnnouncedPreviousRoute	fromPartsDiagnosticsNodeErrorSummaryErrorDescriptionDiagnosticsPropertystyleDiagnosticsTreeStyleerrorProperty!debugIsSerializableForRestorationtoRouteEntryFunctionkIsWebPluginUtilitiesgetCallbackHandle	anonymousrouteBuilderkReleaseMode
jsonEncodetoEncodable	postEventany	lastWheremoveNext
firstWherefinalizedidStopUserGesturePointerDownEventpointerPointerEventRenderAbsorbPointercurrentContextfindAncestorRenderObjectOfTypesetState	absorbingWidgetsBindingcancelPointerelementNotificationListeneronNotificationnotificationListeneronPointerDownonPointerUponPointerCancelAbsorbPointerFocusTraversalGrouppolicy	autofocusskipTraversalincludeSemanticsUnmanagedRestorationScopeclipBehaviorinitialEntriesfromSerializableDatasublistcomputeSerializableDatagetCallbackFromHandleCallbackHandlefromRawHandletoRawHandleRestorablePropertyisRegisteredkeysisPresentForRestorationrestorationEnabledisRestorablegetSerializableData	setEquals
listEqualsdataMapEntrynavigatorFinder	onPresent
onComplete_getRouteByIdcallNotificationRouteSettingsInheritedWidgetTransitionDelegateStatefulWidgetRouteRouteTransitionRecord_NavigatorObservationIterableChangeNotifierStateTickerProviderStateMixinRestorationMixin_RestorationInformationRestorablePropertyNotification6Ä‰L6†—Òﬂn“∏æ⁄    Ä¶  
dart:async  Äª  dart:collection  Ä’  dart:convert  ÄÏ  Å	developerÅdart:developer  Å  Å"uiÅ%dart:ui  Å+  package:flutter/foundation.dart  ÅU  package:flutter/rendering.dart  Å~  package:flutter/scheduler.dart  Åß  package:flutter/services.dart  Å–  
basic.dart  ÅÂ  binding.dart  Å¸  focus_manager.dart  Ç  focus_scope.dart  Ç4  focus_traversal.dart  ÇS  framework.dart  Çl  heroes.dart  ÇÇ  notification_listener.dart  Çß  overlay.dart  Çæ  restoration.dart  ÇŸ  restoration_properties.dart  Çˇ  routes.dart  É  ticker_provider.dart    	dart:core¿ ¿íxó¿ <ÄÜÄ§Ä•Ä∫Ä‘ÄÎÅÅ)Å*ÅTÅ}Å¶ÅŒÅœÅ‰Å˚ÇÇ3ÇRÇkÇÅÇ¶ÇΩÇÿÇ˛ÉÉ3É4ÉèÉﬁÉﬂÉ˜ÑÑ@Ñ¶Ñ»ÑÊÑÁÖÖÖFÖJÖXÖ\ÖòÖ·Ö‚ÜÜÜCÜ¨Ü≠ÜÈÜÌá9áÜáëáïáÂà(àlà∑àÂâEâFâÖâ√âƒäää^ä†ä≠ä“ã
ãã?ã@ãvãzã≈ååVå¢åœçççYç]çèçìç°ç•çÒééé3é9éáéπé¿é¡é›é„è1èTè`èaèñèúèÌê=êTê^ê`êaêõêüêÍë9ëàë¨ë∞ëˆíí#íríîíòíÁì-ìzì¬îîJîNîèîﬂïïï:ï@ïçï°ï¯ñ$ñcñîñµñÀñ‘ñ⁄ñﬁñﬂóó@ó^ó_óÇóàóØóµò ò=ò\òbò≤ò˝ôGôëôµô‡ô˚ô¸öMö_öeö±ö«öÕõõlõ∫ú
úYúåú÷ù)ù*ù^ùÇù°ùøù≈ù…ù ûûIûxû|û}û¶û¨û˚ü9ü?üåüõü°üÌ††U†V†í†ò†Í°>°É°†°≠°æ°”°‘¢¢$¢l¢r¢ø£ ££U£Ñ£ë£¢£Ω£˜§,§i§q§y§}§~§≈§À••L•R•°•–•›•Ó¶ ¶3¶Ñ¶“ß!ßpßëßößÓ®A®ê®¬®ˆ©H©õ©Ì™=™è™ﬂ´´´k´π´Ï¨)¨3¨9¨=¨>¨ç¨ì¨‚≠≠≠/≠_≠`≠∞≠ÿ≠ﬁÆ.ÆLÆRÆùÆ÷Ø!ØmØºØ˘Øˇ∞?∞b∞h∞∑∞Â∞Î∞˚±±L±`±≠±√±“±ı≤/≤3≤c≤Æ≤≤≤≥≥≥+≥1≥Å≥¿≥Ò≥˜¥B¥{¥∆µµaµûµ§µ‰∂∂∂\∂ä∂ê∂†∂¶∂Ô∑?∑j∑µ∑π∑∫∑Û∏∏%∏s∏√∏˘ππ2π3πfπìπîπﬁ∫ ∫&∫u∫ú∫º∫Ωªªª]ª¨ª¡ªÚº)º*ºeºfº≠º˘ΩFΩíΩÆΩ¥ææOæüæÍø:øSøYø©ø˘¿ @5¿ @;¿ @ä¿ @£¿ @¥¿ @œ¿ @Ë¿ @˘¿ @˝¿ @˛¿ AL¿ AR¿ AÜ¿ A”¿ B'¿ BA¿ BG¿ Bî¿ BÂ¿ C¿ C ¿ Ck¿ Cπ¿ D
¿ DR¿ D_¿ Dp¿ Dê¿ D≈¿ D…¿ D ¿ E¿ E$¿ E*¿ Ey¿ Eë¿ Eû¿ EØ¿ Eﬂ¿ E‡¿ F"¿ F(¿ Fx¿ F»¿ G¿ G2¿ G8¿ Gá¿ G¶¿ G≥¿ Gƒ¿ G¯¿ G˘¿ H?¿ HE¿ Hë¿ H·¿ I2¿ IL¿ IR¿ Iü¿ I¬¿ Iœ¿ I‡¿ J¿ J¿ J`¿ Jf¿ J∞¿ K¿ KR¿ Kã¿ Kë¿ K°¿ Kß¿ KÒ¿ L/¿ L<¿ LM¿ Lo¿ Lp¿ Lº¿ M	¿ M¿ MD¿ Mï¿ Mÿ¿ N¿ N_¿ N¶¿ N„¿ NÈ¿ O0¿ O{¿ O¬¿ O˚¿ P¿ PE¿ P_¿ Pe¿ Pu¿ P{¿ PÀ¿ PË¿ Pı¿ Q¿ Q(¿ Q)¿ QZ¿ Q`¿ Q±¿ Q‚¿ QË¿ R6¿ RG¿ RM¿ Rö¿ RË¿ S7¿ SH¿ SU¿ Sh¿ S¿ S¢¿ Sƒ¿ S¿ T>¿ TD¿ TH¿ TI¿ Tä¿ Tê¿ T≈¿ T‹¿ T˙¿ U¿ U¿ Uá¿ U¨¿ U¿¿ U∆¿ UÚ¿ Uˆ¿ U˜¿ VB¿ VH¿ Vò¿ V–¿ VÂ¿ W¿ W¿ W¿ Wë¿ W∂¿ W ¿ W–¿ W¸¿ X ¿ X¿ XI¿ XV¿ Xw¿ Xï¿ X©¿ XØ¿ XÎ¿ Y¿ Y"¿ Y*¿ Y]¿ Yr¿ Yz¿ YÄ¿ Yí¿ Yñ¿ Yó¿ Y≈¿ YÀ¿ Z¿ Zk¿ Zß¿ Z≠¿ Zˇ¿ [S¿ [™¿ [¿¿ [ﬁ¿ [Ú¿ [¯¿ \d¿ \h¿ \j¿ \k¿ \§¿ \Ø¿ \≈¿ \Ú¿ ]
¿ ]¿ ]-¿ ]3¿ ]4¿ ]e¿ ]k¿ ]í¿ ]®¿ ]©¿ ]”¿ ]Ÿ¿ ^)¿ ^D¿ ^E¿ ^Q¿ ^…¿ ^À¿ ^Ã¿ ^˙¿ ^˛¿ _G¿ _é¿ _í¿ _†¿ _§¿ _ı¿ `¿ `4¿ `o¿ `~¿ `å¿ `ú¿ `±¿ `…¿ `œ¿ `–¿ `˘¿ `ˇ¿ a?¿ aV¿ aW¿ aß¿ a∏¿ aæ¿ b¿ b¿ b$¿ b*¿ bw¿ bâ¿ b®¿ b©¿ bÁ¿ bÌ¿ c<¿ cI¿ cq¿ c†¿ cΩ¿ c¡¿ c¬¿ c˚¿ d¿ dW¿ db¿ dê¿ dë¿ dù¿ dı¿ d˜¿ d¯¿ e6¿ eP¿ eå¿ e¬¿ e√¿ f¿ fZ¿ fî¿ fŒ¿ g¿ gd¿ gØ¿ g˘¿ h¿ hi¿ hj¿ hê¿ hñ¿ h·¿ i¿ iJ¿ iK¿ iq¿ iw¿ iΩ¿ iﬁ¿ j%¿ j&¿ jM¿ jS¿ jû¿ j ¿ j–¿ k¿ k`¿ k∞¿ kœ¿ l¿ l¿ lU¿ l£¿ l§¿ lÊ¿ lÏ¿ m;¿ mw¿ mÀ¿ mÃ¿ n	¿ n¿ nK¿ nk¿ nm¿ nn¿ n°¿ n•¿ nÓ¿ o<¿ oâ¿ oç¿ o‹¿ p,¿ pw¿ p¡¿ pı¿ q,¿ qJ¿ qY¿ qÜ¿ q†¿ q¶¿ qß¿ q¯¿ r¿ r(¿ r7¿ rQ¿ rk¿ rl¿ r©¿ rÕ¿ rŒ¿ s¿ sB¿ sH¿ sä¿ s…¿ sœ¿ sﬂ¿ sÂ¿ t4¿ tk¿ t§¿ u¿ u*¿ u.¿ u/¿ u{¿ uã¿ uë¿ u·¿ v¿ v¿ vM¿ v{¿ vÅ¿ vë¿ vó¿ v„¿ w'¿ wZ¿ wì¿ w£¿ w√¿ wﬂ¿ x7¿ xa¿ x∂¿ y¿ yY¿ yé¿ y≤¿ y ¿ y’¿ y›¿ y¿ y˙¿ z¿ z¿ z¿ z#¿ z^¿ zç¿ zë¿ zì¿ zî¿ z„¿ {-¿ {T¿ {y¿ {ï¿ {ñ¿ {Á¿ {Ì¿ |=¿ |à¿ |¨¿ |’¿ |÷¿ }&¿ },¿ }|¿ }∆¿ }Í¿ ~¿ ~¿ ~I¿ ~O¿ ~ú¿ ¿ Q¿ g¿ h¿ †¿ ¶¿ Û¿ ÄY¿ Ä™¿ Äø¿ Ä¿¿ Äˆ¿ Ä¸¿ ÅH¿ Åô¿ Å∑¿ Å‹¿ Å›¿ Ç¿ Ç¿ Çk¿ Ç∏¿ É¿ É0¿ É1¿ Ék¿ Éq¿ ÉΩ¿ Ñ¿ ÑH¿ Ñ`¿ Ñb¿ Ñc¿ Ñ¥¿ Ñ‹¿ Ñ‡¿ Ö/¿ ÖÇ¿ ÖÜ¿ Ö—¿ Ö’¿ ÖÈ¿ Ü8¿ ÜÖ¿ Ü®¿ Ü¨¿ Ü∏¿ á¿ á¿ áC¿ áÖ¿ áÂ¿ àJ¿ àU¿ à§¿ à®¿ àı¿ â-¿ âQ¿ â]¿ â¿ âÉ¿ âç¿ âÔ¿ ä-¿ äZ¿ ä∆¿ äÔ¿ ã@¿ ão¿ ã¿ ãå¿ ãò¿ ã¡¿ ã≈¿ ãœ¿ ãÁ¿ ãÔ¿ ãı¿ ã˘¿ å¿ å¿ å¿ å#¿ å'¿ år¿ åè¿ åﬁ¿ ç¿ ç;¿ çÖ¿ ç£¿ ç§¿ ç‘¿ é¿ én¿ éœ¿ é÷¿ è¿ èC¿ èÅ¿ èΩ¿ èƒ¿ ê¿ ê¿ ê(¿ êy¿ êâ¿ ê÷¿ ê˝¿ ëK¿ ër¿ ë¡¿ í¿ í/¿ í>¿ íE¿ íp¿ íw¿ í∞¿ í∑¿ íÂ¿ ì5¿ ìV¿ ì]¿ ì®¿ ìı¿ î¿ î`¿ î∆¿ ï¿ ïV¿ ïï¿ ï‹¿ ñH¿ ñà¿ ñî¿ ñû¿ ñ¶¿ ñ˜¿ ó%¿ óQ¿ óR¿ ó§¿ ò	¿ ò¿ ò^¿ ò®¿ ò¥¿ òÓ¿ ô¿ ô/¿ ô\¿ ôf¿ ôn¿ ôo¿ ô}¿ ô√¿ ôÊ¿ ö6¿ ö¿ öà¿ öõ¿ ö•¿ ö¶¿ ö∫¿ öæ¿ öø¿ õ
¿ õV¿ õ\¿ õ≠¿ õı¿ ú2¿ ú¿ úÀ¿ ù¿ ùF¿ ùL¿ ùò¿ ùÊ¿ û2¿ û}¿ ûÃ¿ ü¿ üd¿ üö¿ üÊ¿ †1¿ †o¿ †ô¿ † ¿ °¿ °e¿ °µ¿ ¢¿ ¢R¿ ¢†¿ ¢æ¿ ¢ƒ¿ £¿ £a¿ £∞¿ £€¿ £·¿ §1¿ §n¿ §π¿ •¿ •M¿ •ú¿ •ﬁ¿ •‰¿ ¶¿ ¶¿ ¶B¿ ¶H¿ ¶~¿ ¶Ñ¿ ¶´¿ ¶±¿ ¶‹¿ ß(¿ ßE¿ ßK¿ ßt¿ ßz¿ ß¡¿ ®
¿ ®¿ ® ¿ ®&¿ ®w¿ ®ù¿ ®Ì¿ ©¿ ©e¿ ©ã¿ ©◊¿ ™#¿ ™s¿ ™µ¿ ´¿ ´F¿ ´r¿ ´∞¿ ¨¿ ¨m¿ ¨s¿ ¨u¿ ¨v¿ ¨«¿ ≠¿ ≠¿ ≠\¿ ≠™¿ ≠ˇ¿ Æ<¿ Æ¿ Æ¬¿ ÆÔ¿ Ø¿ Ø¿ Ø+¿ ØW¿ Øï¿ ØÒ¿ ∞R¿ ∞Y¿ ∞§¿ ∞Ù¿ ±B¿ ±Ñ¿ ±–¿ ≤,¿ ≤R¿ ≤b¿ ≤j¿ ≤§¿ ≥¿ ≥t¿ ≥Ø¿ ≥¸¿ ¥¿ ¥_¿ ¥i¿ ¥â¿ ¥Ù¿ µB¿ µë¿ µ›¿ ∂,¿ ∂i¿ ∂Ω¿ ∑
¿ ∑!¿ ∑s¿ ∑É¿ ∑ë¿ ∑ù¿ ∑ß¿ ∑Ø¿ ∑‘¿ ∑’¿ ∏)¿ ∏]¿ ∏c¿ ∏d¿ ∏õ¿ ∏÷¿ ∏◊¿ π ¿ πj¿ πû¿ πÛ¿ ∫¿ ∫'¿ ∫I¿ ∫S¿ ∫[¿ ∫y¿ ∫Ø¿ ∫µ¿ ∫…¿ ∫Õ¿ ∫œ¿ ∫–¿ ª¿ ª¿ ªW¿ ªª¿ ªº¿ º¿ º
¿ ºY¿ º®¿ ºˆ¿ ΩK¿ Ωú¿ ΩŸ¿ Ω›¿ Ω¯¿ Ω¸¿ æL¿ æõ¿ æÍ¿ ø:¿ øá¿ ø‘¿ øˆ¿ ø˙¿ ¿I¿ ¿ñ¿ ¿Œ¿ ¿Ú¿ ¿ˆ¿ ¡@¿ ¡D¿ ¡c¿ ¡g¿ ¡∞¿ ¡ˆ¿ ¬<¿ ¬Ü¿ ¬Õ¿ ¬˜¿ ¬˚¿ √F¿ √ê¿ √ﬁ¿ ƒ)¿ ƒs¿ ƒæ¿ ≈¿ ≈V¿ ≈v¿ ≈z¿ ≈°¿ ≈•¿ ≈Û¿ ∆C¿ ∆ë¿ ∆™¿ ∆Æ¿ ∆¸¿ «L¿ «r¿ «v¿ «Ç¿ «î¿ «»¿ «Œ¿ «÷¿ «⁄¿ »¿ »g¿ »ñ¿ »ö¿ »¶¿ »€¿ …¿ …¿ …T¿ …l¿ …ã¿ …≥¿ …—¿ …˘¿  
¿  ¿  &¿  1¿  :¿  B¿  J¿  N¿  î¿  ◊¿ À¿ À¿ À\¿ Àá¿ Àã¿ Àó¿ À≥¿ Àª¿ Àø¿ Ã
¿ ÃU¿ Ãñ¿ Ã›¿ Ã˝¿ Õ¿ Õ&¿ Õ*¿ Õo¿ Õ±¿ ÕË¿ Œ¿ Œ#¿ ŒH¿ Œí¿ Œ⁄¿ œ$¿ œ(¿ œ4¿ œF¿ œ`¿ œ†¿ œ ¿ –¿ –h¿ –∑¿ –¬¿ –Ã¿ –“¿ –⁄¿ –ﬁ¿ –˚¿ –ˇ¿ —¿ —3¿ —;¿ —?¿ —a¿ —e¿ —Æ¿ —‰¿ —Ë¿ “6¿ “Ç¿ “ë¿ “ï¿ “ﬁ¿ ”¿ ”!¿ ”-¿ ”v¿ ”û¿ ”µ¿ ”◊¿ ”¸¿ ‘4¿ ‘A¿ ‘L¿ ‘T¿ ‘\¿ ‘d¿ ‘h¿ ‘∞¿ ‘˙¿ ’¿ ’¿ ’f¿ ’¢¿ ’Ì¿ ÷>¿ ÷M¿ ÷Q¿ ÷f¿ ÷j¿ ÷∂¿ ◊¿ ◊V¿ ◊Å¿ ◊Ö¿ ◊≈¿ ÿ¿ ÿS¿ ÿó¿ ÿŒ¿ ÿ“¿ Ÿ#¿ Ÿp¿ Ÿª¿ Ÿø¿ Ÿ’¿ ŸŸ¿ ⁄)¿ ⁄v¿ ⁄«¿ ⁄˙¿ ⁄˛¿ €J¿ €ò¿ €È¿ ‹6¿ ‹:¿ ‹F¿ ‹z¿ ‹è¿ ‹¬¿ ‹¸¿ ›¿ ›X¿ ›w¿ ›ï¿ ›∫¿ ﬁ¿ ﬁ¿ ﬁ,¿ ﬁ7¿ ﬁ?¿ ﬁG¿ ﬁO¿ ﬁS¿ ﬁê¿ ﬁÿ¿ ﬂ&¿ ﬂq¿ ﬂ∑¿ ﬂÕ¿ ﬂ—¿ ‡ ¿ ‡A¿ ‡E¿ ‡`¿ ‡d¿ ‡∞¿ · ¿ ·Q¿ ·é¿ ·í¿ ·£¿ ·ß¿ ·Ù¿ ‚B¿ ‚}¿ ‚Å¿ ‚—¿ „¿ „m¿ „∫¿ ‰	¿ ‰¿ ‰#¿ ‰m¿ ‰æ¿ ‰÷¿ ‰⁄¿ ‰Ì¿ Â<¿ Âp¿ Ât¿ ÂΩ¿ Ê¿ Ê¿ ÊZ¿ Êã¿ Êè¿ ÊŸ¿ ÊÈ¿ ÊÌ¿ Á<¿ Áá¿ Á÷¿ Ë&¿ ËT¿ ËX¿ Ë|¿ ËÄ¿ ËÕ¿ È¿ Èd¿ Èµ¿ È–¿ È‘¿ ÈÌ¿ ÈÒ¿ Í<¿ Íà¿ Í“¿ Î ¿ ÎB¿ ÎF¿ Îê¿ Î°¿ ÎÒ¿ Ï ¿ Ïm¿ Ïæ¿ Ì¿ ÌV¿ Ì¢¿ Ì…¿ ÌÕ¿ Ó¿ Ó_¿ Ó´¿ ÓÛ¿ Ô¿ Ôj¿ Ôp¿ Ôµ¿ Ô…¿ Ôÿ¿ ¿ ¿ -¿ x¿ í¿ ´¿ ı¿ Ò"¿ ÒI¿ Ò{¿ Òô¿ Ò∂¿ Ú ¿ Ú¿ Ú¿ ÚC¿ ÚI¿ Úë¿ Úﬁ¿ Û¿ Ûg¿ Ûm¿ Û∑¿ Û¿ Ûˆ¿ ÙF¿ Ùì¿ Ù‚¿ ı3¿ ıZ¿ ı`¿ ı´¿ ı˚¿ ˆI¿ ˆã¿ ˆß¿ ˆ≠¿ ˆ˛¿ ˜2¿ ˜8¿ ˜É¿ ˜”¿ ¯
¿ ¯-¿ ¯.¿ ¯z¿ ¯¢¿ ¯®¿ ¯ı¿ ˘$¿ ˘*¿ ˘v¿ ˘ú¿ ˘¢¿ ˘Û¿ ˙B¿ ˙í¿ ˙ ¿ ˙Ó¿ ˙Ô¿ ˚?¿ ˚a¿ ˚g¿ ˚ñ¿ ˚Œ¿ ˚œ¿ ˚˙¿ ¸ ¿ ¸0¿ ¸6¿ ¸É¿ ¸µ¿ ¸ª¿ ˝
¿ ˝[¿ ˝¢¿ ˝¿¿ ˝¡¿ ˝ˇ¿ ˛&¿ ˛'¿ ˛f¿ ˛l¿ ˛∏¿ ˇ	¿ ˇ"¿ ˇ(¿ ˇv¿ ˇ≥¿ ˇŸ¿ ˇ⁄¿ ¿ 3¿ 4¿ É¿ ñ¿ ú¿ €¿*¿z¿±¿∑¿¿Q¿]¿c¿¶¿Ú¿B¿i¿o¿¿Ö¿“¿‰¿2¿Y¿§¿Ì¿;¿s¿à¿¨¿≠¿˚¿E¿K¿í¿‹¿'¿w¿∆¿¿a¿±¿–¿Â¿	¿	 ¿	Y¿	_¿	o¿	u¿	œ¿	ˆ¿
$¿
%¿
u¿
¢¿
®¿
⁄¿
‡¿.¿~¿î¿ö¿Â¿¿j¿∫¿¿L¿ô¿Ë¿Ò¿#¿$¿p¿û¿§¿Ò¿B¿è¿ï¿·¿¿_¿Ø¿˝¿¿¿f¿¥¿¿M¿X¿^¿w¿†¿°¿◊¿›¿-¿@¿F¿i¿Ñ¿Ö¿ÿ¿¿¿-¿H¿I¿ö¿©¿Ø¿Â¿,¿r¿x¿æ¿¿K¿o¿u¿∆¿‘¿⁄¿$¿*¿t¿Ñ¿ô¿ü¿·¿/¿h¿}¿É¿π¿˚¿L¿ô¿œ¿’¿¿R¿g¿m¿É¿â¿¨¿≤¿¿¿ﬁ¿¿¿#¿5¿;¿Q¿W¿£¿∞¿∂¿ƒ¿Ê¿¿¿,¿S¿q¿ì¿†¿´¿≥¿Ω¿œ¿’¿Î¿Ò¿=¿C¿Q¿u¿√¿ﬁ¿¸¿¿%¿`¿j¿r¿x¿î¿±¿ƒ¿⁄¿*¿5¿=¿G¿Y¿_¿o¿u¿ø¿‚¿ˆ¿ (¿ B¿ Z¿ q¿ x¿ »¿ Ã¿ Õ¿!¿!-¿!3¿!s¿!¬¿"¿"G¿"\¿"b¿"ï¿"õ¿"Â¿#'¿#p¿#¿¿#ﬂ¿#Â¿$'¿$`¿$u¿${¿$«¿%¿%d¿%±¿%˛¿&¿&/¿&5¿&K¿&Q¿&t¿&z¿&à¿&©¿&–¿&„¿&˘¿' ¿'=¿'^¿'k¿'v¿'~¿'à¿'ö¿'Æ¿'Ê¿( ¿(¿(/¿(6¿(ê¿(î¿(ï¿(Â¿)3¿)z¿)Ä¿)¡¿*¿*Z¿*£¿*Ú¿+@¿+â¿+è¿+÷¿,¿,"¿,n¿,ª¿,˚¿-I¿-ó¿-‰¿.¿.¿.h¿.v¿.|¿. ¿/¿/¿/b¿/u¿/ä¿/ê¿/œ¿/’¿0¿0¿0$¿0*¿0M¿0S¿0a¿0Ñ¿0Õ¿0’¿0ﬂ¿0Ò¿0˜¿1¿1¿1^¿1ë¿1•¿1ˆ¿2¿2(¿28¿2O¿2V¿2≈¿2…¿2 ¿3¿3h¿3Ø¿3µ¿4 ¿4N¿4ù¿4ﬂ¿4Ù¿4˙¿58¿5>¿5Ö¿5ã¿5‘¿5⁄¿5¿5ˆ¿6¿6¿6-¿6Q¿6†¿6®¿6≤¿6ƒ¿6ÿ¿7/¿7I¿7a¿7q¿7à¿7è¿8¿8¿8¿8Z¿8ì¿8ô¿8’¿9¿9¿9i¿9Ø¿9µ¿:¿:E¿:ì¿:‚¿;.¿;}¿;Õ¿<¿<
¿<[¿<i¿<o¿<Ω¿<˜¿<˝¿=V¿=k¿=q¿=∞¿=∂¿=È¿=Ô¿>¿>¿>.¿>4¿>B¿>f¿>≠¿>µ¿>ø¿>—¿>◊¿>Á¿>Ì¿?8¿?d¿?x¿?ƒ¿?ﬁ¿?ˆ¿@¿@¿@$¿@é¿@í¿@ì¿@‡¿A¿A¿Ae¿AÆ¿A˝¿B?¿BT¿BZ¿Bì¿Bô¿B‡¿BÊ¿C/¿C5¿CK¿CQ¿Ct¿Cz¿Cà¿C¶¿CÒ¿C˘¿D¿D¿D)¿D{¿Dï¿D≠¿DΩ¿D‘¿D€¿EO¿ES¿ET¿E¢¿EÚ¿F¿F¿F`¿Fß¿F÷¿F‹¿G¿GZ¿G`¿GÆ¿G¯¿G˛¿HK¿Hx¿H~¿HΩ¿I¿I%¿I+¿Iw¿I∆¿J¿JC¿Jç¿J€¿K)¿KO¿KU¿K¶¿K¥¿K∫¿L¿L¿L^¿Lv¿Lã¿Lë¿L–¿L÷¿M	¿M¿M%¿M+¿MN¿MT¿Mb¿MÇ¿M›¿MÂ¿MÔ¿N¿N¿N¿N¿Nm¿Nú¿N∞¿N¿O
¿O#¿OC¿OZ¿Oa¿OÕ¿O—¿O“¿P ¿Pp¿Pî¿Pö¿PË¿Q9¿Qà¿Q ¿Qﬂ¿QÂ¿R&¿R,¿Rs¿Ry¿R¬¿R»¿Rﬁ¿R‰¿S¿S¿S¿S;¿S†¿S®¿S≤¿Sƒ¿Sÿ¿T¿T8¿TQ¿Tq¿Tà¿Tè¿U¿U	¿U
¿UW¿Ul¿Ur¿U£¿UÈ¿V6¿Vv¿Vö¿V†¿VÒ¿Vˇ¿W¿WO¿Wd¿Wj¿W©¿WØ¿W≈¿WÀ¿WÓ¿WÙ¿X¿X¿X;¿XN¿Xq¿X∞¿XΩ¿X»¿X–¿X⁄¿XÏ¿XÚ¿Y¿Y¿YT¿Yp¿YÑ¿Yÿ¿Z¿Z
¿Z¿ZT¿Zi¿Zo¿Z™¿Z¯¿[G¿[y¿[é¿[î¿[¬¿[»¿\¿\R¿\û¿\Í¿],¿]y¿]Ω¿]√¿^¿^Z¿^o¿^u¿^æ¿^ƒ¿^⁄¿^˝¿_¿__¿_q¿_Ö¿`¿`a¿`e¿`f¿`∂¿a¿a?¿aE¿aÅ¿aÕ¿b¿bm¿bΩ¿c¿cI¿cO¿cõ¿cË¿d(¿dv¿d∏¿dæ¿e¿e¿e#¿eq¿e≤¿e«¿eÕ¿f¿f¿f(¿f.¿fQ¿fW¿fe¿fÉ¿f≤¿f≈¿fË¿g+¿g8¿gC¿gK¿gU¿gg¿gm¿g}¿gÉ¿g”¿h¿h¿hú¿hÔ¿hÛ¿hÙ¿iD¿iè¿i…¿iœ¿j¿jc¿j≠¿jÔ¿k¿k
¿kC¿kI¿kÅ¿ká¿k–¿k÷¿kÏ¿l¿l¿l}¿lè¿l£¿mW¿mŒ¿m“¿m”¿n ¿ng¿ná¿nç¿nÃ¿o¿oB¿oH¿oä¿o∆¿oÃ¿p¿pd¿pj¿p∑¿p‰¿pÍ¿q0¿qÅ¿qÀ¿r¿rd¿r±¿s¿sB¿sH¿sô¿sß¿s≠¿s˚¿t¿t¿tU¿t[¿tq¿tw¿tö¿t†¿tÆ¿t‘¿u ¿u¿um¿uë¿uú¿u§¿uÆ¿u¿¿u∆¿u÷¿u‹¿v&¿vR¿vf¿vÂ¿w2¿w6¿w7¿wÄ¿w«¿wÁ¿wÌ¿x6¿xá¿x—¿y¿y(¿y.¿yj¿yp¿y®¿yÆ¿y˜¿y˝¿z¿z6¿z<¿z©¿zª¿zœ¿{Å¿{ı¿{˘¿{˙¿|G¿|g¿|m¿|°¿|Ì¿}<¿}ã¿}€¿~¿~	¿~Y¿~Å¿~á¿~ÿ¿¿g¿Ø¿¸¿ÄM¿Äf¿Äl¿Äº¿Äﬁ¿Ä‰¿Å2¿ÅG¿ÅM¿Å]¿Åc¿Å≤¿Å˝¿ÇF¿Çr¿ÇÜ¿É	¿É^¿Éb¿Éc¿É∞¿É–¿É÷¿Ñ¿Ñc¿Ñ≤¿Ñ‰¿Ñ˘¿Ñˇ¿Ö0¿Ö6¿Ön¿Öt¿ÖΩ¿Ö—¿Üã¿á¿á¿á¿á`¿áÆ¿á…¿áœ¿à¿àW¿à¶¿àı¿âE¿âm¿âs¿â√¿âÎ¿âÒ¿äB¿äÅ¿ä—¿ã¿ãf¿ã∑¿ã–¿ã÷¿å$¿å9¿å?¿åO¿åU¿å¢¿åµ¿ç¿ç4¿çH¿çÿ¿é=¿éA¿éB¿éè¿é›¿é¯¿é˛¿èF¿èî¿è‚¿ê*¿ê?¿êE¿êÄ¿êÜ¿êæ¿êƒ¿ë¿ë!¿ëË¿í{¿í¿íÄ¿í–¿íﬁ¿í‰¿ì¿ìf¿ì∂¿ìœ¿ì’¿î¿î¿îe¿îw¿îå¿îí¿î¢¿î®¿îÛ¿ï¿ï8¿ïz¿ïÆ¿ï≤¿ï≥¿ï˜¿ñC¿ñë¿ñ†¿ñ¶¿ñ€¿ó+¿ó|¿óì¿óô¿óÈ¿ò*¿ò0¿ò~¿ò»¿ô¿ô¿ôh¿ôØ¿ôµ¿ö ¿öK¿öZ¿öo¿öu¿öÖ¿öã¿öŸ¿õ¿õg¿õò¿õ¨¿ú¿ú;¿ú?¿ú@¿úé¿ú£¿ú©¿úŸ¿ù)¿ùw¿ùº¿û	¿û¿û[¿û©¿ûÚ¿üA¿üè¿ü⁄¿ü‡¿†0¿†¿†ø¿†‚¿†Ë¿°9¿°?¿°å¿°≥¿°»¿°Œ¿°‰¿°Í¿¢!¿¢'¿¢5¿¢K¿¢k¿¢s¿¢}¿¢è¿¢ï¿¢«¿¢Õ¿¢€¿¢Ú¿£/¿£7¿£A¿£U¿£°¿£À¿£œ¿£–¿§¿§S¿§Y¿§é¿§’¿•¿•
¿•S¿•~¿•Ñ¿•√¿•…¿¶¿¶$¿¶*¿¶@¿¶F¿¶i¿¶o¿¶}¿¶î¿¶ÿ¿¶‡¿¶Í¿¶¸¿ßE¿ßt¿ßx¿ßy¿ß»¿ß˘¿ßˇ¿®7¿®á¿®‘¿®Ï¿®Ú¿©7¿©Ü¿©Œ¿™¿™k¿™Ñ¿™ä¿™‘¿™Ú¿™¯¿´6¿´K¿´Q¿´¢¿´÷¿¨¿¨S¿¨W¿¨X¿¨ß¿¨˜¿≠ ¿≠&¿≠c¿≠≥¿Æ ¿Æ¿Æ¿Æc¿Æ≤¿Æ˙¿ØF¿Øó¿Ø∞¿Ø∂¿∞¿∞O¿∞U¿∞ì¿∞®¿∞˚¿±;¿±?¿±@¿±ê¿±ü¿±•¿±»¿±Œ¿±‹¿±¯¿≤¿≤¿≤:¿≤D¿≤J¿≤õ¿≤‰¿≥¿≥¿≥f¿≥Æ¿≥¥¿≥Ù¿¥¿¥,¿¥L¿¥S¿¥õ¿¥∫¿µ¿µ6¿µ<¿µU¿µ´¿µ∏¿∂
¿∂¿∂¿∂!¿∂@¿∂\¿∂∫¿∑¿∑S¿∑^¿∑f¿∑y¿∑É¿∑ö¿∑û¿∑ü¿∑Ô¿∏¿∏¿∏/¿∏5¿∏C¿∏Ü¿∏™¿∏¡¿∏”¿∏Â¿π	¿π¿π¿π!¿πr¿πª¿πÊ¿πÏ¿∫9¿∫?¿∫¿∫°¿∫Ω¿∫›¿∫‰¿ª,¿ªK¿ªî¿ª«¿ªÕ¿ªÊ¿º<¿ºI¿ºõ¿º°¿º∑¿ºª¿ºº¿ºÛ¿º˘¿ΩH¿Ωj¿Ωp¿Ω¡¿æ¿æ]¿æs¿æy¿æ…¿ø¿ød¿øü¿¿¿¿M¿¿ò¿¿Â¿¡¿¡;¿¡M¿¡è¿¡§¿¡∞¿¬ ¿¬c¿¬å¿¬´¿¬€¿¬¸¿√¿√?¿√X¿√h¿√À¿√’¿√›¿√˛¿ƒ¿ƒ6¿ƒW¿ƒp¿ƒ©¿ƒ¿≈b¿≈∑¿≈∆¿≈”¿≈Í¿≈¯¿∆.¿∆J¿∆T¿∆l¿∆t¿∆µ¿« ¿«b¿«»¿«Œ¿»¿»¿»`¿»Ø¿»¯¿…¿…Z¿…t¿…”¿…Ÿ¿ ¿ ¿ ¿ ¿ H¿ J¿ K¿ Ç¿ Ö¿ ∑¿ ‹¿À¿À'¿ÀN¿À{¿À¢¿À»¿À¯¿Ã(¿ÃX¿Ãà¿Ã∏¿ÃË¿Õ¿ÕL¿Õ{¿Õ©¿Õ÷¿Œ¿Œ-¿ŒO¿Œy¿Œ£¿Œ—¿Œ˘¿œ ¿œE¿œp¿œò¿œ¿¿œË¿–¿–9¿–^¿–à¿–≠¿–÷¿–˚¿— ¿—T¿—Å¿—Ñ¿—–¿—˜¿“G¿“^¿“∑¿“º¿“⁄¿“ﬂ¿”[¿”∞¿”€¿‘4¿‘õ¿‘ﬂ¿’A¿’d¿’i¿’ã¿’ê¿’˘¿÷¿÷L¿÷Ñ¿÷Ï¿◊A¿◊ß¿◊Ô¿ÿ#¿ÿn¿ÿª¿ÿ⁄¿Ÿ¿Ÿ¿Ÿ¿ŸH¿ŸI¿Ÿs¿ŸÆ¿Ÿ˚¿⁄¿⁄¿⁄¿⁄P¿⁄_¿⁄q¿⁄û¿⁄Ω¿⁄‡¿€¿€(¿€^¿€ê¿€√¿€˝¿‹1¿‹=¿‹c¿‹£¿‹€¿›¿›F¿›w¿›ö¿›∞¿›π¿›ø¿›√¿›ƒ¿›–¿›Ó¿ﬁ'¿ﬁ?¿ﬁ@¿ﬁê¿ﬁª¿ﬁÎ¿ﬁÏ¿ﬂ*¿ﬂ+¿ﬂK¿ﬂ¥¿‡E¿‡¶¿‡Û¿‡Ù¿·D¿·ä¿·®¿·¯¿‚@¿‚U¿‚ó¿‚„¿‚È¿„¿„S¿„Y¿„j¿„n¿„o¿„ö¿„¥¿„»¿„Œ¿„‰¿„¯¿„˛¿‰C¿‰i¿‰m¿‰n¿‰“¿Â¿Â'¿ÂM¿Âo¿ÂÑ¿Â±¿Â‹¿Ê¿Ê@¿ÊG¿ÊK¿ÊL¿ÊÓ¿Áz¿Áû¿Á™¿Á ¿Ë¿Ë?¿ËF¿Ë~¿Ë†¿Ëµ¿Ë‚¿ÈA¿Èy¿Èß¿È”¿Í
¿Í9¿Íd¿Í¨¿Íÿ¿Î!¿Î+¿Î5¿ÎB¿Îy¿Îõ¿Î∆¿ÎÃ¿Î‚¿Ï¿Ï	¿Ï
¿Ïn¿Ïõ¿ÏŸ¿Ï‚¿ÏÔ¿Ì$¿ÌQ¿Ìå¿Ìï¿Ìõ¿Ìü¿Ì†¿Ì÷¿Ì˘¿ÓH¿Ói¿Óú¿ÓÂ¿Ô¿Ô5¿Ôó¿ÔÛ¿O¿É¿Õ¿Ò3¿ÒV¿Òæ¿Ò–¿Ò‰¿ÒÓ¿Ò¯¿Ò˛¿Ú¿Ú¿Ú)¿Ú/¿Ú|¿Úø¿Ú≈¿Û¿Û2¿Ûñ¿Û∫¿ÛÂ¿Ù¿Ù<¿ÙÜ¿ÙÃ¿ÙÂ¿ı
¿ı¿ı#¿ıK¿ıv¿ıä¿ıê¿ı™¿ıª¿ıø¿ı¿¿ı⁄¿ˆ ¿ˆ¿ˆi¿ˆî¿ˆò¿ˆô¿˜¿˜%¿˜P¿˜}¿˜°¿˜Œ¿¯¿¯¿¯¿¯¿¯¿¯o¿¯É¿¯¨¿¯¬¿¯„¿¯È¿¯Ì¿¯Ó¿˘¿˘¿˘#¿˘:¿˘V¿˘~¿˘ú¿˘†¿˘°¿˘…¿˘ ¿˘˘¿˙&¿˙2¿˙c¿˙≥¿˚¿˚¿˚F¿˚T¿˚Z¿˚q¿˚ù¿˚»¿˚Ã¿˚Õ¿¸ ¿¸<¿¸H¿¸y¿¸…¿˝¿˝¿˝\¿˝j¿˝p¿˝á¿˝≥¿˝œ¿˝¸¿˛ ¿˛¿˛¿˛U¿˛Å¿˛Ö¿˛Ü¿˛√¿˛…¿ˇ¿ˇ2¿ˇK¿ˇå¿ˇÃ¿ ¿ 0¿ ~¿ Ñ¿ ±¿ ∆¿  ¿ À¿ ¸¿¿R¿ñ¿π¿ø¿	¿¿^¿å¿ç¿›¿*¿l¿ª¿¿¿z¿{¿ù¿¥¿¬¿»¿…¿Ú¿¿C¿|¿≥¿’¿Î¿¿(¿;¿c¿¿Õ¿¿h¿∑¿‹¿È¿1¿j¿í¿›¿	+¿	K¿	ë¿	ß¿	µ¿	Ù¿
¿
¿
)¿
2¿
U¿
[¿
_¿
`¿
{¿
∫¿
ˆ¿
˙¿
˚¿¿S¿è¿ì¿î¿Ï¿Ì¿¿U¿í¿ñ¿ó¿√¿¿A¿E¿F¿Ö¿∂¿¿@¿N¿i¿Ø¿∂¿∫¿ª¿¿u¿≈¿∆¿¿E¿I¿J¿V¿™¿´¿∑¿ˇ¿,¿-¿w¿x¿Ñ¿õ¿ß¿Î¿=¿ê¿ó¿¿¿ƒ¿≈¿—¿Á¿Û¿7¿à¿€¿‚¿
¿¿¿¿A¿M¿û¿Ô¿C¿J¿é¿£¿œ¿›¿Í¿¿4¿A¿ì¿ú¿œ¿È¿Í¿¿
¿4¿8¿9¿E¿p¿|¿Õ¿¿r¿Ä¿á¿¶¿–¿‘¿’¿·¿˙¿¿W¿¶¿˙¿¿¿¿G¿K¿L¿ï¿º¿È¿'¿+¿-¿.¿U¿n¿Ö¿û¿£¿»¿¿Ò¿¿¿¿_¿|¿î¿Æ¿≥¿¥¿¿¿Ï¿ ¿$¿&¿'¿f¿Ç¿ö¿¥¿π¿∫¿∆¿Ú¿%¿)¿+¿,¿n¿ç¿•¿ø¿ƒ¿≈¿—¿˝¿3¿7¿9¿:¿}¿ù¿µ¿œ¿‘¿’¿·¿ ¿ X¿ \¿ ^¿ _¿ °¿ ¢¿ Á¿ Î¿!8¿!E¿!à¿!±¿!¿¿!Ï¿"$¿"*¿".¿"/¿"c¿"d¿"¢¿"Õ¿"—¿"“¿"Ù¿#¿#$¿#(¿#)¿#Y¿#v¿#ï¿#Æ¿#¥¿#∏¿#π¿# ¿#˘¿$¿$'¿$@¿$F¿$J¿$K¿${¿$û¿$µ¿$π¿$∫¿$ﬁ¿%¿%+¿%=¿%A¿%B¿%_¿%í¿%©¿%ª¿%ø¿%¿¿%Á¿&¿&¿&¿&¿&9¿&U¿&Y¿&Z¿&f¿&|¿&ö¿&û¿&†¿&°¿&…¿&Õ¿'¿'v¿'¢¿' ¿'À¿(¿((¿(.¿(|¿(π¿(ø¿)¿)R¿)û¿)‚¿*A¿*†¿*°¿*·¿+#¿+$¿+¿+Ä¿+¨¿+≠¿+·¿+‚¿,(¿,)¿,J¿,u¿,ô¿,µ¿-¿-?¿-å¿-ô¿-∑¿-Ω¿.¿.<¿.C¿.Ö¿.Ω¿.Î¿/¿/3¿/a¿/ê¿/æ¿0¿0&¿0:¿0F¿0p¿0™¿0∞¿0¥¿0µ¿0¡¿0÷¿0Ì¿0˝¿1¿1=¿1a¿1Ç¿1©¿1Ì¿2¿2%¿2N¿2w¿2Ü¿2ì¿2¬¿2Ê¿3¿3.¿3u¿3ú¿3≠¿3÷¿3ˇ¿4¿4¿4%¿4-¿4@¿4J¿4ã¿4µ¿4Î¿4Ò¿5¿5¿5k¿5†¿5›¿6#¿6K¿6á¿6à¿6µ¿6Á¿6Ì¿6Ó¿7=¿7n¿7r¿7s¿7•¿7¿¿8¿8h¿8l¿8m¿8¨¿9¿9¿9]¿9^¿9j¿9≥¿9˘¿:6¿:7¿:z¿:ü¿:Ω¿:Í¿:Î¿;"¿;o¿;§¿;—¿;Ù¿<¿<8¿<A¿<O¿<u¿<≈¿=¿=¿=8¿=à¿=é¿=è¿=›¿>¿>8¿>Z¿>ù¿>•¿>«¿>‡¿?
¿?¿?[¿?í¿?ß¿?«¿?¯¿@:¿@k¿@ô¿@º¿A¿A¿A-¿A<¿AI¿AT¿A\¿Ab¿Ac¿Ao¿Aä¿A÷¿B$¿Bq¿Bé¿Bï¿B∞¿BË¿C¿C=¿CA¿CB¿CN¿CÖ¿C´¿C≈¿CÚ¿Cˇ¿D#¿D)¿D-¿D9¿Ds¿Dt¿DÄ¿D°¿Dƒ¿E¿E5¿E_¿Ee¿Ei¿Ej¿E¢¿EÀ¿F¿F.¿FA¿FI¿Fk¿F≠¿F≥¿F∑¿F∏¿G¿GR¿Go¿Gu¿Gâ¿G†¿G≠¿G ¿G–¿G‘¿G’¿H¿HP¿Hw¿HÃ¿H‡¿I/¿I¿I∞¿IÂ¿J4¿JÖ¿J÷¿K¿K~¿K±¿L¿LS¿Lw¿L≥¿Lﬂ¿M¿M7¿Mç¿M‡¿N¿N.¿NÉ¿N’¿O¿O%¿OV¿Oá¿Oû¿O≥¿O≈¿O’¿P¿P'¿P>¿PL¿Pç¿Pï¿PÂ¿P˛¿Q7¿QÄ¿Qà¿Qº¿Qﬂ¿QÂ¿QÈ¿QÍ¿R¿R;¿Rö¿Rß¿R’¿R€¿Rﬂ¿R‡¿RÏ¿S¿S@¿SP¿Sl¿Sï¿Sπ¿S›¿S˛¿T%¿Ti¿Tê¿T°¿T ¿TÛ¿U¿U¿U>¿Ub¿UÉ¿U™¿UÒ¿V¿V)¿VR¿V{¿Vä¿Vó¿V°¿V©¿Vº¿V∆¿V˘¿W?¿Ww¿W¿W¬¿WÓ¿X&¿X.¿XQ¿XW¿Xï¿Xß¿XÀ¿XÔ¿Y¿Y7¿Y{¿Y¢¿Y≥¿Y‹¿Z¿Z¿Z!¿Z+¿Z@¿ZL¿Zb¿Zh¿Zi¿Zô¿Z√¿Z…¿ZÕ¿ZŒ¿Z˜¿[¿[6¿[m¿[ï¿[∞¿[·¿\¿\¿\¿\)¿\3¿\7¿\8¿\D¿\Z¿\û¿\‘¿\⁄¿\Ú¿\ˆ¿\˜¿]¿]¿]-¿]q¿]õ¿]—¿]◊¿]€¿]‹¿]Ë¿]˚¿^¿^&¿^A¿^T¿^^¿^n¿^¥¿^‡¿^Ë¿^˚¿_¿_&¿_?¿_d¿_ñ¿_∫¿_Á¿`9¿`m¿`Ö¿`ö¿`”¿`Ì¿`Ò¿`Ú¿a5¿an¿ao¿a¶¿a¡¿aÒ¿b¿b¿b#¿b$¿bG¿bH¿bk¿bÉ¿bì¿b∂¿b›¿b˛¿c¿c¿c¿c`¿c™¿cÙ¿d;¿dB¿dq¿dë¿d‰¿e¿ea¿eÜ¿e”¿f$¿f%¿fw¿fÃ¿fˇ¿gJ¿gñ¿g„¿h¿hH¿hp¿h¥¿hƒ¿hˇ¿iM¿in¿i™¿i¿j?¿j]¿jß¿j¬¿k¿k<¿kv¿kw¿kü¿kª¿kŸ¿l¿l5¿l6¿lp¿l‡¿l·¿m¿m4¿md¿m£¿m‰¿n-¿nL¿nm¿n≈¿nÍ¿o¿o¿o<¿o[¿om¿ou¿oü¿oÆ¿o∂¿o¯¿p&¿p5¿p=¿pi¿pò¿p∏¿p”¿p¿pˆ¿p˜¿q=¿qè¿qü¿qÙ¿r0¿rq¿rí¿r¬¿rﬁ¿r¿r¯¿s7¿se¿st¿s|¿s}¿s‘¿s˙¿t+¿t[¿to¿t≤¿tΩ¿tÁ¿tÔ¿t¿u
¿u"¿u(¿uc¿uô¿uö¿uÏ¿v¿vs¿v¿¿vÿ¿w¿wK¿wê¿w≥¿w¡¿w¸¿x¿xT¿xc¿xÑ¿xñ¿xû¿xü¿xÍ¿y¿y¿y"¿y#¿yH¿yn¿yÄ¿yà¿y¿¿yÔ¿yı¿yˆ¿z¿zI¿zå¿zß¿z≤¿z“¿{
¿{L¿{V¿{¶¿{Ò¿|¿|C¿|l¿|á¿|∏¿|√¿|È¿|˘¿}(¿}z¿}À¿}÷¿}¯¿~¿~R¿~•¿~‹¿¿:¿B¿H¿I¿õ¿Ä(¿ÄX¿Ä•¿Ä¬¿Ä√¿ÄÚ¿Å%¿Åp¿Åà¿ÅØ¿Å“¿Åﬂ¿Ç¿ÇÅ¿Çæ¿Ç»¿Ç⁄¿Ç‚¿Ç„¿ÉM¿Éù¿ÉÈ¿Ñ¿Ñ<¿ÑÇ¿Ñø¿Ö¿Ö]¿Öë¿ÖŒ¿Öÿ¿Ö‡¿Ü¿Ü ¿Ü!¿ÜF¿Üy¿Ü®¿Ü”¿Ü¸¿áQ¿ák¿á{¿á™¿á⁄¿à¿à^¿àm¿àö¿à¢¿à¨¿à≠¿à—¿â&¿âe¿â¶¿â«¿â˙¿äE¿ä]¿äÇ¿ä•¿ä∞¿ä÷¿äË¿ä¿ã¿ã^¿ãç¿ãº¿ã‹¿ã˘¿å¿å¿å¿åi¿å≈¿åı¿ç¿çM¿çv¿ç∂¿çÙ¿é¿é¿é-¿éf¿éù¿é÷¿é‹¿è¿è(¿èc¿è†¿è®¿èÆ¿èÎ¿ê#¿ê?¿êx¿ê|¿ê}¿êû¿êü¿ê›¿ë¿ë+¿ëz¿ë…¿í¿ía¿íÜ¿íù¿í«¿ì¿ìà¿ìÓ¿îN¿îä¿î£¿î»¿îÍ¿ï¿ï)¿ïF¿ï¶¿ï≥¿ïÛ¿ñ¿ñ,¿ñ\¿ñv¿ñï¿ñΩ¿ñÃ¿ó¿ó"¿ó.¿óQ¿ó{¿ó°¿ó≈¿ó·¿ó˛¿ò%¿òÖ¿ò´¿ò∏¿òˆ¿ô;¿ô|¿ô∏¿ôŒ¿ô⁄¿ö2¿ön¿öü¿ö´¿ö–¿öÛ¿õ/¿õ`¿õl¿õë¿õ„¿ú ¿úA¿úc¿úÉ¿ú§¿ù
¿ùJ¿ù`¿ùl¿ùë¿ù∏¿ùÎ¿ù˘¿û ¿û,¿ûS¿û…¿û÷¿ü¿üb¿üÉ¿üô¿ü•¿üÊ¿†¿†-¿†i¿†z¿†°¿†√¿°¿°¿°<¿°a¿°à¿°ª¿°…¿°È¿°ı¿¢¿¢1¿¢ë¿¢û¿¢‡¿¢Ù¿£¿£L¿£á¿£ö¿£¶¿£ﬁ¿£Ú¿§¿§j¿§†¿§∏¿§‡¿•¿•-¿•F¿•N¿•`¿•t¿•å¿•≈¿•À¿¶¿¶&¿¶'¿¶s¿¶â¿¶®¿¶©¿¶Õ¿¶˙¿ß[¿ßõ¿ß‚¿®.¿®[¿®c¿®i¿®j¿®∏¿®≈¿®˘¿©*¿©0¿©L¿©¿©Ö¿©ü¿©Ã¿©“¿©¿©Ù¿©ı¿™¿™C¿™j¿™ë¿™ü¿™•¿™÷¿´,¿´c¿´i¿´j¿´õ¿´Ú¿¨)¿¨/¿¨3¿¨4¿¨W¿¨|¿¨ï¿¨∆¿¨Ú¿≠¿≠¿≠ ¿≠ê¿≠ë¿≠ ¿Æ¿Æ9¿ÆC¿Æw¿Æ¿ÆÙ¿Ø5¿Øm¿Ø©¿Ø±¿Ø√¿Ø…¿ØÕ¿ØŒ¿∞¿∞I¿∞y¿∞}¿∞~¿∞¡¿∞˘¿±¿±¿±#¿±'¿±(¿±s¿±∏¿± ¿±–¿≤¿≤¿≤¿≤u¿≤ê¿≤«¿≤⁄¿≤‡¿≤¿≥¿≥8¿≥ñ¿≥Û¿¥A¿¥h¿¥â¿¥û¿¥©¿¥±¿¥ƒ¿¥Œ¿µ ¿µ¿µ.¿µ5¿µ}¿µ§¿µ∂¿µ„¿∂¿∂â¿∂ß¿∑¿∑5¿∑D¿∑ª¿∑…¿∑”¿∑Ë¿∑Ù¿∏2¿∏D¿∏a¿∏õ¿π¿π[¿π“¿π‡¿πÍ¿πˇ¿∫¿∫¿∫9¿∫K¿∫O¿∫P¿∫}¿∫É¿∫∂¿∫º¿∫˚¿ª¿ª4¿ª:¿ªP¿ªV¿ªy¿ª¿ªç¿ª™¿ª‘¿ª‹¿ªÊ¿ª¯¿ª˛¿º¿º¿º^¿ºÅ¿ºï¿º¿¿ºÿ¿ºÔ¿ºˆ¿Ω=¿ΩA¿ΩB¿Ωo¿Ωu¿Ω≤¿Ω∏¿ΩÎ¿ΩÒ¿æ8¿æ>¿æá¿æç¿æ£¿æ©¿æÃ¿æ“¿æ‡¿æ¸¿ø0¿ø8¿øB¿øT¿øh¿øô¿ø±¿ø»¿øœ¿¿T¿¿ë¿¿®¿¿ƒ¿¿ˇ¿¡=¿¡T¿¡u¿¡y¿¡z¿¡∆¿¬¿¬2¿¬8¿¬v¿¬|¿¬ª¿¬¡¿¬Ù¿¬˙¿√¿√¿√9¿√?¿√M¿√g¿√ü¿√ß¿√±¿√√¿√…¿√Ÿ¿√ﬂ¿ƒ0¿ƒa¿ƒu¿ƒø¿ƒ◊¿ƒÁ¿ƒ˛¿≈¿≈k¿≈o¿≈p¿≈º¿∆¿∆(¿∆.¿∆v¿∆|¿∆∫¿∆¿¿«¿«¿«V¿«\¿«r¿«x¿«õ¿«°¿«Ø¿«»¿»
¿»¿»¿».¿»B¿»í¿»™¿»∫¿»—¿»ÿ¿…]¿…ö¿…±¿…Õ¿ ¿ M¿ w¿ ò¿ ú¿ ù¿ È¿ ˆ¿ ¸¿À5¿À;¿Àz¿ÀÄ¿À≥¿Àπ¿Àœ¿À’¿À¯¿À˛¿Ã¿Ã"¿ÃR¿ÃZ¿Ãd¿Ãv¿Ã|¿Ãå¿Ãí¿Ã›¿Õ	¿Õ¿Õb¿Õz¿Õä¿Õ°¿Õ®¿ÕΩ¿Õ˜¿Õ˚¿Õ¸¿ŒH¿ŒU¿Œ[¿Œû¿Œ§¿Œ›¿Œ„¿œ*¿œ0¿œy¿œ¿œï¿œõ¿œæ¿œƒ¿œ“¿œÊ¿– ¿–(¿–2¿–D¿–X¿–£¿–ª¿–À¿–‚¿–È¿–˛¿—?¿—C¿—D¿—ï¿—”¿—Ÿ¿“¿“ ¿“_¿“e¿“ò¿“û¿“¥¿“∫¿“›¿“„¿“Ò¿”¿”f¿”n¿”x¿”ä¿”ê¿”†¿”¶¿”ˆ¿‘%¿‘9¿‘r¿‘ã¿‘´¿‘¬¿‘…¿’,¿’0¿’1¿’Ç¿’¿¿’∆¿÷¿÷¿÷X¿÷^¿÷•¿÷´¿÷Ù¿÷˙¿◊¿◊¿◊9¿◊?¿◊M¿◊j¿◊∆¿◊Œ¿◊ÿ¿◊Í¿◊˛¿ÿ=¿ÿV¿ÿv¿ÿç¿ÿî¿Ÿ¿ŸV¿Ÿp¿Ÿå¿Ÿ«¿⁄¿⁄5¿⁄V¿⁄Z¿⁄[¿⁄ä¿⁄ê¿⁄æ¿⁄ƒ¿€¿€	¿€¿€%¿€H¿€N¿€\¿€u¿€ì¿€∂¿€ı¿‹¿‹¿‹¿‹¿‹1¿‹7¿‹G¿‹M¿‹ô¿‹µ¿‹…¿› ¿›Z¿›s¿›w¿›x¿›´¿›ƒ¿›‘¿ﬁI¿ﬁö¿ﬁ≠¿ﬁ∑¿ﬁ ¿ﬁŒ¿ﬁœ¿ﬁ˙¿ﬂ ¿ﬂ8¿ﬂ>¿ﬂl¿ﬂr¿ﬂ™¿ﬂ∞¿ﬂ˘¿ﬂˇ¿‡¿‡8¿‡>¿‡†¿‡≤¿‡∆¿·0¿·ö¿‚¿‚`¿‚Ç¿‚û¿‚Ÿ¿„¿„.¿„O¿„S¿„T¿„{¿„ñ¿„¶¿„¡¿„‘¿„ﬁ¿‰
¿‰B¿‰[¿‰w¿‰á¿‰£¿‰∂¿‰¿¿‰„¿‰Á¿‰Ë¿Â¿Â2¿ÂÇ¿ÂÀ¿Ê¿Ê¿Ê=¿ÊX¿ÊÖ¿ÊÜ¿Ê®¿ÊŸ¿Á¿ÁO¿Á`¿ÁÇ¿Áå¿Á¿¿Á¡¿Á¯¿ËB¿Ëc¿Ën¿Ëò¿ËŒ¿ËÓ¿È&¿È3¿È=¿Ès¿È{¿È|¿Èø¿Èﬂ¿ÈÈ¿ÈÔ¿Í¿Í¿Í¿Ía¿Í©¿ÍΩ¿Í√¿Í¸¿Î¿ÎA¿ÎG¿Î]¿Îc¿ÎÜ¿Îå¿Îö¿Îµ¿Î‰¿Ï¿ÏJ¿ÏW¿Ïb¿Ïj¿Ït¿ÏÜ¿Ïå¿Ïú¿Ï¢¿ÏÚ¿Ì!¿Ì5¿Ìû¿Ì«¿Ó>¿ÓZ¿Ó^¿Ó_¿Ó´¿ÓÛ¿Ô¿Ô¿ÔP¿ÔV¿Ôè¿Ôï¿ÔÕ¿Ô”¿¿"¿8¿[¿a¿œ¿·¿ı¿Òå¿Òˆ¿Ú{¿Úº¿Úﬁ¿Ú˙¿Û5¿Ûz¿Û§¿Û≈¿Û…¿Û ¿Ù¿Ù7¿ÙG¿Ùb¿Ùu¿Ù¿Ù´¿ÙÃ¿ı4¿ıs¿ıŒ¿ıÁ¿ˆ¿ˆ¿ˆ/¿ˆB¿ˆL¿ˆo¿ˆs¿ˆt¿ˆƒ¿ˆı¿ˆ˚¿˜7¿˜=¿˜|¿˜Ç¿˜ò¿˜û¿˜¡¿˜«¿˜’¿˜ˆ¿¯"¿¯|¿¯†¿¯´¿¯≥¿¯Ω¿¯œ¿¯’¿¯€¿¯Î¿¯Ò¿˘;¿˘g¿˘{¿˘›¿˙¿˙3¿˙©¿˙≈¿˙…¿˙ ¿˚¿˚G¿˚M¿˚ì¿˚ô¿˚’¿˚€¿¸¿¸¿¸b¿¸h¿¸~¿¸°¿¸ß¿˝¿˝,¿˝@¿˝’¿˛B¿˛«¿ˇ¿ˇ-¿ˇI¿ˇÑ¿ˇ¬¿ˇÚ¿ ¿ ¿ ¿ g¿ Ç¿ í¿ ≠¿ ¿¿  ¿ ˆ¿&¿^¿É¿ú¿⁄¿¿#¿+¿=¿C¿_¿`¿p¿å¿ü¿©¿Ã¿–¿—¿¿¿B¿H¿X¿^¿≠¿¯¿A¿m¿Å¿Á¿¿+¿ò¿ú¿ù¿◊¿›¿¿¿O¿U¿ç¿ì¿‹¿¿ç¿∂¿#¿®¿È¿	¿	*¿	e¿	¶¿	 ¿	Î¿	Ô¿	¿
3¿
N¿
q¿
¿
Ö¿
ï¿
∞¿
√¿
Õ¿¿4¿á¿⁄¿H¿x¿ü¿Õ¿È¿˘¿¿(¿2¿H¿m¿s¿w¿x¿¬¿˚¿¿<¿B¿R¿X¿•¿∏¿¿7¿K¿æ¿Á¿¿à¿å¿ç¿◊¿¿¿[¿a¿ú¿¢¿⁄¿‡¿)¿=¿Á¿¿Ä¿¿F¿k¿á¿¬¿¿/¿P¿T¿U¿†¿ª¿Û¿O¿´¿"¿C¿\¿É¿í¿ö¿¨¿≤¿¿)¿W¿s¿¨¿∞¿±¿‹¿‚¿¿¿(¿.¿y¿ë¿£¿¿'¿[¿o¿u¿Ø¿Ô¿¿¿(¿Z¿n¿t¿≥¿∑¿∏¿¿Q¿Ö¿ã¿Ω¿√¿”¿Ÿ¿"¿j¿π¿Í¿˛¿@¿ü¿º¿–¿÷¿¿¿T¿â¿›¿Ò¿ 3¿ F¿ L¿ ä¿ ù¿ £¿!¿!*¿!}¿!ê¿!ñ¿!ó¿!≈¿!Ï¿"¿"&¿";¿"P¿"y¿"¶¿"ª¿"¡¿"≈¿"∆¿"ˆ¿"¸¿#)¿#/¿#E¿#K¿#Ç¿#à¿#ñ¿#≤¿#À¿#”¿#›¿#Ô¿$¿$¿$=¿$C¿$Q¿$n¿$¢¿$™¿$¥¿$∆¿$⁄¿%	¿%$¿%4¿%O¿%b¿%l¿%æ¿%Ÿ¿&;¿&ä¿&¡¿&Û¿&˚¿'¿'$¿'^¿'d¿'ô¿'Œ¿'‘¿(5¿(E¿(a¿(t¿(~¿(°¿(•¿(¶¿(Â¿(Î¿)¿)#¿)9¿)?¿)b¿)h¿)v¿)è¿) ¿)“¿)‹¿)Ó¿*¿*s¿*ì¿*ª¿*À¿*”¿*‡¿+.¿+4¿+8¿+9¿+Ü¿+å¿+¡¿+Ï¿,¿,¿,2¿,E¿,O¿,u¿,¢¿,˙¿-¿-A¿-Q¿-m¿-Ä¿-ä¿-†¿-∏¿.¿.¿.¿.¿.¿.h¿.¨¿.≤¿.Ï¿/"¿/=¿/M¿/h¿/{¿/Ö¿/±¿0¿0i¿0‡¿1¿1¿1A¿1P¿1X¿1j¿1p¿1¿¿1ﬁ¿2¿2!¿2=¿2P¿2Z¿2^¿2_¿2∞¿2∂¿3¿3V¿3£¿3Ì¿4¿4¿4j¿4ª¿4”¿5 ¿5L¿5ö¿5≤¿5Ã¿6#¿6p¿6¿¿6¿7;¿7f¿7π¿8D¿8Q¿8é¿8î¿8™¿8Ú¿9¿9.¿9c¿9i¿9j¿9≠¿9±¿9≤¿9∆¿9¿:^¿:b¿:c¿:¶¿:Œ¿:˘¿;#¿;j¿;n¿;o¿;∂¿;€¿;·¿;Ò¿;˜¿<A¿<x¿<¡¿<¬¿=¿=h¿=i¿=§¿=™¿=Ó¿=Ù¿>0¿>O¿>q¿>ô¿>«¿>‰¿?¿?¿?X¿?}¿?ª¿?‰¿?˛¿@,¿@>¿@F¿@å¿@»¿@–¿@÷¿@⁄¿@€¿@˚¿A¿AO¿Aì¿A±¿A⁄¿A¸¿B$¿Bj¿Bë¿Bô¿Bü¿B£¿B§¿B–¿B—¿C¿C-¿C1¿C2¿Ch¿Cì¿Có¿Cò¿Cπ¿D%¿Dp¿D∑¿E ¿E/¿EÆ¿E¬¿EÊ¿F5¿F\¿Ff¿Fl¿Fπ¿FΩ¿Fæ¿G¿GS¿GÖ¿G†¿G∏¿G¿¿G∆¿G◊¿G€¿G‹¿H(¿Ho¿Hà¿H∫¿H’¿HÔ¿H˜¿H˝¿I¿I¿I¿I!¿IH¿Ic¿IÑ¿IÖ¿I”¿J!¿J4¿JY¿Jî¿J‘¿K#¿Kk¿K£¿KΩ¿K…¿L¿LT¿L¶¿L∆¿L”¿M¿M¿M#¿M<¿Mi¿Mö¿Mœ¿MÔ¿NE¿Nm¿N©¿N≈¿NÎ¿O¿O1¿OZ¿Oå¿OÆ¿O–¿Oˆ¿P-¿PÆ¿P√¿P÷¿PÁ¿Pˆ¿Q¿Q¿Q¿Q¿Q"¿Q$¿Q%¿QB¿QK¿QX¿QZ¿Q[¿QÑ¿Q™¿Q‘¿QÓ¿R¿R3¿RX¿RÜ¿R¡¿R·¿S¿S/¿S0¿Sv¿SÆ¿SÕ¿T%¿T9¿Ta¿T∂¿T‚¿U;¿UA¿UE¿UF¿Uj¿Uà¿U•¿U¶¿U«¿U»¿UÈ¿V¿V=¿VA¿VB¿VS¿V~¿Vü¿V£¿V§¿V±¿VÈ¿VÍ¿WW¿Wê¿W®¿Wµ¿WÕ¿WÔ¿X¿X¿X¿X ¿X!¿Xf¿Xá¿Xü¿Xº¿X‚¿Y¿Y¿Y`¿Y~¿Yß¿Y“¿YÚ¿Z%¿Z,¿Z0¿Z1¿Z=¿Zh¿Z•¿Zø¿ZÀ¿ZË¿Z¸¿[¿[¿[	¿[¿[5¿[J¿[e¿[f¿[r¿[´¿\	¿\¿\¿\!¿\"¿\k¿\ê¿\∞¿\Õ¿\Û¿]"¿]#¿]y¿]ñ¿^F¿^s¿^û¿^¿¿^Û¿^˙¿^˛¿^ˇ¿_¿_|¿_†¿_°¿_≠¿_ÿ¿_Ú¿`L¿`h¿`•¿`ø¿`‹¿`˘¿a¿a¿a¿a¿a&¿aF¿a|¿aó¿aò¿a§¿a›¿b+¿b>¿bB¿bD¿bE¿bñ¿b⁄¿c¿c¿c¿c ¿cB¿c\¿cù¿cÕ¿d¿d#¿dZ¿d∑¿d€¿d‹¿e%¿ep¿eq¿e†¿eÃ¿eˆ¿f¿f¿f¿f>¿f[¿f–¿g$¿gA¿g{¿g≤¿g‘¿h¿h3¿hò¿h©¿hﬂ¿i¿i¿i1¿i9¿i:¿iZ¿i¬¿i˜¿j¿jD¿jé¿jƒ¿k¿kO¿kü¿k˘¿l.¿l6¿l<¿l≠¿l˝¿l˛¿mF¿mG¿mÆ¿mØ¿mÕ¿mÛ¿n¿n¿n¿n¿n.¿nG¿n^¿nã¿n´¿n±¿n›¿o¿o6¿op¿o©¿o’¿p ¿p¿p
¿p¿p`¿pñ¿p™¿p∞¿pÿ¿q¿q¿q¿q%¿q6¿q:¿q;¿qL¿qf¿qè¿qù¿q£¿q≈¿q‹¿q‡¿q·¿qÛ¿qÙ¿r)¿r*¿rÉ¿rù¿r…¿rˇ¿sX¿sm¿ss¿s…¿sÎ¿t ¿t¿t6¿tî¿tö¿t≠¿t±¿t≤¿t’¿t÷¿t‚¿u¿u(¿u,¿u-¿u9¿uv¿uø¿v-¿vC¿vt¿v|¿vÄ¿vÅ¿vç¿v«¿vÍ¿vÓ¿vÔ¿v˚¿w¿w8¿w<¿w=¿wI¿wh¿wj¿wk¿w∞¿w¥¿x¿x-¿x~¿x¿x«¿y¿y!¿y%¿yu¿yº¿y¿¿yÔ¿zQ¿zR¿zé¿zí¿z‡¿z¸¿{ ¿{0¿{n¿{o¿{Ω¿{Ù¿{¯¿|G¿|ñ¿|⁄¿|ﬁ¿}.¿}y¿}≈¿~¿~c¿~z¿~~¿~À¿~¿~Ù¿E¿ì¿⁄¿˛¿Ä¿ÄM¿Äú¿Ä–¿Ä‘¿ÄË¿Å8¿Åt¿Åx¿Å–¿Å‡¿Ç%¿ÇN¿Çh¿Çú¿Çπ¿ÇŒ¿Ç‘¿Ç’¿É#¿És¿É≤¿É„¿É‰¿Ñ'¿Ñ-¿Ñ}¿Ñ ¿Ö¿Ö6¿Ö<¿Öâ¿Ö◊¿Öı¿Ü"¿Ü#¿Ük¿Ü|¿ÜÇ¿Ü¡¿ÜÒ¿ÜÚ¿á?¿áP¿áV¿áü¿á⁄¿à(¿àN¿àf¿àÄ¿àΩ¿à‡¿à˜¿à˚¿à¸¿â?¿âE¿âï¿âº¿âΩ¿âÙ¿â˙¿ä.¿äO¿äc¿äd¿äp¿äò¿äô¿ä•¿äÀ¿ä‰¿ã¿ã¿ã¿ã¿ã¿ã9¿ãT¿ãi¿ãï¿ãô¿ãö¿ã¶¿ãŒ¿ãË¿å¿å¿å	¿å#¿å$¿å0¿åC¿åX¿åò¿åÆ¿å≤¿å≥¿åø¿å˛¿åˇ¿ç!¿çf¿ç|¿çÄ¿çÅ¿ç™¿çÿ¿çÙ¿é0¿éZ¿éq¿éÅ¿éâ¿éÀ¿é‡¿é˘¿è¿è&¿è*¿è+¿èã¿èç¿èé¿èŒ¿è“¿ê#¿ê5¿ê9¿êz¿ê√¿ê˜¿ëA¿ëb¿ëÇ¿ëà¿ëâ¿ë“¿ëÛ¿í¿í¿í¿í1¿ír¿ív¿íx    Ä•  Ä∫  Ä‘  ÄÎÅ ÅÅ& Å*  ÅT  Å}  Å¶  Åœ  Å‰  Å˚  Ç  Ç3  ÇR  Çk  ÇÅ  Ç¶  ÇΩ  Çÿ  Ç˛  É    êa¿ LïÑ†/// An abstraction for an entry managed by a [Navigator].
///
/// This class defines an abstract interface between the navigator and the
/// "routes" that are pushed on and popped off the navigator. Most routes have
/// visual affordances, which they place in the navigators [Overlay] using one
/// or more [OverlayEntry] objects.
///
/// See [Navigator] for more explanation of how to use a [Route] with
/// navigation, including code examples.
///
/// See [MaterialPageRoute] for a route that replaces the entire screen with a
/// platform-adaptive transition.
///
/// A route can belong to a page if the [settings] are a subclass of [Page]. A
/// page-based route, as opposed to a pageless route, is created from
/// [Page.createRoute] during [Navigator.pages] updates. The page associated
/// with this route may change during the lifetime of the route. If the
/// [Navigator] updates the page of this route, it calls [changedInternalState]
/// to notify the route that the page has been updated.
///
/// The type argument `T` is the route's return type, as used by
/// [currentResult], [popped], and [didPop]. The type `void` may be used if the
/// route does not return a value.ïïïÅø ï£ï®|/// Initialize the [Route].
///
/// If the [settings] are not provided, an empty [RouteSettings] object is
/// used instead.ï´ïª  ï“ï»ï›ï‘ï‡ïÊïÛïÙóBóR  ô‚ô  úÿOúı ùùù ùùù!ù&ù"ªÙ3º ºº!º$º"º#º%º&º,7º@ ºTº]º`º^º_ºaºbñ·^ó'//// The navigator that the route is in, if any.   óaÇ~ô…Ç;/// The settings for this route.
///
/// See [RouteSettings] for details.
///
/// The settings can change during the route's lifetime. If the settings
/// change, the route's overlays will be marked dirty (see
/// [changedInternalState]).
///
/// If the route is created from a [Page] in the [Navigator.pages] list, then
/// this will be a [Page] subclass, and it will be updated each time its
/// corresponding [Page] in the [Navigator.pages] has changed. Once the
/// [Route] is removed from the history, this value stops updating (and
/// remains with its last value).   ô˛Ç◊ú´Çw/// The restoration scope ID to be used for the [RestorationScope] surrounding
/// this route.
///
/// The restoration scope ID is null if restoration is currently disabled
/// for this route.
///
/// If the restoration scope ID changes (e.g. because restoration is enabled
/// or disabled) during the life of the route, the [ValueListenable] notifies
/// its listeners. As an example, the ID changes to null while the route is
/// transitioning off screen, which triggers a notification on this field. At
/// that point, the route is considered as no longer present for restoration
/// purposes and its state will not be restored.   ûÅ’†+ÅÄ/// The overlay entries of this route.
///
/// These are typically populated by [install]. The [Navigator] is in charge
/// of adding them to and removing them from the [Overlay].
///
/// There must be at least one entry in this list after [install] has been
/// invoked.
///
/// The [Navigator] will take care of keeping the entries together if the
/// route is moved in the history.   ≤µÖ∑YÑ[/// Returns whether calling [Navigator.maybePop] when this [Route] is current
/// ([isCurrent]) should do anything.
///
/// [Navigator.maybePop] is usually used instead of [Navigator.pop] to handle
/// the system back button, when it hasn't been disabled via
/// [SystemNavigator.setFrameworkHandlesBack].
///
/// By default, if a [Route] is the first route in the history (i.e., if
/// [isFirst]), it reports that pops should be bubbled
/// ([RoutePopDisposition.bubble]). This behavior prevents the user from
/// popping the first route off the history and being stranded at a blank
/// screen; instead, the larger scope is popped (e.g. the application quits,
/// so that the user returns to the previous application).
///
/// In other cases, the default behavior is to accept the pop
/// ([RoutePopDisposition.pop]).
///
/// The third possible value is [RoutePopDisposition.doNotPop], which causes
/// the pop request to be ignored entirely.
///
/// See also:
///
///  * [Form], which provides a [Form.canPop] boolean that is similar.
///  * [PopScope], a widget that provides a way to intercept the back button.   π5]πq0/// Whether calling [didPop] would return false.   πñÅ%∫•Ä˝/// When this route is popped (see [Navigator.pop]) if the result isn't
/// specified or if it's null, this value will be used instead.
///
/// This fallback is implemented by [didComplete]. This value is used if the
/// argument to that method is null.   ∫øÅ2ª“Ä˘/// A future that completes when this route is popped off the navigator.
///
/// The future completes with the value given to [Navigator.pop], if any, or
/// else the value of [currentResult]. See [didComplete] for more discussion
/// on this topic.   ¿ TKÅ™¿ T–u/// Whether this route is the top-most route on the navigator.
///
/// If this is true, then [isActive] is also true.   ¿ U˘Ç¿ V€Ä–/// Whether this route is the bottom-most active route on the navigator.
///
/// If [isFirst] and [isCurrent] are both true then this is the only route on
/// the navigator (and [isActive] will also be true).   ¿ XÅí¿ XaE/// Whether there is at least one active route underneath this route.  ¿ XK¿ XL¿ YôÇŒ¿ [µÇ /// Whether this route is on the navigator.
///
/// If the route is not only active, but also the current route (the top-most
/// route), then [isCurrent] will also be true. If it is the first route (the
/// bottom-most route), then [isFirst] will also be true.
///
/// If a higher route is entirely opaque, then the route will be active but not
/// rendered. It is even possible for the route to be active but for the stateful
/// widgets within the route to not be instantiated. See [ModalRoute.maintainState].   ù,Äúù1  ùAùP   ûeû  û0û9   †XÅz°≈Å=/// Called when the route is inserted into the navigator.
///
/// Uses this to populate [overlayEntries]. There must be at least one entry in
/// this list after [install] has been invoked. The [Navigator] will be in charge
/// to add them to the [Overlay] or remove them from it by calling
/// [OverlayEntry.remove].  °¢°£°Ø°∞°÷Ç¶£±Åù/// Called after [install] when the route is pushed onto the navigator.
///
/// The returned value resolves when the push transition is complete.
///
/// The [didAdd] method will be called instead of [didPush] when the route
/// immediately appears on screen without any push transition.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called.  £Ü£á£ì£î§Äáº•ıÅC/// Called after [install] when the route is added to the navigator.
///
/// This method is called instead of [didPush] when the route immediately
/// appears on screen without any push transition.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called.  •“•”•ﬂ•‡¨@Å≠6Ä /// Called after [install] when the route replaced another in the navigator.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called. ≠A≠R  ≠≠≠ ≠!≠bÖO≤QÑ0/// Returns whether calling [Navigator.maybePop] when this [Route] is current
/// ([isCurrent]) should do anything.
///
/// [Navigator.maybePop] is usually used instead of [Navigator.pop] to handle
/// the system back button.
///
/// By default, if a [Route] is the first route in the history (i.e., if
/// [isFirst]), it reports that pops should be bubbled
/// ([RoutePopDisposition.bubble]). This behavior prevents the user from
/// popping the first route off the history and being stranded at a blank
/// screen; instead, the larger scope is popped (e.g. the application quits,
/// so that the user returns to the previous application).
///
/// In other cases, the default behavior is to accept the pop
/// ([RoutePopDisposition.pop]).
///
/// The third possible value is [RoutePopDisposition.doNotPop], which causes
/// the pop request to be ignored entirely.
///
/// See also:
///
///  * [Form], which provides a [Form.onWillPop] callback that uses this
///    mechanism.
///  * [WillPopScope], another widget that provides a way to intercept the
///    back button.  ±≈±∆±–≤1±÷±˘∑ºÅuπÅE/// {@template flutter.widgets.navigator.onPopInvoked}
/// Called after a route pop was handled.
///
/// Even when the pop is canceled, for example by a [PopScope] widget, this
/// will still be called. The `didPop` parameter indicates whether or not the
/// back navigation actually happened successfully.
/// {@endtemplate} π"π(   ºhÑî¿ @ªÑ/// A request was made to pop this route. If the route can handle it
/// internally (e.g. because it has its own stack of internal state) then
/// return false, otherwise return true (by returning the value of calling
/// `super.didPop`). Returning false will prevent the default behavior of
/// [NavigatorState.pop].
///
/// When this function returns true, the navigator removes this route from
/// the history but does not yet call [dispose]. Instead, it is the route's
/// responsibility to call [NavigatorState.finalizeRoute], which will in turn
/// call [dispose] on the route. This sequence lets the route perform an
/// exit animation (or some other visual effect) after being popped but prior
/// to being disposed.
///
/// This method should call [didComplete] to resolve the [popped] future (and
/// this is all that the default implementation does); routes should not wait
/// for their exit animation to complete before doing so.
///
/// See [popped], [didComplete], and [currentResult] for a discussion of the
/// `result` argument. ¿ @¬	¿ @∆  ¿ @•¿ @¶¿ A É»¿ DwÉ5/// The route was popped or is otherwise being removed somewhat gracefully.
///
/// This is called by [didPop] and in response to
/// [NavigatorState.pushReplacement]. If [didPop] was not called, then the
/// [NavigatorState.finalizeRoute] method must be called immediately, and no exit
/// animation will run.
///
/// The [popped] future is completed by this method. The `result` argument
/// specifies the value that this future is completed with, unless it is null,
/// in which case [currentResult] is used instead.
///
/// This should be called before the pop animation, if any, takes place,
/// though in some cases the animation may be driven by the user before the
/// route is committed to being popped; this can in particular happen with the
/// iOS-style back gesture. See [NavigatorState.didStartUserGesture]. ¿ DÉ	¿ Dá  ¿ DT¿ DU¿ Da¿ Db¿ DÃÅ¿ E∂Äº/// The given route, which was above this one, has been popped off the
/// navigator.
///
/// This route is now the current route ([isCurrent] is now true), and there
/// is no next route. ¿ E¡¿ E—  ¿ Eì¿ Eî¿ E†¿ E°¿ E‚Ç¿ GÀÅ≥/// This route's next route has changed to the given new route.
///
/// This is called on a route whenever the next route changes for any reason,
/// so long as it is in the history, including when a route is first added to
/// a [Navigator] (e.g. by [Navigator.push]), except for cases when
/// [didPopNext] would be called.
///
/// The `nextRoute` argument will be null if there's no new next route (i.e.
/// if [isCurrent] is true). ¿ GŸ¿ GÍ  ¿ G®¿ G©¿ Gµ¿ G∂¿ G˚Ç ¿ IÁÅ∂/// This route's previous route has changed to the given new route.
///
/// This is called on a route whenever the previous route changes for any
/// reason, so long as it is in the history, except for immediately after the
/// route itself has been pushed (in which case [didPush] or [didReplace] will
/// be called instead).
///
/// The `previousRoute` argument will be null if there's no previous route
/// (i.e. if [isFirst] is true). ¿ I˘¿ J
  ¿ Iƒ¿ I≈¿ I—¿ I“¿ JÇO¿ LTÅ˚/// Called whenever the internal state of the route has changed.
///
/// This should be called whenever [willHandlePopInternally], [didPop],
/// [ModalRoute.offstage], or other internal state of the route changes value.
/// It is used by [ModalRoute], for example, to report the new information via
/// its inherited widget to any children of the route.
///
/// See also:
///
///  * [changedExternalState], which is called when the [Navigator] has
///    updated in some manner that might affect the routes.  ¿ L1¿ L2¿ L>¿ L?¿ LrÑµ¿ QÑI/// Called whenever the [Navigator] has updated in some manner that might
/// affect routes, to indicate that the route may wish to rebuild as well.
///
/// This is called by the [Navigator] whenever the
/// [NavigatorState]'s [State.widget] changes (as in [State.didUpdateWidget]),
/// for example because the [MaterialApp] has been rebuilt. This
/// ensures that routes that directly refer to the state of the
/// widget that built the [MaterialApp] will be notified when that
/// widget rebuilds, since it would otherwise be difficult to notify
/// the routes that state they depend on may have changed.
///
/// It is also called whenever the [Navigator]'s dependencies change
/// (as in [State.didChangeDependencies]). This allows routes to use the
/// [Navigator]'s context ([NavigatorState.context]), for example in
/// [ModalRoute.barrierColor], and update accordingly.
///
/// The [ModalRoute] subclass overrides this to force the barrier
/// overlay to rebuild.
///
/// See also:
///
///  * [changedInternalState], the equivalent but for changes to the internal
///    state of the route.  ¿ PÍ¿ PÎ¿ P˜¿ P¯¿ Q+É¿ S\Å˜/// Discards any resources used by the object.
///
/// This method should not remove its [overlayEntries] from the [Overlay]. The
/// object's owner is in charge of doing that.
///
/// After this is called, the object is not in a usable state and should be
/// discarded.
///
/// This method should only be called by the object's owner; typically the
/// [Navigator] owns a route and so will call this method when the route is
/// removed, after which the route is no longer referenced by the navigator.  ¿ S9¿ S:¿ SJ¿ SK ¿ \kÇ_¿ \µ8/// Data that might be useful in constructing a [Route]. ¿ \«k ¿ \˙¿ ]*/// Creates data used to construct routes.¿ ]	¿ ]  ¿ ]¿ ]#   ¿ ]6p¿ ]¢W/// The name of the route (e.g., "/settings").
///
/// If null, the route is anonymous. ¿ ]´Äó¿ ^9y/// The arguments passed to this route.
///
/// May be used when building the route, e.g. in [Navigator.onGenerateRoute].  ¿ ^GÄÅ¿ ^Z   ¿ ^G¿ ^H¿ \§¿ \•¿ ^ÃÜ*¿ `Å8/// Describes the configuration of a [Route].
///
/// The type argument `T` is the corresponding [Route]'s return type, as
/// used by [Route.currentResult], [Route.popped], and [Route.didPop].
///
/// See also:
///
///  * [Navigator.pages], which accepts a list of [Page]s and updates its routes
///    history.¿ `¿ `¿ `6Äò ¿ `w¿ `{8/// Creates a page and initializes [key] for subclasses.¿ `Ç¿ `à  ¿ `ê
¿ `ó  ¿ `†¿ `ß  ¿ `µ¿ `ª   ¿ `“ÄÇ¿ aQh/// The key associated with this page.
///
/// This key will be used for comparing pages in [canUpdate]. ¿ aYÅM¿ bôÅ/// Restoration ID to save and restore the state of the [Route] configured by
/// this page.
///
/// If no restoration ID is provided, the [Route] will not restore its state.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.  ¿ b´Å¿ cPÄó/// Whether this page can be updated with the [other] page.
///
/// Two pages are consider updatable if they have same the [runtimeType] and
/// [key]. ¿ cZ¿ ci   ¿ cƒÄÀ¿ dmÄé/// Creates the [Route] that corresponds to this page.
///
/// The created [Route] must have its [Route.settings] property set to this [Page]. ¿ dy¿ dá  ¿ dY¿ dZ¿ dìa¿ d¶   ¿ dì¿ dî ¿ d¯ât¿ e<=/// An interface for observing the behavior of a [Navigator].  ¿ hL¿ h@ ¿ hN¿ hU¿ hd¿ hV¿ he¿ hf¿ eRo¿ e¢9/// The navigator that the observer is observing, if any.   ¿ hlÄ›¿ i	Äè/// The [Navigator] pushed `route`.
///
/// The route immediately below that one, and thus the previously active
/// route, is `previousRoute`. ¿ i¿ i!  ¿ i'¿ i8   ¿ iMÄ◊¿ iÂÄä/// The [Navigator] popped `route`.
///
/// The route immediately below that one, and thus the newly active
/// route, is `previousRoute`. ¿ iÏ¿ i¸  ¿ j¿ j   ¿ j(Å¿ k÷Åñ/// The [Navigator] removed `route`.
///
/// If only one route is being removed, then the route immediately below
/// that one, if any, is `previousRoute`.
///
/// If multiple routes are being removed, then the route below the
/// bottommost route being removed, if any, is `previousRoute`, and this
/// method will be called once for each removed route, from the topmost route
/// to the bottommost route. ¿ k‡¿ k  ¿ kˆ¿ l   ¿ lÄÜ¿ l\8/// The [Navigator] replaced `oldRoute` with `newRoute`. ¿ li¿ lz  ¿ lÉ¿ lî   ¿ l¶Å$¿ m~Ä /// The [Navigator]'s routes are being moved by a user gesture.
///
/// For example, this is called when an iOS back gesture starts, and is used
/// to disabled hero animations during such interactions. ¿ mí¿ m¢  ¿ m®¿ mπ   ¿ mŒÄú¿ nRx/// User gesture is no longer controlling the [Navigator].
///
/// Paired with an earlier call to [didStartUserGesture].    ¿ nnå$¿ p«ÇR/// An inherited widget to host a hero controller.
///
/// The hosted hero controller will be picked up by the navigator in the
/// [child] subtree. Once a navigator picks up this controller, the navigator
/// will bar any navigator below its subtree from receiving this controller.
///
/// The hero controller inside the [HeroControllerScope] can only subscribe to
/// one navigator at a time. An assertion will be thrown if the hero controller
/// subscribes to more than one navigators. This can happen when there are
/// multiple navigators under the same [HeroControllerScope] in parallel. ¿ p˜ÄÆ ¿ q4¿ qG4/// Creates a widget to host the input [controller].¿ qN	¿ qU  ¿ q]'¿ q{  ¿ qä¿ qö   ¿ q©Ä¡¿ r ¿ r!¿ r%Y/// Creates a widget to prevent the subtree from receiving the hero controller
/// above.¿ r,	¿ r3  ¿ r;¿ rK  ¿ rc¿ rX¿ re¿ rn]¿ r¡:/// The hero controller that is hosted inside this widget.  ¿ r–Ç]¿ tÑÅà/// Retrieves the [HeroController] from the closest [HeroControllerScope]
/// ancestor, or null if none exists.
///
/// Calling this method will create a dependency on the closest
/// [HeroControllerScope] in the [context], if there is one.
///
/// See also:
///
/// * [HeroControllerScope.of], which is similar to this method, but asserts
///   if no [HeroControllerScope] ancestor is found. ¿ tå¿ tö   ¿ u1Ñ‰¿ w?Å›/// Retrieves the [HeroController] from the closest [HeroControllerScope]
/// ancestor.
///
/// If no ancestor is found, this method will assert in debug mode, and throw
/// an exception in release mode.
///
/// Calling this method will create a dependency on the closest
/// [HeroControllerScope] in the [context].
///
/// See also:
///
/// * [HeroControllerScope.maybeOf], which is similar to this method, but
///   returns null if no [HeroControllerScope] ancestor is found. ¿ wB¿ wP   ¿ zw¿ z*  ¿ z=¿ zR  ¿ z¿ z ¿ zîâÕ¿ {<Äò/// A [Route] wrapper interface that can be staged for [TransitionDelegate] to
/// decide how its underlying [Route] should transition on or off screen.   ¿ {V>¿ {é"/// Retrieves the wrapped [Route].   ¿ {òÅ<¿ |∑Å/// Whether this route is waiting for the decision on how to enter the screen.
///
/// If this property is true, this route requires an explicit decision on how
/// to transition into the screen. Such a decision should be made in the
/// [TransitionDelegate.resolve].   ¿ |ÿÅ9¿ }ıÅ	/// Whether this route is waiting for the decision on how to exit the screen.
///
/// If this property is true, this route requires an explicit decision on how
/// to transition off the screen. Such a decision should be made in the
/// [TransitionDelegate.resolve].   ¿ ~ÅQ¿ XÅ3/// Marks the [route] to be pushed with transition.
///
/// During [TransitionDelegate.resolve], this can be called on an entering
/// route (where [RouteTransitionRecord.isWaitingForEnteringDecision] is true) in indicate that the
/// route should be pushed onto the [Navigator] with an animated transition.   ¿ jÅT¿ Ä±Å7/// Marks the [route] to be added without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an entering
/// route (where [RouteTransitionRecord.isWaitingForEnteringDecision] is true) in indicate that the
/// route should be added onto the [Navigator] without an animated transition.   ¿ Ä¬Å¿ ÅæÄÏ/// Marks the [route] to be popped with transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be popped off the [Navigator] with
/// an animated transition. ¿ Å ¿ Å”   ¿ ÅﬂÅP¿ ÉÅ/// Marks the [route] to be completed without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be completed with the provided
/// result and removed from the [Navigator] without an animated transition. ¿ É¿ É'   ¿ É3Å,¿ ÑOÅ/// Marks the [route] to be removed without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be removed from the [Navigator]
/// without completing and without an animated transition.    ¿ Ñc®¿ ç#à∞/// The delegate that decides how pages added and removed from [Navigator.pages]
/// transition in or out of the screen.
///
/// This abstract class implements the API to be called by [Navigator] when it
/// requires explicit decisions on how the routes transition on or off the screen.
///
/// To make route transition decisions, subclass must implement [resolve].
///
/// {@tool snippet}
/// The following example demonstrates how to implement a subclass that always
/// removes or adds routes without animated transitions and puts the removed
/// routes at the top of the list.
///
/// ```dart
/// class NoAnimationTransitionDelegate extends TransitionDelegate<void> {
///   @override
///   Iterable<RouteTransitionRecord> resolve({
///     required List<RouteTransitionRecord> newPageRouteHistory,
///     required Map<RouteTransitionRecord?, RouteTransitionRecord> locationToExitingPageRoute,
///     required Map<RouteTransitionRecord?, List<RouteTransitionRecord>> pageRouteToPagelessRoutes,
///   }) {
///     final List<RouteTransitionRecord> results = <RouteTransitionRecord>[];
///
///     for (final RouteTransitionRecord pageRoute in newPageRouteHistory) {
///       if (pageRoute.isWaitingForEnteringDecision) {
///         pageRoute.markForAdd();
///       }
///       results.add(pageRoute);
///
///     }
///     for (final RouteTransitionRecord exitingPageRoute in locationToExitingPageRoute.values) {
///       if (exitingPageRoute.isWaitingForExitingDecision) {
///        exitingPageRoute.markForRemove();
///        final List<RouteTransitionRecord>? pagelessRoutes = pageRouteToPagelessRoutes[exitingPageRoute];
///        if (pagelessRoutes != null) {
///          for (final RouteTransitionRecord pagelessRoute in pagelessRoutes) {
///             pagelessRoute.markForRemove();
///           }
///        }
///       }
///       results.add(exitingPageRoute);
///
///     }
///     return results;
///   }
/// }
///
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [Navigator.transitionDelegate], which uses this class to make route
///    transition decisions.
///  * [DefaultTransitionDelegate], which implements the default way to decide
///    how routes transition in or out of the screen.¿ ç6¿ ç6¿ ç=e ¿ çç¿ çüG/// Creates a delegate and enables subclass to create a constant class.    ¿ ç¶ç¿ ç∆  ¿ çÿ8¿ ç˛  ¿ éV¿ éS  ¿ ér[¿ éµ   ¿ ö¡ë±¿ ´hèÓ/// A method that will be called by the [Navigator] to decide how routes
/// transition in or out of the screen when [Navigator.pages] is updated.
///
/// The `newPageRouteHistory` list contains all page-based routes in the order
/// that will be on the [Navigator]'s history stack after this update
/// completes. If a route in `newPageRouteHistory` has its
/// [RouteTransitionRecord.isWaitingForEnteringDecision] set to true, this
/// route requires explicit decision on how it should transition onto the
/// Navigator. To make a decision, call [RouteTransitionRecord.markForPush] or
/// [RouteTransitionRecord.markForAdd].
///
/// The `locationToExitingPageRoute` contains the pages-based routes that
/// are removed from the routes history after page update. This map records
/// page-based routes to be removed with the location of the route in the
/// original route history before the update. The keys are the locations
/// represented by the page-based routes that are directly below the removed
/// routes, and the value are the page-based routes to be removed. The
/// location is null if the route to be removed is the bottom most route. If
/// a route in `locationToExitingPageRoute` has its
/// [RouteTransitionRecord.isWaitingForExitingDecision] set to true, this
/// route requires explicit decision on how it should transition off the
/// Navigator. To make a decision for a removed route, call
/// [RouteTransitionRecord.markForPop],
/// [RouteTransitionRecord.markForComplete] or
/// [RouteTransitionRecord.markForRemove]. It is possible that decisions are
/// not required for routes in the `locationToExitingPageRoute`. This can
/// happen if the routes have already been popped in earlier page updates and
/// are still waiting for popping animations to finish. In such case, those
/// routes are still included in the `locationToExitingPageRoute` with their
/// [RouteTransitionRecord.isWaitingForExitingDecision] set to false and no
/// decisions are required.
///
/// The `pageRouteToPagelessRoutes` records the page-based routes and their
/// associated pageless routes. If a page-based route is waiting for exiting
/// decision, its associated pageless routes also require explicit decisions
/// on how to transition off the screen.
///
/// Once all the decisions have been made, this method must merge the removed
/// routes (whether or not they require decisions) and the
/// `newPageRouteHistory` and return the merged result. The order in the
/// result will be the order the [Navigator] uses for updating the route
/// history. The return list must preserve the same order of routes in
/// `newPageRouteHistory`. The removed routes, however, can be inserted into
/// the return list freely as long as all of them are included.
///
/// For example, consider the following case.
///
/// `newPageRouteHistory = [A, B, C]`
///
/// `locationToExitingPageRoute = {A -> D, C -> E}`
///
/// The following outputs are valid.
///
/// `result = [A, B ,C ,D ,E]` is valid.
/// `result = [D, A, B ,C ,E]` is also valid because exiting route can be
/// inserted in any place.
///
/// The following outputs are invalid.
///
/// `result = [B, A, C ,D ,E]` is invalid because B must be after A.
/// `result = [A, B, C ,E]` is invalid because results must include D.
///
/// See also:
///
///  * [RouteTransitionRecord.markForPush], which makes route enter the screen
///    with an animated transition.
///  * [RouteTransitionRecord.markForAdd], which makes route enter the screen
///    without an animated transition.
///  * [RouteTransitionRecord.markForPop], which makes route exit the screen
///    with an animated transition.
///  * [RouteTransitionRecord.markForRemove], which does not complete the
///    route and makes it exit the screen without an animated transition.
///  * [RouteTransitionRecord.markForComplete], which completes the route and
///    makes it exit the screen without an animated transition.
///  * [DefaultTransitionDelegate.resolve], which implements the default way
///    to decide how routes transition in or out of the screen. ¿ ´v8¿ ´ú  ¿ ´¥V¿ ´Ò  ¿ ¨[¿ ¨S    ¿ ¨véX¿ ÆÖÇ/// The default implementation of [TransitionDelegate] that the [Navigator] will
/// use if its [Navigator.transitionDelegate] is not specified.
///
/// This transition delegate follows two rules. Firstly, all the entering routes
/// are placed on top of the exiting routes if they are at the same location.
/// Secondly, the top most route will always transition with an animated transition.
/// All the other routes below will either be completed with
/// [Route.currentResult] or added without an animated transition.¿ Æü¿ Æü¿ ÆƒY ¿ Æ˜¿ Ø*/// Creates a default transition delegate. ¿ Ø¿ Ø¿ Ø  ¿ Ø!ã´¿ ØM  ¿ Ø[8¿ ØÅ  ¿ ØôV¿ Ø÷  ¿ Øı[¿ ∞8  ¿ Ø!¿ Ø" ¿ ªº¿ç¿ Ó˘≥6/// A widget that manages a set of child widgets with a stack discipline.
///
/// Many apps have a navigator near the top of their widget hierarchy in order
/// to display their logical history using an [Overlay] with the most recently
/// visited pages visually on top of the older pages. Using this pattern lets
/// the navigator visually transition from one page to another by moving the widgets
/// around in the overlay. Similarly, the navigator can be used to show a dialog
/// by positioning the dialog widget above the current page.
///
/// ## Using the Pages API
///
/// The [Navigator] will convert its [Navigator.pages] into a stack of [Route]s
/// if it is provided. A change in [Navigator.pages] will trigger an update to
/// the stack of [Route]s. The [Navigator] will update its routes to match the
/// new configuration of its [Navigator.pages]. To use this API, one can create
/// a [Page] subclass and defines a list of [Page]s for [Navigator.pages]. A
/// [Navigator.onPopPage] callback is also required to properly clean up the
/// input pages in case of a pop.
///
/// By Default, the [Navigator] will use [DefaultTransitionDelegate] to decide
/// how routes transition in or out of the screen. To customize it, define a
/// [TransitionDelegate] subclass and provide it to the
/// [Navigator.transitionDelegate].
///
/// For more information on using the pages API, see the [Router] widget.
///
/// ## Using the Navigator API
///
/// Mobile apps typically reveal their contents via full-screen elements
/// called "screens" or "pages". In Flutter these elements are called
/// routes and they're managed by a [Navigator] widget. The navigator
/// manages a stack of [Route] objects and provides two ways for managing
/// the stack, the declarative API [Navigator.pages] or imperative API
/// [Navigator.push] and [Navigator.pop].
///
/// When your user interface fits this paradigm of a stack, where the user
/// should be able to _navigate_ back to an earlier element in the stack,
/// the use of routes and the Navigator is appropriate. On certain platforms,
/// such as Android, the system UI will provide a back button (outside the
/// bounds of your application) that will allow the user to navigate back
/// to earlier routes in your application's stack. On platforms that don't
/// have this build-in navigation mechanism, the use of an [AppBar] (typically
/// used in the [Scaffold.appBar] property) can automatically add a back
/// button for user navigation.
///
/// ### Displaying a full-screen route
///
/// Although you can create a navigator directly, it's most common to use the
/// navigator created by the `Router` which itself is created and configured by
/// a [WidgetsApp] or a [MaterialApp] widget. You can refer to that navigator
/// with [Navigator.of].
///
/// A [MaterialApp] is the simplest way to set things up. The [MaterialApp]'s
/// home becomes the route at the bottom of the [Navigator]'s stack. It is what
/// you see when the app is launched.
///
/// ```dart
/// void main() {
///   runApp(const MaterialApp(home: MyAppHome()));
/// }
/// ```
///
/// To push a new route on the stack you can create an instance of
/// [MaterialPageRoute] with a builder function that creates whatever you
/// want to appear on the screen. For example:
///
/// ```dart
/// Navigator.push(context, MaterialPageRoute<void>(
///   builder: (BuildContext context) {
///     return Scaffold(
///       appBar: AppBar(title: const Text('My Page')),
///       body: Center(
///         child: TextButton(
///           child: const Text('POP'),
///           onPressed: () {
///             Navigator.pop(context);
///           },
///         ),
///       ),
///     );
///   },
/// ));
/// ```
///
/// The route defines its widget with a builder function instead of a
/// child widget because it will be built and rebuilt in different
/// contexts depending on when it's pushed and popped.
///
/// As you can see, the new route can be popped, revealing the app's home
/// page, with the Navigator's pop method:
///
/// ```dart
/// Navigator.pop(context);
/// ```
///
/// It usually isn't necessary to provide a widget that pops the Navigator
/// in a route with a [Scaffold] because the Scaffold automatically adds a
/// 'back' button to its AppBar. Pressing the back button causes
/// [Navigator.pop] to be called. On Android, pressing the system back
/// button does the same thing.
///
/// ### Using named navigator routes
///
/// Mobile apps often manage a large number of routes and it's often
/// easiest to refer to them by name. Route names, by convention,
/// use a path-like structure (for example, '/a/b/c').
/// The app's home page route is named '/' by default.
///
/// The [MaterialApp] can be created
/// with a [Map<String, WidgetBuilder>] which maps from a route's name to
/// a builder function that will create it. The [MaterialApp] uses this
/// map to create a value for its navigator's [onGenerateRoute] callback.
///
/// ```dart
/// void main() {
///   runApp(MaterialApp(
///     home: const MyAppHome(), // becomes the route named '/'
///     routes: <String, WidgetBuilder> {
///       '/a': (BuildContext context) => const MyPage(title: Text('page A')),
///       '/b': (BuildContext context) => const MyPage(title: Text('page B')),
///       '/c': (BuildContext context) => const MyPage(title: Text('page C')),
///     },
///   ));
/// }
/// ```
///
/// To show a route by name:
///
/// ```dart
/// Navigator.pushNamed(context, '/b');
/// ```
///
/// ### Routes can return a value
///
/// When a route is pushed to ask the user for a value, the value can be
/// returned via the [pop] method's result parameter.
///
/// Methods that push a route return a [Future]. The Future resolves when the
/// route is popped and the [Future]'s value is the [pop] method's `result`
/// parameter.
///
/// For example if we wanted to ask the user to press 'OK' to confirm an
/// operation we could `await` the result of [Navigator.push]:
///
/// ```dart
/// bool? value = await Navigator.push(context, MaterialPageRoute<bool>(
///   builder: (BuildContext context) {
///     return Center(
///       child: GestureDetector(
///         child: const Text('OK'),
///         onTap: () { Navigator.pop(context, true); }
///       ),
///     );
///   }
/// ));
/// ```
///
/// If the user presses 'OK' then value will be true. If the user backs
/// out of the route, for example by pressing the Scaffold's back button,
/// the value will be null.
///
/// When a route is used to return a value, the route's type parameter must
/// match the type of [pop]'s result. That's why we've used
/// `MaterialPageRoute<bool>` instead of `MaterialPageRoute<void>` or just
/// `MaterialPageRoute`. (If you prefer to not specify the types, though, that's
/// fine too.)
///
/// ### Popup routes
///
/// Routes don't have to obscure the entire screen. [PopupRoute]s cover the
/// screen with a [ModalRoute.barrierColor] that can be only partially opaque to
/// allow the current screen to show through. Popup routes are "modal" because
/// they block input to the widgets below.
///
/// There are functions which create and show popup routes. For
/// example: [showDialog], [showMenu], and [showModalBottomSheet]. These
/// functions return their pushed route's Future as described above.
/// Callers can await the returned value to take an action when the
/// route is popped, or to discover the route's value.
///
/// There are also widgets which create popup routes, like [PopupMenuButton] and
/// [DropdownButton]. These widgets create internal subclasses of PopupRoute
/// and use the Navigator's push and pop methods to show and dismiss them.
///
/// ### Custom routes
///
/// You can create your own subclass of one of the widget library route classes
/// like [PopupRoute], [ModalRoute], or [PageRoute], to control the animated
/// transition employed to show the route, the color and behavior of the route's
/// modal barrier, and other aspects of the route.
///
/// The [PageRouteBuilder] class makes it possible to define a custom route
/// in terms of callbacks. Here's an example that rotates and fades its child
/// when the route appears or disappears. This route does not obscure the entire
/// screen because it specifies `opaque: false`, just as a popup route does.
///
/// ```dart
/// Navigator.push(context, PageRouteBuilder<void>(
///   opaque: false,
///   pageBuilder: (BuildContext context, _, __) {
///     return const Center(child: Text('My PageRoute'));
///   },
///   transitionsBuilder: (___, Animation<double> animation, ____, Widget child) {
///     return FadeTransition(
///       opacity: animation,
///       child: RotationTransition(
///         turns: Tween<double>(begin: 0.5, end: 1.0).animate(animation),
///         child: child,
///       ),
///     );
///   }
/// ));
/// ```
///
/// The page route is built in two parts, the "page" and the
/// "transitions". The page becomes a descendant of the child passed to
/// the `transitionsBuilder` function. Typically the page is only built once,
/// because it doesn't depend on its animation parameters (elided with `_`
/// and `__` in this example). The transition is built on every frame
/// for its duration.
///
/// (In this example, `void` is used as the return type for the route, because
/// it does not return a value.)
///
/// ### Nesting Navigators
///
/// An app can use more than one [Navigator]. Nesting one [Navigator] below
/// another [Navigator] can be used to create an "inner journey" such as tabbed
/// navigation, user registration, store checkout, or other independent journeys
/// that represent a subsection of your overall application.
///
/// #### Example
///
/// It is standard practice for iOS apps to use tabbed navigation where each
/// tab maintains its own navigation history. Therefore, each tab has its own
/// [Navigator], creating a kind of "parallel navigation."
///
/// In addition to the parallel navigation of the tabs, it is still possible to
/// launch full-screen pages that completely cover the tabs. For example: an
/// on-boarding flow, or an alert dialog. Therefore, there must exist a "root"
/// [Navigator] that sits above the tab navigation. As a result, each of the
/// tab's [Navigator]s are actually nested [Navigator]s sitting below a single
/// root [Navigator].
///
/// In practice, the nested [Navigator]s for tabbed navigation sit in the
/// [WidgetsApp] and [CupertinoTabView] widgets and do not need to be explicitly
/// created or managed.
///
/// {@tool sample}
/// The following example demonstrates how a nested [Navigator] can be used to
/// present a standalone user registration journey.
///
/// Even though this example uses two [Navigator]s to demonstrate nested
/// [Navigator]s, a similar result is possible using only a single [Navigator].
///
/// Run this example with `flutter run --route=/signup` to start it with
/// the signup flow instead of on the home page.
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.0.dart **
/// {@end-tool}
///
/// [Navigator.of] operates on the nearest ancestor [Navigator] from the given
/// [BuildContext]. Be sure to provide a [BuildContext] below the intended
/// [Navigator], especially in large `build` methods where nested [Navigator]s
/// are created. The [Builder] widget can be used to access a [BuildContext] at
/// a desired location in the widget subtree.
///
/// ### Finding the enclosing route
///
/// In the common case of a modal route, the enclosing route can be obtained
/// from inside a build method using [ModalRoute.of]. To determine if the
/// enclosing route is the active route (e.g. so that controls can be dimmed
/// when the route is not active), the [Route.isCurrent] property can be checked
/// on the returned route.
///
/// ## State Restoration
///
/// If provided with a [restorationScopeId] and when surrounded by a valid
/// [RestorationScope] the [Navigator] will restore its state by recreating
/// the current history stack of [Route]s during state restoration and by
/// restoring the internal state of those [Route]s. However, not all [Route]s
/// on the stack can be restored:
///
///  * [Page]-based routes restore their state if [Page.restorationId] is
///    provided.
///  * [Route]s added with the classic imperative API ([push], [pushNamed], and
///    friends) can never restore their state.
///  * A [Route] added with the restorable imperative API ([restorablePush],
///    [restorablePushNamed], and all other imperative methods with "restorable"
///    in their name) restores its state if all routes below it up to and
///    including the first [Page]-based route below it are restored. If there
///    is no [Page]-based route below it, it only restores its state if all
///    routes below it restore theirs.
///
/// If a [Route] is deemed restorable, the [Navigator] will set its
/// [Route.restorationScopeId] to a non-null value. Routes can use that ID to
/// store and restore their own state. As an example, the [ModalRoute] will
/// use this ID to create a [RestorationScope] for its content widgets. ¿ ÔÇÁ ¿ ÔΩ¿ Ô∆Äí/// Creates a widget that maintains a stack-based history of child widgets.
///
/// If the [pages] is not empty, the [onPopPage] must not be null.¿ ÔÕ	¿ Ô‘  ¿ Ô‹$¿ Ô‚  ¿ ¿   ¿ ¿    ¿ 1E¿ 7  ¿ |¿ Ç  ¿ ñ¿ ú  ¿ ØD¿ µ  ¿ ˘'¿ ˇ  ¿ Ò&!¿ Ò,  ¿ ÒM,¿ ÒS  ¿ Ò¿ ÒÖ  ¿ Òù¿ Ò£  ¿ Ò∫D¿ Ò¿  ¿ ÔÈ¿ Ô˛¿ Ôˇ¿ ÔÔ¿ Ô˝¿ Ô¿ ÔÙ¿ Ô¸¿ Ôı¿ P¿ Y¿ Z¿ …¿ œ¿ Ë¿ ¿ È¿ Ò¿ Ú¿ Ò¿ Ò:¿ Ò>¿ Ò?¿ Ò^¿ Òw¿ Òx¿ Òd¿ Òv¿ Òe¿ Òì¿ Ò‹¿ Ú	Ü"¿ ¯&Ö /// The list of pages with which to populate the history.
///
/// Pages are turned into routes using [Page.createRoute] in a manner
/// analogous to how [Widget]s are turned into [Element]s (and [State]s or
/// [RenderObject]s) using [Widget.createElement] (and
/// [StatefulWidget.createState] or [RenderObjectWidget.createRenderObject]).
///
/// When this list is updated, the new list is compared to the previous
/// list and the set of routes is updated accordingly.
///
/// Some [Route]s do not correspond to [Page] objects, namely, those that are
/// added to the history using the [Navigator] API ([push] and friends). A
/// [Route] that does not correspond to a [Page] object is called a pageless
/// route and is tied to the [Route] that _does_ correspond to a [Page] object
/// that is below it in the history.
///
/// Pages that are added or removed may be animated as controlled by the
/// [transitionDelegate]. If a page is removed that had other pageless routes
/// pushed on top of it using [push] and friends, those pageless routes are
/// also removed with or without animation as determined by the
/// [transitionDelegate].
///
/// To use this API, an [onPopPage] callback must also be provided to properly
/// clean up this list if a page has been popped.
///
/// If [initialRoute] is non-null when the widget is first created, then
/// [onGenerateInitialRoutes] is used to generate routes that are above those
/// corresponding to [pages] in the initial history. ¿ ¯0Çº¿ ˙„ÇÅ/// Called when [pop] is invoked but the current [Route] corresponds to a
/// [Page] found in the [pages] list.
///
/// The `result` argument is the value with which the route is to complete
/// (e.g. the value returned from a dialog).
///
/// This callback is responsible for calling [Route.didPop] and returning
/// whether this pop is successful.
///
/// The [Navigator] widget should be rebuilt with a [pages] list that does not
/// contain the [Page] for the given [Route]. The next time the [pages] list
/// is updated, if the [Page] corresponding to this [Route] is still present,
/// it will be interpreted as a new route to display. ¿ ˙ÒÄ€¿ ˚∫Äû/// The delegate used for deciding how routes transition in or off the screen
/// during the [pages] updates.
///
/// Defaults to [DefaultTransitionDelegate]. ¿ ˚—ÅÌ¿ ˝≤Åæ/// The name of the first route to show.
///
/// Defaults to [Navigator.defaultRouteName].
///
/// The value is interpreted according to [onGenerateInitialRoutes], which
/// defaults to [defaultGenerateInitialRoutes].
///
/// Changing the [initialRoute] will have no effect, as it only controls the
/// _initial_ route. To change the route while the application is running, use
/// the static functions on this class, such as [push] or [replace]. ¿ ˝√a¿ ˛;/// Called to generate a route for a given [RouteSettings]. ¿ ˛)ÅÆ¿ ˇ…Å{/// Called when [onGenerateRoute] fails to generate a route.
///
/// This callback is typically used for error handling. For example, this
/// callback might always generate a "not found" page that describes the route
/// that wasn't found.
///
/// Unknown routes can arise either from errors in the app or from external
/// requests to push routes, such as from Android intents. ¿ ˇ‹U¿ (+/// A list of observers for this navigator. ¿ 6Öt¿òÖ/// Restoration ID to save and restore the state of the navigator, including
/// its history.
///
/// {@template flutter.widgets.navigator.restorationScopeId}
/// If a restoration ID is provided, the navigator will persist its internal
/// state (including the route history as well as the restorable state of the
/// routes) and restore it during state restoration.
///
/// If no restoration ID is provided, the route history stack will not be
/// restored and state restoration is disabled for the individual routes as
/// well.
///
/// The state is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
/// Within that bucket, the [Navigator] also creates a new [RestorationScope]
/// for its children (the [Route]s).
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.
///  * [RestorationMixin], which contains a runnable code sample showcasing
///    state restoration in Flutter.
///  * [Navigator], which explains under the heading "state restoration"
///    how and under what conditions the navigator restores its state.
///  * [Navigator.restorablePush], which includes an example showcasing how
///    to push a restorable route unto the navigator.
/// {@endtemplate} ¿ØÉn¿	É/// Controls the transfer of focus beyond the first and the last items of a
/// focus scope that defines focus traversal of widgets within a route.
///
/// {@template flutter.widgets.navigator.routeTraversalEdgeBehavior}
/// The focus inside routes installed in the top of the app affects how
/// the app behaves with respect to the platform content surrounding it.
/// For example, on the web, an app is at a minimum surrounded by browser UI,
/// such as the address bar, browser tabs, and more. The user should be able
/// to reach browser UI using normal focus shortcuts. Similarly, if the app
/// is embedded within an `<iframe>` or inside a custom element, it should
/// be able to participate in the overall focus traversal, including elements
/// not rendered by Flutter.
/// {@endtemplate} ¿	"Å ¿
Ä…/// The name for the default route of the application.
///
/// See also:
///
///  * [dart:ui.PlatformDispatcher.defaultRouteName], which reflects the route that the
///    application was started with.¿
¿
'É˙¿
É±/// Called when the widget is created to generate the initial list of [Route]
/// objects if [initialRoute] is not null.
///
/// Defaults to [defaultGenerateInitialRoutes].
///
/// The [NavigatorState] and [initialRoute] will be passed to the callback.
/// The callback must return a list of [Route] objects with which the history
/// will be primed.
///
/// When parsing the initialRoute, if there's any chance that the it may
/// contain complex characters, it's best to use the
/// [characters](https://pub.dev/packages/characters) API. This will ensure
/// that extended grapheme clusters and surrogate pairs are treated as single
/// characters by the code, the same way that they appear to the user. For
/// example, the string "üë®‚Äçüë©‚Äçüë¶" appears to the user as a single
/// character and `string.characters.length` intuitively returns 1. On the
/// other hand, `string.length` returns 8, and `string.runes.length` returns
/// 5! ¿&Ñx¿ÑÑ(/// Whether this navigator should report route update message back to the
/// engine when the top-most route changes.
///
/// If the property is set to true, this navigator automatically sends the
/// route update message to the engine when it detects top-most route changes.
/// The messages are used by the web engine to update the browser URL bar.
///
/// If the property is set to true when the [Navigator] is first created,
/// single-entry history mode is requested using
/// [SystemNavigator.selectSingleEntryHistory]. This means this property
/// should not be used at the same time as [PlatformRouteInformationProvider]
/// is used with a [Router] (including when used with [MaterialApp.router],
/// for example).
///
/// If there are multiple navigators in the widget tree, at most one of them
/// can set this property to true (typically, the top-most one created from
/// the [WidgetsApp]). Otherwise, the web engine may receive multiple route
/// update messages from different navigators and fail to update the URL
/// bar.
///
/// Defaults to false. ¿£Äﬂ¿vÄª/// {@macro flutter.material.Material.clipBehavior}
///
/// In cases where clipping is not desired, consider setting this property to
/// [Clip.none].
///
/// Defaults to [Clip.hardEdge]. ¿áÄø¿:Äü/// Whether or not the navigator and it's new topmost route should request focus
/// when the new route is pushed onto the navigator.
///
/// Defaults to true.  ¿KåÄ¿ 
ä⁄/// Push a named route onto the navigator that most tightly encloses the given
/// context.
///
/// {@template flutter.widgets.navigator.pushNamed}
/// The route name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route and the previous route (if any) are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the route.
///
/// To use [pushNamed], an [Navigator.onGenerateRoute] callback must be
/// provided,
/// {@endtemplate}
///
/// {@template flutter.widgets.navigator.pushNamed.returnValue}
/// Returns a [Future] that completes to the `result` value passed to [pop]
/// when the pushed route is popped off the navigator.
/// {@endtemplate}
///
/// {@template flutter.widgets.Navigator.pushNamed}
/// The provided `arguments` are passed to the pushed route via
/// [RouteSettings.arguments]. Any object can be passed as `arguments` (e.g. a
/// [String], [int], or an instance of a custom `MyRouteArguments` class).
/// Often, a [Map] is used to pass key-value pairs.
///
/// The `arguments` may be used in [Navigator.onGenerateRoute] or
/// [Navigator.onUnknownRoute] to construct the route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _didPushButton() {
///   Navigator.pushNamed(context, '/settings');
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// The following example shows how to pass additional `arguments` to the
/// route:
///
/// ```dart
/// void _showBerlinWeather() {
///   Navigator.pushNamed(
///     context,
///     '/weather',
///     arguments: <String, String>{
///       'city': 'Berlin',
///       'country': 'Germany',
///     },
///   );
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// The following example shows how to pass a custom Object to the route:
///
/// ```dart
/// class WeatherRouteArguments {
///   WeatherRouteArguments({ required this.city, required this.country });
///   final String city;
///   final String country;
///
///   bool get isGermanCapital {
///     return country == 'Germany' && city == 'Berlin';
///   }
/// }
///
/// void _showWeather() {
///   Navigator.pushNamed(
///     context,
///     '/weather',
///     arguments: WeatherRouteArguments(city: 'Berlin', country: 'Germany'),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamed], which pushes a route that can be restored
///    during state restoration.¿ ¿ ¿ ,¿ :  ¿ F¿ N  ¿ ^¿ g  ¿‰¿Â¿ œáƒ¿'æÜp/// Push a named route onto the navigator that most tightly encloses the given
/// context.
///
/// {@template flutter.widgets.navigator.restorablePushNamed}
/// Unlike [Route]s pushed via [pushNamed], [Route]s pushed with this method
/// are restored during state restoration according to the rules outlined
/// in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@template flutter.widgets.Navigator.restorablePushNamed.arguments}
/// The provided `arguments` are passed to the pushed route via
/// [RouteSettings.arguments]. Any object that is serializable via the
/// [StandardMessageCodec] can be passed as `arguments`. Often, a Map is used
/// to pass key-value pairs.
///
/// The arguments may be used in [Navigator.onGenerateRoute] or
/// [Navigator.onUnknownRoute] to construct the route.
/// {@endtemplate}
///
/// {@template flutter.widgets.Navigator.restorablePushNamed.returnValue}
/// The method returns an opaque ID for the pushed route that can be used by
/// the [RestorableRouteFuture] to gain access to the actual [Route] object
/// added to the navigator and its return value. You can ignore the return
/// value of this method, if you do not care about the route object or the
/// route's return value.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _showParisWeather() {
///   Navigator.restorablePushNamed(
///     context,
///     '/weather',
///     arguments: <String, String>{
///       'city': 'Paris',
///       'country': 'France',
///     },
///   );
/// }
/// ```
/// {@end-tool}¿'“¿'“¿'Í¿'¯  ¿(¿(  ¿(¿(%  ¿'ú¿'ù¿(óä1¿1πàì/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the route named [routeName] and then disposing
/// the previous route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.pushReplacementNamed}
/// If non-null, `result` will be used as the result of the route that is
/// removed; the future that had been returned from pushing that old route
/// will complete with `result`. Routes such as dialogs or popup menus
/// typically use this mechanism to return the value selected by the user to
/// the widget that created their route. The type of `result`, if provided,
/// must match the type argument of the class of the old route (`TO`).
///
/// The route name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route and the route below the removed route are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is notified once the
/// new route has finished animating (see [Route.didComplete]). The removed
/// route's exit animation is not run (see [popAndPushNamed] for a variant
/// that does animated the removed route).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the type of the return value of the old route.
///
/// To use [pushReplacementNamed], a [Navigator.onGenerateRoute] callback must
/// be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _switchToBrightness() {
///   Navigator.pushReplacementNamed(context, '/settings/brightness');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacementNamed], which pushes a replacement route that
///    can be restored during state restoration.¿1Œ¿1Œ¿1·¿1·¿1˙¿2  ¿2¿2  ¿2,
¿21  ¿2<¿2E  ¿1ì¿1î¿2ÃÖ?¿6ËÉ≈/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the route named [routeName] and then disposing
/// the previous route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.restorablePushReplacementNamed}
/// Unlike [Route]s pushed via [pushReplacementNamed], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _switchToAudioVolume() {
///   Navigator.restorablePushReplacementNamed(context, '/settings/volume');
/// }
/// ```
/// {@end-tool}¿7¿7¿7¿7¿73¿7A  ¿7M¿7U  ¿7e
¿7j  ¿7u¿7~  ¿6∆¿6«¿8àÇ¿?åÜ˙/// Pop the current route off the navigator that most tightly encloses the
/// given context and push a named route in its place.
///
/// {@template flutter.widgets.navigator.popAndPushNamed}
/// The popping of the previous route is handled as per [pop].
///
/// The new route's name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route, the old route, and the route below the old route (if any)
/// are all notified (see [Route.didPop], [Route.didComplete],
/// [Route.didPopNext], [Route.didPush], and [Route.didChangeNext]). If the
/// [Navigator] has any [Navigator.observers], they will be notified as well
/// (see [NavigatorObserver.didPop] and [NavigatorObserver.didPush]). The
/// animations for the pop and the push are performed simultaneously, so the
/// route below may be briefly visible even if both the old route and the new
/// route are opaque (see [TransitionRoute.opaque]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the return value type of the old route.
///
/// To use [popAndPushNamed], a [Navigator.onGenerateRoute] callback must be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _selectAccessibility() {
///   Navigator.popAndPushNamed(context, '/settings/accessibility');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePopAndPushNamed], which pushes a new route that can be
///    restored during state restoration.¿?ú¿?ú¿?Ø¿?Ø¿?»¿?÷  ¿?‚¿?Í  ¿?˙
¿?ˇ  ¿@
¿@  ¿?f¿?g¿@ïÑΩ¿D9ÉO/// Pop the current route off the navigator that most tightly encloses the
/// given context and push a named route in its place.
///
/// {@template flutter.widgets.navigator.restorablePopAndPushNamed}
/// Unlike [Route]s pushed via [popAndPushNamed], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _selectNetwork() {
///   Navigator.restorablePopAndPushNamed(context, '/settings/network');
/// }
/// ```
/// {@end-tool}¿DS¿DS¿Df¿Df¿D¿Dç  ¿Dô¿D°  ¿D±
¿D∂  ¿D¡¿D   ¿D¿D¿EVäz¿Nƒà”/// Push the route with the given name onto the navigator that most tightly
/// encloses the given context, and then remove all the previous routes until
/// the `predicate` returns true.
///
/// {@template flutter.widgets.navigator.pushNamedAndRemoveUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To remove routes until a route with a certain name, use the
/// [RoutePredicate] returned from [ModalRoute.withName].
///
/// To remove all the routes below the pushed route, use a [RoutePredicate]
/// that always returns false (e.g. `(Route<dynamic> route) => false`).
///
/// The removed routes are removed without being completed, so this method
/// does not take a return value argument.
///
/// The new route's name (`routeName`) will be passed to the
/// [Navigator.onGenerateRoute] callback. The returned route will be pushed
/// into the navigator.
///
/// The new route and the route below the bottommost removed route (which
/// becomes the route below the new route) are notified (see [Route.didPush]
/// and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush] and [NavigatorObserver.didRemove]). The
/// removed routes are disposed, without being notified, once the new route
/// has finished animating. The futures that had been returned from pushing
/// those routes will not complete.
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route.
///
/// To use [pushNamedAndRemoveUntil], an [Navigator.onGenerateRoute] callback
/// must be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetToCalendar() {
///   Navigator.pushNamedAndRemoveUntil(context, '/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamedAndRemoveUntil], which pushes a new route that can
///    be restored during state restoration.¿N‹¿N‹¿NÙ¿O  ¿O¿O  ¿O'¿O7  ¿OG¿OP  ¿Nû¿Nü¿O‘Ö4¿SËÉΩ/// Push the route with the given name onto the navigator that most tightly
/// encloses the given context, and then remove all the previous routes until
/// the `predicate` returns true.
///
/// {@template flutter.widgets.navigator.restorablePushNamedAndRemoveUntil}
/// Unlike [Route]s pushed via [pushNamedAndRemoveUntil], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetToOverview() {
///   Navigator.restorablePushNamedAndRemoveUntil(context, '/overview', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}¿T
¿T
¿T"¿T0  ¿T<¿TD  ¿TU¿Te  ¿Tu¿T~  ¿S∆¿S«¿UÑ˝¿YòÑ/// Push the given route onto the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.push}
/// The new route and the previous route (if any) are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openMyPage() {
///   Navigator.push<void>(
///     context,
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyPage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePush], which pushes a route that can be restored during
///    state restoration.¿Yù¿Yù¿Y∞¿Yæ  ¿Y∆¿Y–  ¿Yr¿Ys¿ZÜW¿_ïÖ)/// Push a new route onto the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.restorablePush}
/// Unlike [Route]s pushed via [push], [Route]s pushed with this method are
/// restored during state restoration according to the rules outlined in the
/// "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@template flutter.widgets.Navigator.restorablePush}
/// The method takes a [RestorableRouteBuilder] as argument, which must be a
/// _static_ function annotated with `@pragma('vm:entry-point')`. It must
/// instantiate and return a new [Route] object that will be added to the
/// navigator. The provided `arguments` object is passed to the
/// `routeBuilder`. The navigator calls the static `routeBuilder` function
/// again during state restoration to re-create the route object.
///
/// Any object that is serializable via the [StandardMessageCodec] can be
/// passed as `arguments`. Often, a Map is used to pass key-value pairs.
/// {@endtemplate}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push.0.dart **
/// {@end-tool}¿_§¿_§¿_∑¿_≈  ¿_Õ&¿_Ë  ¿_ˆ¿_ˇ  ¿_s¿_t¿`hàä¿h*á=/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the given route and then disposing the previous
/// route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.pushReplacement}
/// If non-null, `result` will be used as the result of the route that is
/// removed; the future that had been returned from pushing that old route will
/// complete with `result`. Routes such as dialogs or popup menus typically
/// use this mechanism to return the value selected by the user to the widget
/// that created their route. The type of `result`, if provided, must match
/// the type argument of the class of the old route (`TO`).
///
/// The new route and the route below the removed route are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is notified once the
/// new route has finished animating (see [Route.didComplete]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the type of the return value of the old route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _completeLogin() {
///   Navigator.pushReplacement<void, void>(
///     context,
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyHomePage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacement], which pushes a replacement route that can
///    be restored during state restoration.¿h:¿h:¿hM¿hM¿ha¿ho  ¿hw¿hÅ  ¿hå
¿hë  ¿h¿h¿hˆÑ€¿l≥Ép/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing a new route and then disposing the previous
/// route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.restorablePushReplacement}
/// Unlike [Route]s pushed via [pushReplacement], [Route]s pushed with this
/// method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push_replacement.0.dart **
/// {@end-tool}¿lÕ¿lÕ¿l‡¿l‡¿lÙ¿m  ¿m
&¿m%  ¿m4
¿m9  ¿m@¿mI  ¿lë¿lí¿m’â`¿vzà/// Push the given route onto the navigator that most tightly encloses the
/// given context, and then remove all the previous routes until the
/// `predicate` returns true.
///
/// {@template flutter.widgets.navigator.pushAndRemoveUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To remove routes until a route with a certain name, use the
/// [RoutePredicate] returned from [ModalRoute.withName].
///
/// To remove all the routes below the pushed route, use a [RoutePredicate]
/// that always returns false (e.g. `(Route<dynamic> route) => false`).
///
/// The removed routes are removed without being completed, so this method
/// does not take a return value argument.
///
/// The newly pushed route and its preceding route are notified for
/// [Route.didPush]. After removal, the new route and its new preceding route,
/// (the route below the bottommost removed route) are notified through
/// [Route.didChangeNext]). If the [Navigator] has any [Navigator.observers],
/// they will be notified as well (see [NavigatorObserver.didPush] and
/// [NavigatorObserver.didRemove]). The removed routes are disposed of and
/// notified, once the new route has finished animating. The futures that had
/// been returned from pushing those routes will not complete.
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _finishAccountCreation() {
///   Navigator.pushAndRemoveUntil<void>(
///     context,
///     MaterialPageRoute<void>(builder: (BuildContext context) => const MyHomePage()),
///     ModalRoute.withName('/'),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushAndRemoveUntil], which pushes a route that can be
///    restored during state restoration.¿vç¿vç¿v†¿vÆ  ¿v∂¿v¿  ¿v…¿vŸ  ¿vT¿vU¿w9Ñø¿zﬂÉY/// Push a new route onto the navigator that most tightly encloses the
/// given context, and then remove all the previous routes until the
/// `predicate` returns true.
///
/// {@template flutter.widgets.navigator.restorablePushAndRemoveUntil}
/// Unlike [Route]s pushed via [pushAndRemoveUntil], [Route]s pushed with this
/// method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push_and_remove_until.0.dart **
/// {@end-tool}¿z¸¿z¸¿{¿{  ¿{%)¿{@  ¿{P¿{`  ¿{k¿{t  ¿zΩ¿zæ¿{¸áe¿ÇîÜ5/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route.
///
/// {@template flutter.widgets.navigator.replace}
/// The old route must not be currently visible, as this method skips the
/// animations and therefore the removal would be jarring if it was visible.
/// To replace the top-most route, consider [pushReplacement] instead, which
/// _does_ animate the new route, and delays removing the old route until the
/// new route has finished animating.
///
/// The removed route is removed without being completed, so this method does
/// not take a return value argument.
///
/// The new route, the route below the new route (if any), and the route above
/// the new route, are all notified (see [Route.didReplace],
/// [Route.didChangeNext], and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// This can be useful in combination with [removeRouteBelow] when building a
/// non-linear user experience.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// See also:
///
///  * [replaceRouteBelow], which is the same but identifies the route to be
///    removed by reference to the route above it, rather than directly.
///  * [restorableReplace], which adds a replacement route that can be
///    restored during state restoration.¿Çú¿Çú¿ÇØ¿ÇΩ  ¿Ç« ¿Ç‡  ¿ÇÈ¿Ç¸  ¿Çt¿Çu¿ÉeÉ¨¿Ö·Ç=/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route.
///
/// {@template flutter.widgets.navigator.restorableReplace}
/// Unlike [Route]s added via [replace], [Route]s added with this method are
/// restored during state restoration according to the rules outlined in the
/// "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.replace}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿ÖÛ¿ÖÛ¿Ü¿Ü  ¿Ü ¿Ü7  ¿Ü@2¿Üd  ¿Üt¿Ü}  ¿Öø¿Ö¿¿áá+¿çVÖ‚/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route. The route to be replaced is the one below the
/// given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.replaceRouteBelow}
/// The old route must not be current visible, as this method skips the
/// animations and therefore the removal would be jarring if it was visible.
/// To replace the top-most route, consider [pushReplacement] instead, which
/// _does_ animate the new route, and delays removing the old route until the
/// new route has finished animating.
///
/// The removed route is removed without being completed, so this method does
/// not take a return value argument.
///
/// The new route, the route below the new route (if any), and the route above
/// the new route, are all notified (see [Route.didReplace],
/// [Route.didChangeNext], and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// See also:
///
///  * [replace], which is the same but identifies the route to be removed
///    directly.
///  * [restorableReplaceRouteBelow], which adds a replacement route that can
///    be restored during state restoration.¿çh¿çh¿ç{¿çâ  ¿çì#¿ç¨  ¿ç∏¿çÀ  ¿ç6¿ç7¿éDÑ:¿ë1Ç¨/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route. The route to be replaced is the one below the
/// given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.restorableReplaceRouteBelow}
/// Unlike [Route]s added via [restorableReplaceRouteBelow], [Route]s added
/// with this method are restored during state restoration according to the
/// rules outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿ëM¿ëM¿ë`¿ën  ¿ëx#¿ëë  ¿ëù2¿ë¡  ¿ë—¿ë⁄  ¿ë¿ë¿íÇÉ/¿ïÇf/// Whether the navigator that most tightly encloses the given context can be
/// popped.
///
/// {@template flutter.widgets.navigator.canPop}
/// The initial route cannot be popped off the navigator, which implies that
/// this function returns true only if popping the navigator would not remove
/// the initial route.
///
/// If there is no [Navigator] in scope, returns false.
///
/// Does not consider anything that might externally prevent popping, such as
/// [PopEntry].
/// {@endtemplate}
///
/// See also:
///
///  * [Route.isFirst], which returns true for routes for which [canPop]
///    returns false. ¿ï ¿ï.   ¿ïµÜâ¿õ¬Ö¶/// Consults the current route's [Route.popDisposition] getter or
/// [Route.willPop] method, and acts accordingly, potentially popping the
/// route as a result; returns whether the pop request should be considered
/// handled.
///
/// {@template flutter.widgets.navigator.maybePop}
/// If the [RoutePopDisposition] is [RoutePopDisposition.pop], then the [pop]
/// method is called, and this method returns true, indicating that it handled
/// the pop request.
///
/// If the [RoutePopDisposition] is [RoutePopDisposition.doNotPop], then this
/// method returns true, but does not do anything beyond that.
///
/// If the [RoutePopDisposition] is [RoutePopDisposition.bubble], then this
/// method returns false, and the caller is responsible for sending the
/// request to the containing scope (e.g. by closing the application).
///
/// This method is typically called for a user-initiated [pop]. For example on
/// Android it's called by the binding for the system's back button.
///
/// The `T` type argument is the type of the return value of the current
/// route. (Typically this isn't known; consider specifying `dynamic` or
/// `Null`.)
/// {@endtemplate}
///
/// See also:
///
///  * [Form], which provides an `onWillPop` callback that enables the form
///    to veto a [pop] initiated by the app's back button.
///  * [ModalRoute], which provides a `scopedWillPopCallback` that can be used
///    to define the route's `willPop` method.¿õÀ¿õÀ¿õﬁ¿õÏ  ¿õˆ	¿õ˙  ¿õö¿õõ¿úBáå¿£cÜ¶/// Pop the top-most route off the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.pop}
/// The current route's [Route.didPop] method is called first. If that method
/// returns false, then the route remains in the [Navigator]'s history (the
/// route is expected to have popped some internal state; see e.g.
/// [LocalHistoryRoute]). Otherwise, the rest of this description applies.
///
/// If non-null, `result` will be used as the result of the route that is
/// popped; the future that had been returned from pushing the popped route
/// will complete with `result`. Routes such as dialogs or popup menus
/// typically use this mechanism to return the value selected by the user to
/// the widget that created their route. The type of `result`, if provided,
/// must match the type argument of the class of the popped route (`T`).
///
/// The popped route and the route below it are notified (see [Route.didPop],
/// [Route.didComplete], and [Route.didPopNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPop]).
///
/// The `T` type argument is the type of the return value of the popped route.
///
/// The type of `result`, if provided, must match the type argument of the
/// class of the popped route (`T`).
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage for closing a route is as follows:
///
/// ```dart
/// void _close() {
///   Navigator.pop(context);
/// }
/// ```
/// {@end-tool}
///
/// A dialog box might be closed with a result:
///
/// ```dart
/// void _accept() {
///   Navigator.pop(context, true); // dialog returns true
/// }
/// ```¿£g¿£g¿£z¿£à  ¿£í	¿£ñ  ¿£C¿£D¿£“É•¿ß
Ç˘/// Calls [pop] repeatedly on the navigator that most tightly encloses the
/// given context until the predicate returns true.
///
/// {@template flutter.widgets.navigator.popUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To pop until a route with a certain name, use the [RoutePredicate]
/// returned from [ModalRoute.withName].
///
/// The routes are closed with null as their `return` value.
///
/// See [pop] for more details of the semantics of popping a route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _logout() {
///   Navigator.popUntil(context, ModalRoute.withName('/login'));
/// }
/// ```
/// {@end-tool} ¿ß¿ß!  ¿ß)¿ß9   ¿ß{Ñ€¿´‰Ñ./// Immediately remove `route` from the navigator that most tightly encloses
/// the given context, and [Route.dispose] it.
///
/// {@template flutter.widgets.navigator.removeRoute}
/// The removed route is removed without being completed, so this method does
/// not take a return value argument. No animations are run as a result of
/// this method call.
///
/// The routes below and above the removed route are notified (see
/// [Route.didChangeNext] and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didRemove]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The given `route` must be in the history; this method will throw an
/// exception if it is not.
///
/// Ongoing gestures within the current route are canceled.
/// {@endtemplate}
///
/// This method is used, for example, to instantly dismiss dropdown menus that
/// are up when the screen's orientation changes. ¿´¿´˛  ¿¨¿¨   ¿¨ZÑ‰¿∞∂Ñ%/// Immediately remove a route from the navigator that most tightly encloses
/// the given context, and [Route.dispose] it. The route to be removed is the
/// one below the given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.removeRouteBelow}
/// The removed route is removed without being completed, so this method does
/// not take a return value argument. No animations are run as a result of
/// this method call.
///
/// The routes below and above the removed route are notified (see
/// [Route.didChangeNext] and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didRemove]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The given `anchorRoute` must be in the history and must have a route below
/// it; this method will throw an exception if it is not or does not.
///
/// Ongoing gestures within the current route are canceled.
/// {@endtemplate} ¿∞«¿∞’  ¿∞›¿∞Ì   ¿±BÜ[¿¥Çã/// The state from the closest instance of this class that encloses the given
/// context.
///
/// Typical usage is as follows:
///
/// ```dart
/// Navigator.of(context)
///   ..pop()
///   ..pop()
///   ..pushNamed('/settings');
/// ```
///
/// If `rootNavigator` is set to true, the state from the furthest instance of
/// this class is given instead. Useful for pushing contents above all
/// subsequent instances of [Navigator].
///
/// If there is no [Navigator] in the give `context`, this function will throw
/// a [FlutterError] in debug mode, and an exception in release mode.
///
/// This method can be expensive (it walks the element tree). ¿¥¿¥"  ¿¥0¿¥6  ¿¥E¿∑°Ö¿∫òÇ≥/// The state from the closest instance of this class that encloses the given
/// context, if any.
///
/// Typical usage is as follows:
///
/// ```dart
/// NavigatorState? navigatorState = Navigator.maybeOf(context);
/// if (navigatorState != null) {
///   navigatorState
///     ..pop()
///     ..pop()
///     ..pushNamed('/settings');
/// }
/// ```
///
/// If `rootNavigator` is set to true, the state from the furthest instance of
/// this class is given instead. Useful for pushing contents above all
/// subsequent instances of [Navigator].
///
/// Will return null if there is no ancestor [Navigator] in the `context`.
///
/// This method can be expensive (it walks the element tree). ¿∫•¿∫≥  ¿∫¡¿∫«  ¿∫÷¿ºæçH¿øΩÇ∆/// Turn a route name into a set of [Route] objects.
///
/// This is the default value of [onGenerateInitialRoutes], which is used if
/// [initialRoute] is not null.
///
/// If this string starts with a `/` character and has multiple `/` characters
/// in it, then the string is split on those characters and substrings from
/// the start of the string up to each such character are, in turn, used as
/// routes to push.
///
/// For example, if the route `/stocks/HOOLI` was used as the [initialRoute],
/// then the [Navigator] would push the following routes on startup: `/`,
/// `/stocks`, `/stocks/HOOLI`. This enables deep linking while allowing the
/// application to maintain a predictable route history. ¿ø⁄¿øÍ  ¿øÙ¿ø¸   ¿ 
=¿ %   ¿ 
¿  ¿ŸIÄ”¿ŸO       ¿⁄¿ A¿⁄$  ¿⁄RÉp ¿⁄R¿⁄] ¿⁄c
¿⁄i  ¿⁄w%¿⁄ë  ¿⁄§¿⁄≥  ¿⁄√¿⁄…  .¿⁄È¿⁄Ô¿€¿⁄˚¿⁄¿⁄Ò¿€¿⁄˛¿€¿€¿€¿€ ¿€&¿‹:¿€˙¿€¿¿€ç¿€[¿€@¿€3¿€C¿€R¿€S¿€v¿€i¿€y¿€à¿€â¿€®¿€õ¿€´¿€∫¿€ª¿€€¿€Œ¿€ﬁ¿€Ì¿€Ó¿‹¿‹¿‹¿‹'¿‹(¿‹R¿‹E¿‹T¿›∆&¿›Á ¿›∆¿›«¿›5¿ﬁ  ¿ﬁ)¿ﬁ4  ¿ﬁBÄß¿ﬁŒv/// The limit this route entry will attempt to pop in the case of route being
/// remove as a result of a page update.¿ﬁÊ¿ﬁÓ:¿ﬂ
 ¿ﬂ¿ﬂ&¿ﬂ'¿ﬂ-¿ﬂ=  ¿ﬂM9¿ﬂ] ¿ﬂz¿ﬂ∂h¿ﬂ‘ 
¿ﬂÛ¿‡ ¿‡¿‡¿‡¿‡¿‡¿‡¿‡¿‡¿‡G5¿‡W ¿‡p¿‡®¿‡≠  ¿¯¿¯¯  ¿˘£$¿˘® ¿˘√¿)¿ ¿%
¿‡ˆÇw¿·òÄë/// Restoration ID to be used for the encapsulating route when restoration is
/// enabled for it or null if restoration cannot be enabled for it.   ¿
bÄó¿
k    ¿
˝Äï¿    ¿ñU¿ü    ¿ÔÄ¶¿¯    ¿ôÄ´¿¢    ¿L]¿a   ¿L¿M¿≠Q¿¬   ¿≠¿Æ¿NF¿W    ¿óÄì¿õ  ¿Æ
¿¥   ¿„qÄ˚¿„v  ¿„Ñ¿„ì   ¿‰pÅ⁄¿‰u  ¿‰Å!¿‰ö  ¿‰§(¿‰æ   ¿ÊNáP¿ÊS  ¿Ê`!¿Êy  ¿ÊÉ¿Êí  ¿Êù!¿Ê∑  ¿Ê¿(¿Ê⁄   ¿Ì¢Ñ_¿Ìß  ¿Ì∏¿Ì»   ¿ÚÉπ¿Û9Å /// Process the to-be-popped route.
///
/// A route can be marked for pop by transition delegate or Navigator.pop,
/// this method actually pops the route by calling Route.didPop.
///
/// Returns true if the route is popped; otherwise, returns false if the route
/// refuses to be popped. ¿ÛE!¿Û^  ¿Ûh(¿ÛÇ   ¿ı¬Ä’¿ı«    ¿ˆõÅÇ¿ˆ†  ¿ˆ∞!¿ˆ…  ¿ˆ”(¿ˆÌ   ¿¯!ÄÀ¿¯&  ¿¯/!¿¯H  ¿¯R¿¯a   ¿˘
Äï¿˘ ¿˘¿˘¿˘	¿˘   ¿˘˚Å–¿˙   ¿˙	¿˙  ¿˙¿¸Å˝¿¸ ¿¸¿¸¿¸¿¸  ¿¸¿¸%  ¿¸1¿˛ÄÅ¿˛    ¿˛àÇA¿ˇ9Ä£/// Disposes this route entry and its [route] immediately.
///
/// This method does not wait for the widget subtree of the [route] to unmount
/// before disposing.   ¿ Õâë¿Å//// Disposes this route entry and its [route].
///
/// This method waits for the widget subtree of the [route] to unmount before
/// disposing. If subtree is already unmounted, this method calls
/// [forcedDispose] immediately.
///
/// Use [forcedDispose] if the [route] need to be disposed immediately.   ¿HÅq¿M  ¿h¿y   ¿ΩE¿…  ¿‹¿È   ¿o¿  ¿9¿F   ¿wM¿É  ¿ö¿ß   ¿»ÄÄ¿‰  ¿ı¿   ¿/G¿4    ¿zÅI¿ã   ¿z¿{¿«ÅF¿ÿ   ¿«¿»¿É&¿"  ¿.¿7  ¿¿¿;Åò¿L  ¿]¿f  ¿;¿<¿◊Ås¿Ë   ¿◊¿ÿ ¿.ÄÔ¿=  ¿WK ¿W¿l ¿r¿x  ¿â¿è   ¿•!¿∫  ¿ $¿‡   ¿Û(¿¯  ¿ˇ¿    ¿Å¿%  ¿aQ ¿a¿z ¿Ä¿á  ¿ò¿ü     ¿∂m¿«  ¿Œ¿·  ¿∂¿∑ ¿'Å¿-  ¿hP ¿h¿Ä ¿Ü¿ç  ¿û¿•     ¿ºl¿Õ  ¿‘¿Á  ¿º¿Ω ¿,Å¿2  ¿pS ¿p¿ã ¿ë¿ò  ¿©¿∞     ¿«o¿ÿ  ¿ﬂ¿Ú  ¿«¿» ¿:Å#¿@  ¿T ¿¿õ ¿°¿®  ¿π¿¿     ¿◊ÄÑ¿Ë  ¿Ô¿   ¿◊¿ÿ ¿ ¢Ö˝¿!KÄ¢/// A collection of _RouteEntries representing a navigation history.
///
/// Acts as a ChangeNotifier and notifies after its List of _RouteEntries is
/// mutated. ¿!äÄ£ ¿!≥¿!ª&/// Creates an instance of [_History].  ¿"10¿"I ¿"_¿"`¿"R¿"^¿"S¿&P¿&.   ¿&¿&		¿"fj¿"j  ¿"u¿"ä  ¿"ê¿"ï  ¿"ú¿"‘S¿"Ÿ  ¿"›¿"Í   ¿#+Äå¿#0  ¿#7¿#N   ¿#ªÄé¿#¿    ¿$Mk¿$R  ¿$Y	¿$^  ¿$d¿$q   ¿$ºÄÑ¿$»  ¿$—	¿$÷   ¿%Dz¿%P    ¿%¬B¿%◊  ¿%⁄	¿%ﬂ   ¿&\A¿&o   ¿&\¿&] ¿&°¿*Ç¿'t/// The state for a [Navigator] widget.
///
/// A reference to this class can be obtained by calling [Navigator.of].  ¿'x(¿'ï  ¿'§$¿'≥ ¿'æ¿'∆¿'«¿'ÕÅœ¿)kÅv/// A set for entries that are waiting to dispose until their subtrees are
/// disposed.
///
/// These entries are not considered to be in the _history and will usually
/// remove themselves from this set once they can dispose.
///
/// The navigator keep track of these entries so that, in case the navigator
/// itself is disposed, it can dispose these entries immediately.¿)ö¿)õ¿)ç¿)ô¿)é¿)†@¿)∑ ¿)Œ¿)ﬁ¿)ﬂ¿)‰[¿* ¿*!¿*&¿*<¿*'¿*=¿*>¿*C[¿*f ¿*Ä¿*Ö¿*õ¿*Ü¿*ú¿*ù¿*£~¿*Û=/// The [FocusNode] for the [Focus] that encloses the routes.¿*ˇ¿+¿+ ¿+¿+	¿+¿+&¿++ ¿+:¿+Ç(¿+í  ¿+Ø0¿+Ã  ¿8ÆS¿8« ¿8Ï¿8˘¿8˝¿8˙¿8˛¿9 ¿8ˇ¿b&¿b.  ¿bJ¿bO ¿bd¿ê¿êÑ ¿êó¿:®$¿:¨ ¿:À¿<ƒÄ¢¿=,K/// Notifies its listeners if the value of [userGestureInProgress] changes.¿=L¿=Y¿=^¿=Z¿=_¿=e¿=`¿B¶(¿Bµ ¿BÃ¿BÕ¿B«¿BÀ¿B»¿+‰C¿+Ì    ¿9V¿9    ¿D/C¿DG   ¿D/¿D0¿`Ùy¿aI@/// The overlay this navigator uses for its visual presentation.   ¿aqÄ±¿aå    ¿:e@¿:m    ¿:–Äù¿:‘  ¿:Ï	¿:Ò   ¿;qÅO¿<ÉÄ˙/// Whether a route is currently being manipulated by the user, e.g.
/// as during an iOS back gesture.
///
/// See also:
///
///  * [userGestureInProgressNotifier], which notifies its listeners if
///    the value of [userGestureInProgress] changes.   @¿,+Ñà¿,0    ¿0∑Ü∫¿0»   ¿0∑¿0∏¿7ßÄƒ¿7¨    ¿9`â‡¿9q  ¿9~¿9í  ¿9ú¿9¢  ¿9`¿9a¿CDÄË¿CU  ¿Ce¿Cy  ¿CD¿CE¿DvÄÚ¿Dá   ¿Dv¿Dw¿ElÅJ¿E©5/// Dispose all lingering router entries immediately.   ¿F∫Å¿F∆  ¿FŸ¿FÊ  ¿FÌ¿F¸   ¿G◊ä¿G‹  ¿GÚ!¿H   ¿QÏÄÚ¿QÒ    ¿R‚áÍ¿RÛ  ¿S¿S  ¿R‚¿R„¿Z–Åf¿Z’    ¿\:Äª¿\K   ¿\:¿\;¿\˘Ä·¿]
   ¿\˘¿\˙¿]ﬁÉ¿]Ô   ¿]ﬁ¿]ﬂ¿bmÆ¿br    ¿ê°ôR¿ê¶  ¿êº¿ê¬  ¿ê‘¿©˜Ç;¿©¸    ¿¨6Éñ¿¨;    ¿Ø–Ä¨¿Ø›  ¿ØÌ	¿ØÚ  ¿Ø¯¿∞   ¿∞ÄÄ¶¿∞Ñ  ¿∞î	¿∞ô  ¿∞ü¿∞µ   ¿±*ÄÊ¿±7  ¿±F	¿±K  ¿±Q¿±g   ¿≤à:¿≤ ¿≤+¿≤+¿≤.¿≤6  ¿≤=¿≤O  ¿≤Y¿≤_  ¿≤j¿∫RÇÓ¿º¢Ç/// Push a named route onto the navigator.
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _aaronBurrSir() {
///   navigator.pushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamed], which pushes a route that can be restored
///    during state restoration.¿º¨¿º¨¿ºƒ¿ºÃ  ¿º‹¿ºÂ  ¿ºÉ¿ºÑ¿ΩDÑ4¿øqÅÈ/// Push a named route onto the navigator.
///
/// {@macro flutter.widgets.navigator.restorablePushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openDetails() {
///   navigator.restorablePushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}¿øÖ¿øÖ¿øù¿ø•  ¿øµ¿øæ  ¿øV¿øW¿¡|ÉÚ¿ƒÇÇ¥/// Replace the current route of the navigator by pushing the route named
/// [routeName] and then disposing the previous route once the new route has
/// finished animating in.
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _startBike() {
///   navigator.pushReplacementNamed('/jouett/1781');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacementNamed], which pushes a replacement route that
///  can be restored during state restoration.¿ƒó¿ƒó¿ƒ™¿ƒ™¿ƒ√¿ƒÀ  ¿ƒ€
¿ƒ‡  ¿ƒÎ¿ƒÙ  ¿ƒc¿ƒd¿≈rÖ)¿»KÇë/// Replace the current route of the navigator by pushing the route named
/// [routeName] and then disposing the previous route once the new route has
/// finished animating in.
///
/// {@macro flutter.widgets.navigator.restorablePushReplacementNamed}
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _startCar() {
///   navigator.restorablePushReplacementNamed('/jouett/1781');
/// }
/// ```
/// {@end-tool}¿»j¿»j¿»}¿»}¿»ñ¿»û  ¿»Æ
¿»≥  ¿»æ¿»«  ¿»0¿»1¿ üÉ[¿Õ*Ç;/// Pop the current route off the navigator and push a named route in its
/// place.
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _begin() {
///   navigator.popAndPushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePopAndPushNamed], which pushes a new route that can be
///    restored during state restoration.¿Õ:¿Õ:¿ÕM¿ÕM¿Õf¿Õn  ¿Õ~
¿ÕÉ  ¿Õé¿Õó  ¿Õ¿Õ¿Õ˛ÉD¿–aÇ/// Pop the current route off the navigator and push a named route in its
/// place.
///
/// {@macro flutter.widgets.navigator.restorablePopAndPushNamed}
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _end() {
///   navigator.restorablePopAndPushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}¿–{¿–{¿–é¿–é¿–ß¿–Ø  ¿–ø
¿–ƒ  ¿–œ¿–ÿ  ¿–F¿–G¿—FÉÈ¿‘FÇ∞/// Push the route with the given name onto the navigator, and then remove all
/// the previous routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _handleOpenCalendar() {
///   navigator.pushNamedAndRemoveUntil('/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamedAndRemoveUntil], which pushes a new route that can
///    be restored during state restoration.¿‘^¿‘^¿‘v¿‘~  ¿‘è¿‘ü  ¿‘Ø¿‘∏  ¿‘'¿‘(¿’3Ö&¿ÿÇé/// Push the route with the given name onto the navigator, and then remove all
/// the previous routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.restorablePushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openCalendar() {
///   navigator.restorablePushNamedAndRemoveUntil('/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}¿ÿ)¿ÿ)¿ÿA¿ÿI  ¿ÿZ¿ÿj  ¿ÿz¿ÿÉ  ¿◊Ï¿◊Ì¿⁄]É¿‹÷Ç'/// Push the given route onto the navigator.
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openPage() {
///   navigator.push<void>(
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyPage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePush], which pushes a route that can be restored during
///    state restoration.¿‹€¿‹€¿‹Ó¿‹¯  ¿‹∑¿‹∏¿›zÅS¿›  ¿›ñ¿›†   ¿ﬁ—ÑÅ¿‡œÅƒ/// Push a new route onto the navigator.
///
/// {@macro flutter.widgets.navigator.restorablePush}
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push.0.dart **
/// {@end-tool}¿‡ﬁ¿‡ﬁ¿‡Ò&¿·  ¿·¿·#  ¿‡¥¿‡µ¿„VÅê¿„[  ¿„f¿„s   ¿‰ÍÖ%¿‰Ô  ¿Â ¿Â   ¿ÍÑJ¿ÌBÇŸ/// Replace the current route of the navigator by pushing the given route and
/// then disposing the previous route once the new route has finished
/// animating in.
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _doOpenPage() {
///   navigator.pushReplacement<void, void>(
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyHomePage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacement], which pushes a replacement route that can
///    be restored during state restoration.¿ÌR¿ÌR¿Ìe¿Ìe¿Ìy¿ÌÉ  ¿Ìé
¿Ìì  ¿Ì#¿Ì$¿ÓaÖg¿˛Ç_/// Replace the current route of the navigator by pushing a new route and
/// then disposing the previous route once the new route has finished
/// animating in.
///
/// {@macro flutter.widgets.navigator.restorablePushReplacement}
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push_replacement.0.dart **
/// {@end-tool}¿Ò¿Ò¿Ò+¿Ò+¿Ò?&¿ÒZ  ¿Òi
¿Òn  ¿Òu¿Ò~  ¿„¿‰¿ÛÃÇ¶¿Û— ¿ÛÁ¿ÛÁ¿Û˚¿Ù  ¿Ù
¿Ù   ¿ˆvÑR¿˘àÇæ/// Push the given route onto the navigator, and then remove all the previous
/// routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetAndOpenPage() {
///   navigator.pushAndRemoveUntil<void>(
///     MaterialPageRoute<void>(builder: (BuildContext context) => const MyHomePage()),
///     ModalRoute.withName('/'),
///   );
/// }
/// ```
/// {@end-tool}
///
///
/// See also:
///
///  * [restorablePushAndRemoveUntil], which pushes a route that can be
///    restored during state restoration.¿˘õ¿˘õ¿˘Æ¿˘∏  ¿˘¡¿˘—  ¿˘i¿˘j¿˙ÃÖJ¿˝IÇA/// Push a new route onto the navigator, and then remove all the previous
/// routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.restorablePushAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push_and_remove_until.0.dart **
/// {@end-tool}¿˝f¿˝f¿˝y)¿˝î  ¿˝§¿˝¥  ¿˝ø¿˝»  ¿˝.¿˝/¿ Çµ¿   ¿ 8¿ E  ¿ K¿ [   ¿”Ç»¿àÅá/// Replaces a route on the navigator with a new route.
///
/// {@macro flutter.widgets.navigator.replace}
///
/// See also:
///
///  * [replaceRouteBelow], which is the same but identifies the route to be
///    removed by reference to the route above it, rather than directly.
///  * [restorableReplace], which adds a replacement route that can be
///    restored during state restoration.¿ê¿ê¿• ¿æ  ¿«¿⁄  ¿o¿p¿üÑO¿˘Å,/// Replaces a route on the navigator with a new route.
///
/// {@macro flutter.widgets.navigator.restorableReplace}
///
/// {@macro flutter.widgets.navigator.replace}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿¿¿  ¿9  ¿B2¿f  ¿v¿  ¿ﬁ¿ﬂ¿	ÚÉÑ¿	˜  ¿
¿
  ¿
¿
(   ¿zÉ¿RÅ®/// Replaces a route on the navigator with a new route. The route to be
/// replaced is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// See also:
///
///  * [replace], which is the same but identifies the route to be removed
///    directly.
///  * [restorableReplaceRouteBelow], which adds a replacement route that can
///    be restored during state restoration.¿d¿d¿y#¿í  ¿û¿±  ¿9¿:¿èÑƒ¿FÅá/// Replaces a route on the navigator with a new route. The route to be
/// replaced is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.restorableReplaceRouteBelow}
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿b¿b¿w#¿ê  ¿ú2¿¿  ¿–¿Ÿ  ¿+¿,¿WÉX¿\  ¿o¿|  ¿Ç¿í   ¿≥É¿òÄœ/// Whether the navigator can be popped.
///
/// {@macro flutter.widgets.navigator.canPop}
///
/// See also:
///
///  * [Route.isFirst], which returns true for routes for which [canPop]
///    returns false.   ¿∫á
¿Ç/// Consults the current route's [Route.popDisposition] method, and acts
/// accordingly, potentially popping the route as a result; returns whether
/// the pop request should be considered handled.
///
/// {@macro flutter.widgets.navigator.maybePop}
///
/// See also:
///
///  * [Form], which provides a [Form.canPop] boolean that enables the
///    form to prevent any [pop]s initiated by the app's back button.
///  * [ModalRoute], which provides a `scopedOnPopCallback` that can be used
///    to define the route's `willPop` method.¿¿¿+	¿/  ¿Ï¿Ì¿"»Ö‹¿$·Åœ/// Pop the top-most route off the navigator.
///
/// {@macro flutter.widgets.navigator.pop}
///
/// {@tool snippet}
///
/// Typical usage for closing a route is as follows:
///
/// ```dart
/// void _handleClose() {
///   navigator.pop();
/// }
/// ```
/// {@end-tool}
/// {@tool snippet}
///
/// A dialog box might be closed with a result:
///
/// ```dart
/// void _handleAccept() {
///   navigator.pop(true); // dialog returns true
/// }
/// ```
/// {@end-tool}¿$Â¿$Â¿$˙	¿$˛  ¿$»¿$…¿(®Çè¿)ıÅ+/// Calls [pop] repeatedly until the predicate returns true.
///
/// {@macro flutter.widgets.navigator.popUntil}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _doLogout() {
///   navigator.popUntil(ModalRoute.withName('/login'));
/// }
/// ```
/// {@end-tool} ¿)˛¿*   ¿+;Ç⁄¿+»ÄÅ/// Immediately remove `route` from the navigator, and [Route.dispose] it.
///
/// {@macro flutter.widgets.navigator.removeRoute} ¿+‘¿+‰   ¿.ÑD¿.ÛÄÃ/// Immediately remove a route from the navigator, and [Route.dispose] it. The
/// route to be removed is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.removeRouteBelow} ¿/¿/   ¿2aáO¿4⁄Ç]/// Complete the lifecycle for a route that has been popped off the navigator.
///
/// When the navigator pops a route, the navigator retains a reference to the
/// route in order to call [Route.dispose] if the navigator itself is removed
/// from the tree. When the route is finished with any exit animation, the
/// route should call this function to complete its lifecycle (e.g., to
/// receive a call to [Route.dispose]).
///
/// The given `route` must have already received a call to [Route.didPop].
/// This function may be called directly from [Route.didPop] if [Route.didPop]
/// will return true. ¿4Ë¿4¯   ¿9¥Ä≠¿9“ ¿9‡¿9‡¿9„	¿9Î  ¿9¥¿9µ¿=kÉn¿>7Äº/// The navigator is being controlled by a user gesture.
///
/// For example, called when the user beings an iOS back gesture.
///
/// When the gesture finishes, call [didStopUserGesture].   ¿@›Å≈¿AöÄØ/// A user gesture completed.
///
/// Notifies the navigator that a gesture regarding which the navigator was
/// previously notified with [didStartUserGesture] has completed.   ¿B”]¿Bÿ  ¿BÎ¿B˝   ¿C4b¿C9  ¿CR¿C`   ¿CöÉ"¿Cü    ¿F¿Å¿GJ/// Gets first route entry satisfying the predicate, or null if not found. ¿G6¿GL   ¿GﬁÅ5¿H7I/// Gets last route entry satisfying the predicate, or null if not found. ¿HR¿Hh   ¿Ià
¿I*  ¿I0¿I>  ¿I¿I ¿Q[Üƒ¿Qj  ¿QÜ# ¿QÜ¿Qù ¿Qû	¿Q§   ¿Q¨Ä´¿QÀ¿QÃ¿Q— ¿Qÿ¿QÈ  ¿QÚ¿R  ¿R¿R    ¿RZÄ‘¿Ry¿Rz¿RÉ ¿Rä5¿R¥  ¿R≈¿R◊  ¿RÂ¿RÛ   ¿S2Ç¿SQ¿SR¿Sf ¿Sg¿So   ¿UH ¿Ud  ¿Uä¿Uí  ¿Ul¿Ut    ¿U®¿U±    ¿U v¿U—    ¿VD^¿Vb   ¿VD¿VE¿V¶B¿V¬  ¿VŒ¿Vﬁ  ¿V¶¿Vß¿VÏÅ1¿V¯  ¿W¿W  ¿W 2¿W1  ¿W?¿WN¿WO ¿X!Éˇ¿X'  ¿XhÄ§ ¿Xh¿XÑ ¿Xã¿Xö  ¿X£¿X≤  ¿X¿ ¿Xœ  ¿XÈ¿XÓ¿Y
¿XÔ¿Y¿Y¿YÅ¿Y4¿Y5¿YI ¿YJ¿YY   ¿[(¿[! ¿[¿[¿[7¿[D  ¿[L¿[Z   ¿Z3Ä‘¿ZL   ¿Z3¿Z4¿[hÄ∂¿[É  ¿[è¿[ü  ¿[h¿[i ¿\"Ü!¿\(  ¿\mÄ¥ ¿\m¿\ç ¿\î¿\£  ¿\¥¿\√  ¿\— ¿\‡  ¿\˙¿\ˇ¿]¿] ¿]¿]¿]%Åÿ¿]M¿]N¿]b ¿]c¿]r   ¿a(¿a2 ¿a¿a¿aH2¿an  ¿a~¿aå  ¿_Äû¿_á   ¿_¿_¿_£Åu¿_º   ¿_£¿_§¿aöÄß¿aµ  ¿a¡¿a—  ¿aö¿aõ ¿bEï$¿bK   ¿b‹1¿b¯  ¿qˆ2¿qˇ    ¿w?(¿wT   ¿w?¿w@	¿c"äÛ¿c'  ¿c.¿c8   ¿nÅ¿n  ¿n2¿n@  ¿nK¿nY  ¿nb'¿n~  ¿nè¿nù   ¿pÅ,¿p  ¿p"¿p>  ¿p@¿p\   ¿q=Ä¢¿qB    ¿r,ÇÑ¿r>  ¿rT¿rb  ¿rg¿rw   ¿tÿS¿u    ¿tÿ¿tŸ¿u/ÅP¿uW  ¿uf¿uo  ¿u/¿u0¿vÉj¿vî  ¿v¢!¿vø  ¿vÉ¿vÑ¿vÒJ¿w   ¿vÒ¿vÚ ¿{oî¿ÅÊÜp/// Gives access to a [Route] object and its return value that was added to a
/// navigator via one of its "restorable" API methods.
///
/// When a [State] object wants access to the return value of a [Route] object
/// it has pushed onto the [Navigator], a [RestorableRouteFuture] ensures that
/// it will also have access to that value after state restoration.
///
/// To show a new route on the navigator defined by the [navigatorFinder], call
/// [present], which will invoke the [onPresent] callback. The [onPresent]
/// callback must add a new route to the navigator provided to it using one
/// of the "restorable" API methods. When the newly added route completes, the
/// [onComplete] callback executes. It is given the return value of the route,
/// which may be null.
///
/// While the route added via [present] is shown on the navigator, it can be
/// accessed via the [route] getter.
///
/// If the property is restored to a state in which [present] had been called on
/// it, but the route has not completed yet, the [RestorableRouteFuture] will
/// obtain the restored route object from the navigator again and call
/// [onComplete] once it completes.
///
/// The [RestorableRouteFuture] can only keep track of one active [route].
/// When [present] has been called to add a route, it may only be called again
/// after the previously added route has completed.
///
/// {@tool dartpad}
/// This example uses a [RestorableRouteFuture] in the `_MyHomeState` to push a
/// new `MyCounter` route and to retrieve its return value.
///
/// ** See code in examples/api/lib/widgets/navigator/restorable_route_future.0.dart **
/// {@end-tool}¿Å¸¿Å¸¿Ç'Ä¨ ¿ÇP¿Çe&/// Creates a [RestorableRouteFuture].¿Çl.¿Çr  ¿Ç†¿ÇØ  ¿ÇΩ¿Ç√  ¿ÇÉ¿Ç◊Å
¿É“Ä÷/// A callback that given the [BuildContext] of the [State] object to which
/// this property is registered returns the [NavigatorState] of the navigator
/// to which the route instantiated in [onPresent] is added. ¿ÉÊÇ:¿ÜÅ¸/// A callback that add a new [Route] to the provided navigator.
///
/// The callback must use one of the API methods on the [NavigatorState] that
/// have "restorable" in their name (e.g. [NavigatorState.restorablePush],
/// [NavigatorState.restorablePushNamed], etc.) and return the opaque ID
/// returned by those methods.
///
/// This callback is invoked when [present] is called with the `arguments`
/// Object that was passed to that method and the [NavigatorState] obtained
/// from [navigatorFinder]. ¿Ü%Ä ¿ÜÂÄï/// A callback that is invoked when the [Route] added via [onPresent]
/// completes.
///
/// The return value of that route is passed to this method. ¿äQ¿ä[  ¿å¿å ¿å¿à˛ÄΩ¿â†Äí/// Whether the [Route] created by [present] is currently shown.
///
/// Returns true after [present] has been called until the [Route] completes.   ¿âøÄè¿ä>j/// The route that [present] added to the Navigator.
///
/// Returns null when currently no route is shown   ¿åµH¿å    ¿åµ¿å∂¿ç~¿ç    ¿ÜÙÇ¿à/Å)/// Shows the route created by [onPresent] and invoke [onComplete] when it
/// completes.
///
/// The `arguments` object is passed to [onPresent] and can be used to
/// customize the route. It must be serializable via the
/// [StandardMessageCodec]. Often, a [Map] is used to pass key-value pairs. ¿à8¿àA   ¿äf1¿äz   ¿äf¿äg¿äõu¿ä¨  ¿ä∫¿ä√  ¿äõ¿äú¿ãÄÑ¿ã(   ¿ã¿ã¿ãúk¿ãØ  ¿ãæ¿ã«  ¿ãú¿ãù¿å&Äã¿å7   ¿å&¿å'¿çÉÅ¶¿çà  ¿çù	¿ç•   ¿è-]¿èC  ¿è[¿èi    ¿èéÇÈ¿ê…Å4/// A notification that a change in navigation has taken place.
///
/// Specifically, this notification indicates that at least one of the following
/// has occurred:
///
///  * That route stack of a [Navigator] has changed in any way.
///  * The ability to pop has changed, such as controlled by [PopScope]. ¿ê˘Äé ¿ëI¿ë_G/// Creates a notification that some change in navigation has happened.¿ëf¿ëu   ¿ëãÄÅ¿í e/// Indicates that the originator of this [Notification] is capable of
/// handling a navigation pop.  ¿íd¿í$   ¿í¿í  çÉ@éÄ„/// Indicates whether the current route should be popped.
///
/// Used as the return value for [Route.willPop].
///
/// See also:
///
///  * [WillPopScope], a widget that hooks into the route's [Route.willPop]
///    mechanism.  é ÄûéªÄí/// Pop the route.
///
/// If [Route.willPop] or [Route.popDisposition] return [pop] then the back
/// button will actually pop the current route. é√ÄõèVÄä/// Do not pop the route.
///
/// If [Route.willPop] or [Route.popDisposition] return [doNotPop] then the
/// back button will be ignored. ècÄ˘êVÄË/// Delegate this to the next level of navigation.
///
/// If [Route.willPop] or [Route.popDisposition] return [bubble] then the back
/// button will be handled by the [SystemNavigator], which will usually close
/// the application.    ¿“GÜæ¿“L   ¿“`¿“`  ¿“·¿“·  ¿”]¿”]  ¿”›¿”›  ¿‘6¿‘6  ¿‘ù¿‘ù  ¿‘·¿‘·  ¿’C¿’C  ¿’˚¿’˚  ¿÷¿÷  ¿÷N¿÷N  ¿÷Ó¿÷Ó  ¿◊C¿◊C  ¿◊Ò¿◊Ò  ¿ÿ%	¿ÿ%  ¿ÿ‹¿ÿ‹     ¿Q%4¿Q*   ¿QD¿QD  ¿QM	¿QM          ÑÁÄ˘Ö†Ä∞/// Creates a route for the given route settings.
///
/// Used by [Navigator.onGenerateRoute].
///
/// See also:
///
///  * [Navigator], which is where all the [Route]s end up.  Ö»Ö◊   Ö‚Ä…ÜK`/// Creates a series of one or more routes.
///
/// Used by [Navigator.onGenerateInitialRoutes].  Ü|Üå  ÜñÜû   Ü≠ÇóàÌÇ7/// Creates a [Route] that is to be added to a [Navigator].
///
/// The route can be configured with the provided `arguments`. The provided
/// `context` is the `BuildContext` of the [Navigator] to which the route is
/// added.
///
/// Used by the restorable methods of the [Navigator] that add anonymous routes
/// (e.g. [NavigatorState.restorablePush]). For this use case, the
/// [RestorableRouteBuilder] must be static function annotated with
/// `@pragma('vm:entry-point')`. The [Navigator] will call it again during
/// state restoration to re-create the route.ââ ââ)  â1â:   âF|âç>/// Signature for the [Navigator.popUntil] predicate argument.  â¨âº   âƒÅzãÄ€/// Signature for a callback that verifies that it's OK to call [Navigator.pop].
///
/// Used by [Form.onWillPop], [ModalRoute.addScopedWillPopCallback],
/// [ModalRoute.removeScopedWillPopCallback], and [WillPopScope].   ä†ä°ä´ã
äØä‘ã@Å›å◊Åé/// Signature for the [Navigator.onPopPage] callback.
///
/// This callback must call [Route.didPop] on the specified route and must
/// properly update the pages list the next time it is passed into
/// [Navigator.pages] so that it no longer includes the corresponding [Page].
/// (Otherwise, the page will be interpreted as a new page to show when the
/// [Navigator.pages] list is next updated.)  å˜ç  çç   ¿Ÿ@¿Ÿ   ¿Ÿ4¿ŸA   ¿ _A¿ g   ¿ ã¿ ò   ¿wkÅ¿x5Ä¡/// A callback that given a [BuildContext] finds a [NavigatorState].
///
/// Used by [RestorableRouteFuture.navigatorFinder] to determine the navigator
/// to which a new route should be added.  ¿xg¿xu   ¿xÅ—¿y˜Åo/// A callback that given some `arguments` and a `navigator` adds a new
/// restorable route to that `navigator` and returns the opaque ID of that
/// new route.
///
/// Usually, this callback calls one of the imperative methods on the Navigator
/// that have "restorable" in the name and returns their return value.
///
/// Used by [RestorableRouteFuture.onPresent].  ¿z#¿z3  ¿z=¿zF   ¿zRÅ¿{8Ä›/// A callback to handle the result of a completed [Route].
///
/// The return value of the route (which can be null for e.g. void routes) is
/// passed to the callback.
///
/// Used by [RestorableRouteFuture.onComplete].¿{P¿{P ¿{c¿{f    ÉèMÉû É¡É…É€É÷É Éÿ¿ ∫–ÄÈ¿ ªsÄÜ/// The default value of [Navigator.routeTraversalEdgeBehavior].
///
/// {@macro flutter.widgets.navigator.routeTraversalEdgeBehavior}¿ ªò¿ ª≠¿ ªÆ  ó¿ <ÄÜÄ§Ä•Ä∫Ä‘ÄÎÅÅ)Å*ÅTÅ}Å¶ÅŒÅœÅ‰Å˚ÇÇ3ÇRÇkÇÅÇ¶ÇΩÇÿÇ˛ÉÉ3É4ÉèÉﬁÉﬂÉ˜ÑÑ@Ñ¶Ñ»ÑÊÑÁÖÖÖFÖJÖXÖ\ÖòÖ·Ö‚ÜÜÜCÜ¨Ü≠ÜÈÜÌá9áÜáëáïáÂà(àlà∑àÂâEâFâÖâ√âƒäää^ä†ä≠ä“ã
ãã?ã@ãvãzã≈ååVå¢åœçççYç]çèçìç°ç•çÒééé3é9éáéπé¿é¡é›é„è1èTè`èaèñèúèÌê=êTê^ê`êaêõêüêÍë9ëàë¨ë∞ëˆíí#íríîíòíÁì-ìzì¬îîJîNîèîﬂïïï:ï@ïçï°ï¯ñ$ñcñîñµñÀñ‘ñ⁄ñﬁñﬂóó@ó^ó_óÇóàóØóµò ò=ò\òbò≤ò˝ôGôëôµô‡ô˚ô¸öMö_öeö±ö«öÕõõlõ∫ú
úYúåú÷ù)ù*ù^ùÇù°ùøù≈ù…ù ûûIûxû|û}û¶û¨û˚ü9ü?üåüõü°üÌ††U†V†í†ò†Í°>°É°†°≠°æ°”°‘¢¢$¢l¢r¢ø£ ££U£Ñ£ë£¢£Ω£˜§,§i§q§y§}§~§≈§À••L•R•°•–•›•Ó¶ ¶3¶Ñ¶“ß!ßpßëßößÓ®A®ê®¬®ˆ©H©õ©Ì™=™è™ﬂ´´´k´π´Ï¨)¨3¨9¨=¨>¨ç¨ì¨‚≠≠≠/≠_≠`≠∞≠ÿ≠ﬁÆ.ÆLÆRÆùÆ÷Ø!ØmØºØ˘Øˇ∞?∞b∞h∞∑∞Â∞Î∞˚±±L±`±≠±√±“±ı≤/≤3≤c≤Æ≤≤≤≥≥≥+≥1≥Å≥¿≥Ò≥˜¥B¥{¥∆µµaµûµ§µ‰∂∂∂\∂ä∂ê∂†∂¶∂Ô∑?∑j∑µ∑π∑∫∑Û∏∏%∏s∏√∏˘ππ2π3πfπìπîπﬁ∫ ∫&∫u∫ú∫º∫Ωªªª]ª¨ª¡ªÚº)º*ºeºfº≠º˘ΩFΩíΩÆΩ¥ææOæüæÍø:øSøYø©ø˘¿ @5¿ @;¿ @ä¿ @£¿ @¥¿ @œ¿ @Ë¿ @˘¿ @˝¿ @˛¿ AL¿ AR¿ AÜ¿ A”¿ B'¿ BA¿ BG¿ Bî¿ BÂ¿ C¿ C ¿ Ck¿ Cπ¿ D
¿ DR¿ D_¿ Dp¿ Dê¿ D≈¿ D…¿ D ¿ E¿ E$¿ E*¿ Ey¿ Eë¿ Eû¿ EØ¿ Eﬂ¿ E‡¿ F"¿ F(¿ Fx¿ F»¿ G¿ G2¿ G8¿ Gá¿ G¶¿ G≥¿ Gƒ¿ G¯¿ G˘¿ H?¿ HE¿ Hë¿ H·¿ I2¿ IL¿ IR¿ Iü¿ I¬¿ Iœ¿ I‡¿ J¿ J¿ J`¿ Jf¿ J∞¿ K¿ KR¿ Kã¿ Kë¿ K°¿ Kß¿ KÒ¿ L/¿ L<¿ LM¿ Lo¿ Lp¿ Lº¿ M	¿ M¿ MD¿ Mï¿ Mÿ¿ N¿ N_¿ N¶¿ N„¿ NÈ¿ O0¿ O{¿ O¬¿ O˚¿ P¿ PE¿ P_¿ Pe¿ Pu¿ P{¿ PÀ¿ PË¿ Pı¿ Q¿ Q(¿ Q)¿ QZ¿ Q`¿ Q±¿ Q‚¿ QË¿ R6¿ RG¿ RM¿ Rö¿ RË¿ S7¿ SH¿ SU¿ Sh¿ S¿ S¢¿ Sƒ¿ S¿ T>¿ TD¿ TH¿ TI¿ Tä¿ Tê¿ T≈¿ T‹¿ T˙¿ U¿ U¿ Uá¿ U¨¿ U¿¿ U∆¿ UÚ¿ Uˆ¿ U˜¿ VB¿ VH¿ Vò¿ V–¿ VÂ¿ W¿ W¿ W¿ Wë¿ W∂¿ W ¿ W–¿ W¸¿ X ¿ X¿ XI¿ XV¿ Xw¿ Xï¿ X©¿ XØ¿ XÎ¿ Y¿ Y"¿ Y*¿ Y]¿ Yr¿ Yz¿ YÄ¿ Yí¿ Yñ¿ Yó¿ Y≈¿ YÀ¿ Z¿ Zk¿ Zß¿ Z≠¿ Zˇ¿ [S¿ [™¿ [¿¿ [ﬁ¿ [Ú¿ [¯¿ \d¿ \h¿ \j¿ \k¿ \§¿ \Ø¿ \≈¿ \Ú¿ ]
¿ ]¿ ]-¿ ]3¿ ]4¿ ]e¿ ]k¿ ]í¿ ]®¿ ]©¿ ]”¿ ]Ÿ¿ ^)¿ ^D¿ ^E¿ ^Q¿ ^…¿ ^À¿ ^Ã¿ ^˙¿ ^˛¿ _G¿ _é¿ _í¿ _†¿ _§¿ _ı¿ `¿ `4¿ `o¿ `~¿ `å¿ `ú¿ `±¿ `…¿ `œ¿ `–¿ `˘¿ `ˇ¿ a?¿ aV¿ aW¿ aß¿ a∏¿ aæ¿ b¿ b¿ b$¿ b*¿ bw¿ bâ¿ b®¿ b©¿ bÁ¿ bÌ¿ c<¿ cI¿ cq¿ c†¿ cΩ¿ c¡¿ c¬¿ c˚¿ d¿ dW¿ db¿ dê¿ dë¿ dù¿ dı¿ d˜¿ d¯¿ e6¿ eP¿ eå¿ e¬¿ e√¿ f¿ fZ¿ fî¿ fŒ¿ g¿ gd¿ gØ¿ g˘¿ h¿ hi¿ hj¿ hê¿ hñ¿ h·¿ i¿ iJ¿ iK¿ iq¿ iw¿ iΩ¿ iﬁ¿ j%¿ j&¿ jM¿ jS¿ jû¿ j ¿ j–¿ k¿ k`¿ k∞¿ kœ¿ l¿ l¿ lU¿ l£¿ l§¿ lÊ¿ lÏ¿ m;¿ mw¿ mÀ¿ mÃ¿ n	¿ n¿ nK¿ nk¿ nm¿ nn¿ n°¿ n•¿ nÓ¿ o<¿ oâ¿ oç¿ o‹¿ p,¿ pw¿ p¡¿ pı¿ q,¿ qJ¿ qY¿ qÜ¿ q†¿ q¶¿ qß¿ q¯¿ r¿ r(¿ r7¿ rQ¿ rk¿ rl¿ r©¿ rÕ¿ rŒ¿ s¿ sB¿ sH¿ sä¿ s…¿ sœ¿ sﬂ¿ sÂ¿ t4¿ tk¿ t§¿ u¿ u*¿ u.¿ u/¿ u{¿ uã¿ uë¿ u·¿ v¿ v¿ vM¿ v{¿ vÅ¿ vë¿ vó¿ v„¿ w'¿ wZ¿ wì¿ w£¿ w√¿ wﬂ¿ x7¿ xa¿ x∂¿ y¿ yY¿ yé¿ y≤¿ y ¿ y’¿ y›¿ y¿ y˙¿ z¿ z¿ z¿ z#¿ z^¿ zç¿ zë¿ zì¿ zî¿ z„¿ {-¿ {T¿ {y¿ {ï¿ {ñ¿ {Á¿ {Ì¿ |=¿ |à¿ |¨¿ |’¿ |÷¿ }&¿ },¿ }|¿ }∆¿ }Í¿ ~¿ ~¿ ~I¿ ~O¿ ~ú¿ ¿ Q¿ g¿ h¿ †¿ ¶¿ Û¿ ÄY¿ Ä™¿ Äø¿ Ä¿¿ Äˆ¿ Ä¸¿ ÅH¿ Åô¿ Å∑¿ Å‹¿ Å›¿ Ç¿ Ç¿ Çk¿ Ç∏¿ É¿ É0¿ É1¿ Ék¿ Éq¿ ÉΩ¿ Ñ¿ ÑH¿ Ñ`¿ Ñb¿ Ñc¿ Ñ¥¿ Ñ‹¿ Ñ‡¿ Ö/¿ ÖÇ¿ ÖÜ¿ Ö—¿ Ö’¿ ÖÈ¿ Ü8¿ ÜÖ¿ Ü®¿ Ü¨¿ Ü∏¿ á¿ á¿ áC¿ áÖ¿ áÂ¿ àJ¿ àU¿ à§¿ à®¿ àı¿ â-¿ âQ¿ â]¿ â¿ âÉ¿ âç¿ âÔ¿ ä-¿ äZ¿ ä∆¿ äÔ¿ ã@¿ ão¿ ã¿ ãå¿ ãò¿ ã¡¿ ã≈¿ ãœ¿ ãÁ¿ ãÔ¿ ãı¿ ã˘¿ å¿ å¿ å¿ å#¿ å'¿ år¿ åè¿ åﬁ¿ ç¿ ç;¿ çÖ¿ ç£¿ ç§¿ ç‘¿ é¿ én¿ éœ¿ é÷¿ è¿ èC¿ èÅ¿ èΩ¿ èƒ¿ ê¿ ê¿ ê(¿ êy¿ êâ¿ ê÷¿ ê˝¿ ëK¿ ër¿ ë¡¿ í¿ í/¿ í>¿ íE¿ íp¿ íw¿ í∞¿ í∑¿ íÂ¿ ì5¿ ìV¿ ì]¿ ì®¿ ìı¿ î¿ î`¿ î∆¿ ï¿ ïV¿ ïï¿ ï‹¿ ñH¿ ñà¿ ñî¿ ñû¿ ñ¶¿ ñ˜¿ ó%¿ óQ¿ óR¿ ó§¿ ò	¿ ò¿ ò^¿ ò®¿ ò¥¿ òÓ¿ ô¿ ô/¿ ô\¿ ôf¿ ôn¿ ôo¿ ô}¿ ô√¿ ôÊ¿ ö6¿ ö¿ öà¿ öõ¿ ö•¿ ö¶¿ ö∫¿ öæ¿ öø¿ õ
¿ õV¿ õ\¿ õ≠¿ õı¿ ú2¿ ú¿ úÀ¿ ù¿ ùF¿ ùL¿ ùò¿ ùÊ¿ û2¿ û}¿ ûÃ¿ ü¿ üd¿ üö¿ üÊ¿ †1¿ †o¿ †ô¿ † ¿ °¿ °e¿ °µ¿ ¢¿ ¢R¿ ¢†¿ ¢æ¿ ¢ƒ¿ £¿ £a¿ £∞¿ £€¿ £·¿ §1¿ §n¿ §π¿ •¿ •M¿ •ú¿ •ﬁ¿ •‰¿ ¶¿ ¶¿ ¶B¿ ¶H¿ ¶~¿ ¶Ñ¿ ¶´¿ ¶±¿ ¶‹¿ ß(¿ ßE¿ ßK¿ ßt¿ ßz¿ ß¡¿ ®
¿ ®¿ ® ¿ ®&¿ ®w¿ ®ù¿ ®Ì¿ ©¿ ©e¿ ©ã¿ ©◊¿ ™#¿ ™s¿ ™µ¿ ´¿ ´F¿ ´r¿ ´∞¿ ¨¿ ¨m¿ ¨s¿ ¨u¿ ¨v¿ ¨«¿ ≠¿ ≠¿ ≠\¿ ≠™¿ ≠ˇ¿ Æ<¿ Æ¿ Æ¬¿ ÆÔ¿ Ø¿ Ø¿ Ø+¿ ØW¿ Øï¿ ØÒ¿ ∞R¿ ∞Y¿ ∞§¿ ∞Ù¿ ±B¿ ±Ñ¿ ±–¿ ≤,¿ ≤R¿ ≤b¿ ≤j¿ ≤§¿ ≥¿ ≥t¿ ≥Ø¿ ≥¸¿ ¥¿ ¥_¿ ¥i¿ ¥â¿ ¥Ù¿ µB¿ µë¿ µ›¿ ∂,¿ ∂i¿ ∂Ω¿ ∑
¿ ∑!¿ ∑s¿ ∑É¿ ∑ë¿ ∑ù¿ ∑ß¿ ∑Ø¿ ∑‘¿ ∑’¿ ∏)¿ ∏]¿ ∏c¿ ∏d¿ ∏õ¿ ∏÷¿ ∏◊¿ π ¿ πj¿ πû¿ πÛ¿ ∫¿ ∫'¿ ∫I¿ ∫S¿ ∫[¿ ∫y¿ ∫Ø¿ ∫µ¿ ∫…¿ ∫Õ¿ ∫œ¿ ∫–¿ ª¿ ª¿ ªW¿ ªª¿ ªº¿ º¿ º
¿ ºY¿ º®¿ ºˆ¿ ΩK¿ Ωú¿ ΩŸ¿ Ω›¿ Ω¯¿ Ω¸¿ æL¿ æõ¿ æÍ¿ ø:¿ øá¿ ø‘¿ øˆ¿ ø˙¿ ¿I¿ ¿ñ¿ ¿Œ¿ ¿Ú¿ ¿ˆ¿ ¡@¿ ¡D¿ ¡c¿ ¡g¿ ¡∞¿ ¡ˆ¿ ¬<¿ ¬Ü¿ ¬Õ¿ ¬˜¿ ¬˚¿ √F¿ √ê¿ √ﬁ¿ ƒ)¿ ƒs¿ ƒæ¿ ≈¿ ≈V¿ ≈v¿ ≈z¿ ≈°¿ ≈•¿ ≈Û¿ ∆C¿ ∆ë¿ ∆™¿ ∆Æ¿ ∆¸¿ «L¿ «r¿ «v¿ «Ç¿ «î¿ «»¿ «Œ¿ «÷¿ «⁄¿ »¿ »g¿ »ñ¿ »ö¿ »¶¿ »€¿ …¿ …¿ …T¿ …l¿ …ã¿ …≥¿ …—¿ …˘¿  
¿  ¿  &¿  1¿  :¿  B¿  J¿  N¿  î¿  ◊¿ À¿ À¿ À\¿ Àá¿ Àã¿ Àó¿ À≥¿ Àª¿ Àø¿ Ã
¿ ÃU¿ Ãñ¿ Ã›¿ Ã˝¿ Õ¿ Õ&¿ Õ*¿ Õo¿ Õ±¿ ÕË¿ Œ¿ Œ#¿ ŒH¿ Œí¿ Œ⁄¿ œ$¿ œ(¿ œ4¿ œF¿ œ`¿ œ†¿ œ ¿ –¿ –h¿ –∑¿ –¬¿ –Ã¿ –“¿ –⁄¿ –ﬁ¿ –˚¿ –ˇ¿ —¿ —3¿ —;¿ —?¿ —a¿ —e¿ —Æ¿ —‰¿ —Ë¿ “6¿ “Ç¿ “ë¿ “ï¿ “ﬁ¿ ”¿ ”!¿ ”-¿ ”v¿ ”û¿ ”µ¿ ”◊¿ ”¸¿ ‘4¿ ‘A¿ ‘L¿ ‘T¿ ‘\¿ ‘d¿ ‘h¿ ‘∞¿ ‘˙¿ ’¿ ’¿ ’f¿ ’¢¿ ’Ì¿ ÷>¿ ÷M¿ ÷Q¿ ÷f¿ ÷j¿ ÷∂¿ ◊¿ ◊V¿ ◊Å¿ ◊Ö¿ ◊≈¿ ÿ¿ ÿS¿ ÿó¿ ÿŒ¿ ÿ“¿ Ÿ#¿ Ÿp¿ Ÿª¿ Ÿø¿ Ÿ’¿ ŸŸ¿ ⁄)¿ ⁄v¿ ⁄«¿ ⁄˙¿ ⁄˛¿ €J¿ €ò¿ €È¿ ‹6¿ ‹:¿ ‹F¿ ‹z¿ ‹è¿ ‹¬¿ ‹¸¿ ›¿ ›X¿ ›w¿ ›ï¿ ›∫¿ ﬁ¿ ﬁ¿ ﬁ,¿ ﬁ7¿ ﬁ?¿ ﬁG¿ ﬁO¿ ﬁS¿ ﬁê¿ ﬁÿ¿ ﬂ&¿ ﬂq¿ ﬂ∑¿ ﬂÕ¿ ﬂ—¿ ‡ ¿ ‡A¿ ‡E¿ ‡`¿ ‡d¿ ‡∞¿ · ¿ ·Q¿ ·é¿ ·í¿ ·£¿ ·ß¿ ·Ù¿ ‚B¿ ‚}¿ ‚Å¿ ‚—¿ „¿ „m¿ „∫¿ ‰	¿ ‰¿ ‰#¿ ‰m¿ ‰æ¿ ‰÷¿ ‰⁄¿ ‰Ì¿ Â<¿ Âp¿ Ât¿ ÂΩ¿ Ê¿ Ê¿ ÊZ¿ Êã¿ Êè¿ ÊŸ¿ ÊÈ¿ ÊÌ¿ Á<¿ Áá¿ Á÷¿ Ë&¿ ËT¿ ËX¿ Ë|¿ ËÄ¿ ËÕ¿ È¿ Èd¿ Èµ¿ È–¿ È‘¿ ÈÌ¿ ÈÒ¿ Í<¿ Íà¿ Í“¿ Î ¿ ÎB¿ ÎF¿ Îê¿ Î°¿ ÎÒ¿ Ï ¿ Ïm¿ Ïæ¿ Ì¿ ÌV¿ Ì¢¿ Ì…¿ ÌÕ¿ Ó¿ Ó_¿ Ó´¿ ÓÛ¿ Ô¿ Ôj¿ Ôp¿ Ôµ¿ Ô…¿ Ôÿ¿ ¿ ¿ -¿ x¿ í¿ ´¿ ı¿ Ò"¿ ÒI¿ Ò{¿ Òô¿ Ò∂¿ Ú ¿ Ú¿ Ú¿ ÚC¿ ÚI¿ Úë¿ Úﬁ¿ Û¿ Ûg¿ Ûm¿ Û∑¿ Û¿ Ûˆ¿ ÙF¿ Ùì¿ Ù‚¿ ı3¿ ıZ¿ ı`¿ ı´¿ ı˚¿ ˆI¿ ˆã¿ ˆß¿ ˆ≠¿ ˆ˛¿ ˜2¿ ˜8¿ ˜É¿ ˜”¿ ¯
¿ ¯-¿ ¯.¿ ¯z¿ ¯¢¿ ¯®¿ ¯ı¿ ˘$¿ ˘*¿ ˘v¿ ˘ú¿ ˘¢¿ ˘Û¿ ˙B¿ ˙í¿ ˙ ¿ ˙Ó¿ ˙Ô¿ ˚?¿ ˚a¿ ˚g¿ ˚ñ¿ ˚Œ¿ ˚œ¿ ˚˙¿ ¸ ¿ ¸0¿ ¸6¿ ¸É¿ ¸µ¿ ¸ª¿ ˝
¿ ˝[¿ ˝¢¿ ˝¿¿ ˝¡¿ ˝ˇ¿ ˛&¿ ˛'¿ ˛f¿ ˛l¿ ˛∏¿ ˇ	¿ ˇ"¿ ˇ(¿ ˇv¿ ˇ≥¿ ˇŸ¿ ˇ⁄¿ ¿ 3¿ 4¿ É¿ ñ¿ ú¿ €¿*¿z¿±¿∑¿¿Q¿]¿c¿¶¿Ú¿B¿i¿o¿¿Ö¿“¿‰¿2¿Y¿§¿Ì¿;¿s¿à¿¨¿≠¿˚¿E¿K¿í¿‹¿'¿w¿∆¿¿a¿±¿–¿Â¿	¿	 ¿	Y¿	_¿	o¿	u¿	œ¿	ˆ¿
$¿
%¿
u¿
¢¿
®¿
⁄¿
‡¿.¿~¿î¿ö¿Â¿¿j¿∫¿¿L¿ô¿Ë¿Ò¿#¿$¿p¿û¿§¿Ò¿B¿è¿ï¿·¿¿_¿Ø¿˝¿¿¿f¿¥¿¿M¿X¿^¿w¿†¿°¿◊¿›¿-¿@¿F¿i¿Ñ¿Ö¿ÿ¿¿¿-¿H¿I¿ö¿©¿Ø¿Â¿,¿r¿x¿æ¿¿K¿o¿u¿∆¿‘¿⁄¿$¿*¿t¿Ñ¿ô¿ü¿·¿/¿h¿}¿É¿π¿˚¿L¿ô¿œ¿’¿¿R¿g¿m¿É¿â¿¨¿≤¿¿¿ﬁ¿¿¿#¿5¿;¿Q¿W¿£¿∞¿∂¿ƒ¿Ê¿¿¿,¿S¿q¿ì¿†¿´¿≥¿Ω¿œ¿’¿Î¿Ò¿=¿C¿Q¿u¿√¿ﬁ¿¸¿¿%¿`¿j¿r¿x¿î¿±¿ƒ¿⁄¿*¿5¿=¿G¿Y¿_¿o¿u¿ø¿‚¿ˆ¿ (¿ B¿ Z¿ q¿ x¿ »¿ Ã¿ Õ¿!¿!-¿!3¿!s¿!¬¿"¿"G¿"\¿"b¿"ï¿"õ¿"Â¿#'¿#p¿#¿¿#ﬂ¿#Â¿$'¿$`¿$u¿${¿$«¿%¿%d¿%±¿%˛¿&¿&/¿&5¿&K¿&Q¿&t¿&z¿&à¿&©¿&–¿&„¿&˘¿' ¿'=¿'^¿'k¿'v¿'~¿'à¿'ö¿'Æ¿'Ê¿( ¿(¿(/¿(6¿(ê¿(î¿(ï¿(Â¿)3¿)z¿)Ä¿)¡¿*¿*Z¿*£¿*Ú¿+@¿+â¿+è¿+÷¿,¿,"¿,n¿,ª¿,˚¿-I¿-ó¿-‰¿.¿.¿.h¿.v¿.|¿. ¿/¿/¿/b¿/u¿/ä¿/ê¿/œ¿/’¿0¿0¿0$¿0*¿0M¿0S¿0a¿0Ñ¿0Õ¿0’¿0ﬂ¿0Ò¿0˜¿1¿1¿1^¿1ë¿1•¿1ˆ¿2¿2(¿28¿2O¿2V¿2≈¿2…¿2 ¿3¿3h¿3Ø¿3µ¿4 ¿4N¿4ù¿4ﬂ¿4Ù¿4˙¿58¿5>¿5Ö¿5ã¿5‘¿5⁄¿5¿5ˆ¿6¿6¿6-¿6Q¿6†¿6®¿6≤¿6ƒ¿6ÿ¿7/¿7I¿7a¿7q¿7à¿7è¿8¿8¿8¿8Z¿8ì¿8ô¿8’¿9¿9¿9i¿9Ø¿9µ¿:¿:E¿:ì¿:‚¿;.¿;}¿;Õ¿<¿<
¿<[¿<i¿<o¿<Ω¿<˜¿<˝¿=V¿=k¿=q¿=∞¿=∂¿=È¿=Ô¿>¿>¿>.¿>4¿>B¿>f¿>≠¿>µ¿>ø¿>—¿>◊¿>Á¿>Ì¿?8¿?d¿?x¿?ƒ¿?ﬁ¿?ˆ¿@¿@¿@$¿@é¿@í¿@ì¿@‡¿A¿A¿Ae¿AÆ¿A˝¿B?¿BT¿BZ¿Bì¿Bô¿B‡¿BÊ¿C/¿C5¿CK¿CQ¿Ct¿Cz¿Cà¿C¶¿CÒ¿C˘¿D¿D¿D)¿D{¿Dï¿D≠¿DΩ¿D‘¿D€¿EO¿ES¿ET¿E¢¿EÚ¿F¿F¿F`¿Fß¿F÷¿F‹¿G¿GZ¿G`¿GÆ¿G¯¿G˛¿HK¿Hx¿H~¿HΩ¿I¿I%¿I+¿Iw¿I∆¿J¿JC¿Jç¿J€¿K)¿KO¿KU¿K¶¿K¥¿K∫¿L¿L¿L^¿Lv¿Lã¿Lë¿L–¿L÷¿M	¿M¿M%¿M+¿MN¿MT¿Mb¿MÇ¿M›¿MÂ¿MÔ¿N¿N¿N¿N¿Nm¿Nú¿N∞¿N¿O
¿O#¿OC¿OZ¿Oa¿OÕ¿O—¿O“¿P ¿Pp¿Pî¿Pö¿PË¿Q9¿Qà¿Q ¿Qﬂ¿QÂ¿R&¿R,¿Rs¿Ry¿R¬¿R»¿Rﬁ¿R‰¿S¿S¿S¿S;¿S†¿S®¿S≤¿Sƒ¿Sÿ¿T¿T8¿TQ¿Tq¿Tà¿Tè¿U¿U	¿U
¿UW¿Ul¿Ur¿U£¿UÈ¿V6¿Vv¿Vö¿V†¿VÒ¿Vˇ¿W¿WO¿Wd¿Wj¿W©¿WØ¿W≈¿WÀ¿WÓ¿WÙ¿X¿X¿X;¿XN¿Xq¿X∞¿XΩ¿X»¿X–¿X⁄¿XÏ¿XÚ¿Y¿Y¿YT¿Yp¿YÑ¿Yÿ¿Z¿Z
¿Z¿ZT¿Zi¿Zo¿Z™¿Z¯¿[G¿[y¿[é¿[î¿[¬¿[»¿\¿\R¿\û¿\Í¿],¿]y¿]Ω¿]√¿^¿^Z¿^o¿^u¿^æ¿^ƒ¿^⁄¿^˝¿_¿__¿_q¿_Ö¿`¿`a¿`e¿`f¿`∂¿a¿a?¿aE¿aÅ¿aÕ¿b¿bm¿bΩ¿c¿cI¿cO¿cõ¿cË¿d(¿dv¿d∏¿dæ¿e¿e¿e#¿eq¿e≤¿e«¿eÕ¿f¿f¿f(¿f.¿fQ¿fW¿fe¿fÉ¿f≤¿f≈¿fË¿g+¿g8¿gC¿gK¿gU¿gg¿gm¿g}¿gÉ¿g”¿h¿h¿hú¿hÔ¿hÛ¿hÙ¿iD¿iè¿i…¿iœ¿j¿jc¿j≠¿jÔ¿k¿k
¿kC¿kI¿kÅ¿ká¿k–¿k÷¿kÏ¿l¿l¿l}¿lè¿l£¿mW¿mŒ¿m“¿m”¿n ¿ng¿ná¿nç¿nÃ¿o¿oB¿oH¿oä¿o∆¿oÃ¿p¿pd¿pj¿p∑¿p‰¿pÍ¿q0¿qÅ¿qÀ¿r¿rd¿r±¿s¿sB¿sH¿sô¿sß¿s≠¿s˚¿t¿t¿tU¿t[¿tq¿tw¿tö¿t†¿tÆ¿t‘¿u ¿u¿um¿uë¿uú¿u§¿uÆ¿u¿¿u∆¿u÷¿u‹¿v&¿vR¿vf¿vÂ¿w2¿w6¿w7¿wÄ¿w«¿wÁ¿wÌ¿x6¿xá¿x—¿y¿y(¿y.¿yj¿yp¿y®¿yÆ¿y˜¿y˝¿z¿z6¿z<¿z©¿zª¿zœ¿{Å¿{ı¿{˘¿{˙¿|G¿|g¿|m¿|°¿|Ì¿}<¿}ã¿}€¿~¿~	¿~Y¿~Å¿~á¿~ÿ¿¿g¿Ø¿¸¿ÄM¿Äf¿Äl¿Äº¿Äﬁ¿Ä‰¿Å2¿ÅG¿ÅM¿Å]¿Åc¿Å≤¿Å˝¿ÇF¿Çr¿ÇÜ¿É	¿É^¿Éb¿Éc¿É∞¿É–¿É÷¿Ñ¿Ñc¿Ñ≤¿Ñ‰¿Ñ˘¿Ñˇ¿Ö0¿Ö6¿Ön¿Öt¿ÖΩ¿Ö—¿Üã¿á¿á¿á¿á`¿áÆ¿á…¿áœ¿à¿àW¿à¶¿àı¿âE¿âm¿âs¿â√¿âÎ¿âÒ¿äB¿äÅ¿ä—¿ã¿ãf¿ã∑¿ã–¿ã÷¿å$¿å9¿å?¿åO¿åU¿å¢¿åµ¿ç¿ç4¿çH¿çÿ¿é=¿éA¿éB¿éè¿é›¿é¯¿é˛¿èF¿èî¿è‚¿ê*¿ê?¿êE¿êÄ¿êÜ¿êæ¿êƒ¿ë¿ë!¿ëË¿í{¿í¿íÄ¿í–¿íﬁ¿í‰¿ì¿ìf¿ì∂¿ìœ¿ì’¿î¿î¿îe¿îw¿îå¿îí¿î¢¿î®¿îÛ¿ï¿ï8¿ïz¿ïÆ¿ï≤¿ï≥¿ï˜¿ñC¿ñë¿ñ†¿ñ¶¿ñ€¿ó+¿ó|¿óì¿óô¿óÈ¿ò*¿ò0¿ò~¿ò»¿ô¿ô¿ôh¿ôØ¿ôµ¿ö ¿öK¿öZ¿öo¿öu¿öÖ¿öã¿öŸ¿õ¿õg¿õò¿õ¨¿ú¿ú;¿ú?¿ú@¿úé¿ú£¿ú©¿úŸ¿ù)¿ùw¿ùº¿û	¿û¿û[¿û©¿ûÚ¿üA¿üè¿ü⁄¿ü‡¿†0¿†¿†ø¿†‚¿†Ë¿°9¿°?¿°å¿°≥¿°»¿°Œ¿°‰¿°Í¿¢!¿¢'¿¢5¿¢K¿¢k¿¢s¿¢}¿¢è¿¢ï¿¢«¿¢Õ¿¢€¿¢Ú¿£/¿£7¿£A¿£U¿£°¿£À¿£œ¿£–¿§¿§S¿§Y¿§é¿§’¿•¿•
¿•S¿•~¿•Ñ¿•√¿•…¿¶¿¶$¿¶*¿¶@¿¶F¿¶i¿¶o¿¶}¿¶î¿¶ÿ¿¶‡¿¶Í¿¶¸¿ßE¿ßt¿ßx¿ßy¿ß»¿ß˘¿ßˇ¿®7¿®á¿®‘¿®Ï¿®Ú¿©7¿©Ü¿©Œ¿™¿™k¿™Ñ¿™ä¿™‘¿™Ú¿™¯¿´6¿´K¿´Q¿´¢¿´÷¿¨¿¨S¿¨W¿¨X¿¨ß¿¨˜¿≠ ¿≠&¿≠c¿≠≥¿Æ ¿Æ¿Æ¿Æc¿Æ≤¿Æ˙¿ØF¿Øó¿Ø∞¿Ø∂¿∞¿∞O¿∞U¿∞ì¿∞®¿∞˚¿±;¿±?¿±@¿±ê¿±ü¿±•¿±»¿±Œ¿±‹¿±¯¿≤¿≤¿≤:¿≤D¿≤J¿≤õ¿≤‰¿≥¿≥¿≥f¿≥Æ¿≥¥¿≥Ù¿¥¿¥,¿¥L¿¥S¿¥õ¿¥∫¿µ¿µ6¿µ<¿µU¿µ´¿µ∏¿∂
¿∂¿∂¿∂!¿∂@¿∂\¿∂∫¿∑¿∑S¿∑^¿∑f¿∑y¿∑É¿∑ö¿∑û¿∑ü¿∑Ô¿∏¿∏¿∏/¿∏5¿∏C¿∏Ü¿∏™¿∏¡¿∏”¿∏Â¿π	¿π¿π¿π!¿πr¿πª¿πÊ¿πÏ¿∫9¿∫?¿∫¿∫°¿∫Ω¿∫›¿∫‰¿ª,¿ªK¿ªî¿ª«¿ªÕ¿ªÊ¿º<¿ºI¿ºõ¿º°¿º∑¿ºª¿ºº¿ºÛ¿º˘¿ΩH¿Ωj¿Ωp¿Ω¡¿æ¿æ]¿æs¿æy¿æ…¿ø¿ød¿øü¿¿¿¿M¿¿ò¿¿Â¿¡¿¡;¿¡M¿¡è¿¡§¿¡∞¿¬ ¿¬c¿¬å¿¬´¿¬€¿¬¸¿√¿√?¿√X¿√h¿√À¿√’¿√›¿√˛¿ƒ¿ƒ6¿ƒW¿ƒp¿ƒ©¿ƒ¿≈b¿≈∑¿≈∆¿≈”¿≈Í¿≈¯¿∆.¿∆J¿∆T¿∆l¿∆t¿∆µ¿« ¿«b¿«»¿«Œ¿»¿»¿»`¿»Ø¿»¯¿…¿…Z¿…t¿…”¿…Ÿ¿ ¿ ¿ ¿ ¿ H¿ J¿ K¿ Ç¿ Ö¿ ∑¿ ‹¿À¿À'¿ÀN¿À{¿À¢¿À»¿À¯¿Ã(¿ÃX¿Ãà¿Ã∏¿ÃË¿Õ¿ÕL¿Õ{¿Õ©¿Õ÷¿Œ¿Œ-¿ŒO¿Œy¿Œ£¿Œ—¿Œ˘¿œ ¿œE¿œp¿œò¿œ¿¿œË¿–¿–9¿–^¿–à¿–≠¿–÷¿–˚¿— ¿—T¿—Å¿—Ñ¿—–¿—˜¿“G¿“^¿“∑¿“º¿“⁄¿“ﬂ¿”[¿”∞¿”€¿‘4¿‘õ¿‘ﬂ¿’A¿’d¿’i¿’ã¿’ê¿’˘¿÷¿÷L¿÷Ñ¿÷Ï¿◊A¿◊ß¿◊Ô¿ÿ#¿ÿn¿ÿª¿ÿ⁄¿Ÿ¿Ÿ¿Ÿ¿ŸH¿ŸI¿Ÿs¿ŸÆ¿Ÿ˚¿⁄¿⁄¿⁄¿⁄P¿⁄_¿⁄q¿⁄û¿⁄Ω¿⁄‡¿€¿€(¿€^¿€ê¿€√¿€˝¿‹1¿‹=¿‹c¿‹£¿‹€¿›¿›F¿›w¿›ö¿›∞¿›π¿›ø¿›√¿›ƒ¿›–¿›Ó¿ﬁ'¿ﬁ?¿ﬁ@¿ﬁê¿ﬁª¿ﬁÎ¿ﬁÏ¿ﬂ*¿ﬂ+¿ﬂK¿ﬂ¥¿‡E¿‡¶¿‡Û¿‡Ù¿·D¿·ä¿·®¿·¯¿‚@¿‚U¿‚ó¿‚„¿‚È¿„¿„S¿„Y¿„j¿„n¿„o¿„ö¿„¥¿„»¿„Œ¿„‰¿„¯¿„˛¿‰C¿‰i¿‰m¿‰n¿‰“¿Â¿Â'¿ÂM¿Âo¿ÂÑ¿Â±¿Â‹¿Ê¿Ê@¿ÊG¿ÊK¿ÊL¿ÊÓ¿Áz¿Áû¿Á™¿Á ¿Ë¿Ë?¿ËF¿Ë~¿Ë†¿Ëµ¿Ë‚¿ÈA¿Èy¿Èß¿È”¿Í
¿Í9¿Íd¿Í¨¿Íÿ¿Î!¿Î+¿Î5¿ÎB¿Îy¿Îõ¿Î∆¿ÎÃ¿Î‚¿Ï¿Ï	¿Ï
¿Ïn¿Ïõ¿ÏŸ¿Ï‚¿ÏÔ¿Ì$¿ÌQ¿Ìå¿Ìï¿Ìõ¿Ìü¿Ì†¿Ì÷¿Ì˘¿ÓH¿Ói¿Óú¿ÓÂ¿Ô¿Ô5¿Ôó¿ÔÛ¿O¿É¿Õ¿Ò3¿ÒV¿Òæ¿Ò–¿Ò‰¿ÒÓ¿Ò¯¿Ò˛¿Ú¿Ú¿Ú)¿Ú/¿Ú|¿Úø¿Ú≈¿Û¿Û2¿Ûñ¿Û∫¿ÛÂ¿Ù¿Ù<¿ÙÜ¿ÙÃ¿ÙÂ¿ı
¿ı¿ı#¿ıK¿ıv¿ıä¿ıê¿ı™¿ıª¿ıø¿ı¿¿ı⁄¿ˆ ¿ˆ¿ˆi¿ˆî¿ˆò¿ˆô¿˜¿˜%¿˜P¿˜}¿˜°¿˜Œ¿¯¿¯¿¯¿¯¿¯¿¯o¿¯É¿¯¨¿¯¬¿¯„¿¯È¿¯Ì¿¯Ó¿˘¿˘¿˘#¿˘:¿˘V¿˘~¿˘ú¿˘†¿˘°¿˘…¿˘ ¿˘˘¿˙&¿˙2¿˙c¿˙≥¿˚¿˚¿˚F¿˚T¿˚Z¿˚q¿˚ù¿˚»¿˚Ã¿˚Õ¿¸ ¿¸<¿¸H¿¸y¿¸…¿˝¿˝¿˝\¿˝j¿˝p¿˝á¿˝≥¿˝œ¿˝¸¿˛ ¿˛¿˛¿˛U¿˛Å¿˛Ö¿˛Ü¿˛√¿˛…¿ˇ¿ˇ2¿ˇK¿ˇå¿ˇÃ¿ ¿ 0¿ ~¿ Ñ¿ ±¿ ∆¿  ¿ À¿ ¸¿¿R¿ñ¿π¿ø¿	¿¿^¿å¿ç¿›¿*¿l¿ª¿¿¿z¿{¿ù¿¥¿¬¿»¿…¿Ú¿¿C¿|¿≥¿’¿Î¿¿(¿;¿c¿¿Õ¿¿h¿∑¿‹¿È¿1¿j¿í¿›¿	+¿	K¿	ë¿	ß¿	µ¿	Ù¿
¿
¿
)¿
2¿
U¿
[¿
_¿
`¿
{¿
∫¿
ˆ¿
˙¿
˚¿¿S¿è¿ì¿î¿Ï¿Ì¿¿U¿í¿ñ¿ó¿√¿¿A¿E¿F¿Ö¿∂¿¿@¿N¿i¿Ø¿∂¿∫¿ª¿¿u¿≈¿∆¿¿E¿I¿J¿V¿™¿´¿∑¿ˇ¿,¿-¿w¿x¿Ñ¿õ¿ß¿Î¿=¿ê¿ó¿¿¿ƒ¿≈¿—¿Á¿Û¿7¿à¿€¿‚¿
¿¿¿¿A¿M¿û¿Ô¿C¿J¿é¿£¿œ¿›¿Í¿¿4¿A¿ì¿ú¿œ¿È¿Í¿¿
¿4¿8¿9¿E¿p¿|¿Õ¿¿r¿Ä¿á¿¶¿–¿‘¿’¿·¿˙¿¿W¿¶¿˙¿¿¿¿G¿K¿L¿ï¿º¿È¿'¿+¿-¿.¿U¿n¿Ö¿û¿£¿»¿¿Ò¿¿¿¿_¿|¿î¿Æ¿≥¿¥¿¿¿Ï¿ ¿$¿&¿'¿f¿Ç¿ö¿¥¿π¿∫¿∆¿Ú¿%¿)¿+¿,¿n¿ç¿•¿ø¿ƒ¿≈¿—¿˝¿3¿7¿9¿:¿}¿ù¿µ¿œ¿‘¿’¿·¿ ¿ X¿ \¿ ^¿ _¿ °¿ ¢¿ Á¿ Î¿!8¿!E¿!à¿!±¿!¿¿!Ï¿"$¿"*¿".¿"/¿"c¿"d¿"¢¿"Õ¿"—¿"“¿"Ù¿#¿#$¿#(¿#)¿#Y¿#v¿#ï¿#Æ¿#¥¿#∏¿#π¿# ¿#˘¿$¿$'¿$@¿$F¿$J¿$K¿${¿$û¿$µ¿$π¿$∫¿$ﬁ¿%¿%+¿%=¿%A¿%B¿%_¿%í¿%©¿%ª¿%ø¿%¿¿%Á¿&¿&¿&¿&¿&9¿&U¿&Y¿&Z¿&f¿&|¿&ö¿&û¿&†¿&°¿&…¿&Õ¿'¿'v¿'¢¿' ¿'À¿(¿((¿(.¿(|¿(π¿(ø¿)¿)R¿)û¿)‚¿*A¿*†¿*°¿*·¿+#¿+$¿+¿+Ä¿+¨¿+≠¿+·¿+‚¿,(¿,)¿,J¿,u¿,ô¿,µ¿-¿-?¿-å¿-ô¿-∑¿-Ω¿.¿.<¿.C¿.Ö¿.Ω¿.Î¿/¿/3¿/a¿/ê¿/æ¿0¿0&¿0:¿0F¿0p¿0™¿0∞¿0¥¿0µ¿0¡¿0÷¿0Ì¿0˝¿1¿1=¿1a¿1Ç¿1©¿1Ì¿2¿2%¿2N¿2w¿2Ü¿2ì¿2¬¿2Ê¿3¿3.¿3u¿3ú¿3≠¿3÷¿3ˇ¿4¿4¿4%¿4-¿4@¿4J¿4ã¿4µ¿4Î¿4Ò¿5¿5¿5k¿5†¿5›¿6#¿6K¿6á¿6à¿6µ¿6Á¿6Ì¿6Ó¿7=¿7n¿7r¿7s¿7•¿7¿¿8¿8h¿8l¿8m¿8¨¿9¿9¿9]¿9^¿9j¿9≥¿9˘¿:6¿:7¿:z¿:ü¿:Ω¿:Í¿:Î¿;"¿;o¿;§¿;—¿;Ù¿<¿<8¿<A¿<O¿<u¿<≈¿=¿=¿=8¿=à¿=é¿=è¿=›¿>¿>8¿>Z¿>ù¿>•¿>«¿>‡¿?
¿?¿?[¿?í¿?ß¿?«¿?¯¿@:¿@k¿@ô¿@º¿A¿A¿A-¿A<¿AI¿AT¿A\¿Ab¿Ac¿Ao¿Aä¿A÷¿B$¿Bq¿Bé¿Bï¿B∞¿BË¿C¿C=¿CA¿CB¿CN¿CÖ¿C´¿C≈¿CÚ¿Cˇ¿D#¿D)¿D-¿D9¿Ds¿Dt¿DÄ¿D°¿Dƒ¿E¿E5¿E_¿Ee¿Ei¿Ej¿E¢¿EÀ¿F¿F.¿FA¿FI¿Fk¿F≠¿F≥¿F∑¿F∏¿G¿GR¿Go¿Gu¿Gâ¿G†¿G≠¿G ¿G–¿G‘¿G’¿H¿HP¿Hw¿HÃ¿H‡¿I/¿I¿I∞¿IÂ¿J4¿JÖ¿J÷¿K¿K~¿K±¿L¿LS¿Lw¿L≥¿Lﬂ¿M¿M7¿Mç¿M‡¿N¿N.¿NÉ¿N’¿O¿O%¿OV¿Oá¿Oû¿O≥¿O≈¿O’¿P¿P'¿P>¿PL¿Pç¿Pï¿PÂ¿P˛¿Q7¿QÄ¿Qà¿Qº¿Qﬂ¿QÂ¿QÈ¿QÍ¿R¿R;¿Rö¿Rß¿R’¿R€¿Rﬂ¿R‡¿RÏ¿S¿S@¿SP¿Sl¿Sï¿Sπ¿S›¿S˛¿T%¿Ti¿Tê¿T°¿T ¿TÛ¿U¿U¿U>¿Ub¿UÉ¿U™¿UÒ¿V¿V)¿VR¿V{¿Vä¿Vó¿V°¿V©¿Vº¿V∆¿V˘¿W?¿Ww¿W¿W¬¿WÓ¿X&¿X.¿XQ¿XW¿Xï¿Xß¿XÀ¿XÔ¿Y¿Y7¿Y{¿Y¢¿Y≥¿Y‹¿Z¿Z¿Z!¿Z+¿Z@¿ZL¿Zb¿Zh¿Zi¿Zô¿Z√¿Z…¿ZÕ¿ZŒ¿Z˜¿[¿[6¿[m¿[ï¿[∞¿[·¿\¿\¿\¿\)¿\3¿\7¿\8¿\D¿\Z¿\û¿\‘¿\⁄¿\Ú¿\ˆ¿\˜¿]¿]¿]-¿]q¿]õ¿]—¿]◊¿]€¿]‹¿]Ë¿]˚¿^¿^&¿^A¿^T¿^^¿^n¿^¥¿^‡¿^Ë¿^˚¿_¿_&¿_?¿_d¿_ñ¿_∫¿_Á¿`9¿`m¿`Ö¿`ö¿`”¿`Ì¿`Ò¿`Ú¿a5¿an¿ao¿a¶¿a¡¿aÒ¿b¿b¿b#¿b$¿bG¿bH¿bk¿bÉ¿bì¿b∂¿b›¿b˛¿c¿c¿c¿c`¿c™¿cÙ¿d;¿dB¿dq¿dë¿d‰¿e¿ea¿eÜ¿e”¿f$¿f%¿fw¿fÃ¿fˇ¿gJ¿gñ¿g„¿h¿hH¿hp¿h¥¿hƒ¿hˇ¿iM¿in¿i™¿i¿j?¿j]¿jß¿j¬¿k¿k<¿kv¿kw¿kü¿kª¿kŸ¿l¿l5¿l6¿lp¿l‡¿l·¿m¿m4¿md¿m£¿m‰¿n-¿nL¿nm¿n≈¿nÍ¿o¿o¿o<¿o[¿om¿ou¿oü¿oÆ¿o∂¿o¯¿p&¿p5¿p=¿pi¿pò¿p∏¿p”¿p¿pˆ¿p˜¿q=¿qè¿qü¿qÙ¿r0¿rq¿rí¿r¬¿rﬁ¿r¿r¯¿s7¿se¿st¿s|¿s}¿s‘¿s˙¿t+¿t[¿to¿t≤¿tΩ¿tÁ¿tÔ¿t¿u
¿u"¿u(¿uc¿uô¿uö¿uÏ¿v¿vs¿v¿¿vÿ¿w¿wK¿wê¿w≥¿w¡¿w¸¿x¿xT¿xc¿xÑ¿xñ¿xû¿xü¿xÍ¿y¿y¿y"¿y#¿yH¿yn¿yÄ¿yà¿y¿¿yÔ¿yı¿yˆ¿z¿zI¿zå¿zß¿z≤¿z“¿{
¿{L¿{V¿{¶¿{Ò¿|¿|C¿|l¿|á¿|∏¿|√¿|È¿|˘¿}(¿}z¿}À¿}÷¿}¯¿~¿~R¿~•¿~‹¿¿:¿B¿H¿I¿õ¿Ä(¿ÄX¿Ä•¿Ä¬¿Ä√¿ÄÚ¿Å%¿Åp¿Åà¿ÅØ¿Å“¿Åﬂ¿Ç¿ÇÅ¿Çæ¿Ç»¿Ç⁄¿Ç‚¿Ç„¿ÉM¿Éù¿ÉÈ¿Ñ¿Ñ<¿ÑÇ¿Ñø¿Ö¿Ö]¿Öë¿ÖŒ¿Öÿ¿Ö‡¿Ü¿Ü ¿Ü!¿ÜF¿Üy¿Ü®¿Ü”¿Ü¸¿áQ¿ák¿á{¿á™¿á⁄¿à¿à^¿àm¿àö¿à¢¿à¨¿à≠¿à—¿â&¿âe¿â¶¿â«¿â˙¿äE¿ä]¿äÇ¿ä•¿ä∞¿ä÷¿äË¿ä¿ã¿ã^¿ãç¿ãº¿ã‹¿ã˘¿å¿å¿å¿åi¿å≈¿åı¿ç¿çM¿çv¿ç∂¿çÙ¿é¿é¿é-¿éf¿éù¿é÷¿é‹¿è¿è(¿èc¿è†¿è®¿èÆ¿èÎ¿ê#¿ê?¿êx¿ê|¿ê}¿êû¿êü¿ê›¿ë¿ë+¿ëz¿ë…¿í¿ía¿íÜ¿íù¿í«¿ì¿ìà¿ìÓ¿îN¿îä¿î£¿î»¿îÍ¿ï¿ï)¿ïF¿ï¶¿ï≥¿ïÛ¿ñ¿ñ,¿ñ\¿ñv¿ñï¿ñΩ¿ñÃ¿ó¿ó"¿ó.¿óQ¿ó{¿ó°¿ó≈¿ó·¿ó˛¿ò%¿òÖ¿ò´¿ò∏¿òˆ¿ô;¿ô|¿ô∏¿ôŒ¿ô⁄¿ö2¿ön¿öü¿ö´¿ö–¿öÛ¿õ/¿õ`¿õl¿õë¿õ„¿ú ¿úA¿úc¿úÉ¿ú§¿ù
¿ùJ¿ù`¿ùl¿ùë¿ù∏¿ùÎ¿ù˘¿û ¿û,¿ûS¿û…¿û÷¿ü¿üb¿üÉ¿üô¿ü•¿üÊ¿†¿†-¿†i¿†z¿†°¿†√¿°¿°¿°<¿°a¿°à¿°ª¿°…¿°È¿°ı¿¢¿¢1¿¢ë¿¢û¿¢‡¿¢Ù¿£¿£L¿£á¿£ö¿£¶¿£ﬁ¿£Ú¿§¿§j¿§†¿§∏¿§‡¿•¿•-¿•F¿•N¿•`¿•t¿•å¿•≈¿•À¿¶¿¶&¿¶'¿¶s¿¶â¿¶®¿¶©¿¶Õ¿¶˙¿ß[¿ßõ¿ß‚¿®.¿®[¿®c¿®i¿®j¿®∏¿®≈¿®˘¿©*¿©0¿©L¿©¿©Ö¿©ü¿©Ã¿©“¿©¿©Ù¿©ı¿™¿™C¿™j¿™ë¿™ü¿™•¿™÷¿´,¿´c¿´i¿´j¿´õ¿´Ú¿¨)¿¨/¿¨3¿¨4¿¨W¿¨|¿¨ï¿¨∆¿¨Ú¿≠¿≠¿≠ ¿≠ê¿≠ë¿≠ ¿Æ¿Æ9¿ÆC¿Æw¿Æ¿ÆÙ¿Ø5¿Øm¿Ø©¿Ø±¿Ø√¿Ø…¿ØÕ¿ØŒ¿∞¿∞I¿∞y¿∞}¿∞~¿∞¡¿∞˘¿±¿±¿±#¿±'¿±(¿±s¿±∏¿± ¿±–¿≤¿≤¿≤¿≤u¿≤ê¿≤«¿≤⁄¿≤‡¿≤¿≥¿≥8¿≥ñ¿≥Û¿¥A¿¥h¿¥â¿¥û¿¥©¿¥±¿¥ƒ¿¥Œ¿µ ¿µ¿µ.¿µ5¿µ}¿µ§¿µ∂¿µ„¿∂¿∂â¿∂ß¿∑¿∑5¿∑D¿∑ª¿∑…¿∑”¿∑Ë¿∑Ù¿∏2¿∏D¿∏a¿∏õ¿π¿π[¿π“¿π‡¿πÍ¿πˇ¿∫¿∫¿∫9¿∫K¿∫O¿∫P¿∫}¿∫É¿∫∂¿∫º¿∫˚¿ª¿ª4¿ª:¿ªP¿ªV¿ªy¿ª¿ªç¿ª™¿ª‘¿ª‹¿ªÊ¿ª¯¿ª˛¿º¿º¿º^¿ºÅ¿ºï¿º¿¿ºÿ¿ºÔ¿ºˆ¿Ω=¿ΩA¿ΩB¿Ωo¿Ωu¿Ω≤¿Ω∏¿ΩÎ¿ΩÒ¿æ8¿æ>¿æá¿æç¿æ£¿æ©¿æÃ¿æ“¿æ‡¿æ¸¿ø0¿ø8¿øB¿øT¿øh¿øô¿ø±¿ø»¿øœ¿¿T¿¿ë¿¿®¿¿ƒ¿¿ˇ¿¡=¿¡T¿¡u¿¡y¿¡z¿¡∆¿¬¿¬2¿¬8¿¬v¿¬|¿¬ª¿¬¡¿¬Ù¿¬˙¿√¿√¿√9¿√?¿√M¿√g¿√ü¿√ß¿√±¿√√¿√…¿√Ÿ¿√ﬂ¿ƒ0¿ƒa¿ƒu¿ƒø¿ƒ◊¿ƒÁ¿ƒ˛¿≈¿≈k¿≈o¿≈p¿≈º¿∆¿∆(¿∆.¿∆v¿∆|¿∆∫¿∆¿¿«¿«¿«V¿«\¿«r¿«x¿«õ¿«°¿«Ø¿«»¿»
¿»¿»¿».¿»B¿»í¿»™¿»∫¿»—¿»ÿ¿…]¿…ö¿…±¿…Õ¿ ¿ M¿ w¿ ò¿ ú¿ ù¿ È¿ ˆ¿ ¸¿À5¿À;¿Àz¿ÀÄ¿À≥¿Àπ¿Àœ¿À’¿À¯¿À˛¿Ã¿Ã"¿ÃR¿ÃZ¿Ãd¿Ãv¿Ã|¿Ãå¿Ãí¿Ã›¿Õ	¿Õ¿Õb¿Õz¿Õä¿Õ°¿Õ®¿ÕΩ¿Õ˜¿Õ˚¿Õ¸¿ŒH¿ŒU¿Œ[¿Œû¿Œ§¿Œ›¿Œ„¿œ*¿œ0¿œy¿œ¿œï¿œõ¿œæ¿œƒ¿œ“¿œÊ¿– ¿–(¿–2¿–D¿–X¿–£¿–ª¿–À¿–‚¿–È¿–˛¿—?¿—C¿—D¿—ï¿—”¿—Ÿ¿“¿“ ¿“_¿“e¿“ò¿“û¿“¥¿“∫¿“›¿“„¿“Ò¿”¿”f¿”n¿”x¿”ä¿”ê¿”†¿”¶¿”ˆ¿‘%¿‘9¿‘r¿‘ã¿‘´¿‘¬¿‘…¿’,¿’0¿’1¿’Ç¿’¿¿’∆¿÷¿÷¿÷X¿÷^¿÷•¿÷´¿÷Ù¿÷˙¿◊¿◊¿◊9¿◊?¿◊M¿◊j¿◊∆¿◊Œ¿◊ÿ¿◊Í¿◊˛¿ÿ=¿ÿV¿ÿv¿ÿç¿ÿî¿Ÿ¿ŸV¿Ÿp¿Ÿå¿Ÿ«¿⁄¿⁄5¿⁄V¿⁄Z¿⁄[¿⁄ä¿⁄ê¿⁄æ¿⁄ƒ¿€¿€	¿€¿€%¿€H¿€N¿€\¿€u¿€ì¿€∂¿€ı¿‹¿‹¿‹¿‹¿‹1¿‹7¿‹G¿‹M¿‹ô¿‹µ¿‹…¿› ¿›Z¿›s¿›w¿›x¿›´¿›ƒ¿›‘¿ﬁI¿ﬁö¿ﬁ≠¿ﬁ∑¿ﬁ ¿ﬁŒ¿ﬁœ¿ﬁ˙¿ﬂ ¿ﬂ8¿ﬂ>¿ﬂl¿ﬂr¿ﬂ™¿ﬂ∞¿ﬂ˘¿ﬂˇ¿‡¿‡8¿‡>¿‡†¿‡≤¿‡∆¿·0¿·ö¿‚¿‚`¿‚Ç¿‚û¿‚Ÿ¿„¿„.¿„O¿„S¿„T¿„{¿„ñ¿„¶¿„¡¿„‘¿„ﬁ¿‰
¿‰B¿‰[¿‰w¿‰á¿‰£¿‰∂¿‰¿¿‰„¿‰Á¿‰Ë¿Â¿Â2¿ÂÇ¿ÂÀ¿Ê¿Ê¿Ê=¿ÊX¿ÊÖ¿ÊÜ¿Ê®¿ÊŸ¿Á¿ÁO¿Á`¿ÁÇ¿Áå¿Á¿¿Á¡¿Á¯¿ËB¿Ëc¿Ën¿Ëò¿ËŒ¿ËÓ¿È&¿È3¿È=¿Ès¿È{¿È|¿Èø¿Èﬂ¿ÈÈ¿ÈÔ¿Í¿Í¿Í¿Ía¿Í©¿ÍΩ¿Í√¿Í¸¿Î¿ÎA¿ÎG¿Î]¿Îc¿ÎÜ¿Îå¿Îö¿Îµ¿Î‰¿Ï¿ÏJ¿ÏW¿Ïb¿Ïj¿Ït¿ÏÜ¿Ïå¿Ïú¿Ï¢¿ÏÚ¿Ì!¿Ì5¿Ìû¿Ì«¿Ó>¿ÓZ¿Ó^¿Ó_¿Ó´¿ÓÛ¿Ô¿Ô¿ÔP¿ÔV¿Ôè¿Ôï¿ÔÕ¿Ô”¿¿"¿8¿[¿a¿œ¿·¿ı¿Òå¿Òˆ¿Ú{¿Úº¿Úﬁ¿Ú˙¿Û5¿Ûz¿Û§¿Û≈¿Û…¿Û ¿Ù¿Ù7¿ÙG¿Ùb¿Ùu¿Ù¿Ù´¿ÙÃ¿ı4¿ıs¿ıŒ¿ıÁ¿ˆ¿ˆ¿ˆ/¿ˆB¿ˆL¿ˆo¿ˆs¿ˆt¿ˆƒ¿ˆı¿ˆ˚¿˜7¿˜=¿˜|¿˜Ç¿˜ò¿˜û¿˜¡¿˜«¿˜’¿˜ˆ¿¯"¿¯|¿¯†¿¯´¿¯≥¿¯Ω¿¯œ¿¯’¿¯€¿¯Î¿¯Ò¿˘;¿˘g¿˘{¿˘›¿˙¿˙3¿˙©¿˙≈¿˙…¿˙ ¿˚¿˚G¿˚M¿˚ì¿˚ô¿˚’¿˚€¿¸¿¸¿¸b¿¸h¿¸~¿¸°¿¸ß¿˝¿˝,¿˝@¿˝’¿˛B¿˛«¿ˇ¿ˇ-¿ˇI¿ˇÑ¿ˇ¬¿ˇÚ¿ ¿ ¿ ¿ g¿ Ç¿ í¿ ≠¿ ¿¿  ¿ ˆ¿&¿^¿É¿ú¿⁄¿¿#¿+¿=¿C¿_¿`¿p¿å¿ü¿©¿Ã¿–¿—¿¿¿B¿H¿X¿^¿≠¿¯¿A¿m¿Å¿Á¿¿+¿ò¿ú¿ù¿◊¿›¿¿¿O¿U¿ç¿ì¿‹¿¿ç¿∂¿#¿®¿È¿	¿	*¿	e¿	¶¿	 ¿	Î¿	Ô¿	¿
3¿
N¿
q¿
¿
Ö¿
ï¿
∞¿
√¿
Õ¿¿4¿á¿⁄¿H¿x¿ü¿Õ¿È¿˘¿¿(¿2¿H¿m¿s¿w¿x¿¬¿˚¿¿<¿B¿R¿X¿•¿∏¿¿7¿K¿æ¿Á¿¿à¿å¿ç¿◊¿¿¿[¿a¿ú¿¢¿⁄¿‡¿)¿=¿Á¿¿Ä¿¿F¿k¿á¿¬¿¿/¿P¿T¿U¿†¿ª¿Û¿O¿´¿"¿C¿\¿É¿í¿ö¿¨¿≤¿¿)¿W¿s¿¨¿∞¿±¿‹¿‚¿¿¿(¿.¿y¿ë¿£¿¿'¿[¿o¿u¿Ø¿Ô¿¿¿(¿Z¿n¿t¿≥¿∑¿∏¿¿Q¿Ö¿ã¿Ω¿√¿”¿Ÿ¿"¿j¿π¿Í¿˛¿@¿ü¿º¿–¿÷¿¿¿T¿â¿›¿Ò¿ 3¿ F¿ L¿ ä¿ ù¿ £¿!¿!*¿!}¿!ê¿!ñ¿!ó¿!≈¿!Ï¿"¿"&¿";¿"P¿"y¿"¶¿"ª¿"¡¿"≈¿"∆¿"ˆ¿"¸¿#)¿#/¿#E¿#K¿#Ç¿#à¿#ñ¿#≤¿#À¿#”¿#›¿#Ô¿$¿$¿$=¿$C¿$Q¿$n¿$¢¿$™¿$¥¿$∆¿$⁄¿%	¿%$¿%4¿%O¿%b¿%l¿%æ¿%Ÿ¿&;¿&ä¿&¡¿&Û¿&˚¿'¿'$¿'^¿'d¿'ô¿'Œ¿'‘¿(5¿(E¿(a¿(t¿(~¿(°¿(•¿(¶¿(Â¿(Î¿)¿)#¿)9¿)?¿)b¿)h¿)v¿)è¿) ¿)“¿)‹¿)Ó¿*¿*s¿*ì¿*ª¿*À¿*”¿*‡¿+.¿+4¿+8¿+9¿+Ü¿+å¿+¡¿+Ï¿,¿,¿,2¿,E¿,O¿,u¿,¢¿,˙¿-¿-A¿-Q¿-m¿-Ä¿-ä¿-†¿-∏¿.¿.¿.¿.¿.¿.h¿.¨¿.≤¿.Ï¿/"¿/=¿/M¿/h¿/{¿/Ö¿/±¿0¿0i¿0‡¿1¿1¿1A¿1P¿1X¿1j¿1p¿1¿¿1ﬁ¿2¿2!¿2=¿2P¿2Z¿2^¿2_¿2∞¿2∂¿3¿3V¿3£¿3Ì¿4¿4¿4j¿4ª¿4”¿5 ¿5L¿5ö¿5≤¿5Ã¿6#¿6p¿6¿¿6¿7;¿7f¿7π¿8D¿8Q¿8é¿8î¿8™¿8Ú¿9¿9.¿9c¿9i¿9j¿9≠¿9±¿9≤¿9∆¿9¿:^¿:b¿:c¿:¶¿:Œ¿:˘¿;#¿;j¿;n¿;o¿;∂¿;€¿;·¿;Ò¿;˜¿<A¿<x¿<¡¿<¬¿=¿=h¿=i¿=§¿=™¿=Ó¿=Ù¿>0¿>O¿>q¿>ô¿>«¿>‰¿?¿?¿?X¿?}¿?ª¿?‰¿?˛¿@,¿@>¿@F¿@å¿@»¿@–¿@÷¿@⁄¿@€¿@˚¿A¿AO¿Aì¿A±¿A⁄¿A¸¿B$¿Bj¿Bë¿Bô¿Bü¿B£¿B§¿B–¿B—¿C¿C-¿C1¿C2¿Ch¿Cì¿Có¿Cò¿Cπ¿D%¿Dp¿D∑¿E ¿E/¿EÆ¿E¬¿EÊ¿F5¿F\¿Ff¿Fl¿Fπ¿FΩ¿Fæ¿G¿GS¿GÖ¿G†¿G∏¿G¿¿G∆¿G◊¿G€¿G‹¿H(¿Ho¿Hà¿H∫¿H’¿HÔ¿H˜¿H˝¿I¿I¿I¿I!¿IH¿Ic¿IÑ¿IÖ¿I”¿J!¿J4¿JY¿Jî¿J‘¿K#¿Kk¿K£¿KΩ¿K…¿L¿LT¿L¶¿L∆¿L”¿M¿M¿M#¿M<¿Mi¿Mö¿Mœ¿MÔ¿NE¿Nm¿N©¿N≈¿NÎ¿O¿O1¿OZ¿Oå¿OÆ¿O–¿Oˆ¿P-¿PÆ¿P√¿P÷¿PÁ¿Pˆ¿Q¿Q¿Q¿Q¿Q"¿Q$¿Q%¿QB¿QK¿QX¿QZ¿Q[¿QÑ¿Q™¿Q‘¿QÓ¿R¿R3¿RX¿RÜ¿R¡¿R·¿S¿S/¿S0¿Sv¿SÆ¿SÕ¿T%¿T9¿Ta¿T∂¿T‚¿U;¿UA¿UE¿UF¿Uj¿Uà¿U•¿U¶¿U«¿U»¿UÈ¿V¿V=¿VA¿VB¿VS¿V~¿Vü¿V£¿V§¿V±¿VÈ¿VÍ¿WW¿Wê¿W®¿Wµ¿WÕ¿WÔ¿X¿X¿X¿X ¿X!¿Xf¿Xá¿Xü¿Xº¿X‚¿Y¿Y¿Y`¿Y~¿Yß¿Y“¿YÚ¿Z%¿Z,¿Z0¿Z1¿Z=¿Zh¿Z•¿Zø¿ZÀ¿ZË¿Z¸¿[¿[¿[	¿[¿[5¿[J¿[e¿[f¿[r¿[´¿\	¿\¿\¿\!¿\"¿\k¿\ê¿\∞¿\Õ¿\Û¿]"¿]#¿]y¿]ñ¿^F¿^s¿^û¿^¿¿^Û¿^˙¿^˛¿^ˇ¿_¿_|¿_†¿_°¿_≠¿_ÿ¿_Ú¿`L¿`h¿`•¿`ø¿`‹¿`˘¿a¿a¿a¿a¿a&¿aF¿a|¿aó¿aò¿a§¿a›¿b+¿b>¿bB¿bD¿bE¿bñ¿b⁄¿c¿c¿c¿c ¿cB¿c\¿cù¿cÕ¿d¿d#¿dZ¿d∑¿d€¿d‹¿e%¿ep¿eq¿e†¿eÃ¿eˆ¿f¿f¿f¿f>¿f[¿f–¿g$¿gA¿g{¿g≤¿g‘¿h¿h3¿hò¿h©¿hﬂ¿i¿i¿i1¿i9¿i:¿iZ¿i¬¿i˜¿j¿jD¿jé¿jƒ¿k¿kO¿kü¿k˘¿l.¿l6¿l<¿l≠¿l˝¿l˛¿mF¿mG¿mÆ¿mØ¿mÕ¿mÛ¿n¿n¿n¿n¿n.¿nG¿n^¿nã¿n´¿n±¿n›¿o¿o6¿op¿o©¿o’¿p ¿p¿p
¿p¿p`¿pñ¿p™¿p∞¿pÿ¿q¿q¿q¿q%¿q6¿q:¿q;¿qL¿qf¿qè¿qù¿q£¿q≈¿q‹¿q‡¿q·¿qÛ¿qÙ¿r)¿r*¿rÉ¿rù¿r…¿rˇ¿sX¿sm¿ss¿s…¿sÎ¿t ¿t¿t6¿tî¿tö¿t≠¿t±¿t≤¿t’¿t÷¿t‚¿u¿u(¿u,¿u-¿u9¿uv¿uø¿v-¿vC¿vt¿v|¿vÄ¿vÅ¿vç¿v«¿vÍ¿vÓ¿vÔ¿v˚¿w¿w8¿w<¿w=¿wI¿wh¿wj¿wk¿w∞¿w¥¿x¿x-¿x~¿x¿x«¿y¿y!¿y%¿yu¿yº¿y¿¿yÔ¿zQ¿zR¿zé¿zí¿z‡¿z¸¿{ ¿{0¿{n¿{o¿{Ω¿{Ù¿{¯¿|G¿|ñ¿|⁄¿|ﬁ¿}.¿}y¿}≈¿~¿~c¿~z¿~~¿~À¿~¿~Ù¿E¿ì¿⁄¿˛¿Ä¿ÄM¿Äú¿Ä–¿Ä‘¿ÄË¿Å8¿Åt¿Åx¿Å–¿Å‡¿Ç%¿ÇN¿Çh¿Çú¿Çπ¿ÇŒ¿Ç‘¿Ç’¿É#¿És¿É≤¿É„¿É‰¿Ñ'¿Ñ-¿Ñ}¿Ñ ¿Ö¿Ö6¿Ö<¿Öâ¿Ö◊¿Öı¿Ü"¿Ü#¿Ük¿Ü|¿ÜÇ¿Ü¡¿ÜÒ¿ÜÚ¿á?¿áP¿áV¿áü¿á⁄¿à(¿àN¿àf¿àÄ¿àΩ¿à‡¿à˜¿à˚¿à¸¿â?¿âE¿âï¿âº¿âΩ¿âÙ¿â˙¿ä.¿äO¿äc¿äd¿äp¿äò¿äô¿ä•¿äÀ¿ä‰¿ã¿ã¿ã¿ã¿ã¿ã9¿ãT¿ãi¿ãï¿ãô¿ãö¿ã¶¿ãŒ¿ãË¿å¿å¿å	¿å#¿å$¿å0¿åC¿åX¿åò¿åÆ¿å≤¿å≥¿åø¿å˛¿åˇ¿ç!¿çf¿ç|¿çÄ¿çÅ¿ç™¿çÿ¿çÙ¿é0¿éZ¿éq¿éÅ¿éâ¿éÀ¿é‡¿é˘¿è¿è&¿è*¿è+¿èã¿èç¿èé¿èŒ¿è“¿ê#¿ê5¿ê9¿êz¿ê√¿ê˜¿ëA¿ëb¿ëÇ¿ëà¿ëâ¿ë“¿ëÛ¿í¿í¿í¿í1¿ír¿ív¿íx     _kAndroidRefocusingDelayDurationRoutePopDispositionRouteRouteSettingsPageNavigatorObserverHeroControllerScopeRouteTransitionRecordTransitionDelegateDefaultTransitionDelegate"kDefaultRouteTraversalEdgeBehavior	Navigator_RouteLifecycle_NotAnnounced_RouteEntry_NavigatorObservation_NavigatorPushObservation_NavigatorPopObservation_NavigatorRemoveObservation_NavigatorReplaceObservation_HistoryNavigatorState_RouteRestorationType_RestorationInformation_NamedRestorationInformation _AnonymousRestorationInformation_HistoryPropertyRestorableRouteFutureNavigationNotification ây