Åèvaluealphaopacityredgreenblue	withAlphawithOpacitywithRed	withGreenwithBlue_linearizeColorComponentcomputeLuminancelerp
alphaBlendgetAlphaFromOpacity==hashCodetoStringclearsrcdstsrcOverdstOversrcIndstInsrcOutdstOutsrcATopdstATopxorplusmodulatescreenoverlaydarkenlighten
colorDodge	colorBurn	hardLight	softLight
difference	exclusionmultiplyhue
saturationcolor
luminositynonelowmediumhighbuttroundsquaremiterbevelfillstrokehardEdge	antiAliasantiAliasWithSaveLayer_data_kIsAntiAliasIndex_kColorIndex_kBlendModeIndex_kStyleIndex_kStrokeWidthIndex_kStrokeCapIndex_kStrokeJoinIndex_kStrokeMiterLimitIndex_kFilterQualityIndex_kMaskFilterIndex_kMaskFilterBlurStyleIndex_kMaskFilterSigmaIndex_kInvertColorIndex_kIsAntiAliasOffset_kColorOffset_kBlendModeOffset_kStyleOffset_kStrokeWidthOffset_kStrokeCapOffset_kStrokeJoinOffset_kStrokeMiterLimitOffset_kFilterQualityOffset_kMaskFilterOffset_kMaskFilterBlurStyleOffset_kMaskFilterSigmaOffset_kInvertColorOffset_kDataByteCount_objects_ensureObjectsInitialized_kShaderIndex_kColorFilterIndex_kImageFilterIndex_kObjectCountisAntiAlias_kColorDefault_kBlendModeDefault	blendModestylestrokeWidth	strokeCap
strokeJoin_kStrokeMiterLimitDefaultstrokeMiterLimit
maskFilterfilterQualityshadercolorFilterimageFilterinvertColorssRGBextendedSRGBrawRgbarawStraightRgbarawUnmodifiedrawExtendedRgba128pngrgba8888bgra8888rgbaFloat32_imageonCreate	onDispose_debugStackwidthheight	_disposeddisposedebugDisposed
toByteData
colorSpacedebugGetOpenHandleStackTracesclone	isCloneOf_toByteData_dispose_handlesdurationimage
frameCountrepetitionCountgetNextFrame_cachedFrameCount_frameCount_cachedRepetitionCount_repetitionCount_getNextFramenonZeroevenOdd	intersectunionreverseDifferencefillTypemoveTorelativeMoveTolineTorelativeLineToquadraticBezierTorelativeQuadraticBezierTocubicTorelativeCubicToconicTorelativeConicToarcTo
arcToPointrelativeArcToPointaddRectaddOvaladdArc
addPolygonaddRRectaddPathextendWithPathcloseresetcontainsshift	transform	getBoundscombinecomputeMetrics_constructor_clone_getFillType_setFillType_arcTo_arcToPoint_relativeArcToPoint_addRect_addOval_addArc_addPolygon	_addRRect_addPath_addPathWithMatrix_extendWithPath_extendWithPathAndMatrix	_contains_shift
_transform
_getBounds_oppositionvectorangle	_iteratoriterator_pathMetric_pathMeasurecurrentmoveNextlengthisClosedcontourIndex_measuregetTangentForOffsetextractPath_length
_getPosTan_extractPath	_isClosed_nextContour_nativeNextContourcurrentContourIndexnormalsolidouterinner_style_sigma	_TypeNone	_TypeBlur_color
_blendMode_matrix_type
_kTypeMode_kTypeMatrix_kTypeLinearToSrgbGamma_kTypeSrgbToLinearGamma_toNativeImageFilter_toNativeColorFilter_shortDescriptioncreator	_initMode_initMatrix_initLinearToSrgbGamma_initSrgbToLinearGammadatanativeFiltersigmaXsigmaYtileMode_modeStringradiusXradiusYinnerFilterouterFilter	_initBlur_initDilate
_initErode_initColorFilter_initComposed_debugDisposedclamprepeatedmirrordecal_initLinear_initRadial_initConical
_initSweep_validateColorStops_initWithImage
_debugName	fromAsset_shaderRegistry_reinitializeShader_uniformFloatCount_samplerCount_initFromAssetfragmentShader_kEmptyFloat32List_floatssetFloatsetImageSampler_setImageSampler_validateSamplers	trianglestriangleStriptriangleFan_initpointslinespolygonsave	saveLayerrestorerestoreToCountgetSaveCount	translatescalerotateskewgetTransformclipRect	clipRRectclipPathgetLocalClipBoundsgetDestinationClipBounds	drawColordrawLine	drawPaintdrawRect	drawRRect
drawDRRectdrawOval
drawCircledrawArcdrawPath	drawImagedrawImageRectdrawImageNinedrawPicturedrawParagraph
drawPointsdrawRawPointsdrawVertices	drawAtlasdrawRawAtlas
drawShadow	_recorder_sorted_saveLayerWithoutBounds
_saveLayer_scale_getTransform	_clipRect
_clipRRect	_clipPath_getLocalClipBounds_getDestinationClipBounds
_drawColor	_drawLine
_drawPaint	_drawRect
_drawRRect_drawDRRect	_drawOval_drawCircle_drawArc	_drawPath
_drawImage_drawImageRect_drawImageNine_drawPicture_drawPoints_drawVertices
_drawAtlas_drawShadowtoImagetoImageSyncapproximateBytesUsed_toImage_toImageSyncisRecordingendRecording_endRecording_canvas_kBytesPerShadow	_kXOffset	_kYOffset_kBlurOffsetoffset
blurRadiusconvertRadiusToSigma	blurSigmatoPaintlerpList_encodeShadowsfromUint8ListfromFilePath_initFromFileencodedbytesPerPixelinstantiateCodec_initEncoded_initRaw_width	_getWidth_height
_getHeight_bytesPerPixel_getBytesPerPixel_instantiateCodecmessagestackW_rectIsValid_rrectIsValid_offsetIsValid_matrix4IsValid_radiusIsValid_scaleAlphaColor	BlendModeFilterQuality	StrokeCap
StrokeJoinPaintingStyleClipPaint
ColorSpaceImageByteFormatPixelFormatImageEventCallbackImage_Image
_wrapImageImageDecoderCallback	FrameInfoCodec_NativeCodecinstantiateImageCodecinstantiateImageCodecFromBufferinstantiateImageCodecWithSize_getDefaultImageSizeTargetImageSizeCallbackTargetImageSizedecodeImageFromList_decodeImageFromListAsyncdecodeImageFromPixelsPathFillTypePathOperationEngineLayer_NativeEngineLayerPath_NativePathTangentPathMetricsPathMetricIterator
PathMetric_PathMeasure	BlurStyle
MaskFilterColorFilter_ColorFilterImageFilter_MatrixImageFilter_GaussianBlurImageFilter_DilateImageFilter_ErodeImageFilter_ComposeImageFilter_ImageFilterShaderTileMode_encodeColorList_encodePointList_encodeTwoPointsGradientImageShaderFragmentProgramFragmentShader
VertexModeVertices	PointModeClipOpCanvas_NativeCanvasPictureEventCallbackPicture_NativePicturePictureRecorder_NativePictureRecorderShadowImmutableBufferImageDescriptor_NativeImageDescriptor	_Callback_CallbackWithError_Callbacker_CallbackerWithError	_futurize_futurizeWithErrorPictureRasterizationExceptionÅêdartuiboolRecthasNaNRRectOffsetdxisNaNdyFloat64ListlengtheverydoublevalueisFiniteRadiusxy	withAlphaalpharoundclampintfromRGBOfromARGBmathpowHSVColormaterialColorstransparentCurveselasticInOutAnimationController	_clampInt_lerpInttoIntredgreenblueclampDoubleoverrideObject	identicalruntimeTypehashCodeStringtoRadixStringpadLeftsrcdstclear	saveLayerrestore	blendModesrcOverdstInsrcOutsrcIndstOutdstATopdstOversrcATopplusmultiplyscreenoverlaymodulate	hardLight
colorDodge	colorBurncolor	exclusion
difference
luminosityhue	softLight
saturationblurBackdropFilternonelowmediumhighfilterQualitymatrix	drawImagedrawImageRectdrawImageNine	drawAtlas	strokeCapAsquarestrokeWidthbuttdrawPath
drawPoints
strokeJoinstrokeMiterLimitstyle
drawCirclehardEdge	antiAliasantiAliasWithSaveLayerisAntiAliaspragmaByteDataListfilledgetInt32_kFakeHostEndiansetInt32indexvaluesfillstroke
getFloat32
setFloat32miterbevel	_TypeNone	_TypeBlur_style_sigmadebugDisposed_validateSamplers	Exception
_debugNamecreator_toNativeColorFilter_toNativeImageFilterfromEnvironmenttoStringStringBufferwritetoStringAsFixed
toByteDataextendedSRGBrawExtendedRgba128
colorSpacevoidwidgets
StackTracecurrent_handlesaddcallMemoryAllocations	_disposedcontainsremoveisEmptydispose
StateErrorformatrawRgbaFuturesRGBUnsupportedErrormaphandle_debugStacktoList__imageNativeFieldWrapperClass1NativeInt32PointerVoidsymbolisLeaf	Uint8Listerrorencodedcallbackbuffer
asByteDataHandleSetwidthheightgetNextFramecloneDurationimage	CompletersyncdecodeErrorcompleteErrorcompletedurationmillisecondsdurationMillisecondsfuturefromUint8ListtargetWidthtargetHeightallowUpscalinggetTargetSizeintrinsicWidthintrinsicHeightinstantiateCodecthenrawrowBytespixelFormatcodec	frameInfofillTypecombinereverseDifferencexor	intersectSceneBuilderclipPath_clonenonZerozero
fromCircle_opextractPathIterablefromDoublelefttoprightbottomBoolradiusrotationlargeArc	clockwiseFloat32List_getValue32matrix4fromLTRBforceClosedgetTangentForOffsetcossinatan2computeMetricslineTomoveToIterableBaseIterator
RangeError_nextContourcurrentContourIndexisClosedcloseaddRectstartWithMoveTonextContour
maskFilter
drawShadowhashcolorFilterfromColorFiltermodelinearToSrgbGammasrgbToLinearGamma_type_listEquals_matrix_color
_blendModehashAll
_kTypeMode_kTypeMatrixfromList_kTypeLinearToSrgbGamma_kTypeSrgbToLinearGammaImageFilteredpushBackdropFilterpushImageFiltersigmaXsigmaYtileModeradiusXradiusYMatrix4	diagonal3ArgumentErrordatainnerFilterinnerouterFilteroutermirrorrepeateddecaldilateerodecomposed_shortDescriptionshaderpaintingGradientLinearGradientRadialGradientBoxDecorationlinearradial	Int32ListiNoSuchMethodError
colorStopsfocalfocalRadiuspi
startAngleendAngle
isNotEmptyUripath
encodeFulltarget	microtask
_fromAssetWeakReferenceMap_initFromAsset	debugNamefragmentShader_uniformFloatCount_samplerCountdrawVertices	trianglestriangleStriptriangleFannew
Uint16ListcolorstextureCoordinatesindicesdrawRawPointsclipRectSceneendRecordingCustomPainterpaintsydoAntiAliasarcTo	ParagraphlayoutParagraphStyleParagraphBuilder	TextAlignParagraphConstraintspointslinespolygonRSTransformscosssintxtyisRecording_canvascullRectlargestminmax_objects_dataclipOpUint32stack_NativeParagraph_needsLayout_paint
addPicturedrawPicture	onDisposeUint64	_recorderonCreate	TextStylenormaloffset
blurRadiusscalelerp_lerpDoubleshadowIndex_kColorDefaultconvertRadiusToSigma_init_length_initFromFile_initEncodedTttoImageSyncwritelnNativeFieldWrapperClass1CodecEngineLayerPathIterableBaseIteratorImageFilterShaderCanvasPicturePictureRecorderImageDescriptor	Exception’BŒíàn7WË¡Ô2·™      	dart:core¿m$ ¿Pûõn <ÄÜÄ§ÄµÄ∂ÄŒÄÔÅ-ÅFÅzÅ≠ÅÆÅ˚ÇEÇïÇÊÉ6ÉÑÉ’ÑÑÑdÑäÑãÑ™ÑÍÑ˘Ñ˚Ñ¸ÖÖ`ÖoÖqÖrÖóÖÒÜ ÜÜÜ/ÜpÜŒÜ›ÜﬂÜ‡áá]álánáoáõá€á›áﬁàààfà∂ââ-â1âaâeâqâôâ÷ääFäNäRä£äÚãBãnãrã~ãÀåååå-å1åÑå åÿçççEçKçsçôç¿çÂçÎé;éâé∑éΩèèPèuè¨è≠èÌèÛê@êPêuêúê¬ê»ëëë\ëiëûë¿ë‚íí2í3íàíéí≥í⁄ì ìMì}ìÉì∆ìÃîîRîàîæîÙï6ï7ïeïkïìïôï¡ïÁññ3ñFñGñÄñÜñ’ñ˜ó&ó'óZó`ó±ó”ó˘ó˙ò1ò^ò_òòò∆ò«òˇô,ô-ôvô¨ô≤ôÍöö5ö9ö:öÉöÀö—õ	õ/õ]õéõíõìõ„úúúNúgúôúùúûúÁùù#ù[ùvù¶ù™ù´ù¸û)û/ûgûÅû≤û∂û∑ûıü2üRürüxüπüΩüæ†	††c†Å†á†≈†„°#°^°õ°◊¢¢¢¢<¢B¢ä¢Õ¢”££j£©£Ô£ı§B§å§◊•#•q•¡¶¶_¶å¶í¶·ßß6ßKßbßwßÜßÆß∂ß√ß⁄ß¸®®*®n®Æ®Ú©4©?©G©M©Q©R©ï©€©·™-™t™ø´´Y´ô´¡¨ ¨¨¨F¨l¨£¨¿¨Œ≠≠^≠¶≠Ø≠Ã≠˛Æ,ÆLÆiÆ{Æ∆ØØbØkØqØuØvØ√Ø…ØÙ∞'∞b∞f∞g∞s∞ñ∞∏∞À∞—∞˝±±±1±R±V±W±c±â±ä±ñ±‰±Ê±Á≤≤≤k≤µ≤‘≤ÿ≥)≥v≥≈¥¥c¥Æ¥Ú¥ˆµFµëµ‚∂.∂|∂…∑∑[∑™∑∏∏∏]∏™∏ÙπFπìπ‰∫%∫)∫P∫T∫¢∫„ª4ªÅª“º!ºpºãºèºùº°ºÏº˝ΩΩ]ΩpΩ∂Ω∑Ω˚ææ=æCæ†æ©æ™æÈæÔø>øMøSøéøîøÔøˆø˜¿ @6¿ @<¿ @á¿ @ò¿ @û¿ @‡¿ @Ê¿ AA¿ AH¿ AI¿ AÜ¿ Aå¿ A⁄¿ B+¿ BH¿ BN¿ Bú¿ B…¿ Bœ¿ C.¿ C9¿ C:¿ Cx¿ C~¿ Cß¿ C≠¿ C˚¿ D¿ D`¿ Df¿ Dµ¿ D‡¿ DÎ¿ DÏ¿ E4¿ EÅ¿ EŒ¿ E‹¿ E‚¿ F!¿ F'¿ Ft¿ Fº¿ FÃ¿ F“¿ G¿ G$¿ GÅ¿ Gä¿ Gã¿ Gÿ¿ H&¿ Hp¿ Hv¿ H∞¿ H∂¿ I¿ IU¿ I[¿ Iß¿ I≠¿ J
¿ J¿ J¿ Jc¿ J∂¿ K¿ K¿ KK¿ KQ¿ Kû¿ KÔ¿ Kı¿ LB¿ LH¿ L¶¿ L∞¿ L±¿ M¿ MS¿ Mù¿ M£¿ Mﬁ¿ M‰¿ N6¿ NÇ¿ Nà¿ N’¿ N€¿ O9¿ OC¿ OD¿ Oì¿ O≥¿ Oπ¿ P¿ P¿ P]¿ P©¿ P›¿ P„¿ Q.¿ Q?¿ QE¿ Q§¿ QØ¿ Q∞¿ Qˇ¿ R¿ R ¿ Rn¿ Rt¿ Rƒ¿ S¿ S?¿ SE¿ Sê¿ S°¿ Sß¿ T¿ T¿ T¿ Tb¿ Tñ¿ Tú¿ TÈ¿ TÔ¿ UJ¿ UQ¿ UR¿ Uë¿ Uó¿ UÊ¿ V2¿ VX¿ V^¿ V¨¿ V≤¿ W¿ WQ¿ W¢¿ WÒ¿ X;¿ XA¿ Xù¿ X•¿ X¶¿ X¿ Xˆ¿ YE¿ Yî¿ Yö¿ YÎ¿ Z¿ Z¿ Zk¿ Zq¿ Z—¿ Z◊¿ ZÁ¿ ZÌ¿ [/¿ [w¿ [ì¿ [›¿ [Ù¿ \ ¿ \¿ \I¿ \J¿ \ï¿ \ª¿ \¡¿ ]¿ ]Z¿ ]â¿ ]è¿ ]‡¿ ^,¿ ^R¿ ^X¿ ^®¿ ^˜¿ _H¿ _N¿ _ù¿ _ø¿ _≈¿ `#¿ `)¿ `9¿ `?¿ `è¿ `†¿ `Ë¿ a¿ aN¿ ae¿ aà¿ aâ¿ a“¿ b¿ b¿ bX¿ b¶¿ b˜¿ c¿ c¿ ch¿ cµ¿ c‰¿ cÍ¿ dI¿ dO¿ d_¿ de¿ dû¿ dÂ¿ e5¿ e`¿ ek¿ el¿ e∫¿ eŸ¿ eﬂ¿ f(¿ f9¿ f?¿ fù¿ fß¿ f®¿ f˜¿ g¿ g¿ ge¿ gv¿ g|¿ g€¿ gÊ¿ gÁ¿ h"¿ h(¿ ht¿ h¡¿ h¿ hˆ¿ iX¿ if¿ ig¿ i∫¿ i¿¿ j¿ jY¿ jà¿ jé¿ jÔ¿ j¸¿ j˝¿ kF¿ kp¿ kv¿ k∆¿ l¿ l]¿ lä¿ lê¿ l‹¿ m)¿ mX¿ m^¿ mø¿ m≈¿ m’¿ m€¿ n¿ n[¿ n™¿ n÷¿ n„¿ n‰¿ o2¿ oJ¿ oP¿ oí¿ oò¿ o˘¿ oˇ¿ p¿ p¿ pN¿ p[¿ p\¿ p•¿ p´¿ p˙¿ q¿ q¿ q`¿ qq¿ qw¿ qØ¿ qµ¿ r¿ r%¿ r&¿ rr¿ rÄ¿ rÜ¿ r’¿ rÏ¿ rÚ¿ s;¿ sL¿ sR¿ sä¿ sê¿ sÒ¿ s˛¿ sˇ¿ tM¿ tf¿ tl¿ tª¿ u
¿ u¿ u\¿ u©¿ uÒ¿ u˜¿ vF¿ vj¿ vp¿ v–¿ v˘¿ v˙¿ wK¿ wd¿ wj¿ w≥¿ wπ¿ x¿ xR¿ xx¿ x~¿ xŸ¿ xﬂ¿ xÔ¿ xı¿ yE¿ yn¿ yΩ¿ yÓ¿ yı¿ yˆ¿ zG¿ z`¿ zf¿ zØ¿ zˇ¿ {,¿ {2¿ {ç¿ {ì¿ {£¿ {©¿ {Î¿ |:¿ |P¿ |^¿ |_¿ |∞¿ |…¿ |œ¿ }¿ }¿ }g¿ }∑¿ }Ï¿ }Ú¿ ~O¿ ~U¿ ~e¿ ~k¿ ~°¿ ~Ô¿ =¿ F¿ G¿ ò¿ ±¿ ∑¿ Ä ¿ ÄP¿ Ä}¿ ÄÉ¿ ÄÂ¿ ÄÎ¿ Ä˚¿ Å¿ ÅP¿ Åf¿ Å±¿ Å ¿ Åÿ¿ Å⁄¿ Å€¿ Ç3¿ Çn¿ Çr¿ Çœ¿ É¿ É¿ Éo¿ É√¿ Ñ¿ Ñm¿ Ñq¿ Ñø¿ Ñ˙¿ Ñ˛¿ ÖW¿ Ö[¿ Ö®¿ Ö¿ Ü¿ Ü¿ Ü!¿ Ü%¿ Üp¿ Ü©¿ Üø¿ Ü‹¿ Ü˜¿ á¿ á5¿ áP¿ áe¿ áª¿ á„¿ á‰¿ à(¿ à.¿ àt¿ àπ¿ à¡¿ à¬¿ à˙¿ â ¿ âB¿ âq¿ âx¿ ây¿ â√¿ âÎ¿ âÒ¿ ä<¿ äâ¿ ä“¿ ã¿ ã#¿ ãS¿ ãc¿ ãi¿ ã∏¿ ãÏ¿ å¿ å¿ å¿ å\¿ åi¿ åo¿ åΩ¿ å˙¿ ç ¿ ç'¿ ç-¿ ç¿ çœ¿ é¿ é ¿ éM¿ éU¿ éW¿ éX¿ é|¿ éÄ¿ éé¿ éí¿ é«¿ è
¿ èF¿ èW¿ èó¿ èù¿ èÓ¿ êR¿ êX¿ ê¶¿ êÿ¿ ê‡¿ ê·¿ ë¿ ë"¿ ël¿ ëº¿ í,¿ í2¿ íÇ¿ íß¿ í∞¿ í±¿ íÙ¿ ì9¿ ì^¿ ìd¿ ì≥¿ î$¿ î*¿ îz¿ îü¿ î•¿ îÛ¿ ï¿ ï¿ ï¿ ï ¿ ïJ¿ ïN¿ ïõ¿ ïﬂ¿ ï„¿ ïÒ¿ ïı¿ ñA¿ ñM¿ ñà¿ ñ≈¿ ñ◊¿ ó¿ ó¿ ó|¿ óÇ¿ ó ¿ ò¿ ò&¿ ò,¿ ò<¿ òB¿ òê¿ ò°¿ òÚ¿ ô+¿ ô4¿ ô5¿ ôj¿ ôp¿ ô◊¿ ô›¿ ö%¿ öu¿ öÅ¿ öá¿ öó¿ öù¿ öÎ¿ ö¸¿ õ¿ õ¿ õT¿ õÜ¿ õå¿ õÛ¿ õ˘¿ úA¿ úë¿ úù¿ ú£¿ ú≥¿ úπ¿ ù¿ ù¿ ù!¿ ù#¿ ù$¿ ù^¿ ùb¿ ùy¿ ùµ¿ ù ¿ û¿ û#¿ û$¿ ûj¿ û∞¿ û◊¿ ûﬂ¿ û‡¿ ü$¿ üj¿ ü±¿ üÔ¿ ü˘¿ ü˚¿ ü¸¿ †+¿ †7¿ †M¿ †S¿ †û¿ †Ô¿ †ı¿ °A¿ °W¿ °§¿ °˝¿ ¢R¿ ¢k¿ ¢s¿ ¢t¿ ¢†¿ ¢¶¿ ¢ˇ¿ £0¿ £6¿ £v¿ £|¿ £‘¿ §/¿ §5¿ §E¿ §K¿ §ß¿ §À¿ §◊¿ §ÿ¿ §˜¿ §˝¿ •I¿ •O¿ •¢¿ •®¿ •Ô¿ •ı¿ ¶J¿ ¶i¿ ¶¿¿ ¶∆¿ ¶÷¿ ¶‹¿ ß$¿ ßo¿ ß†¿ ß˝¿ ®
¿ ®¿ ®W¿ ®]¿ ®∞¿ ©¿ ©+¿ ©1¿ ©É¿ ©–¿ ™"¿ ™t¿ ™z¿ ™ ¿ ´¿ ´h¿ ´∏¿ ´˛¿ ¨¿ ¨¿ ¨¿ ¨h¿ ¨Ç¿ ¨Ñ¿ ¨Ö¿ ¨«¿ ¨À¿ ≠¿ ≠0¿ ≠>¿ ≠Ü¿ ≠ú¿ ≠ß¿ ≠®¿ ≠◊¿ ≠‹¿ Æ'¿ Ær¿ Æ¡¿ Ø¿ Ø^¿ Øc¿ Ø≥¿ ∞¿ ∞¿ ∞¿ ∞b¿ ∞c¿ ∞Ñ¿ ∞†¿ ∞‘¿ ∞’¿ ± ¿ ±%¿ ±N¿ ±s¿ ±û¿ ±«¿ ±Ò¿ ≤!¿ ≤N¿ ≤x¿ ≤¨¿ ≤‹¿ ≥¿ ≥	¿ ≥K¿ ≥Å¿ ≥ø¿ ≥ı¿ ¥7¿ ¥u¿ ¥µ¿ µ¿ µG¿ µá¿ µŸ¿ ∂#¿ ∂e¿ ∂f¿ ∂ß¿ ∂È¿ ∂Í¿ ∑.¿ ∑O¿ ∑k¿ ∑Ü¿ ∑á¿ ∑µ¿ ∑¯¿ ∑¸¿ ∑˝¿ ∏#¿ ∏N¿ ∏y¿ ∏Õ¿ ∏Œ¿ π¿ π"¿ π(¿ π@¿ πY¿ π†¿ π§¿ πƒ¿ ∫¿ ∫>¿ ∫e¿ ∫©¿ ∫≠¿ ∫Æ¿ ∫Ê¿ ª¿ ª¿ ªP¿ ªV¿ ªv¿ ª|¿ ªå¿ ªí¿ ªÿ¿ º	¿ ºQ¿ ºW¿ ºü¿ º¥¿ º»¿ Ω¿ Ω=¿ ΩA¿ Ω\¿ Ωí¿ Ω–¿ Ω‘¿ Ω’¿ æ¿ æN¿ æO¿ æõ¿ æ°¿ æ„¿ ø4¿ øÖ¿ ø¶¿ ø¨¿ ø˘¿ ¿¿ ¿ ¿ ¿G¿ ¿M¿ ¿]¿ ¿c¿ ¿≤¿ ¿Ê¿ ¡0¿ ¡F¿ ¡b¿ ¡Ø¿ ¡Í¿ ¡Ó¿ ¬¿ ¬K¿ ¬ç¿ ¬ë¿ ¬í¿ ¬÷¿ ¬‹¿ √¿ √ ¿ √r¿ √v¿ √ô¿ √æ¿ √¸¿ ƒ ¿ ƒ¿ ƒ;¿ ƒä¿ ƒ«¿ ƒÕ¿ ≈
¿ ≈%¿ ≈i¿ ≈m¿ ≈è¿ ≈±¿ ≈˜¿ ≈˚¿ ≈¸¿ ∆=¿ ∆m¿ ∆s¿ ∆•¿ ∆¡¿ «¿ «¿ «:¿ «_¿ «°¿ «•¿ «¶¿ «Á¿ «Ì¿ »>¿ »â¿ »è¿ »…¿ »œ¿ »Ì¿ »Û¿ …\¿ …b¿ ……¿ …œ¿  6¿  <¿  à¿  Ÿ¿  Â¿  Î¿  ˚¿ À¿ ÀP¿ À|¿ À≈¿ Ã¿ Ã"¿ Ãv¿ Ãz¿ Ãü¿ Ãƒ¿ Õ¿ Õ¿ Õ¿ ÕD¿ Õ{¿ Õ|¿ Õ«¿ Œ¿ Œ`¿ Œ≠¿ Œ˚¿ œ¿ œF¿ œL¿ œö¿ œæ¿ œƒ¿ –-¿ –3¿ –ú¿ –¢¿ —¿ —¿ —]¿ —Æ¿ —∫¿ —¿¿ —–¿ —÷¿ “ ¿ “;¿ “Ñ¿ “§¿ “Ì¿ “Ò¿ ”¿ ”V¿ ”°¿ ”•¿ ”¶¿ ”ˆ¿ ‘4¿ ‘:¿ ‘^¿ ‘}¿ ‘¡¿ ‘‚¿ ‘˜¿ ’¿ ’8¿ ’ì¿ ’⁄¿ ’Â¿ ’Î¿ ’¸¿ ÷ ¿ ÷&¿ ÷?¿ ÷ë¿ ÷Ÿ¿ ◊!¿ ◊.¿ ◊{¿ ◊≠¿ ◊ˇ¿ ÿX¿ ÿ©¿ ÿØ¿ ÿ≥¿ ÿ¥¿ Ÿ¿ ŸZ¿ Ÿ¶¿ Ÿ¨¿ Ÿ‘¿ ⁄!¿ ⁄E¿ ⁄ü¿ ⁄£¿ ⁄Œ¿ ⁄Û¿ €9¿ €=¿ €>¿ €x¿ €~¿ €¥¿ €∫¿ € ¿ €–¿ ‹¿ ‹D¿ ‹v¿ ‹æ¿ ‹’¿ ›¿ ›	¿ ›'¿ ›7¿ ›E¿ ›t¿ ›´¿ ›¥¿ ›«¿ ›—¿ ›·¿ ﬁ¿ ﬁ0¿ ﬁê¿ ﬁö¿ ﬁ¢¿ ﬁµ¿ ﬁø¿ ﬁ˜¿ ﬁ˚¿ ﬁ¸¿ ﬂC¿ ﬂU¿ ﬂ[¿ ﬂÄ¿ ﬂÜ¿ ﬂ◊¿ ﬂ¯¿ ‡O¿ ‡q¿ ‡u¿ ‡ù¿ ‡„¿ ·¿ ·!¿ ·O¿ ·W¿ ·d¿ ·™¿ ·∞¿ ·¥¿ ·µ¿ ·¿ ·ˆ¿ ‚=¿ ‚W¿ ‚]¿ ‚k¿ ‚ò¿ ‚≤¿ ‚ƒ¿ ‚ﬁ¿ „.¿ „9¿ „A¿ „K¿ „Q¿ „a¿ „g¿ „¢¿ „√¿ ‰¿ ‰<¿ ‰@¿ ‰h¿ ‰Å¿ ‰ü¿ ‰Õ¿ ‰’¿ ‰‚¿ Â#¿ Ây¿ Â§¿ ÂË¿ Â¿ Âˆ¿ Â˙¿ Â˚¿ Ê:¿ Ê@¿ Êå¿ Ê÷¿ Á¿ Á!¿ Áh¿ Ál¿ Áç¿ Á◊¿ Á€¿ Á‹¿ ÁË¿ Á˛¿ Ë7¿ ËV¿ Ë\¿ Ëå¿ Ëß¿ Ë√¿ ËÏ¿ È
¿ È*¿ Èf¿ Èu¿ Èò¿ È†¿ È…¿ ÈÓ¿ Èˆ¿ Í"¿ Í_¿ Í¥¿ Íæ¿ ÍÕ¿ ÍÛ¿ Í˚¿ Î¿ Î¿ Î1¿ Îb¿ Îz¿ ÎÄ¿ Î∞¿ Îÿ¿ Î¿ Îˆ¿ Ï'¿ ÏS¿ Ïk¿ Ïq¿ Ïê¿ ÏÕ¿ ÏÂ¿ ÏÎ¿ Ì	¿ ÌD¿ Ì\¿ Ìb¿ Ìë¿ Ì“¿ ÌÍ¿ Ì¿ Ó
¿ Ó=¿ ÓU¿ Ó[¿ Óz¿ Ó∑¿ Óœ¿ Ó’¿ ÓÌ¿ Ô&¿ Ô,¿ ÔC¿ Ôa¿ Ôe¿ Ôg¿ Ôh¿ Ô≥¿ Ô∑¿ Ô˙¿ D¿ è¿ ¡¿ ≈¿ ¯¿ ¸¿ Ò4¿ ÒF¿ Òb¿ Òh¿ Òµ¿ Ò·¿ ÒÁ¿ Ú¿ Ú"¿ Úo¿ ÚΩ¿ Úı¿ Û.¿ Û>¿ Û@¿ ÛA¿ ÛÉ¿ Ûõ¿ ÛÈ¿ Ù6¿ Ù~¿ Ù»¿ Ùﬂ¿ Ùˆ¿ Ù¸¿ ıZ¿ ıe¿ ıf¿ ıÜ¿ ıå¿ ıÂ¿ ı¯¿ ı˘¿ ˆ¿ ˆ¿ ˆl¿ ˆß¿ ˆ∏¿ ˆπ¿ ˆﬂ¿ ˆÂ¿ ˜1¿ ˜^¿ ˜d¿ ˜y¿ ˜¿ ˜ç¿ ˜´¿ ˜À¿ ˜—¿ ¯¿ ¯7¿ ¯ç¿ ¯œ¿ ¯¿ ˘
¿ ˘$¿ ˘>¿ ˘X¿ ˘c¿ ˘k¿ ˘u¿ ˘ã¿ ˘å¿ ˘û¿ ˘§¿ ˘Ù¿ ˙B¿ ˙é¿ ˙€¿ ˚$¿ ˚*¿ ˚{¿ ˚á¿ ˚ç¿ ˚ù¿ ˚£¿ ¸¿ ¸G¿ ¸N¿ ¸P¿ ¸Q¿ ¸ê¿ ¸£¿ ¸Ò¿ ˝A¿ ˝t¿ ˝Ä¿ ˝Å¿ ˝–¿ ˛¿ ˛R¿ ˛^¿ ˛_¿ ˛Ø¿ ˛ˆ¿ ˇE¿ ˇÄ¿ ˇè¿ ˇë¿ ˇí¿ ˇæ¿ ˇ˜¿ ˇ¯¿ .¿ 2¿ r¿ v¿ ƒ¿ ‹¿ ‡¿/¿~¿≈¿¿[¿i¿m¿π¿¿O¿S¿a¿e¿”¿"¿H¿ó¿•¿◊¿Á¿¿"¿,¿K¿e¿i¿j¿ã¿ß¿æ¿ø¿˝¿¿N¿ê¿±¿ÿ¿Ÿ¿¿¿i¿¨¿Õ¿ı¿ˆ¿¿¿V¿i¿j¿¨¿¿¿¡¿€¿	(¿	Y¿	_¿	∞¿	À¿	—¿
¿
g¿
∂¿
÷¿
È¿¿1¿]¿s¿™¿ø¿‚¿˙¿ ¿¿¿I¿O¿ù¿≥¿Œ¿‚¿Ú¿¿!¿+¿ô¿ù¿û¿”¿Ÿ¿%¿5¿;¿Ä¿œ¿¿¿i¿Ç¿“¿!¿k¿∑¿¿9¿g¿k¿l¿®¿Æ¿˙¿I¿u¿{¿ ¿¿K¿ó¿ƒ¿‚¿¿4¿B¿b¿p¿ò¿ß¿ı¿˚¿ˇ¿ ¿Q¿s¿y¿π¿Ô¿¿¿q¿Ñ¿é¿°¿•¿¶¿◊¿›¿,¿{¿Ã¿¿d¿≤¿˛¿¿"¿p¿ô¿ü¿Á¿8¿N¿T¿ä¿ê¿û¿π¿Ÿ¿Ò¿˜¿/¿n¿ç¿◊¿Ë¿˙¿¿j¿∏¿ﬁ¿¿¿@¿H¿N¿p¿§¿Ô¿¿]¿°¿ﬁ¿˜¿˝¿9¿i¿o¿å¿¶¿¨¿Œ¿Ï¿ ¿ ¿ ¿ 1¿ T¿ Z¿ u¿ {¿ û¿ ◊¿ ·¿ Á¿!¿!¿!$¿!*¿!o¿!Ω¿!·¿!Û¿"¿" ¿"K¿"ú¿"Í¿#,¿#5¿#;¿#Z¿#Ö¿#â¿#ä¿#÷¿$¿$"¿$o¿$π¿%	¿%X¿%¢¿%Ô¿&(¿&)¿&5¿&_¿&a¿&b¿&|¿&±¿&˙¿'¿'¿'h¿'ä¿'¶¿'¥¿'µ¿(¿(¿(¿(o¿(ä¿(ã¿(‡¿))¿)v¿)¶¿)›¿)Ó¿*¿*¿*#¿*+¿*/¿*0¿*l¿*¬¿+¿+¿+6¿+I¿+a¿+m¿+Ö¿+“¿+Í¿,4¿,l¿,s¿,â¿,ô¿,ù¿,û¿,È¿-¿-P¿-l¿-m¿-ñ¿-ó¿-›¿-¸¿-˝¿.	¿.9¿.;¿.<¿.V¿.w¿.´¿.≠¿.Æ¿.‡¿/¿/¿/Q¿/U¿/ë¿/´¿/Ø¿/˘¿0B¿0ê¿0÷¿1!¿1J¿1N¿1á¿1ã¿1ó¿1£¿1›¿2¿2<¿2â¿2‘¿2Ò¿3=¿3\¿3}¿3É¿3ã¿3è¿3•¿3©¿3µ¿3¬¿3¸¿4=¿4}¿4º¿5¿5"¿5q¿5π¿5⁄¿5‡¿5Ë¿5˙¿6D¿6`¿6f¿6§¿6¿¿6˛¿6ˇ¿7.¿74¿7Å¿7ú¿7ù¿7∆¿7Ã¿8¿8¿8f¿8{¿8}¿8~¿8û¿8¢¿8Í¿9¿9¿9@¿9]¿9t¿9ö¿9∞¿9±¿9‡¿9Ê¿:¿:?¿:Z¿:[¿:É¿:â¿:Õ¿:”¿;$¿;*¿;k¿;õ¿;ø¿;¿¿<¿<3¿<9¿<Ñ¿<©¿<ª¿<Ω¿<æ¿=
¿=¿=X¿=s¿=x¿=±¿=œ¿=„¿=‰¿=˛¿=ˇ¿>¿>F¿>G¿>õ¿>ª¿>º¿>€¿>‹¿>Ë¿?2¿?3¿?å¿?±¿?≤¿?æ¿?È¿@1¿@ô¿@¥¿@◊¿A8¿AB¿A{¿Aä¿A≤¿AÓ¿B0¿B<¿BD¿BL¿Be¿BÉ¿Bâ¿B¶¿B™¿B´¿BÁ¿C8¿Cà¿Câ¿Cï¿C◊¿CÚ¿CÙ¿Cı¿D¿D¿Dk¿Dª¿E	¿E,¿E0¿EÇ¿E–¿EÎ¿F+¿FP¿F°¿FÁ¿G3¿GÉ¿Gñ¿Gö¿GÂ¿H/¿H¿HŒ¿I¿Ik¿I∫¿J¿J>¿JB¿Jå¿J÷¿K&¿Kb¿Kf¿K≥¿Kø¿K‰¿K¯¿L¿L!¿L?¿LJ¿Lñ¿L¿¿LÃ¿LÍ¿M
¿M.¿M3¿M5¿M6¿MY¿M]¿M¨¿M¸¿NJ¿Nm¿Nq¿N≈¿O¿OL¿OP¿O¢¿OÚ¿O˛¿P¿PM¿Pó¿PÁ¿Q6¿QÇ¿Q”¿R"¿Rj¿R¶¿R™¿RÙ¿S>¿Sé¿S ¿SŒ¿T¿T'¿T+¿TP¿TT¿T§¿TÔ¿U:¿Ub¿Uë¿U≠¿U¡¿U÷¿UÙ¿U˘¿V!¿V-¿Vl¿Vâ¿VÕ¿Vı¿Vˇ¿WF¿Wp¿Wz¿WÇ¿W ¿W—¿W÷¿Wÿ¿WŸ¿W¸¿X ¿XK¿XO¿Xú¿XÎ¿Y*¿Y.¿Yw¿Y∆¿Y‹¿Y‡¿Z.¿Z{¿Z«¿[¿[W¿[ß¿[˜¿\G¿\~¿\Ç¿\Ã¿]¿]J¿]N¿]õ¿]ß¿]´¿]–¿]‘¿^$¿^o¿^∫¿^‚¿_¿_+¿_U¿_`¿_ä¿_÷¿_ﬁ¿`9¿`x¿`π¿`·¿a¿a-¿a4¿aB¿aX¿a\¿a^¿a_¿aØ¿a—¿a”¿a‘¿b#¿bL¿bP¿b^¿bb¿b¨¿bÕ¿c	¿c¿c6¿c9¿c:¿c¿cÉ¿cë¿cï¿c·¿d¿dG¿d_¿dã¿dë¿d‡¿d¯¿e+¿eW¿eÖ¿eÜ¿e¥¿e∫¿f	¿fY¿fß¿fÙ¿g¿g%¿g[¿go¿gp¿gü¿g•¿gı¿hD¿hë¿hﬂ¿i	¿i¿iE¿iZ¿i[¿ig¿i£¿i•¿i¶¿iÔ¿iÛ¿jB¿jê¿j◊¿k!¿kN¿kP¿kQ¿kØ¿kË¿l"¿l?¿lA¿lB¿l¿lÉ¿l—¿m¿m4¿m8¿mÑ¿m’¿n¿n¿nc¿n≠¿n˝¿oL¿oò¿oÈ¿p8¿pÄ¿pº¿p¿¿q
¿qT¿q§¿q‡¿q¸¿r¿r¿r+¿rA¿rd¿ru¿râ¿rû¿rº¿r¡¿rﬁ¿s¿s¿s4¿sj¿sn¿so¿só¿sº¿s˙¿t
¿t ¿t8¿tT¿tq¿tz¿t{¿tò¿tﬁ¿u¿u¿u[¿uá¿uë¿uô¿uö¿u´¿u∆¿uÍ¿v¿v¿v8¿v|¿vó¿v≥¿væ¿v‰¿w ¿w ¿w!¿wM¿wY¿w_¿wa¿wb¿wØ¿wø¿w√¿w˙¿x¿xX¿x^¿xØ¿x˛¿yM¿yx¿y~¿y∂¿y¡¿y¬¿z¿z
¿z[¿z¨¿z≤¿zÎ¿zˆ¿z¯¿z˘¿{¿{!¿{/¿{3¿{Ç¿{®¿{Ω¿{Ò¿{˜¿|E¿|ê¿|—¿|◊¿|Á¿|Ì¿}<¿}V¿}d¿}≥¿}Ÿ¿}ﬂ¿~-¿~{¿~ï¿~õ¿~´¿~‚¿~Ô¿:¿@¿é¿Ÿ¿Ä¿Ä¿Äb¿Äõ¿Ä°¿ÄÔ¿ÅC¿ÅI¿ÅY¿Åñ¿Åù¿Å—¿Å◊¿Ç%¿Çp¿Ç±¿Ç∑¿Ç«¿ÇÕ¿É¿É/¿ÉD¿ÉF¿ÉG¿Éò¿Éµ¿Ñ¿Ñ(¿Ñ.¿Ñ~¿Ñ«¿Ö¿Öa¿Ö{¿ÖÅ¿Ö–¿Ü¿ÜV¿Ü\¿Üß¿ÜÃ¿Üﬁ¿Ü‡¿Ü·¿á9¿áÉ¿áü¿áπ¿á∫¿á∆¿à¿à)¿à+¿à,¿à^¿àb¿àß¿à´¿àÓ¿â-¿âA¿âE¿âã¿â∂¿â∫¿â˘¿ä<¿äd¿äh¿ä¨¿äÂ¿ä˚¿ã¿ã¿ãD¿ãJ¿ãó¿ãÊ¿å	¿å=¿åm¿åÑ¿åà¿åâ¿å«¿åÕ¿ç¿ç/¿çS¿çT¿çâ¿ç¨¿ç≠¿çı¿é"¿é#¿éj¿éw¿éö¿éõ¿é‚¿è¿èA¿èB¿èÖ¿è≈¿è‘¿è⁄¿êK¿ê¿¿ë¿ë¿ëJ¿ëë¿ë÷¿ë„¿í1¿í2¿íw¿íæ¿íÕ¿í”¿ì@¿ì±¿î¿î¿îI¿îê¿î’¿îÍ¿ïD¿ïE¿ïã¿ïœ¿ñ¿ñ[¿ñÄ¿ñÜ¿ñÛ¿ód¿ó™¿ó´¿óÒ¿ò5¿òz¿ò¡¿ô¿ô/¿ô}¿ô~¿ô¡¿ô„¿ôÈ¿ö,¿öP¿öV¿öù¿ö›¿õ$¿õh¿õØ¿õÛ¿ú!¿ú'¿úl¿ú¢¿úÛ¿úÙ¿ùC¿ùà¿ùé¿ù›¿û&¿ûj¿ûë¿ûó¿û‹¿ü+¿üw¿ü}¿ü†¿ü¡¿ü‹¿ü˜¿†¿†¿†¿†h¿†≠¿†≥¿†Á¿†Ì¿°<¿°ä¿°Õ¿¢¿¢¿¢`¿¢Æ¿¢˚¿£¿£-¿£G¿£h¿£É¿£û¿£π¿£ø¿£¿¿§¿§¿§9¿§:¿§|¿§™¿§∞¿•¿•P¿•k¿•l¿•¥¿•Ò¿¶0¿¶q¿¶∑¿¶˚¿ß?¿ßK¿ßQ¿ßΩ¿®-¿®3¿®£¿©¿©W¿©X¿©™¿©∏¿©æ¿™¿™2¿™8¿™¿™≥¿™¥¿™ˆ¿´9¿´I¿´g¿´h¿´Æ¿´¥¿¨¿¨O¿¨z¿¨º¿¨Ω¿≠¿≠B¿≠¿≠Ö¿≠“¿Æ#¿ÆN¿Æó¿Æò¿Æ›¿Ø¿Ø.¿Ø/¿Øt¿Ø∏¿Ø”¿Ø„¿Ø‰¿∞4¿∞Å¿∞†¿∞¶¿∞Ó¿∞Ù¿±9¿±X¿±Y¿±ô¿±»¿±Â¿±Ê¿≤&¿≤V¿≤}¿≤~¿≤≥¿≤π¿≥	¿≥V¿≥°¿≥‡¿≥Ê¿¥7¿¥Ü¿¥ÿ¿µ%¿µo¿µΩ¿µÀ¿∂¿∂$¿∂%¿∂q¿∂Ñ¿∂ä¿∂⁄¿∑(¿∑b¿∑´¿∑◊¿∏(¿∏;¿∏A¿∏∏¿∏º¿∏Ω¿π¿π=¿πC¿πè¿π◊¿∫&¿∫u¿∫ø¿∫˜¿∫˝¿ªH¿ªï¿ªﬁ¿º¿º¿ºh¿ºµ¿Ω¿ΩH¿Ωï¿Ω‚¿æ1¿æÅ¿æ–¿æ÷¿ø$¿øs¿øß¿ø≠¿ø˛¿¿I¿¿É¿¿Ö¿¿Ü¿¿–¿¿¯¿¡¿¡¿¡k¿¡∞¿¡√¿¡ƒ¿¡˝¿¬¿¬¿¬e¿¬ã¿¬å¿¬ò¿¬‹¿¬Ë¿√)¿√*¿√~¿√ù¿√û¿√¯¿ƒ$¿ƒ%¿ƒ1¿ƒè¿ƒª¿ƒº¿ƒ»¿≈.¿≈d¿≈e¿≈q¿≈œ¿≈˚¿≈¸¿∆¿∆n¿∆§¿∆•¿∆±¿«*¿«y¿«z¿«Ü¿»¿»2¿»e¿»f¿»r¿»Ò¿…L¿…M¿…Y¿…‡¿ C¿ D¿ P¿ «¿À¿À¿À#¿À¢¿À˘¿À˙¿Ã¿ÃX¿Ãx¿Ã◊¿Ã€¿Ã‹¿Õ_¿ÕÂ¿ÕÊ¿ÕÚ¿Œ¿Œ6¿ŒQ¿Œl¿Œá¿Œé¿Œ≤¿Œ÷¿œ0¿œ4¿œ5¿œª¿–H¿–I¿–U¿–p¿–ä¿–´¿–∆¿–·¿–¸¿—¿—,¿—P¿—º¿—¿¿—¡¿“O¿“t¿“ä¿“†¿“∂¿“Ã¿“„¿“¯¿”¿”¿”¿”8¿”X¿”î¿”ò¿”ô¿‘¿‘X¿‘Y¿‘e¿‘Å¿‘°¿‘›¿‘·¿‘‚¿’Q¿’°¿’¢¿’Æ¿’Ô¿÷¿÷b¿÷f¿÷g¿÷Â¿◊Z¿◊[¿◊g¿◊ú¿◊Œ¿◊“¿◊”¿ÿ%¿ÿb¿ÿc¿ÿo¿ÿé¿ÿ∞¿ÿ‘¿ÿÿ¿ÿŸ¿Ÿ#¿ŸQ¿ŸR¿Ÿ^¿Ÿ°¿Ÿ≈¿Ÿ‡¿⁄¿⁄V¿⁄c¿⁄û¿⁄§¿⁄®¿⁄©¿€	¿€K¿€L¿€æ¿‹¿‹¿‹+¿‹u¿‹ô¿‹¥¿‹‹¿›0¿›=¿›¿›Ö¿›â¿›ä¿›Ò¿ﬁ:¿ﬁ;¿ﬁ≥¿ﬂ¿ﬂ¿ﬂ&¿ﬂs¿ﬂå¿ﬂç¿ﬂô¿ﬂÊ¿ﬂˇ¿‡ ¿‡¿‡,¿‡O¿‡y¿‡}¿‡~¿‡ﬁ¿·¿·¿·¿·8¿·\¿·ä¿·≤¿·√¿·«¿·»¿‚¿‚[¿‚\¿‚h¿‚ê¿‚∂¿‚‰¿„¿„¿„¿„¿„l¿„´¿„¨¿„∏¿„Õ¿„¯¿‰6¿‰:¿‰;¿‰Ä¿‰•¿‰¶¿Â¿ÂQ¿ÂR¿Â^¿Âô¿Â∆¿Â ¿ÂÃ¿ÂÕ¿Ê¿Ê¿Ê!¿Ê¿Êè¿Ê¿¿Ê∆¿ÊÏ¿Á¿Á¿Á_¿Áe¿Á∫¿ÁÊ¿Ë#¿Ëk¿Ëo¿Ëp¿Ëè¿Ëï¿ËË¿È,¿ÈE¿ÈF¿Ès¿Èy¿È ¿Í¿Í8¿ÍO¿ÍP¿ÍÄ¿ÍÜ¿Í÷¿Î%¿ÎA¿ÎG¿Îï¿Î‰¿Ï3¿ÏÅ¿Ïí¿Ï◊¿Ì¿Ì¿Ì¿Ì[¿Ì_¿Ì∞¿Ì¸¿ÓB¿ÓF¿Óå¿Óê¿Ó‹¿Ô+¿ÔI¿ÔM¿Ôó¿ÔÁ¿¿H¿w¿Õ¿Œ¿ˆ¿˜¿Ò¿Ò5¿Ò7¿Ò8¿Òá¿Ò°¿Ò‹¿Ú¿Ú¿Ú#¿ÚF¿ÚG¿ÚS¿Ún¿Ú°¿Ú¬¿Ú⁄¿Û=¿Ûô¿Ù¿Ù¿Ù¿Ù6¿Ù:¿Ù;¿ÙG¿Ù[¿ÙÇ¿Ù≤¿Ù≈¿ÙÀ¿Ù„¿Ùı¿Ù˘¿Ù˚¿Ù¸¿ı;¿ı?¿ıá¿ı“¿ˆ ¿ˆD¿ˆH¿ˆñ¿ˆÂ¿˜1¿˜Å¿˜œ¿˜›¿˜¿¯¿¯L¿¯é¿¯¡¿¯¬¿¯¯¿¯˛¿˘G¿˘ë¿˘⁄¿˘Ò¿˘Ú¿˙¿˙¿˙k¿˙±¿˚¿˚ ¿˚7¿˚8¿˚c¿˚i¿˚π¿¸ ¿¸N¿¸ù¿¸÷¿¸‹¿˝*¿˝z¿˝…¿˛¿˛¿˛¿˛<¿˛=¿˛ç¿˛¥¿˛∫¿ˇ	¿ˇV¿ˇn¿ˇt¿ˇ©¿ˇØ¿ˇı¿ '¿ h¿ l¿ m¿ ∂¿ º¿ ˛¿B¿ê¿Ì¿Ò¿Ú¿˛¿f¿h¿i¿§¿Ÿ¿˛¿¿¿X¿ö¿õ¿ø¿5¿W¿[¿\¿Ω¿Í¿Î¿/¿_¿≠¿¿+¿G¿Z¿g¿}¿£¿»¿—¿◊¿€¿‹¿7¿}¿~¿Ω¿‰¿Z¿à¿À¿‹¿‡¿·¿	Q¿	ø¿	¿¿	‰¿
Z¿
~¿
Ç¿
É¿
·¿¿¿:¿?¿î¿æ¿÷¿¿¿/¿5¿F¿J¿K¿•¿À¿Ã¿¿¿_¿¿Å¿Ç¿∑¿Û¿¿<¿=¿ä¿Õ¿◊¿ÿ¿&¿r¿†¿©¿™¿˜¿H¿ã¿î¿ï¿Â¿Û¿¸¿˛¿ˇ¿L¿ú¿Æ¿≤¿¿¿a¿g¿õ¿°¿Ú¿¯¿G¿ï¿Â¿ˆ¿¸¿K¿Q¿w¿}¿ç¿ì¿‡¿˘¿
¿¿ ¿!¿;¿R¿S¿ô¿‰¿¿D¿E¿Q¿t¿ì¿µ¿ÿ¿‹¿›¿È¿¿¿)¿z¿|¿}¿Œ¿¿k¿∑¿Ë¿Ï¿5¿B¿m¿∫¿¿O¿U¿¶¿Ù¿!¿\¿t¿î¿¨¿»¿…¿¿Z¿o¿u¿¬¿Í¿¿#¿V¿â¿º¿Ô¿ı¿D¿ê¿ñ¿§¿‰¿˚¿¿)¿@¿J¿T¿Z¿l¿r¿ì¿ô¿ß¿Â¿ ¿ ¿ 9¿ U¿ _¿ i¿ o¿ ˆ¿ ¸¿!
¿!G¿!j¿!ç¿!∞¿!”¿!›¿!Á¿!Ì¿"v¿"|¿"ä¿"À¿"Ò¿#¿#=¿#c¿#m¿#w¿#ß¿#æ¿#Ÿ¿#Û¿$¿$¿$^¿$n¿$ñ¿$≠¿$»¿$‡¿%	¿%
¿%X¿%s¿%õ¿%≤¿%Õ¿%Â¿&¿&¿&&¿&E¿&d¿&w¿&x¿&®¿&›¿'!¿'j¿'≥¿'¥¿'Ã¿'ÿ¿(%¿(&¿(O¿(d¿({¿(Ø¿(∆¿(–¿(¯¿)¿)?¿)]¿)t¿)~¿)…¿)Û¿*¿*L¿*p¿*•¿*¥¿*ˆ¿*¸¿+ ¿+¿+¿+0¿+\¿+p¿+v¿+ñ¿+∂¿+Ì¿,¿,:¿,>¿,?¿,K¿,`¿,ä¿,Ì¿,Ò¿,Ú¿,˛¿-¿-4¿-K¿-Ñ¿-ù¿-Ã¿-¿."¿.F¿.x¿.á¿.¨¿.≤¿.∂¿.∑¿.√¿.Ÿ¿.Ó¿/¿/>¿/W¿/Ü¿/™¿/‹¿0 ¿02¿0A¿0›¿0„¿0Á¿0È¿0Í¿1(¿1,¿1|¿1«¿2¿2/¿2j¿2å¿2ƒ¿2ÿ¿3¿3¿3¿3B¿3|¿3ê¿3…¿3Õ¿3¸¿4A¿4U¿4s¿4w¿4x¿4ß¿4Ï¿5 ¿5¿5"¿5#¿5q¿5ó¿5¥¿5µ¿5ı¿6¿6¿6{¿6∞¿6±¿7¿75¿76¿7ö¿7ƒ¿7≈¿8)¿8S¿8U¿8V¿8â¿8ç¿8õ¿8ü¿8Ó¿9;¿9ä¿9≤¿9˛¿:)¿:F¿:ò¿:≈¿:∆¿;¿;q¿; ¿;Œ¿;œ¿<¿<b¿<±¿<Ù¿<¯¿<˘¿==¿=è¿=›¿>¿>#¿>$¿>h¿>n¿>º¿?¿?8¿?Ñ¿?§¿?‚¿?Ë¿@J¿@N¿@O¿@ô¿@ü¿@Ó¿A%¿AJ¿A¶¿AÓ¿AÚ¿AÛ¿BD¿Bë¿B∏¿Bπ¿C¿C:¿CZ¿C\¿C]¿Cè¿C⁄¿C€¿Cı¿D¿D¿D<¿DÄ¿Då¿D√¿Dƒ¿D–¿E¿E¿E ¿Ed¿Ee¿Eq¿Eî¿E¿¿E‘¿E⁄¿F¿F1¿Fc¿Fg¿Fh¿Ft¿Fº¿Fæ¿Fø¿F˜¿G[¿G\¿Gs¿Gä¿G•¿G¶¿G∫¿G¸¿H¿H?¿H@¿H[¿Hs¿Hû¿HÀ¿H¸¿I'¿I-¿I1¿I2¿I>¿Ià¿Iâ¿Iï¿I‡¿I·¿IÌ¿J¿J<¿JP¿JV¿JÉ¿J•¿J«¿JÓ¿JÚ¿JÛ¿Jˇ¿K2¿K4¿K5¿Kg¿KØ¿K∞¿K»¿K‡¿K·¿L%¿L1¿Lh¿Li¿Lu¿Lµ¿L∂¿L¬¿M¿M¿M¿M3¿M_¿Ms¿My¿M†¿Mƒ¿MÈ¿MÌ¿MÓ¿M˙¿N/¿N1¿N2¿Nc¿N™¿N´¿N√¿N€¿N‹¿O¿O+¿Ob¿Oc¿Oo¿OÆ¿OØ¿Oª¿O˚¿O¸¿P¿P+¿PW¿Pk¿Pq¿Pó¿Pª¿P‡¿P‰¿PÂ¿PÒ¿Q&¿Q(¿Q)¿Q\¿Q≠¿QÆ¿Qœ¿Q¿QÒ¿R¿RQ¿R]¿Rî¿Rï¿R°¿S¿S¿S¿Sn¿So¿S{¿Sû¿S ¿Sﬁ¿S‰¿T¿T8¿Te¿Ti¿Tj¿Tv¿T≥¿Tµ¿T∂¿Tı¿T˘¿UI¿Uú¿U‡¿V¿VW¿Vå¿V•¿Vπ¿V˝¿W¿W¿WO¿Wï¿W∆¿Wﬂ¿WÛ¿X$¿X(¿X)¿Xm¿Xø¿XÓ¿Y¿Y¿YK¿YO¿YP¿Yî¿Yö¿YË¿Z2¿Zc¿Z|¿Z†¿Zﬁ¿Z‰¿Z¯¿[2¿[6¿[7¿[i¿[ú¿[µ¿[…¿\¿\3¿\7¿\8¿\k¿\ü¿\∏¿\Ã¿]"¿]x¿]±¿]µ¿]∂¿]ˆ¿^¿^¿^Ö¿^Ã¿^Õ¿_6¿_s¿_t¿_‹¿`¿`¿`s¿`∏¿`π¿a¿aU¿aV¿a∆¿b¿b¿bh¿bé¿b´¿b≠¿bÆ¿bÙ¿c)¿c^¿c®¿cƒ¿c‡¿cÓ¿cÔ¿d¿d¿d8¿d>¿dè¿d™¿d¬¿d“¿dÛ¿e¿e¿e%¿e)¿e*¿ez¿eù¿e£¿e¿f:¿fÉ¿fÕ¿f”¿g¿g+¿g;¿gZ¿gw¿gä¿gî¿gò¿gö¿gõ¿g¿h	¿h¿hZ¿h®¿hı¿iE¿iI¿iû¿iÚ¿jK¿j£¿jˆ¿k¿k#¿k}¿k¢¿k¶¿k¥¿k∏¿k¸¿lF¿lñ¿l¿¿m
¿mR¿my¿m∆¿n¿n.¿ni¿ny¿n”¿nŸ¿o%¿ok¿oq¿o…¿oÈ¿oÔ¿pR¿pµ¿q¿q ¿q!¿qr¿qx¿q–¿r.¿rZ¿r`¿r∫¿s¿s¿sÉ¿sÈ¿tN¿tZ¿t[¿tÆ¿t¥¿u¿ud¿u∫¿u’¿u€¿v5¿vã¿v†¿v¶¿w
¿wn¿w—¿w€¿w‹¿x¿x"¿x|¿x◊¿xÁ¿xÌ¿yF¿yf¿yl¿yœ¿z2¿zî¿zù¿zü¿z†¿z—¿z˘¿{+¿{T¿{u¿{y¿{ä¿{å¿{ç¿{¡¿{È¿|#¿|L¿|j¿|ç¿|±¿|‘¿|Û¿}¿}¿}'¿})¿}*¿}g¿}â¿}´¿}ÿ¿}Ò¿~
¿~#¿~<¿~M¿~O¿~P¿~ò¿~ú¿~Ó¿¿¿¿¿ç¿ë¿∂¿Î¿Ò¿Ä@¿Äë¿Ä€¿Å*¿Å{¿ÅÃ¿Ç¿Ç>¿ÇD¿Çì¿Ç…¿Çœ¿É2¿Éï¿É˘¿Ñ_¿Ñe¿Ñ∞¿Ñˆ¿Ö¿Ö¿Öd¿Ö∑¿Ö˜¿Ü
¿Ü¿Ü*¿ÜD¿Üb¿Üä¿Ü§¿Ü…¿ÜÏ¿á(¿á;¿áh¿á¨¿áÈ¿àQ¿àe¿à¿¿àƒ¿à≈¿â¿â0¿â6¿âÖ¿â÷¿ä ¿äo¿ä¿¿ã¿ãa¿ãÉ¿ãâ¿ã◊¿å¿å¿åv¿åŸ¿ç=¿ç£¿ç©¿ç˙¿é@¿é[¿éa¿éÆ¿è¿èA¿èG¿èì¿è·¿ê+¿êy¿ê»¿êÌ¿ë ¿ë¿ë&¿ë@¿ë^¿ëÜ¿ë†¿ë≥¿ë–¿ë˜¿í3¿íF¿ís¿í∞¿ì¿ì¿ì~¿ì⁄¿î¿î4¿îû¿î´¿ï¿ï*¿ï∂¿ïº¿ï¿¿ï¡¿ñ¿ñ/¿ñ5¿ñÄ¿ñŒ¿ó	¿ó¿ó^¿óØ¿ó˘¿òH¿òô¿òÍ¿ô:¿ô\¿ôb¿ô≤¿ôÛ¿ô˘¿ö[¿öΩ¿õ ¿õÖ¿õã¿õ⁄¿ú*¿úM¿úS¿ú†¿úÛ¿ù3¿ùE¿ùX¿ùr¿ùê¿ù∏¿ù’¿ù¯¿û¿û9¿û_¿ûõ¿ûÆ¿û€¿ü¿üÄ¿üî¿†	¿†¿†¿†K¿†k¿†l¿†€¿°^¿°_¿°ﬁ¿°˚¿¢¿¢'¿¢<¿¢T¿¢s¿¢á¿¢§¿¢•¿£E¿£c¿£x¿£ç¿£ß¿£∫¿£Õ¿£Â¿£˝¿§¿§0¿§M¿§N¿§‘¿§¿•¿•¿•4¿•S¿•g¿•Ä¿•ó¿•≥¿•¥¿•◊¿¶¿¶+¿¶K¿¶£¿¶´¿¶∏¿¶Ë¿ßD¿ßL¿ßR¿ßV¿ßX¿ßY¿ßó¿ßø¿ßÂ¿ßÎ¿®'¿®v¿®º¿®Ó¿®Ù¿©D¿©ì¿©°¿©ß¿©Ó¿™4¿™a¿™g¿™≠¿™˝¿´J¿´g¿´É¿´—¿´Û¿´˙¿¨¿¨,¿¨L¿¨ä¿¨ê¿¨§¿≠¿≠0¿≠N¿≠T¿≠X¿≠Y¿≠e¿≠x¿≠ç¿≠ù¿≠°¿≠¢¿≠‚¿Æ¿Æ¿Æ¿ÆÔ¿Æ¿Ø;¿Ø`¿Ø®¿Øƒ¿Ø∆¿Ø«¿∞¿∞&¿∞*¿∞T¿∞§¿∞‚¿∞˛¿±.¿±B¿±v¿±ì¿±≤¿±∏¿±»¿±Â¿±¯¿≤¿≤¿≤¿≤¿≤¿≤c¿≤i¿≤≤¿≤˜¿≥D¿≥Z¿≥ò¿≥›¿¥&¿¥p¿¥ù¿¥Â¿µ/¿µJ¿µ¿µÖ¿µ∑¿∂¿∂R¿∂h¿∂p¿∂t¿∂u¿∂Æ¿∂ˇ¿∑M¿∑ù¿∑©¿∑ˆ¿∏(¿∏)¿∏^¿∏©¿∏˜¿π#¿πu¿πì¿π°¿πß¿π®¿π‡¿π˚¿∫	¿∫¿∫¿∫L¿∫i¿∫ö¿∫†¿∫§¿∫•¿∫¡¿∫‡¿∫·¿∫˝¿ª¿ª¿ª\¿ª|¿ª}¿ªŸ¿º¿º¿ºA¿ºï¿ºó¿ºò¿ºÀ¿ºœ¿Ω¿ΩL¿Ωú¿ΩÍ¿æ¿æ¿æa¿æÆ¿æ¸¿øE¿ø~¿ø©¿¿¿¿.¿¿=¿¿_¿¿|¿¿É¿¿á¿¿à¿¿§¿¿•¿¿Â¿¡¿¡¿¡F¿¡L¿¡ö¿¡Ë¿¬3¿¬Å¿¬—¿¬˚¿√¿√H¿√N¿√\¿√x¿√ö¿√π¿√‘¿√ﬁ¿√‰¿ƒ2¿ƒ<¿ƒB¿ƒP¿ƒ°¿ƒÃ¿ƒ˝¿≈.¿≈4¿≈g¿≈≤¿≈˝¿∆H¿∆ì¿∆ô¿∆¿¿∆Í¿∆Ú¿∆¸¿«¿«O¿«§¿«µ¿«ª¿»¿»0¿»Ö¿»°¿»•¿»¶¿»‹¿»‚¿…:¿…}¿…É¿…–¿…Ò¿ "¿ v¿ °¿ •¿ ¶¿ Ë¿ Ó¿À=¿Àâ¿Àƒ¿À–¿À„¿À¯¿Ã¿Ã*¿Ã.¿Ã/¿Ãî¿Ã˙¿Ã˚¿Õf¿Õ£¿Õ§¿Œ ¿Œ%¿Œ&¿Œy¿Œï¿Œó¿Œò¿ŒÈ¿ŒÌ¿œ¿œM¿œ_¿œß¿œ¥¿œµ¿–¿–¿–¿–f¿–{¿–Å¿–Ã¿—
¿—K¿—Z¿—\¿—]¿—ï¿—ô¿—Ë¿“.¿“y¿“≈¿”¿”;¿”?¿”å¿”⁄¿‘)¿‘9¿‘=¿‘â¿‘ÿ¿’'¿’t¿’¡¿÷¿÷`¿÷≠¿÷»¿÷Ã¿◊¿◊c¿◊∞¿◊“¿◊÷¿ÿ%¿ÿj¿ÿ∑¿Ÿ¿ŸY¿Ÿ©¿ŸÃ¿⁄¿⁄J¿⁄P¿⁄û¿⁄Î¿€9¿€Ñ¿€≥¿€π¿‹¿‹/¿‹5¿‹Ü¿‹‘¿›#¿›`¿›~¿›Ñ¿›”¿ﬁ"¿ﬁ(¿ﬁz¿ﬁ£¿ﬁ©¿ﬁ˘¿ﬂJ¿ﬂõ¿ﬂÁ¿‡5¿‡Ä¿‡À¿‡€¿‡·¿·/¿·Y¿·_¿·ù¿·£¿·Ô¿‚@¿‚ë¿‚›¿„¿„¿„%¿„C¿„\¿„Ç¿„ö¿„°¿„‡¿‰+¿‰1¿‰à¿‰ﬂ¿‰Â¿Â ¿Â@¿Âr¿Âë¿Â›¿Ê$¿Êo¿Ê|¿ÊÜ¿Êé¿Êî¿Ê⁄¿Á*¿ÁW¿Áe¿Áô¿Á∫¿Á»¿Áˇ¿Ë$¿Ë2¿Ë3¿Ë£¿ËÂ¿ËÎ¿ËÔ¿Ë¿ÈA¿Èp¿Èv¿Èƒ¿Í¿Í_¿Í™¿ÍŸ¿Íﬂ¿Î,¿Îv¿Î¬¿Ï¿Ï$¿Ï*¿Ï{¿Ï ¿Ì¿Ìb¿Ì≥¿Ó¿Ó9¿Ó?¿Óé¿Ó›¿Ô.¿Ôw¿Ô∞¿Ô∂¿¿W¿®¿¯¿ÒB¿Òé¿Òﬂ¿Ú¿Ú¿Ú`¿Ú∞¿Úˇ¿Û-¿Û3¿Ûq¿ÛÅ¿Ûñ¿Û≥¿Û ¿ÛÔ¿Ù¿Ù¿Ù4¿Ù§¿Ù™¿ÙÌ¿ı8¿ı>¿ıï¿ıÏ¿ıÚ¿ˆ¿ˆM¿ˆÉ¿ˆ¢¿ˆÓ¿˜:¿˜Ö¿˜í¿˜ú¿˜§¿˜™¿˜˛¿¯@¿¯F¿¯J¿¯K¿¯≠¿¯‡¿˘¿˘;¿˘y¿˘©¿˘‹¿˘›¿˙-¿˙P¿˙c¿˙{¿˙ã¿˙£¿˙∂¿˙¿¿˙–¿˙‘¿˙’¿˚ ¿˚E¿˚ä¿˚¶¿˚ß¿˚¡¿¸¿¸¿¸_¿¸u¿¸ê¿¸§¿¸¥¿¸–¿¸„¿¸Ì¿˝^¿˝b¿˝d¿˝e¿˝≥¿˝∑¿˝Û¿˛7¿˛H¿˛j¿˛p¿˛æ¿ˇ¿ˇA¿ˇG¿ˇî¿ˇ„¿ˇ˘¿ ¿ ¿ >¿ D¿ ä¿ ê¿ “¿ Ë¿ Ò¿ Ú¿(¿.¿p¿Ü¿ë¿ì¿î¿ﬁ¿Í¿Ó¿¿¿S¿a¿b¿õ¿®¿™¿´¿‡¿‰¿+¿o¿∞¿¥¿˝¿M¿ñ¿≥¿∑¿¿P¿Ö¿â¿÷¿¿-¿p¿é¿î¿›¿%¿u¿ƒ¿¿T¿Z¿°¿∑¿	¿	¿	P¿	V¿	Ç¿	à¿	ò¿	û¿	Ô¿
$¿
3¿
4¿
Ö¿
÷¿%¿n¿}¿É¿œ¿ ¿n¿∂¿¿N¿T¿°¿ß¿À¿—¿¿k¿ª¿¿0¿6¿Ñ¿Õ¿¿l¿∫¿
¿R¿¿Ö¿œ¿Ë¿Ó¿¸¿)¿Q¿h¿®¿—¿¿A¿[¿u¿}¿á¿ç¿‹¿*¿x¿ñ¿ú¿™¿◊¿¿B¿Y¿ô¿–¿	¿#¿+¿5¿;¿å¿“¿¿"¿0¿]¿t¿»¿¿¿2¿ì¿Ã¿Ê¿Ó¿¯¿˛¿I¿í¿„¿¿!¿E¿K¿ä¿ê¿ﬁ¿,¿}¿»¿¿e¿∞¿˚¿L¿ù¿∏¿æ¿Œ¿‘¿$¿F¿é¿§¿—¿“¿¿1¿7¿v¿|¿≈¿ 	¿ ¿ ¿ x¿ ≈¿!¿!¿!\¿!b¿!∞¿" ¿""¿"D¿"E¿"à¿"Õ¿#¿#I¿#O¿#t¿#ä¿#ã¿#€¿$+¿$S¿$T¿$£¿$Ì¿$˛¿%¿%J¿%\¿%É¿%Ñ¿%Ÿ¿%¯¿%˘¿&J¿&ñ¿&Â¿'¿'1¿'2¿'Ç¿'Ω¿'‰¿'Â¿(8¿(é¿(™¿(∞¿)¿)P¿)†¿)Õ¿)Î¿)Ï¿*:¿*Q¿*W¿*≠¿*≥¿*˜¿*˝¿+O¿+ó¿+¿¿+∆¿,¿,$¿,¿,Ä¿,Œ¿,Ì¿,Û¿-J¿-P¿-î¿-ö¿-Ï¿.4¿.Ñ¿.æ¿.ø¿/¿/!¿/'¿/}¿/É¿/«¿/Õ¿0¿0g¿0ê¿0«¿0»¿1¿1k¿1æ¿1œ¿1’¿2)¿2|¿2Œ¿3¿3l¿3ø¿4¿4a¿4≤¿4Œ¿4‘¿5¿5^¿5≤¿6¿6C¿6I¿6ó¿6æ¿6ƒ¿6“¿6Û¿7¿7K¿7à¿7ß¿7·¿8¿8,¿84¿8>¿8D¿8ï¿8·¿9<¿9ê¿9†¿9¶¿9Ï¿:9¿:m¿:s¿:√¿;¿;^¿;v¿;ã¿;®¿;©¿;˙¿<L¿<ü¿<•¿<ı¿=G¿=ó¿=Á¿>9¿>ç¿>‡¿>Ì¿>Û¿?(¿?K¿?L¿?è¿?€¿?¯¿@,¿@-¿@|¿@ƒ¿@ ¿A¿A¿Aâ¿A¯¿B,¿B-¿B\¿Bb¿Bß¿B¬¿B·¿B‚¿C2¿Cm¿Cs¿Cﬁ¿DM¿Dv¿Dw¿D»¿E
¿E¿E|¿EÏ¿F¿F¿Fi¿Fπ¿Fﬂ¿FÂ¿G*¿Gd¿Ge¿G≤¿H¿H&¿H,¿Hó¿I¿I/¿I0¿I{¿IÕ¿J¿J?¿JE¿J≤¿K#¿K\¿K]¿Kô¿Kü¿Kﬂ¿L,¿Lv¿L ¿M¿Mk¿Mó¿Mù¿N¿N¿NÖ¿N›¿O;¿O<¿Oq¿Ow¿O¿¿P	¿P5¿P^¿P_¿P≠¿Q¿Q?¿Q@¿Qè¿Q€¿Q·¿R0¿RI¿RO¿Rõ¿R‰¿R˜¿S;¿S<¿SÉ¿Sâ¿S◊¿T%¿Tr¿Tø¿U¿U¿UV¿U£¿UÒ¿V8¿VI¿Vê¿Vë¿Vÿ¿VÒ¿W¿W¿Wc¿Ws¿Wy¿Wƒ¿W—¿W◊¿X#¿Xp¿XÆ¿X¥¿Y¿YO¿YU¿Y¶¿YÛ¿Z@¿ZF¿Zê¿Z‹¿[)¿[c¿[d¿[©¿[Ø¿[ˆ¿[¸¿\B¿\å¿\í¿\¢¿\®¿\¯¿]¿][¿]\¿]°¿]ß¿]˜¿^D¿^J¿^ê¿^⁄¿^‡¿^¿^ˆ¿_D¿_b¿_Æ¿_Ø¿_˘¿_ˇ¿`K¿`\¿`b¿`´¿`¸¿a¿a¿ab¿a∞¿a¸¿bD¿bî¿bﬂ¿c*¿cy¿c∆¿d¿dJ¿dP¿dw¿d}¿dç¿dﬁ¿e*¿eQ¿e£¿eÌ¿eÓ¿f2¿f8¿fâ¿f‚¿g5¿gâ¿g¡¿g«¿h¿hh¿h∑¿i	¿iY¿i≠¿i˘¿iˇ¿jP¿j†¿jı¿kL¿k|¿k–¿l¿lb¿lh¿lª¿m
¿mU¿m£¿m¯¿m˛¿nR¿n£¿nÏ¿nÚ¿oC¿o^¿od¿or¿oá¿o∞¿o√¿o⁄¿o‚¿oË¿p¿pL¿pR¿p´¿p…¿pÍ¿p¿q¿q1¿qR¿qâ¿qΩ¿qÁ¿r¿r"¿r_¿r}¿rõ¿r·¿s¿s=¿sN¿sc¿só¿s⁄¿t¿t¿t¿t ¿t(¿t2¿t8¿të¿tó¿t•¿t∫¿t˛¿u¿u(¿u;¿uT¿u\¿ub¿uê¿u∆¿uÃ¿v%¿vC¿vd¿vj¿v|¿v´¿vÃ¿w¿w7¿wa¿wå¿w®¿wÂ¿x¿x!¿xg¿xï¿x√¿x‘¿xÈ¿y¿y`¿yv¿y™¿yﬁ¿z
¿z¿z¿z)¿z1¿z;¿zA¿zä¿z’¿{¿{¿{¿{$¿{r¿{â¿{ß¿{÷¿{˘¿|¿|F¿|g¿|Ü¿|á¿|À¿|—¿}"¿}{¿}Œ¿~"¿~t¿~∆¿~˝¿¿S¿õ¿°¿Ú¿Ä2¿Ä]¿Äc¿Ä±¿Ä˚¿Å¿ÅM¿Åö¿ÅÍ¿Å¿ÇK¿Ç\¿Çb¿Çp¿ÇÖ¿ÇÆ¿Ç¡¿Çÿ¿Ç‡¿ÇÊ¿É¿ÉJ¿ÉP¿É©¿É«¿ÉË¿ÉÓ¿Ñ ¿Ñ/¿Ñ¿ÑŒ¿Ö¿Ö;¿ÖÄ¿Ö ¿Ü¿Ü-¿Üc¿Üå¿Ü≥¿Ü„¿á¿á¿áj¿á≈¿à¿àa¿àç¿àπ¿à¯¿â7¿âC¿âd¿â¬¿âÃ¿â“¿â·¿âÈ¿âÛ¿â˘¿äR¿äX¿äf¿ä{¿äø¿ä“¿äÈ¿ä¸¿ã¿ã¿ã#¿ãQ¿ãá¿ãç¿ãÊ¿å¿å%¿å+¿å=¿ål¿åº¿ç¿ç\¿çx¿çΩ¿é¿éE¿é}¿é®¿éﬁ¿è¿è.¿è^¿èÜ¿èå¿èÁ¿ê>¿êô¿êˆ¿ëA¿ëá¿ë∞¿ë ¿í¿í!¿í=¿íÅ¿í≠¿íŸ¿íË¿ì¿ìV¿ìã¿ì¿¿ì∆¿î ¿îz¿î“¿ï¿ïH¿ïT¿ïu¿ï„¿ïÌ¿ïÛ¿ñ¿ñ
¿ñ¿ñ¿ñ*¿ñ0¿ñ}¿ñí¿ñ≥¿ñ‚¿ó	¿ó0¿óZ¿ó~¿ó†¿ó°¿óÓ¿óÙ¿òD¿òY¿ò_¿òÖ¿ò‹¿òﬁ¿òﬂ¿ô-¿ôn¿ôé¿ôÎ¿ôÒ¿ö%¿öD¿öc¿öø¿ö√¿öƒ¿õ.¿õ£¿õ§¿ú ¿ú\¿ú°¿ú∆¿ú«¿ú”¿ù!¿ù9¿ù:¿ù]¿ùu¿ùë¿ù∫¿ù„¿û¿û5¿û>¿ûD¿ûU¿ûY¿ûZ¿ûf¿ûî¿ûÆ¿ûÍ¿û˜¿ü¿üÄ¿üÜ¿üä¿üã¿üÌ¿†G¿†H¿†Ω¿°@¿°A¿°M¿°û¿°π¿°∫¿°∆¿¢%¿¢P¿¢Q¿¢]¿¢¥¿¢”¿¢‘¿¢‡¿£C¿£t¿£u¿£Å¿£¿¿£¡¿§ ¿§N¿§O¿§[¿§≥¿§€¿§‹¿§Ë¿•F¿•r¿•s¿•¿•ß¿•«¿¶¿¶¿¶$¿¶(¿¶)¿¶v¿¶ß¿¶®¿¶¥¿¶”¿ß¿ß ¿ß4¿ß8¿ß9¿ßâ¿ßΩ¿ßæ¿ß ¿®&¿®F¿®`¿®≠¿®˚¿©=¿©ï¿©ô¿©ö¿™¿™à¿™â¿™ï¿™–¿™Ú¿´$¿´(¿´)¿´|¿´Ω¿´æ¿´ ¿¨¿¨3¿¨7¿¨8¿¨ë¿¨–¿¨—¿¨›¿¨˚¿≠*¿≠K¿≠ë¿≠ï¿≠ñ¿≠Ï¿Æ%¿Æ&¿Æ2¿ÆV¿ÆÖ¿Æ¨¿ÆÚ¿Æˆ¿Æ˜¿ØS¿Øí¿Øì¿Øü¿Ø‘¿∞¿∞¿∞¿∞i¿∞ü¿∞†¿∞¨¿∞·¿±¿±!¿±i¿±m¿±n¿±‚¿≤Z¿≤[¿≤g¿≤á¿≤¥¿≤∏¿≤π¿≥¿≥[¿≥\¿≥h¿≥í¿≥≤¿≥Ã¿¥
¿¥f¿¥l¿¥p¿¥q¿¥Â¿µg¿µh¿µt¿µ°¿µ√¿∂¿∂	¿∂
¿∂g¿∂«¿∂»¿∂‘¿∑¿∑1¿∑S¿∑´¿∑Ø¿∑∞¿∏¿∏ä¿∏ã¿∏ó¿∏¡¿∏·¿∏˚¿π9¿πï¿πõ¿πü¿π†¿∫¿∫ñ¿∫ó¿∫£¿∫›¿∫¸¿ª>¿ªB¿ªC¿ª±¿º"¿º#¿º/¿ºé¿ºÆ¿Ω*¿Ω.¿Ω/¿Ω∏¿Ω“¿ΩÂ¿Ω˜¿æ¿æ ¿æ9¿æR¿æh¿æã¿æ¶¿æß¿æ≥¿æ›¿ø¿ø"¿ø#¿øÜ¿ø‰¿øÂ¿øÒ¿¿-¿¿O¿¿s¿¿ı¿¡¿¡\¿¡b¿¡f¿¡g¿¡‰¿¬n¿¬o¿¬{¿¬¿¿¬‚¿√¿√ ¿√W¿√ä¿√º¿√¿ƒ%¿ƒX¿ƒä¿ƒæ¿ƒÛ¿≈,¿≈b¿≈ß¿≈¿¿∆¿∆¿∆¿∆¿∆ ¿∆Ì¿«¿«¿«,¿«C¿«[¿«q¿«Ü¿«ù¿«µ¿«ÿ¿«Ú¿»¿»¿»¿»f¿»à¿»™¿»…¿… ¿…6¿…k¿…¢¿…⁄¿ ¿ ?¿ s¿ ®¿ ·¿À¿À\¿Àu¿À√¿À…¿ÀÕ¿ÀŒ¿Ã¿Ã¢¿Ã∂¿Ãœ¿ÃÁ¿Õ¿Õ¿Õ2¿ÕG¿Õ^¿Õv¿Õô¿Õ≥¿Õ“¿Õ”¿Õﬂ¿Œ¿Œ)¿ŒV¿ŒZ¿Œ[¿Œ±¿ŒÁ¿ŒË¿ŒÙ¿œ/¿œ{¿œß¿œÀ¿œˆ¿–.¿–2¿–3¿–?¿–ä¿–„¿–Á¿–Ë¿–Ù¿—A¿—c¿—Æ¿—¥¿—˚¿—ˇ¿“ ¿“e¿“÷¿“◊¿“„¿”.¿”S¿”û¿”¢¿”£¿‘¿‘É¿‘Ñ¿‘ê¿‘Æ¿‘›¿’ ¿’&¿’M¿’n¿’é¿’∞¿’Û¿’Ù¿÷¿÷F¿÷ë¿÷ó¿÷‰¿◊L¿◊R¿◊S¿◊ö¿◊Ÿ¿◊⁄¿ÿ¿ÿ$¿ÿI¿ÿn¿ÿì¿ÿ…¿ÿÎ¿Ÿ¿ŸC¿Ÿy¿Ÿ≠¿Ÿ·¿⁄¿⁄,¿⁄S¿⁄{¿⁄Å¿⁄Ç¿⁄Î¿€,¿€d¿€e¿€ã¿€Í¿‹0¿‹7¿‹8¿‹Q¿‹ü¿‹•¿‹©¿‹™¿‹∂¿‹◊¿›¿›-¿›T¿›~¿›¢¿›≈¿›ˆ¿›˜¿ﬁ¿ﬁL¿ﬁö¿ﬁ†¿ﬁæ¿ﬂ¿ﬂ"¿ﬂ^¿ﬂ◊¿ﬂ›¿‡¿‡¿‡<¿‡ë¿‡€¿‡‚¿‡„¿‡¸¿·J¿·P¿·T¿·U¿·È¿‚¿‚+¿‚E¿‚c¿‚w¿‚ò¿‚±¿‚ ¿‚ﬂ¿‚˝¿‚˛¿„
¿„b¿„µ¿„π¿„∫¿‰%¿‰ã¿‰ç¿‰é¿‰º¿‰˚¿‰¸¿ÂD¿ÂH¿Â|¿ÂÄ¿Â«¿Ê	¿ÊK¿Êd¿Ê£¿Ê©¿ÊÙ¿Á6¿ÁW¿ÁÄ¿ÁÅ¿Á¬¿Á»¿Ë¿ËV¿Ëw¿Ë°¿Ë¢¿ËÃ¿Ë“¿È!¿Èp¿Èπ¿ÈÈ¿ÈÍ¿Í,¿Í2¿Íi¿Í∏¿Î¿ÎP¿ÎV¿Î¶¿ÎÙ¿Ï!¿Ï'¿Ïw¿Ï¿¿ÏŸ¿Ïﬂ¿Ì.¿ÌC¿Ìo¿Ìp¿Ì¿¿Ì„¿Ìı¿Ìˆ¿Ó<¿ÓB¿Óê¿Ó¶¿Ó¿¿Ó¡¿Ô
¿Ô¿Ôa¿Ôì¿Ô≥¿Ôµ¿Ô∂¿¿P¿l¿r¿®¿æ¿ø¿À¿¸¿Ò¿Ò9¿Òm¿Òs¿Òâ¿ÒŸ¿Òˆ¿Ú¿Ú!¿Ú`¿Új¿Út¿Ú{¿Ú¿ÚÄ¿Úﬁ¿Û3¿Û4¿Û@¿Ûm¿ÛÖ¿Û™¿Ûﬁ¿Û‰¿ÛÂ¿Ù
¿Ù2¿Ùh¿Ùl¿Ùm¿ÙÕ¿ı¿ı¿ı ¿ı3¿ıK¿ı[¿ıs¿ıÜ¿ıê¿ı≥¿ı√¿ı«¿ı»¿ˆ¿ˆ8¿ˆ|¿ˆò¿ˆô¿ˆ≥¿ˆ¥¿ˆ¿¿ˆ€¿ˆÔ¿ˆˇ¿˜¿˜.¿˜8¿˜®¿˜¨¿˜≠¿˜π¿¯¿¯@¿¯B¿¯C¿¯ä¿¯é¿¯”¿˘¿˘9¿˘z¿˘¡¿˘›¿˙¿˙¿˙O¿˙U¿˙ô¿˙‡¿˚¿˚\¿˚ò¿˚∞¿˚±¿˚‡¿˚Ê¿¸1¿¸Å¿¸∆¿¸‡¿¸‚¿¸„¿˝C¿˝r¿˝s¿˝∑¿˝◊¿˝ÿ¿˝‰¿˛¿˛¿˛¿˛7¿˛R¿˛ñ¿˛ú¿˛”¿˛Ô¿ˇ¿ˇ"¿ˇu¿ˇº¿ˇ·¿ˇı¿ˇ˘¿ˇ˙¿ S¿ ç¿ é¿ ®¿ ™¿ ´¿ ¿¿ ƒ¿ ¿¿)¿/¿z¿≈¿ﬂ¿Â¿&¿,¿{¿î¿•¿”¿Ú¿¿b¿c¿ì¿∑¿·¿¿3¿Z¿Ñ¿Ö¿µ¿ª¿¿0¿E¿F¿Ö¿ã¿Ÿ¿%¿g¿~¿¿—¿Ï¿Ì¿¿%¿X¿^¿ã¿˛¿4¿h¿l¿m¿©¿Ø¿‚¿	¿	¿	l¿	r¿	Ø¿	˛¿
%¿
+¿
o¿
∏¿¿)¿=¿P¿f¿©¿≠¿Æ¿ ¿¿.¿A¿U¿t¿õ¿¢¿¶¿ß¿◊¿›¿&¿k¿è¿ï¿ª¿¿R¿ù¿È¿7¿á¿‘¿¿¿m¿ç¿¢¿⁄¿Ô¿¿¿*¿K¿S¿`¿w¿í¿°¿∏¿Î¿"¿d¿o¿w¿}¿Å¿Ç¿ª¿¡¿	¿¿2¿Ä¿¢¿µ¿ª¿—¿Á¿¿N¿~¿≠¿≥¿Í¿¿¿N¿o¿u¿à¿å¿ç¿ô¿º¿ﬁ¿Ò¿˜¿¿2¿T¿¿É¿Ñ¿ê¿Œ¿œ¿¿m¿â¿√¿ﬁ¿¯¿˛¿ˇ¿<¿r¿s¿ç¿⁄¿¿A¿B¿{¿¬¿√¿˙¿'¿(¿_¿å¿ç¿‹¿¿<¿B¿C¿[¿_¿`¿l¿Ø¿±¿≤¿˘¿˝¿L¿b¿†¿√¿ƒ¿¿'¿h¿≠¿ﬂ¿¿*¿.¿/¿i¿o¿®¿Ê¿+¿t¿æ¿Î¿ 3¿ n¿ ü¿ €¿ ˆ¿!¿!<¿!D¿!m¿!u¿!y¿!z¿!´¿!±¿!Í¿"'¿"b¿"ì¿"»¿"„¿"˝¿#7¿#?¿#h¿#p¿#t¿#u¿#…¿$¿$¿$k¿$∏¿$π¿%¿%a¿%b¿%ñ¿%≥¿%¬¿%√¿%‚¿%„¿&¿&¿&c¿&~¿&ñ¿&¶¿&«¿&⁄¿&‰¿&˘¿&˝¿&˛¿'N¿'q¿'w¿'ƒ¿(¿([¿(®¿(ˆ¿)¿)'¿)7¿)V¿)s¿)Ü¿)ê¿)†¿)§¿)•¿)¿*¿*a¿*}¿*¿*Ä¿*À¿*œ¿+¿+6¿+W¿+ê¿+ñ¿+Ê¿,8¿,R¿,X¿,¶¿,˘¿-:¿-w¿-ñ¿-¥¿-Ã¿-Â¿-¯¿.¿.A¿.B¿.ç¿.–¿/¿/L¿/Ñ¿/§¿/®¿/©¿/”¿/Ÿ¿0¿0%¿0&¿0Q¿0W¿0í¿0§¿0•¿0◊¿0›¿1¿1-¿1.¿1~¿1°¿1ß¿1Ú¿2¿2)¿2*¿2x¿2î¿2ö¿2Â¿32¿3C¿3I¿3ó¿3ø¿4¿4
¿4¿4k¿4â¿4ä¿4√¿4…¿5¿5k¿5Ö¿5ã¿5Ÿ¿6,¿6m¿6™¿6»¿6Ê¿6˛¿7¿7*¿7P¿7W¿7k¿7Å¿7∆¿7ﬁ¿8,¿80¿81¿8ì¿8Ê¿8Á¿9P¿9ﬁ¿9ﬂ¿9Ó¿9Ô¿:H¿:d¿:e¿:q¿:ú¿:ù¿:≠¿:Æ¿;¿;%¿;&¿;2¿;`¿;a¿;x¿;y¿;⁄¿;˛¿;ˇ¿<¿<N¿<O¿<[¿<ß¿<¬¿<√¿<œ¿=¿=R¿=l¿=r¿=ß¿=¬¿=»¿=…¿> ¿>¿>8¿>v¿>µ¿>Û¿?)¿?/¿?P¿?r¿?s¿?ù¿?ÿ¿?Í¿?Ó¿?Ô¿@Z¿@∞¿@≤¿@≥¿@Ë¿A¿A¿AW¿Aü¿A†¿Aÿ¿A‹¿B&¿B3¿Bv¿Bw¿B∏¿B‘¿C)¿C*¿Cy¿Cé¿Cë¿Cﬁ¿C˚¿C˛¿DJ¿DM¿D_¿Db¿Dm¿D°¿D§¿Dﬂ¿E¿E!¿E$¿EC¿Es¿Ex¿E¿EÇ¿E◊¿F-¿FY¿F\¿F≤¿FÊ¿G¿Gc¿Gß¿G‰¿G˙¿H&¿H;¿HO¿H|¿Hã¿HÀ¿H”¿H‡¿H˝¿I¿I	¿I¿I2¿IN¿IR¿Im¿Io¿Ip¿I≥¿I˘¿J/¿Jv¿J∫¿J˜¿K¿KH¿K]¿Kz¿Ká¿Kõ¿K—¿K‡¿L)¿L1¿L7¿L=¿LO¿Lf¿LÇ¿LÜ¿L°¿L£¿L§¿LÛ¿MA¿ME¿Mï¿MÂ¿N¿NU¿Nö¿Nõ¿N–¿NË¿NÈ¿O;¿OV¿OW¿Oc¿Oy¿O”¿OÏ¿P¿PK¿Pt¿Pz¿Pò¿Pú¿Pû       ,áﬁ™å–ÑÎ/// An immutable 32 bit color value in ARGB format.
///
/// Consider the light teal of the Flutter logo. It is fully opaque, with a red
/// channel value of 0x42 (66), a green channel value of 0xA5 (165), and a blue
/// channel value of 0xF5 (245). In the common "hash syntax" for color values,
/// it would be described as `#42A5F5`.
///
/// Here are some ways it could be constructed:
///
/// ```dart
/// Color c1 = const Color(0xFF42A5F5);
/// Color c2 = const Color.fromARGB(0xFF, 0x42, 0xA5, 0xF5);
/// Color c3 = const Color.fromARGB(255, 66, 165, 245);
/// Color c4 = const Color.fromRGBO(66, 165, 245, 1.0);
/// ```
///
/// If you are having a problem with `Color` wherein it seems your color is just
/// not painting, check to make sure you are specifying the full 8 hexadecimal
/// digits. If you only specify six, then the leading two digits are assumed to
/// be zero, which means fully-transparent:
///
/// ```dart
/// Color c1 = const Color(0xFFFFFF); // fully transparent white (invisible)
/// Color c2 = const Color(0xFFFFFFFF); // fully opaque white (visible)
/// ```
///
/// See also:
///
///  * [Colors](https://api.flutter.dev/flutter/material/Colors-class.html), which
///    defines the colors found in the Material Design specification. å⁄Ç— è}èÇÇ|/// Construct a color from the lower 32 bits of an [int].
///
/// The bits are interpreted as follows:
///
/// * Bits 24-31 are the alpha value.
/// * Bits 16-23 are the red value.
/// * Bits 8-15 are the green value.
/// * Bits 0-7 are the blue value.
///
/// In other words, if AA is the alpha value in hex, RR the red value in hex,
/// GG the green value in hex, and BB the blue value in hex, a color can be
/// expressed as `const Color(0xAARRGGBB)`.
///
/// For example, to get a fully opaque orange, you would use `const
/// Color(0xFFFF9000)` (`FF` for the alpha, `FF` for the red, `90` for the
/// green, and `00` for the blue).èÉ	èà  èñèêèûèòè†èØÇÇëvëwëÅ£/// Construct a color from the lower 8 bits of four integers.
///
/// * `a` is the alpha value, with 0 being transparent and 255 being fully
///   opaque.
/// * `r` is [red], from 0 to 255.
/// * `g` is [green], from 0 to 255.
/// * `b` is [blue], from 0 to 255.
///
/// Out of range values are brought into range using modulo 255.
///
/// See also [fromRGBO], which takes the alpha value as a floating point
/// value.ëÄëÖ  ëáëå  ëéëì  ëïëö  -ë®ë¢í$ë™í"íë‡ëæë´ëºë∑ë¨ëµëØë≠ë±ë∫ëÕëﬁëŸëŒë◊ë—ëœë”ë‹ëÔëˇë˚ëë˘ëÛëÒëıë˛íí!ííííííí í&í5É î!î"î*Å /// Create a color from red, green, blue, and opacity, similar to `rgba()` in CSS.
///
/// * `r` is [red], from 0 to 255.
/// * `g` is [green], from 0 to 255.
/// * `b` is [blue], from 0 to 255.
/// * `opacity` is alpha channel of this color as a double, with 0.0 being
///   transparent and 1.0 being fully opaque.
///
/// Out of range values are brought into range using modulo 255.
///
/// See also [fromARGB], which takes the opacity as an integer value.î+î0  î2î7  î9î>  î@îH  3î\îVï(î^ï&îÚîºîÜî_îÑîî`î}îwîaîuîqîjîbîlîtîyîÇîñî∫îµîóî≥î≠îòîØî∏îÃîÔîÎîÕîÈî„îŒîÂîÓïï%ï!ïïïïïï$ï*ï9Åñ?ÄÎ/// A 32 bit value representing this color.
///
/// The bits are assigned as follows:
///
/// * Bits 24-31 are the alpha value.
/// * Bits 16-23 are the red value.
/// * Bits 8-15 are the green value.
/// * Bits 0-7 are the blue value. ñIÄ‹óÄß/// The alpha channel of this color in an 8 bit value.
///
/// A value of 0 means this color is fully transparent. A value of 255 means
/// this color is fully opaque.   ó)Äœó‡Ä£/// The alpha channel of this color as a double.
///
/// A value of 0.0 means this color is fully transparent. A value of 1.0 means
/// this color is fully opaque.   ó¸aò;4/// The red channel of this color in an 8 bit value.   òadò¢6/// The green channel of this color in an 8 bit value.   ò…bô	5/// The blue channel of this color in an 8 bit value.   ±Y/±m   ±Y±Zô/Å	ôÚÄ¥/// Returns a new color that matches this color with the alpha channel
/// replaced with `a` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. ô¸ö   ö<ÅUõÄ∆/// Returns a new color that matches this color with the alpha channel
/// replaced with the given `opacity` (which ranges from 0.0 to 1.0).
///
/// Out of range values will have unexpected effects. õõ%   õïÅúVÄ≤/// Returns a new color that matches this color with the red channel replaced
/// with `r` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. ú^úc   ú†Å	ùcÄ¥/// Returns a new color that matches this color with the green channel
/// replaced with `g` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. ùmùr   ù≠ÅûoÄ≥/// Returns a new color that matches this color with the blue channel replaced
/// with `b` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. ûxû}   û˜Ä≈ü  üü&   ü¿ÇK†ŒÄ˙/// Returns a brightness value between 0 for darkest and 1 for lightest.
///
/// Represents the relative luminance of the color. This value is computationally
/// expensive to calculate.
///
/// See <https://en.wikipedia.org/wiki/Relative_luminance>.   ¢áAßÑ«/// Linearly interpolate between two colors.
///
/// This is intended to be fast but as a result may be ugly. Consider
/// [HSVColor] or writing custom logic for interpolating colors.
///
/// If either color is null, this function linearly interpolates from a
/// transparent instance of the other color. This is usually preferable to
/// interpolating from [material.Colors.transparent] (`const
/// Color(0x00000000)`), which is specifically transparent _black_.
///
/// The `t` argument represents position on the timeline, with 0.0 meaning
/// that the interpolation has not started, returning `a` (or something
/// equivalent to `a`), 1.0 meaning that the interpolation has finished,
/// returning `b` (or something equivalent to `b`), and values in between
/// meaning that the interpolation is at the relevant point on the timeline
/// between `a` and `b`. The interpolation can be extrapolated beyond 0.0 and
/// 1.0, so negative values and values greater than 1.0 are valid (and can
/// easily be generated by curves such as [Curves.elasticInOut]). Each channel
/// will be clamped to the range 0 to 255.
///
/// Values for `t` are usually obtained from an [Animation<double>], such as
/// an [AnimationController]. ßß  ß ß(  ß*ß2   ©TÜ ´hÅˆ/// Combine the foreground color as a transparent color over top
/// of a background color, and return the resulting combined color.
///
/// This uses standard alpha blending ("SRC over DST") rules to produce a
/// blended color from two colors. This can be used as a performance
/// enhancement when trying to avoid needless alpha blending compositing
/// operations for two things that are solid colors with the same shape, but
/// overlay each other: instead, just paint one with the combined color. ´s´z  ´Ö´å   ØxÄÌ∞w/// Returns an alpha value representative of the provided [opacity] value.
///
/// The [opacity] value may not be null. ∞∞   ∞iÄÏ∞É  ∞Ü∞é  ∞i∞j±åW±ü   ±å±ç ¿ ¨Ö¿ B·¿ ≠6Ä™/// A description of the style to use when drawing on a [Canvas].
///
/// Most APIs on [Canvas] take a [Paint] object to describe the style
/// to use for that operation. ¿ ≠@f ¿ ≠û¿ ≠£Y/// Constructs an empty [Paint] object with all fields initialized to
/// their defaults.  $¿ ∞ÜL¿ ∞± 	¿ ∞Ü¿ ∞á¿ ∞ç¿ ∞û¿ ∞é¿ ∞π¿ ∞¡¿ ∞—¿ ∞¬¿ ∞◊'¿ ∞Ë ¿ ∞˝¿ ±!¿ ± ¿ ±"¿ ±'%¿ ±8 ¿ ±K¿ ±P!¿ ±a ¿ ±p¿ ±u'¿ ±Ü ¿ ±õ¿ ±†%¿ ±± ¿ ±ƒ¿ ±…&¿ ±⁄ ¿ ±Ó¿ ±Û,¿ ≤ ¿ ≤¿ ≤#)¿ ≤4 ¿ ≤K¿ ≤P&¿ ≤a ¿ ≤u¿ ≤z0¿ ≤ã ¿ ≤®¿ ≤Æ,¿ ≤ø ¿ ≤ÿ¿ ≤ﬁ(¿ ≤Ô ¿ ≥¿ ≥>¿ ≥ ¿ ≥E¿ ≥2¿ ≥H¿ ≥M2¿ ≥^ ¿ ≥{¿ ≥n¿ ≥~¿ ≥É:¿ ≥î ¿ ≥π¿ ≥®¿ ≥º¿ ≥¡2¿ ≥“ ¿ ≥Ô¿ ≥‚¿ ≥Ú¿ ≥˜>¿ ¥ ¿ ¥1¿ ¥¿ ¥4¿ ¥9:¿ ¥J ¿ ¥o¿ ¥^¿ ¥r¿ ¥w<¿ ¥à ¿ ¥Ø¿ ¥ù¿ ¥≤¿ ¥∑H¿ ¥» ¿ ¥˚¿ ¥„¿ ¥˛¿ µB¿ µ ¿ µA¿ µ,¿ µD¿ µI<¿ µZ ¿ µÅ¿ µo¿ µÑ¿ µâN¿ µö ¿ µ”¿ µ∏¿ µ÷¿ µ€F¿ µÏ ¿ ∂¿ ∂¿ ∂ ¿ ∂%>¿ ∂6 ¿ ∂_¿ ∂L¿ ∂b¿ ∂©%¿ ∂∫ ¿ ∂Ã¿ ∑Q3¿ ∑| ¿ ∑Q¿ ∑R¿ ∑X¿ ∑i¿ ∑Y¿ ∑ˇ"¿ ∏ ¿ ∏ ¿ ∏%'¿ ∏6 ¿ ∏K¿ ∏P'¿ ∏a ¿ ∏v¿ ∏{"¿ ∏å ¿ ∏ú¿ ∫Ë,¿ ∫˘ ¿ ª
¿ æ=¿ æ  ¿ æ5¿ æ>¿ æ?¿ æF¿ æG¿ ÕF3¿ ÕZ ¿ Õv¿ ∏–Ä”¿ πKi/// Whether to apply anti-aliasing to lines and images drawn on the
/// canvas.
///
/// Defaults to true.   ¿ π¶Å¿ π™  ¿ π∂
¿ πº   ¿ ªÇ'¿ º¿ÅÑ/// The color to use when stroking or filling a shape.
///
/// Defaults to opaque black.
///
/// See also:
///
///  * [style], which controls whether to stroke or fill (or both).
///  * [colorFilter], which overrides [color].
///  * [shader], which overrides [color] with more elaborate effects.
///
/// This color is not used when compositing. To colorize a layer, use
/// [colorFilter].   ¿ ΩCÄê¿ ΩG  ¿ ΩM¿ ΩT   ¿ æQÉú¿ ¡VÇ“/// A blend mode to apply when a shape is drawn or a layer is composited.
///
/// The source colors are from the shape being drawn (e.g. from
/// [Canvas.drawPath]) or layer being composited (the graphics that were drawn
/// between the [Canvas.saveLayer] and [Canvas.restore] calls), after applying
/// the [colorFilter], if any.
///
/// The destination colors are from the background onto which the shape or
/// layer is being composited.
///
/// Defaults to [BlendMode.srcOver].
///
/// See also:
///
///  * [Canvas.saveLayer], which uses its [Paint]'s [blendMode] to composite
///    the layer when [Canvas.restore] is called.
///  * [BlendMode], which discusses the user of [Canvas.saveLayer] with
///    [blendMode].   ¿ ¡Ä†¿ ¡Ù  ¿ ¡˛¿ ¬	   ¿ ¬îÄ·¿ √k/// Whether to paint inside shapes, the edges of shapes, or both.
///
/// Defaults to [PaintingStyle.fill].   ¿ √xÄá¿ √|  ¿ √Ç¿ √ë   ¿ ƒÅi¿ ≈Ä˛/// How wide to make edges drawn when [style] is set to
/// [PaintingStyle.stroke]. The width is given in logical pixels measured in
/// the direction orthogonal to the direction of the path.
///
/// Defaults to 0.0, which correspond to a hairline width.   ¿ ≈oÄã¿ ≈s  ¿ ≈¿ ≈á   ¿ ≈˛Å¿ ∆µÄ†/// The kind of finish to place on the end of lines drawn when
/// [style] is set to [PaintingStyle.stroke].
///
/// Defaults to [StrokeCap.butt], i.e. no caps.   ¿ «Äã¿ «  ¿ «'¿ «2   ¿ «®Ñ—¿ ÃÑ+/// The kind of finish to place on the joins between segments.
///
/// This applies to paths drawn when [style] is set to [PaintingStyle.stroke],
/// It does not apply to points drawn as lines with [Canvas.drawPoints].
///
/// Defaults to [StrokeJoin.miter], i.e. sharp corners.
///
/// Some examples of joins:
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/bevel_join.mp4}
///
/// The centers of the line segments are colored in the diagrams above to
/// highlight the joins, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///  * [strokeMiterLimit] to control when miters are replaced by bevels when
///    this is set to [StrokeJoin.miter].
///  * [strokeCap] to control what is drawn at the ends of the stroke.
///  * [StrokeJoin] for the definitive list of stroke joins.   ¿ Ã|Äé¿ ÃÄ  ¿ Ãã¿ Ãó   ¿ Õ~Ör¿ “ëÑ”/// The limit for miters to be drawn on segments when the join is set to
/// [StrokeJoin.miter] and the [style] is set to [PaintingStyle.stroke]. If
/// this limit is exceeded, then a [StrokeJoin.bevel] join will be drawn
/// instead. This may cause some 'popping' of the corners of a path if the
/// angle between line segments is animated, as seen in the diagrams below.
///
/// This limit is expressed as a limit on the length of the miter.
///
/// Defaults to 4.0.  Using zero as a limit will cause a [StrokeJoin.bevel]
/// join to be used all the time.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_0_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_6_join.mp4}
///
/// The centers of the line segments are colored in the diagrams above to
/// highlight the joins, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///  * [strokeJoin] to control the kind of finish to place on the joins
///    between segments.
///  * [strokeCap] to control what is drawn at the ends of the stroke.   ¿ “ÛÄ±¿ “˜  ¿ ”¿ ”   ¿ ”®ÇW¿ ‘pÄØ/// A mask filter (for example, a blur) to apply to a shape after it has been
/// drawn but before it has been composited into the image.
///
/// See [MaskFilter] for details.   ¿ ÷Ç∞¿ ÷  ¿ ÷¿ ÷   ¿ ÿ∂ÅÏ¿ ⁄5Å/// Controls the performance vs quality trade-off to use when sampling bitmaps,
/// as with an [ImageShader], or when drawing images, as with [Canvas.drawImage],
/// [Canvas.drawImageRect], [Canvas.drawImageNine] or [Canvas.drawAtlas].
///
/// Defaults to [FilterQuality.none].   ¿ ⁄•Äó¿ ⁄©  ¿ ⁄∑¿ ⁄∆   ¿ €@Å»¿ ‹ÃÅk/// The shader to use when stroking or filling a shape.
///
/// When this is null, the [color] is used instead.
///
/// See also:
///
///  * [Gradient], a shader that paints a color gradient.
///  * [ImageShader], a shader that tiles an [Image].
///  * [colorFilter], which overrides [shader].
///  * [color], which is used if [shader] and [colorFilter] are null.   ¿ ›ÅÔ¿ ›  ¿ ›¿ ›   ¿ ﬁ˛Åv¿ ﬂÍÄŒ/// A color filter to apply when a shape is drawn or when a layer is
/// composited.
///
/// See [ColorFilter] for details.
///
/// When a shape is being drawn, [colorFilter] overrides [color] and [shader].   ¿ ‡wÅ<¿ ‡{  ¿ ‡á¿ ‡ï   ¿ ·∑Çà¿ „µÅ»/// The [ImageFilter] to use when drawing raster images.
///
/// For example, to blur an image using [Canvas.drawImage], apply an
/// [ImageFilter.blur]:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   canvas.drawImage(
///     _image,
///     ui.Offset.zero,
///     Paint()..imageFilter = ui.ImageFilter.blur(sigmaX: 0.5, sigmaY: 0.5),
///   );
/// }
/// ```
///
/// See also:
///
///  * [MaskFilter], which is used for drawing geometry.   ¿ ‰BÅ∑¿ ‰F  ¿ ‰R¿ ‰`   ¿ Â˝Ån¿ ÁÅ/// Whether the colors of the image are inverted when drawn.
///
/// Inverting the colors of an image applies a new color filter that will
/// be composed with any user provided color filters. This is primarily
/// used for implementing smart invert on iOS.   ¿ Ánl¿ Ár  ¿ Á
¿ ÁÖ   ¿ ∑âr¿ ∑ó    ¿ ÁﬁáÜ¿ ÁÒ   ¿ Áﬁ¿ Áﬂ ¿ ˇ¯¶h¿ùÑû/// Opaque handle to raw decoded image data (pixels).
///
/// To obtain an [Image] object, use the [ImageDescriptor] API.
///
/// To draw an [Image], use one of the methods on the [Canvas] class, such as
/// [Canvas.drawImage].
///
/// A class or method that receives an image object must call [dispose] on the
/// handle when it is no longer needed. To create a shareable reference to the
/// underlying image, call [clone]. The method or object that receives
/// the new instance will then be responsible for disposing it, and the
/// underlying image itself will be disposed when all outstanding handles are
/// disposed.
///
/// If `dart:ui` passes an `Image` object and the recipient wishes to share
/// that handle with other callers, [clone] must be called _before_ [dispose].
/// A handle that has been disposed cannot create new handles anymore.
///
/// See also:
///
///  * [Image](https://api.flutter.dev/flutter/widgets/Image-class.html), the class in the [widgets] library.
///  * [ImageDescriptor], which allows reading information about the image and
///    creating a codec to decode it.
///  * [instantiateImageCodec], a utility method that wraps [ImageDescriptor]. ¿ßÄ¡¿¨¿≠¿Æ ¿Ø¿µ  ¿º
¿¬  ¿»¿Œ   ¿ç/¿∂ ¿ç¿é¿î¿•¿ï¿¡Å¿ŒÄÁ/// A callback that is invoked to report an image creation.
///
/// It's preferred to use [MemoryAllocations] in flutter/foundation.dart
/// than to use [onCreate] directly because [MemoryAllocations]
/// allows multiple callbacks. ¿€Å¿ÍÄÈ/// A callback that is invoked to report the image disposal.
///
/// It's preferred to use [MemoryAllocations] in flutter/foundation.dart
/// than to use [onDispose] directly because [MemoryAllocations]
/// allows multiple callbacks. ¿¯¿  ¿S¿bA/// The number of image pixels along the image's horizontal axis. ¿lR¿∏?/// The number of image pixels along the image's vertical axis. ¿√¿» ¿‘¿Åï¿æÄ•/// Whether this reference to the underlying image is [dispose]d.
///
/// This only returns a valid value if asserts are enabled, and must not be
/// used otherwise.   ¿nÉê¿’ÅÃ/// The color space that is used by the [Image]'s colors.
///
/// This value is a consequence of how the [Image] has been created.  For
/// example, loading a PNG that is in the Display P3 color space will result
/// in a [ColorSpace.extendedSRGB] image.
///
/// On rendering backends that don't support wide gamut colors (anything but
/// iOS impeller), wide gamut images will still report [ColorSpace.sRGB] if
/// rendering wide gamut colors isn't supported.   ¿›É&¿
›ÅÊ/// Release this handle's claim on the underlying Image. This handle is no
/// longer usable after this method is called.
///
/// Once all outstanding handles have been disposed, the underlying image will
/// be disposed as well.
///
/// In debug mode, [debugGetOpenHandleStackTraces] will return a list of
/// [StackTrace] objects from all open handles' creation points. This is
/// useful when trying to determine what parts of the program are keeping an
/// image resident in memory.   ¿†É ¿ÀÅÕ/// Converts the [Image] object into a byte array.
///
/// The [format] argument specifies the format in which the bytes will be
/// returned.
///
/// Using [ImageByteFormat.rawRgba] on an image in the color space
/// [ColorSpace.extendedSRGB] will result in the gamut being squished to fit
/// into the sRGB gamut, resulting in the loss of wide-gamut colors.
///
/// Returns a future that completes with the binary image data or an error
/// if encoding fails. ¿◊0¿Ë  ¿¿ˇ¿ ¿Å¢¿ÕÄ∞/// If asserts are enabled, returns the [StackTrace]s of each open handle from
/// [clone], in creation order.
///
/// If asserts are disabled, this method always returns null.   ¿®å‡¿!Èä¢/// Creates a disposable handle to this image.
///
/// Holders of an [Image] must dispose of the image when they no longer need
/// to access it or draw it. However, once the underlying image is disposed,
/// it is no longer possible to use it. If a holder of an image needs to share
/// access to that image with another object or method, [clone] creates a
/// duplicate handle. The underlying image will only be disposed once all
/// outstanding handles are disposed. This allows for safe sharing of image
/// references while still disposing of the underlying resources when all
/// consumers are finished.
///
/// It is safe to pass an [Image] handle to another object or method if the
/// current holder no longer needs it.
///
/// To check whether two [Image] references are referring to the same
/// underlying image memory, use [isCloneOf] rather than the equality operator
/// or [identical].
///
/// The following example demonstrates valid usage.
///
/// ```dart
/// import 'dart:async';
/// import 'dart:typed_data';
/// import 'dart:ui';
///
/// Future<Image> _loadImage(int width, int height) {
///   final Completer<Image> completer = Completer<Image>();
///   decodeImageFromPixels(
///     Uint8List.fromList(List<int>.filled(width * height * 4, 0xFF)),
///     width,
///     height,
///     PixelFormat.rgba8888,
///     // Don't worry about disposing or cloning this image - responsibility
///     // is transferred to the caller, and that is safe since this method
///     // will not touch it again.
///     (Image image) => completer.complete(image),
///   );
///   return completer.future;
/// }
///
/// Future<void> main() async {
///   final Image image = await _loadImage(5, 5);
///   // Make sure to clone the image, because MyHolder might dispose it
///   // and we need to access it again.
///   final MyImageHolder holder = MyImageHolder(image.clone());
///   final MyImageHolder holder2 = MyImageHolder(image.clone());
///   // Now we dispose it because we won't need it again.
///   image.dispose();
///
///   final PictureRecorder recorder = PictureRecorder();
///   final Canvas canvas = Canvas(recorder);
///
///   holder.draw(canvas);
///   holder.dispose();
///
///   canvas.translate(50, 50);
///   holder2.draw(canvas);
///   holder2.dispose();
/// }
///
/// class MyImageHolder {
///   MyImageHolder(this.image);
///
///   final Image image;
///
///   void draw(Canvas canvas) {
///     canvas.drawImage(image, Offset.zero, Paint());
///   }
///
///   void dispose() => image.dispose();
/// }
/// ```
///
/// The returned object behaves identically to this image. Calling
/// [dispose] on it will only dispose the underlying native resources if it
/// is the last remaining handle.   ¿#åÇõ¿%ˆÇR/// Returns true if `other` is a [clone] of this and thus shares the same
/// underlying image memory, even if this or `other` is [dispose]d.
///
/// This method may return false for two images that were decoded from the
/// same underlying asset, if they are not sharing the same memory. For
/// example, if the same file is decoded using [instantiateImageCodec] twice,
/// or the same bytes are decoded using [decodeImageFromPixels] twice, there
/// will be two distinct [Image]s that render the same but do not share
/// underlying memory, and so will not be treated as clones of each other. ¿& ¿&   ¿&+3¿&>   ¿&+¿&, ¿&báÿ¿&á  ¿'å'¿'Æ¿'Ø¿'∞  ¿'å¿'ç¿'ì¿'§¿'î¿+¿+# ¿+/¿-o%¿-Ä ¿-í¿-ì¿-ã¿-ë¿-å¿'∑f¿(   ¿'∑¿'∏¿'æ¿'‹¿'≈¿'ø¿'Õ¿'€¿'Œ¿'’¿'⁄¿'÷¿'›¿(¿'‰¿'ﬁ¿'Ê¿'¸¿'ˆ¿'˛¿(!h¿(Ç   ¿(!¿("¿((¿(F¿(/¿()¿(7¿(E¿(8¿(?¿(D¿(@¿(G¿(m¿(N¿(H¿(P¿(g¿(a¿(i¿-ôb¿-   ¿-ô¿-ö¿-†¿-æ¿-ß¿-°¿-Ø¿-Ω¿-∞¿-∑¿-º¿-∏¿-ø¿-€¿-∆¿-¿¿-»¿(çÅ°¿(ü  ¿(´0¿(º  ¿(ƒ¿(”¿(‘¿*2ÄË¿*’9/// Returns an error message on failure, null on success. ¿*·
¿*Ê  ¿*Ì+¿+  ¿*n¿*o¿*u¿*£¿*}¿*v¿*Ö¿*¢¿*Ü¿*ç¿*í¿*é¿*ï¿*ú¿*§¿*¿¿*´¿*•¿*≠¿+8Åd¿+=    ¿,†ÄÀ¿-`k/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿-¿-¿-¿-4¿-¿-¿-%¿-3¿-&¿--¿-2¿-.¿-5¿-N¿-<¿-6¿->¿-ˇ9¿.   ¿-ˇ¿. ¿&b¿&c¿&i¿&z¿&j¿/â_¿5ÓÜ /// Information for a single frame of an animation.
///
/// To obtain an instance of the [FrameInfo] interface, see
/// [Codec.getNextFrame].
///
/// The recipient of an instance of this class is responsible for calling
/// [Image.dispose] on [image]. To share the image with other interested
/// parties, use [Image.clone]. If the [FrameInfo] object itself is passed to
/// another method or object, that method or object must assume it is
/// responsible for disposing the image when done, and the passer must not
/// access the [image] after that point.
///
/// For example, the following code sample is incorrect:
///
/// ```dart
/// /// BAD
/// Future<void> nextFrameRoutine(ui.Codec codec) async {
///   final ui.FrameInfo frameInfo = await codec.getNextFrame();
///   _cacheImage(frameInfo);
///   // ERROR - _cacheImage is now responsible for disposing the image, and
///   // the image may not be available any more for this drawing routine.
///   _drawImage(frameInfo);
///   // ERROR again - the previous methods might or might not have created
///   // handles to the image.
///   frameInfo.image.dispose();
/// }
/// ```
///
/// Correct usage is:
///
/// ```dart
/// /// GOOD
/// Future<void> nextFrameRoutine(ui.Codec codec) async {
///   final ui.FrameInfo frameInfo = await codec.getNextFrame();
///   _cacheImage(frameInfo.image.clone(), frameInfo.duration);
///   _drawImage(frameInfo.image.clone(), frameInfo.duration);
///   // This method is done with its handle, and has passed handles to its
///   // clients already.
///   // The image will live until those clients dispose of their handles, and
///   // this one must not be disposed since it will not be used again.
///   frameInfo.image.dispose();
/// }
/// ``` ¿5¸Å¿6À¿6Ã¿6ÕÄª/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To obtain an instance of the [FrameInfo] interface, see
/// [Codec.getNextFrame].¿6œ¿6ﬁ  ¿6Á¿6ˆ   ¿7Äô¿7í{/// The duration this frame should be shown.
///
/// A zero duration indicates that the frame should be shown indefinitely. ¿7üÄ⁄¿8tÄæ/// The [Image] object for this frame.
///
/// This object must be disposed by the recipient of this frame info.
///
/// To share this image with other interested parties, use [Image.clone].    ¿8~Ñ>¿9lÄﬁ/// A handle to an image codec.
///
/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To obtain an instance of the [Codec] interface, see
/// [instantiateImageCodec].   ¿9v9¿9§#/// Number of frames in this image.   ¿9≥Ä¶¿:IÄÖ/// Number of times to repeat the animation.
///
/// * 0 when the animation should be played once.
/// * -1 for infinity repetitions.   ¿:]Åa¿;ØÅ//// Fetches the next animation frame.
///
/// Wraps back to the first frame after returning the last frame.
///
/// The returned future can complete with an error if the decoding has failed.
///
/// The caller of this method is responsible for disposing the
/// [FrameInfo.image] on the returned object.   ¿;¬Ä¯¿<∞Äﬁ/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).    ¿<æá5¿<…  ¿=—¿=›¿=ﬁ¿=ﬂ   ¿=Ê¿=Î  ¿>æ¿>√  ¿>D¿>   ¿>¿>¿>Iq¿>Æ   ¿>I¿>J¿>P¿>n¿>W¿>Q¿>_¿>m¿>`¿>g¿>l¿>h¿>o¿>ô¿>v¿>p¿>x¿>ì¿>ç¿>ï¿>ﬁS¿>Ú   ¿>ﬁ¿>ﬂ¿?5{¿?ü   ¿?5¿?6¿?<¿?Z¿?C¿?=¿?K¿?Y¿?L¿?S¿?X¿?T¿?[¿?ä¿?b¿?\¿?d¿?Ñ¿?~¿?Ü¿?¥Çı¿?“   ¿?¥¿?µ¿B≠Ä⁄¿CK9/// Returns an error message on failure, null on success. ¿CY,¿C~  ¿BÈ¿BÍ¿B¿C¿B¯¿BÒ¿C ¿C¿C¿C¿C¿C	¿C¿C¿C6¿C¿C¿C!¿Cãf¿CÁ   ¿Cã¿Cå¿Có¿Cò¿Cû¿Cª¿C§¿Cü¿C¨¿C∫¿C≠¿C¥¿Cπ¿Cµ¿Cº¿C’¿C√¿CΩ¿C≈ ¿c:Üj¿dMÅ/// A specification of the size to which an image should be decoded.
///
/// See also:
///
///  * [TargetImageSizeCallback], a callback that returns instances of this
///    class when consulted by image decoding methods such as
///    [instantiateImageCodecWithSize]. ¿daÅ# ¿e ¿eÄê/// Creates a new instance of this class.
///
/// The `width` and `height` may both be null, but if they're non-null, they
/// must be positive.¿e
¿e  ¿e¿e#  ¿e3¿e9¿eT¿eH¿e@¿e:¿eC¿eQ¿eK¿eS¿e_¿ee¿eÇ¿eu¿em¿ef¿ep¿e¿ex¿eÅ¿eàÅÂ¿ghÅ¬/// The width into which to load the image.
///
/// If this is non-null, the image will be decoded into the specified width.
/// If this is null and [height] is also null, the image will be decoded into
/// its intrinsic size. If this is null and [height] is non-null, the image
/// will be decoded into a width that maintains its intrinsic aspect ratio
/// while respecting the [height] value.
///
/// If this value is non-null, it must be positive. ¿grÅÊ¿iRÅ¬/// The height into which to load the image.
///
/// If this is non-null, the image will be decoded into the specified height.
/// If this is null and [width] is also null, the image will be decoded into
/// its intrinsic size. If this is null and [width] is non-null, the image
/// will be decoded into a height that maintains its intrinsic aspect ratio
/// while respecting the [width] value.
///
/// If this value is non-null, it must be positive.  ¿i]E¿ip   ¿i]¿i^ ¿ÉGÉò¿ÉßP/// A handle for the framework to hold and retain an engine layer across frames.    ¿É∑É&¿Ü”Ç¯/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// EngineLayers indirectly retain platform specific graphics resources. Some
/// of these resources, such as images, may be memory intensive. It is
/// important to dispose of EngineLayer objects that will no longer be used as
/// soon as possible to avoid retaining these resources until the next
/// garbage collection.
///
/// Once this EngineLayer is disposed, it is no longer eligible for use as a
/// retained layer, and must not be passed as an `oldLayer` to any of the
/// [SceneBuilder] methods which accept that parameter.
///
/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).    ¿Ü·ÅI¿ÜÏ  ¿á;}¿á≥¿á¥¿áµa/// This class is created by the engine, and should not be instantiated
/// or extended directly.    ¿áºl¿à   ¿áº¿áΩ¿á»¿á…¿áœ¿áÏ¿á’¿á–¿á›¿áÎ¿áﬁ¿áÂ¿áÍ¿áÊ¿áÌ¿à¿áÙ¿áÓ¿áˆ ¿à,∏X¿äÙÇ∏/// A complex, one-dimensional subset of a plane.
///
/// A path consists of a number of sub-paths, and a _current point_.
///
/// Sub-paths consist of segments of various types, such as lines,
/// arcs, or beziers. Sub-paths can be open or closed, and can
/// self-intersect.
///
/// Closed sub-paths enclose a (possibly discontiguous) region of the
/// plane based on the current [fillType].
///
/// The _current point_ is initially at the origin. After each
/// operation adding a segment to a sub-path, the current point is
/// updated to the end of that segment.
///
/// Paths can be drawn on canvases using [Canvas.drawPath], and can
/// used to create clip regions using [Canvas.clipPath]. ¿ä˝ ¿ã¿ã	   ¿ãÅi¿ãÙ¿ãı¿ã˘Ä¡/// Creates a copy of another [Path].
///
/// This copy is fast and does not require additional memory unless either
/// the `source` path or the path returned by this constructor are modified.¿ã˙¿å     ¿åãÄ£¿ç%ÄÇ/// Determines how the interior of this path is calculated.
///
/// Defaults to the non-zero winding rule, [PathFillType.nonZero].   ¿ç1!¿ç5  ¿ç>¿çL   ¿çVU¿çê2/// Starts a new sub-path at the given coordinate. ¿çó¿çü  ¿ç°¿ç©   ¿çØr¿ç¸E/// Starts a new sub-path at the given offset from the current point. ¿é	¿é  ¿é	¿é   ¿é%t¿é~O/// Adds a straight line segment from the current point to the given
/// point. ¿éÖ¿éç  ¿éè¿éó   ¿éùÄ£¿èt/// Adds a straight line segment from the current point to the point
/// at the given offset from the current point. ¿è*	¿è2  ¿è5	¿è=   ¿èDÅ¡¿ê«Åq/// Adds a quadratic bezier segment that curves from the current
/// point to the given point (x2,y2), using the control point
/// (x1,y1).
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_quadratic_to.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_quadratic_to_dark.png#gh-dark-mode-only) ¿êŸ	¿ê·  ¿ê‰	¿êÏ  ¿êÔ	¿ê˜  ¿ê˙	¿ë   ¿ë	Å'¿ëÍÄ”/// Adds a quadratic bezier segment that curves from the current
/// point to the point at the offset (x2,y2) from the current point,
/// using the control point at the offset (x1,y1) from the current
/// point. ¿í	¿í  ¿í	¿í  ¿í	¿í"  ¿í%	¿í-   ¿í4ÅŒ¿ì∏År/// Adds a cubic bezier segment that curves from the current point
/// to the given point (x3,y3), using the control points (x1,y1) and
/// (x2,y2).
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_cubic_to.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_cubic_to_dark.png#gh-dark-mode-only) ¿ì¿	¿ì»  ¿ìÀ	¿ì”  ¿ì÷	¿ìﬁ  ¿ì·	¿ìÈ  ¿ìÏ	¿ìÙ  ¿ì˜	¿ìˇ   ¿îÅ=¿îÒÄ›/// Adds a cubic bezier segment that curves from the current point
/// to the point at the offset (x3,y3) from the current point, using
/// the control points at the offsets (x1,y1) and (x2,y2) from the
/// current point. ¿ï	¿ï	  ¿ï	¿ï  ¿ï	¿ï  ¿ï"	¿ï*  ¿ï-	¿ï5  ¿ï8	¿ï@   ¿ïGÇb¿ókÇ/// Adds a bezier segment that curves from the current point to the
/// given point (x2,y2), using the control points (x1,y1) and the
/// weight w. If the weight is greater than 1, then the curve is a
/// hyperbola; if the weight equals 1, it's a parabola; and if it is
/// less than 1, it is an ellipse.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_conic_to.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_conic_to_dark.png#gh-dark-mode-only) ¿ós	¿ó{  ¿ó~	¿óÜ  ¿óâ	¿óë  ¿óî	¿óú  ¿óü¿óß   ¿ó≠Åœ¿ô6Åw/// Adds a bezier segment that curves from the current point to the
/// point at the offset (x2,y2) from the current point, using the
/// control point at the offset (x1,y1) from the current point and
/// the weight w. If the weight is greater than 1, then the curve is
/// a hyperbola; if the weight equals 1, it's a parabola; and if it
/// is less than 1, it is an ellipse. ¿ôF	¿ôN  ¿ôQ	¿ôY  ¿ô\	¿ôd  ¿ôg	¿ôo  ¿ôr¿ôz   ¿ôÄÉr¿ú©É/// If the `forceMoveTo` argument is false, adds a straight line
/// segment and an arc segment.
///
/// If the `forceMoveTo` argument is true, starts a new sub-path
/// consisting of an arc segment.
///
/// In either case, the arc segment consists of the arc that follows
/// the edge of the oval bounded by the given rectangle, from
/// startAngle radians around the oval up to startAngle + sweepAngle
/// radians around the oval, with zero radians being the point on
/// the right hand side of the oval that crosses the horizontal line
/// that intersects the center of the rectangle and with positive
/// angles going clockwise around the oval.
///
/// The line segment added if `forceMoveTo` is false starts at the
/// current point and ends at the start of the arc. ¿úØ	¿úµ  ¿ú∫¿ú¬  ¿úÕ¿ú’  ¿ú‡¿úÊ   ¿úˆÉ!¿üÑÇp/// Appends up to four conic curves weighted to describe an oval of `radius`
/// and rotated by `rotation` (measured in degrees and clockwise).
///
/// The first curve begins from the last point in the path and the last ends
/// at `arcEnd`. The curves follow a path in a direction determined by
/// `clockwise` and `largeArc` in such a way that the sweep angle
/// is always less than 360 degrees.
///
/// A simple line is appended if either radii are zero or the last
/// point in the path is `arcEnd`. The radii are scaled to fit the last path
/// point if both are greater than zero but too small to describe an arc.
/// ¿üè¿üó  ¿ü§¿ü¨  ¿ü≈¿üÕ  ¿ü‡¿üÊ  ¿ü˚¿†  ¿ü¥¿ü∫¿üª¿ü◊¿ü¿†¿†É£¿£Ç‹/// Appends up to four conic curves weighted to describe an oval of `radius`
/// and rotated by `rotation` (measured in degrees and clockwise).
///
/// The last path point is described by (px, py).
///
/// The first curve begins from the last point in the path and the last ends
/// at `arcEndDelta.dx + px` and `arcEndDelta.dy + py`. The curves follow a
/// path in a direction determined by `clockwise` and `largeArc`
/// in such a way that the sweep angle is always less than 360 degrees.
///
/// A simple line is appended if either radii are zero, or, both
/// `arcEndDelta.dx` and `arcEndDelta.dy` are zero. The radii are scaled to
/// fit the last path point if both are greater than zero but too small to
/// describe an arc. ¿£1¿£9  ¿£K¿£S  ¿£l¿£t  ¿£á¿£ç  ¿£¢¿£®  ¿£[¿£a¿£b¿£~¿£ó¿£≥¿£¬v¿§%Y/// Adds a new sub-path that consists of four lines that outline the
/// given rectangle. ¿§-	¿§3   ¿§<Å.¿•WÅ/// Adds a new sub-path that consists of a curve that forms the
/// ellipse that fills the given rectangle.
///
/// To add a circle, pass an appropriate rectangle as `oval`. [Rect.fromCircle]
/// can be used to easily describe the circle's center [Offset] and radius. ¿•_	¿•e   ¿•nÉË¿©Éé/// Adds a new sub-path with one arc segment that consists of the arc
/// that follows the edge of the oval bounded by the given
/// rectangle, from startAngle radians around the oval up to
/// startAngle + sweepAngle radians around the oval, with zero
/// radians being the point on the right hand side of the oval that
/// crosses the horizontal line that intersects the center of the
/// rectangle and with positive angles going clockwise around the
/// oval.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_add_arc.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_add_arc_dark.png#gh-dark-mode-only)
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_add_arc_ccw.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/path_add_arc_ccw_dark.png#gh-dark-mode-only) ¿©%	¿©+  ¿©0¿©8  ¿©C¿©K   ¿©ZÅX¿™ÜÅ/// Adds a new sub-path with a sequence of line segments that connect the given
/// points.
///
/// If `close` is true, a final line segment will be added that connects the
/// last point to the first point.
///
/// The `points` argument is interpreted as offsets from the origin. ¿™ë¿™ü  ¿™¶
¿™¨   ¿™∂Ä∞¿´PÄé/// Adds a new sub-path that consists of the straight lines and
/// curves needed to form the rounded rectangle described by the
/// argument. ¿´Y¿´`   ¿´jÅQ¿¨ÅÅ/// Adds the sub-paths of `path`, offset by `offset`, to this path.
///
/// If `matrix4` is specified, the path will be transformed by this matrix
/// after the matrix is translated by the given offset. The matrix is a 4x4
/// matrix stored in column major order. ¿¨â	¿¨è  ¿¨î¿¨ú  ¿¨§¿¨≤   ¿¨øÅ◊¿ÆUÅÇ/// Adds the sub-paths of `path`, offset by `offset`, to this path.
/// The current sub-path is extended with the first sub-path
/// of `path`, connecting them with a lineTo if necessary.
///
/// If `matrix4` is specified, the path will be transformed by this matrix
/// after the matrix is translated by the given `offset`.  The matrix is a 4x4
/// matrix stored in column major order. ¿Æd	¿Æj  ¿Æo¿Æw  ¿Æ¿Æç   ¿ÆöÄì¿Ø%ÄÅ/// Closes the last sub-path, as if a straight line had been drawn
/// from the current point to the first point of the sub-path.   ¿Ø1Ä±¿Ø⁄Äù/// Clears the [Path] object of all sub-paths, returning it to the
/// same state it had when it was created. The _current point_ is
/// reset to the origin.   ¿ØÊÅq¿±@ÅF/// Tests to see if the given point is within the path. (That is, whether the
/// point would be in the visible portion of the path if the path was used
/// with [Canvas.clipPath].)
///
/// The `point` argument is interpreted as an offset from the origin.
///
/// Returns true if the point is in the path, and false otherwise. ¿±I¿±Q   ¿±[Äâ¿±œj/// Returns a copy of the path with all the segments of every
/// sub-path translated by the given offset. ¿±’¿±›   ¿±ËÄî¿≤]k/// Returns a copy of the path with all the segments of every
/// sub-path transformed by the given matrix. ¿≤g¿≤t   ¿≤ÄÉ£¿∂É0/// Computes the bounding rectangle for this path.
///
/// A path containing only axis-aligned points on the same straight line will
/// have no area, and therefore `Rect.isEmpty` will return true for such a
/// path. Consider checking `rect.width + rect.height > 0.0` instead, or
/// using the [computeMetrics] API to check the path length.
///
/// For many more elaborate paths, the bounds may be inaccurate.  For example,
/// when a path contains a circle, the points used to compute the bounds are
/// the circle's implied control points, which form a square around the circle;
/// if the circle has a transformation applied using [transform] then that
/// square is rotated, and the (axis-aligned, non-rotated) bounding box
/// therefore ends up grossly overestimating the actual area covered by the
/// circle.   ¿∂'Çî¿∑pÅ0/// Combines the two paths according to the manner specified by the given
/// `operation`.
///
/// The resulting path will be constructed from non-overlapping contours. The
/// curve order is reduced where possible so that cubics may be turned into
/// quadratics, and quadratics maybe turned into lines. ¿∑x¿∑á  ¿∑ë
¿∑ó  ¿∑ù
¿∑£   ¿∏øá√¿¿WáM/// Creates a [PathMetrics] object for this path, which can describe various
/// properties about the contours of the path.
///
/// A [Path] is made up of zero or more contours. A contour is made up of
/// connected curves and segments, created via methods like [lineTo],
/// [cubicTo], [arcTo], [quadraticBezierTo], their relative counterparts, as
/// well as the add* methods such as [addRect]. Creating a new [Path] starts
/// a new contour once it has any drawing instructions, and another new
/// contour is started for each [moveTo] instruction.
///
/// A [PathMetric] object describes properties of an individual contour,
/// such as its length, whether it is closed, what the tangent vector of a
/// particular offset along the path is. It also provides a method for
/// creating sub-paths: [PathMetric.extractPath].
///
/// Calculating [PathMetric] objects is not trivial. The [PathMetrics] object
/// returned by this method is a lazy [Iterable], meaning it only performs
/// calculations when the iterator is moved to the next [PathMetric]. Callers
/// that wish to memoize this iterable can easily do so by using
/// [Iterable.toList] on the result of this method. In particular, callers
/// looking for information about how many contours are in the path should
/// either store the result of `path.computeMetrics().length`, or should use
/// `path.computeMetrics().toList()` so they can repeatedly check the length,
/// since calling `Iterable.length` causes traversal of the entire iterable.
///
/// In particular, callers should be aware that [PathMetrics.length] is the
/// number of contours, **not the length of the path**. To get the length of
/// a contour in a path, use [PathMetric.length].
///
/// If `forceClosed` is set to true, the contours of the path will be measured
/// as if they had been closed, even if they were not explicitly closed. ¿¿g¿¿m  ¿¿z ¿¿Ü•E¿¿ë  ¿¿“I ¿¿˙¿¡%/// Create a new empty [Path] object.  ¿¡Ä£¿¡Ω¿¡æ¿¡øÄé/// Avoids creating a new native backing for the path for methods that will
/// create it later, such as [Path.from], [shift] and [transform].   ¿¬éM¿¬´   ¿¬é¿¬è¿¬ﬁJ¿¬Ó  ¿¬˜¿√  ¿¬ﬁ¿¬ﬂ0¿¡∆V¿¬   ¿¡∆¿¡«¿¡Õ¿¡„¿¡”¿¡Œ¿¡€¿¡‚¿¡‹¿¡‰¿¡˚¿¡Î¿¡Â¿¡Ì¿¬ j¿¬u  ¿¬|¿¬Ç  ¿¬ ¿¬!¿¬'¿¬L¿¬-¿¬(¿¬5¿¬K¿¬6¿¬=¿¬B¿¬>¿¬E¿¬M¿¬c¿¬T¿¬N¿¬V¿√,p¿√ç   ¿√,¿√-¿√3¿√Q¿√:¿√4¿√B¿√P¿√C¿√J¿√O¿√K¿√R¿√|¿√Y¿√S¿√[¿√v¿√p¿√x¿√†ÄÉ¿ƒ  ¿ƒ¿ƒ  ¿√†¿√°¿√ß¿√À¿√≠¿√®¿√µ¿√ ¿√∂¿√Ω¿√¬¿√æ¿√≈¿√Ã¿√ˆ¿√”¿√Õ¿√’¿√¿√Í¿√Ú¿ƒ'Äì¿ƒü  ¿ƒ¶¿ƒÆ  ¿ƒ∞¿ƒ∏  ¿ƒ'¿ƒ(¿ƒ3¿ƒ4¿ƒ:¿ƒg¿ƒ@¿ƒ;¿ƒH¿ƒf¿ƒI¿ƒP¿ƒU¿ƒQ¿ƒX¿ƒ`¿ƒh¿ƒç¿ƒo¿ƒi¿ƒq¿ƒá¿ƒÅ¿ƒâ¿ƒæÄ•¿≈>  ¿≈M	¿≈U  ¿≈X	¿≈`  ¿ƒæ¿ƒø¿ƒ ¿ƒÀ¿ƒ—¿ƒ˛¿ƒ◊¿ƒ“¿ƒﬂ¿ƒ˝¿ƒ‡¿ƒÁ¿ƒÏ¿ƒË¿ƒÔ¿ƒ˜¿ƒˇ¿≈,¿≈¿≈ ¿≈¿≈&¿≈ ¿≈(¿≈gÄì¿≈ﬂ  ¿≈Ê¿≈Ó  ¿≈¿≈¯  ¿≈g¿≈h¿≈s¿≈t¿≈z¿≈ß¿≈Ä¿≈{¿≈à¿≈¶¿≈â¿≈ê¿≈ï¿≈ë¿≈ò¿≈†¿≈®¿≈Õ¿≈Ø¿≈©¿≈±¿≈«¿≈¡¿≈…¿≈˛Ä•¿∆~  ¿∆ç	¿∆ï  ¿∆ò	¿∆†  ¿≈˛¿≈ˇ¿∆
¿∆¿∆¿∆>¿∆¿∆¿∆¿∆=¿∆ ¿∆'¿∆,¿∆(¿∆/¿∆7¿∆?¿∆l¿∆F¿∆@¿∆H¿∆f¿∆`¿∆h¿∆ßÄ—¿«:  ¿«L	¿«T  ¿«W	¿«_  ¿«b	¿«j  ¿«m	¿«u  ¿∆ß¿∆®¿∆≥¿∆¥¿∆∫¿∆˜¿∆¿¿∆ª¿∆»¿∆ˆ¿∆…¿∆–¿∆’¿∆—¿∆ÿ¿∆‡¿∆Ë¿∆¿∆¯¿«(¿∆ˇ¿∆˘¿«¿«"¿«¿«$¿«|ÄË¿»  ¿»8	¿»@  ¿»C	¿»K  ¿»N	¿»V  ¿»Y	¿»a  ¿«|¿«}¿«à¿«â¿«è¿«Ã¿«ï¿«ê¿«ù¿«À¿«û¿«•¿«™¿«¶¿«≠¿«µ¿«Ω¿«≈¿«Õ¿»¿«‘¿«Œ¿«÷¿«ˇ¿«˘¿»¿»hÄ„¿…  ¿…		¿…  ¿…	¿…  ¿…	¿…'  ¿…*	¿…2  ¿…5	¿…=  ¿…@	¿…H  ¿»h¿»i¿»t¿»u¿»{¿»»¿»Å¿»|¿»â¿»«¿»ä¿»ë¿»ñ¿»í¿»ô¿»°¿»©¿»±¿»π¿»¡¿»…¿»Ô¿»–¿» ¿»“¿»È¿»„¿»Î¿…OÄÛ¿…  ¿  	¿   ¿ 	¿   ¿ 	¿   ¿ !	¿ )  ¿ ,	¿ 4  ¿ 7	¿ ?  ¿…O¿…P¿…[¿…\¿…b¿…Ø¿…h¿…c¿…p¿…Æ¿…q¿…x¿…}¿…y¿…Ä¿…à¿…ê¿…ò¿…†¿…®¿…∞¿…ﬁ¿…∑¿…±¿…π¿…ÿ¿…“¿…⁄¿ FÄœ¿ ◊  ¿ ﬂ	¿ Á  ¿ Í	¿ Ú  ¿ ı	¿ ˝  ¿À 	¿À  ¿À¿À  ¿ F¿ G¿ R¿ S¿ Y¿ û¿ _¿ Z¿ g¿ ù¿ h¿ o¿ t¿ p¿ w¿ ¿ á¿ è¿ ó¿ ü¿ ≈¿ ¶¿ †¿ ®¿ ø¿ π¿ ¡¿ÀÄﬂ¿À≤  ¿À¬	¿À   ¿ÀÕ	¿À’  ¿Àÿ	¿À‡  ¿À„	¿ÀÎ  ¿ÀÓ¿Àˆ  ¿À¿À¿À%¿À&¿À,¿Àq¿À2¿À-¿À:¿Àp¿À;¿ÀB¿ÀG¿ÀC¿ÀJ¿ÀR¿ÀZ¿Àb¿Àj¿Àr¿À†¿Ày¿Às¿À{¿Àö¿Àî¿Àú¿À¸Äﬁ¿Ã  ¿Ã	¿Ã  ¿Ã¿Ã&  ¿Ã1¿Ã9  ¿ÃD¿ÃJ  ¿À¸¿À˝¿ÃﬁÅ¿Õo  ¿Õv¿Õ~  ¿ÕÉ
¿Õã  ¿Õè¿Õó  ¿Õù¿Õ•  ¿Õ¨¿Õ¥  ¿Õø¿Õ«  ¿Õ“¿Õÿ  ¿Ãﬁ¿Ãﬂ¿ÃÂ¿Õ8¿ÃÎ¿ÃÊ¿ÃÛ¿Õ7¿ÃÙ¿Ã˚¿Õ ¿Ã¸¿Õ¿Õ¿Õ¿Õ¿Õ#¿Õ+¿Õ3¿Õ9¿Õ]¿Õ@¿Õ:¿ÕB¿ÕW¿ÕQ¿ÕY¿ÕËÅK¿Õ˘  ¿Œ¿Œ  ¿Œ¿Œ!  ¿Œ:¿ŒB  ¿ŒU¿Œ[  ¿Œp¿Œv  ¿ÕË¿ÕÈ¿Œ)¿Œ/¿Œ0¿ŒL¿Œe¿ŒÅ¿œ7Å¿œÀ  ¿œ◊¿œﬂ  ¿œÁ¿œÔ  ¿œ˜¿œˇ  ¿–¿–  ¿–¿–  ¿–(¿–.  ¿–7¿–=  ¿œ7¿œ8¿œ>¿œè¿œD¿œ?¿œL¿œé¿œM¿œT¿œY¿œU¿œ\¿œd¿œl¿œt¿œ|¿œÑ¿œä¿œê¿œπ¿œó¿œë¿œô¿œ≥¿œ≠¿œµ¿–KÅt¿–\  ¿–t¿–|  ¿–é¿–ñ  ¿–Ø¿–∑  ¿– ¿––  ¿–Â¿–Î  ¿–K¿–L¿–û¿–§¿–•¿–¡¿–⁄¿–ˆ¿—√ÅK¿“_  ¿“z¿“Ç  ¿“ê¿“ò  ¿“¶¿“Æ  ¿“º¿“ƒ  ¿““¿“⁄  ¿“È¿“Ô  ¿“˛¿”  ¿—√¿—ƒ¿— ¿“¿—–¿—À¿—ÿ¿“¿—Ÿ¿—‡¿—Â¿—·¿—Ë¿—¿—¯¿“ ¿“¿“¿“¿“¿“M¿“#¿“¿“%¿“G¿“A¿“I¿”ÄÖ¿”#  ¿”+	¿”1  ¿”¿”¿”õÄº¿‘  ¿‘!¿‘)  ¿‘.
¿‘6  ¿‘:¿‘B  ¿‘H¿‘P  ¿”õ¿”ú¿”¢¿”ﬂ¿”®¿”£¿”∞¿”ﬁ¿”±¿”∏¿”Ω¿”π¿”¿¿”»¿”–¿”ÿ¿”‡¿‘¿”Á¿”·¿”È¿‘ ¿”˙¿‘¿‘[ÄÖ¿‘l  ¿‘t	¿‘z  ¿‘[¿‘\¿‘‰Äº¿’a  ¿’j¿’r  ¿’w
¿’  ¿’É¿’ã  ¿’ë¿’ô  ¿‘‰¿‘Â¿‘Î¿’(¿‘Ò¿‘Ï¿‘˘¿’'¿‘˙¿’¿’¿’¿’	¿’¿’¿’!¿’)¿’O¿’0¿’*¿’2¿’I¿’C¿’K¿’§Ä¡¿’µ  ¿’º	¿’¬  ¿’«¿’œ  ¿’⁄¿’‚  ¿’§¿’•¿÷iÄ¿÷ı  ¿÷˝¿◊  ¿◊

¿◊  ¿◊¿◊  ¿◊$¿◊,  ¿◊3¿◊;  ¿◊F¿◊N  ¿÷i¿÷j¿÷p¿÷Ω¿÷v¿÷q¿÷~¿÷º¿÷¿÷Ü¿÷ã¿÷á¿÷é¿÷ñ¿÷û¿÷¶¿÷Æ¿÷∂¿÷æ¿÷„¿÷≈¿÷ø¿÷«¿÷›¿÷◊¿÷ﬂ¿◊]t¿◊n  ¿◊y¿◊á  ¿◊é
¿◊î  ¿◊]¿◊^¿◊’Äå¿ÿ5  ¿ÿA¿ÿN  ¿ÿU
¿ÿ[  ¿◊’¿◊÷¿◊‹¿ÿ¿◊‚¿◊›¿◊Í¿ÿ¿◊Î¿◊Ú¿◊˜¿◊Û¿◊˙¿ÿ¿ÿ¿ÿ#¿ÿ¿ÿ	¿ÿ¿ÿer¿ÿv  ¿ÿ¿ÿÜ  ¿ÿe¿ÿf¿ÿ€u¿Ÿ3  ¿Ÿ=¿ŸJ  ¿ÿ€¿ÿ‹¿ÿ‚¿Ÿ¿ÿË¿ÿ„¿ÿ¿Ÿ¿ÿÒ¿ÿ¯¿ÿ˝¿ÿ˘¿Ÿ ¿Ÿ¿Ÿ!¿Ÿ¿Ÿ	¿Ÿ¿ŸTÅS¿Ÿe  ¿Ÿm	¿Ÿs  ¿Ÿx¿ŸÄ  ¿Ÿà¿Ÿñ  ¿ŸT¿ŸU¿⁄´Äü¿€  ¿€"¿€/  ¿€4	¿€<  ¿€?	¿€G  ¿⁄´¿⁄¨¿⁄≤¿⁄Ó¿⁄∏¿⁄≥¿⁄¿¿⁄Ì¿⁄¡¿⁄»¿⁄Õ¿⁄…¿⁄–¿⁄◊¿⁄‹¿⁄ÿ¿⁄ﬂ¿⁄Á¿⁄Ô¿€¿⁄ˆ¿⁄¿⁄¯¿€NÄœ¿€Œ  ¿€·¿€Ó  ¿€Û	¿€˚  ¿€˛	¿‹  ¿‹	¿‹  ¿€N¿€O¿€U¿€ô¿€[¿€V¿€c¿€ò¿€d¿€k¿€p¿€l¿€s¿€z¿€¿€{¿€Ç¿€ä¿€í¿€ö¿€º¿€°¿€õ¿€£¿‹!Åg¿‹2  ¿‹A	¿‹G  ¿‹L¿‹T  ¿‹\¿‹j  ¿‹!¿‹"¿›åÄ≠¿ﬁ  ¿ﬁ¿ﬁ  ¿ﬁ#	¿ﬁ+  ¿ﬁ.	¿ﬁ6  ¿›å¿›ç¿›ì¿›œ¿›ô¿›î¿›°¿›Œ¿›¢¿›©¿›Æ¿›™¿›±¿›∏¿›Ω¿›π¿›¿¿›»¿›–¿›Ô¿›◊¿›—¿›Ÿ¿ﬁ=Ä€¿ﬁ√  ¿ﬁ‹¿ﬁÈ  ¿ﬁÓ	¿ﬁˆ  ¿ﬁ˘	¿ﬂ  ¿ﬂ¿ﬂ  ¿ﬁ=¿ﬁ>¿ﬁD¿ﬁà¿ﬁJ¿ﬁE¿ﬁR¿ﬁá¿ﬁS¿ﬁZ¿ﬁ_¿ﬁ[¿ﬁb¿ﬁi¿ﬁn¿ﬁj¿ﬁq¿ﬁy¿ﬁÅ¿ﬁâ¿ﬁ±¿ﬁê¿ﬁä¿ﬁí¿ﬂo¿ﬂÉ   ¿ﬂ¿ﬂ¿ﬂ(¿ﬂ)¿ﬂ/¿ﬂL¿ﬂ5¿ﬂ0¿ﬂ=¿ﬂK¿ﬂ>¿ﬂE¿ﬂJ¿ﬂF¿ﬂM¿ﬂq¿ﬂT¿ﬂN¿ﬂV¿ﬂk¿ﬂe¿ﬂm¿ﬂèo¿ﬂˆ   ¿ﬂè¿ﬂê¿ﬂõ¿ﬂú¿ﬂ¢¿ﬂø¿ﬂ®¿ﬂ£¿ﬂ∞¿ﬂæ¿ﬂ±¿ﬂ∏¿ﬂΩ¿ﬂπ¿ﬂ¿¿ﬂ‰¿ﬂ«¿ﬂ¡¿ﬂ…¿ﬂﬁ¿ﬂÿ¿ﬂ‡¿‡z¿‡  ¿‡¿‡$  ¿‡¿‡¿‡ÄÄå¿‡Ó  ¿‡¯¿·   ¿·¿·
  ¿‡Ä¿‡Å¿‡á¿‡¥¿‡ç¿‡à¿‡ï¿‡≥¿‡ñ¿‡ù¿‡¢¿‡û¿‡•¿‡≠¿‡µ¿‡‹¿‡º¿‡∂¿‡æ¿‡÷¿‡–¿‡ÿ¿·Ä∂¿·!  ¿·'¿·/  ¿·¿·¿· Äê¿‚/  ¿‚6¿‚<  ¿‚D	¿‚L  ¿‚O	¿‚W  ¿· ¿·À¿·—¿‚¿·◊¿·“¿·ﬂ¿‚¿·‡¿·Á¿·Ï¿·Ë¿·Ô¿·˜¿·ˇ¿‚¿‚¿‚¿‚¿‚¿‚^Äπ¿‚o  ¿‚y¿‚Ü  ¿‚^¿‚_¿„Äè¿„|  ¿„á¿„ç  ¿„ï¿„¢  ¿„¿„¿„"¿„O¿„(¿„#¿„0¿„N¿„1¿„8¿„=¿„9¿„@¿„H¿„P¿„j¿„W¿„Q¿„Y¿„ÆÄã¿„ø   ¿„Æ¿„Ø¿‰=g¿‰ó   ¿‰=¿‰>¿‰D¿‰c¿‰L¿‰E¿‰T¿‰b¿‰U¿‰\¿‰a¿‰]¿‰d¿‰~¿‰k¿‰e¿‰m¿‰®Ä®¿Â  ¿Â¿Â(  ¿Â.¿Â;  ¿ÂA¿ÂF  ¿‰®¿‰©¿‰Ø¿‰Ò¿‰µ¿‰∞¿‰Ω¿‰¿‰æ¿‰≈¿‰ ¿‰∆¿‰Õ¿‰‘¿‰Ÿ¿‰’¿‰‹¿‰„¿‰Ë¿‰‰¿‰Î¿‰Ú¿Â¿‰˘¿‰Û¿‰˚¿ÂTu¿Âl  ¿Â|¿ÂÇ  ¿ÂT¿ÂU¿Âè ¿ÂÕáD¿ÊÖÄ±/// The geometric description of a tangent: the angle at a point.
///
/// See also:
///  * [PathMetric.getTangentForOffset], which returns the tangent of an offset along a path. ¿ÊëÄá ¿ÊÙ¿Ê˚V/// Creates a [Tangent] with the given values.
///
/// The arguments must not be null.¿Ê¸¿Á  ¿Á¿Á   ¿ÁÅR¿Á˜¿Á¯¿ËÄ√/// Creates a [Tangent] based on the angle rather than the vector.
///
/// The [vector] is computed to be the unit vector at the given angle, interpreted
/// as clockwise radians from the x axis.¿Ë¿Ë
  ¿Ë¿Ë   ¿ËrÄ—¿È;Ä≥/// Position of the tangent.
///
/// When used with [PathMetric.getTangentForOffset], this represents the precise
/// position that the given offset along the path corresponds to. ¿ÈHÅ¿ÍGÄÁ/// The vector of the curve at [position].
///
/// When used with [PathMetric.getTangentForOffset], this is the vector of the
/// curve that is at the given offset along the path (i.e. the direction of the
/// curve at [position]). ¿ÍRÇΩ¿Ï‰Ç+/// The direction of the curve at [position].
///
/// When used with [PathMetric.getTangentForOffset], this is the angle of the
/// curve that is the given offset along the path (i.e. the direction of the
/// curve at [position]).
///
/// This value is in radians, with 0.0 meaning pointing along the x axis in
/// the positive x-axis direction, positive numbers pointing downward toward
/// the negative y-axis, i.e. in a clockwise direction, and negative numbers
/// pointing upward toward the positive y-axis, i.e. in a counter-clockwise
/// direction.     ¿ÌÑ#¿ÇÙ/// An iterable collection of [PathMetric] objects describing a [Path].
///
/// A [PathMetrics] object is created by using the [Path.computeMetrics] method,
/// and represents the path as it stood at the time of the call. Subsequent
/// modifications of the path do not affect the [PathMetrics] object.
///
/// Each path metric corresponds to a segment, or contour, of a path.
///
/// For example, a path consisting of a [Path.lineTo], a [Path.moveTo], and
/// another [Path.lineTo] will contain two contours and thus be represented by
/// two [PathMetric] objects.
///
/// This iterable does not memoize. Callers who need to traverse the list
/// multiple times, or who need to randomly access elements of the list, should
/// use [toList] on this object. ¿JÄÇ¿U¿V¿W ¿X	¿^  ¿c¿i  ¿Ö¿{¿á¿ô¿ö¿õ¿ ¿ú¿®¿…¿Æ¿©¿±¿æ¿–$¿Î  ¿˘;¿Ò   ¿˘¿˙  ¿Ò8É¬¿Òßh/// Used by [PathMetrics] to track iteration from one segment of a path to the
/// next for measurement. ¿Òﬁ(¿Ò¿ÒÒ¿ÒÚ ¿ÒÛ¿Ò˘   ¿Ú
¿Ú  ¿Ú%¿Ú8  ¿ÚIÅ¿Úd   ¿ÚI¿ÚJ¿Ù=Äª¿ÙN   ¿Ù=¿Ù> ¿Ù¸çk¿˜„Ç‡/// Utilities for measuring a [Path] and extracting sub-paths.
///
/// Iterate over the object returned by [Path.computeMetrics] to obtain
/// [PathMetric] objects. Callers that want to randomly access elements or
/// iterate multiple times should use `path.computeMetrics().toList()`, since
/// [PathMetrics] does not memoize.
///
/// Once created, the metrics are only valid for the path as it was specified
/// when [Path.computeMetrics] was called. If additional contours are added or
/// any contours are updated, the metrics need to be recomputed. Previously
/// created metrics will still refer to a snapshot of the path at the time they
/// were computed, rather than to the actual metrics for the new mutations to
/// the path. ¿˜ÚÄŒ¿˜¸¿˜˝¿˜˛ ¿˜ˇ¿¯  ¿¯¿¯¿¯¿¯%¿¯&¿¯,¿¯I¿¯-¿¯5¿¯6¿¯[¿¯R¿¯]¿¯e¿¯f¿¯n¿¯ã¿¯o¿¯w¿¯x¿¯°¿¯î¿¯£¿¯´¿¯¨¿¯ƒÅ+¿˘ÈÅ/// Return the total length of the current contour.
///
/// The length may be calculated from an approximation of the geometry
/// originally added. For this reason, it is not recommended to rely on
/// this property for mathematically correct lengths of common shapes. ¿˘ÙÅA¿˚-Å!/// Whether the contour is closed.
///
/// Returns true if the contour ends with a call to [Path.close] (which may
/// have been implied when using methods like [Path.addRect]) or if
/// `forceClosed` was specified as true in the call to [Path.computeMetrics].
/// Returns false otherwise. ¿˚:Ç‡¿˛Ç±/// The zero-based index of the contour.
///
/// [Path] objects are made up of zero or more contours. The first contour is
/// created once a drawing command (e.g. [Path.lineTo]) is issued. A
/// [Path.moveTo] command after a drawing command may create a new contour,
/// although it may not if optimizations are applied that determine the move
/// command did not actually result in moving the pen.
///
/// This property is only valid with reference to its original iterator and
/// the contours of the path at the time the path's metrics were computed. If
/// additional contours were added or existing contours updated, this metric
/// will be invalid for the current state of the path. ¿˛¿˛2   ¿˛?Ç,¿  Å£/// Computes the position of the current contour at the given offset, and the
/// angle of the path at that point.
///
/// For example, calling this method with a distance of 1.41 for a line from
/// 0.0,0.0 to 2.0,2.0 would give a point 1.0,1.0 and the angle 45 degrees
/// (but in radians).
///
/// Returns null if the contour has zero [length].
///
/// The distance is clamped to the [length] of the current contour. ¿ ¿    ¿ oÅÅ¿IÄÃ/// Given a start and end distance, return the intervening segment(s).
///
/// `start` and `end` are clamped to legal values (0..[length])
/// Begin the segment with a moveTo if `startWithMoveTo` is true. ¿U¿]  ¿c
¿k  ¿p¿v  ¿á¿Ùq¿   ¿Ù¿ı ¿iã¿t  ¿¶[ ¿¶¿≤ ¿≥¿¿  ¿≈¿À   ¿ŒÄØ¿eÄå/// The index of the current contour in the list of contours in the path.
///
/// [nextContour] will increment this to the zero based index.¿{¿| ¿Äî¿h  ¿u¿Ç  ¿á¿ç  ¿¿¿¿7¿¿¿¿6¿¿#¿*¿/¿+¿2¿8¿V¿?¿9¿A¿ùÄΩ¿§  ¿´¿∞   ¿^Äã¿œ  ¿◊¿‹  ¿^¿_¿e¿ã¿m¿f¿u¿ä¿v¿}¿Ç¿~¿Ö¿å¿ª¿ì¿ç¿ï¿µ¿Ø¿∑¿ÌÅÌ¿ˆ  ¿
¿  ¿¿$   ¿ﬁÄû¿N  ¿Y¿^  ¿k¿s  ¿ﬁ¿ﬂ¿Â¿¿Ì¿Ê¿ı¿¿ˆ¿˝¿¿˛¿¿¿¿5¿¿¿¿ÄÅ_¿Ö  ¿ë¿ñ  ¿£¿´  ¿±
¿π  ¿ƒ¿   ¿€¿„Ä€¿	a  ¿	n¿	t  ¿	|¿	Å  ¿	é¿	ñ  ¿	ú
¿	§  ¿	®¿	Æ  ¿„¿‰¿Í¿	,¿¿Î¿¯¿	+¿˘¿	 ¿	¿	¿	¿	¿	¿	¿	'¿	-¿	O¿	4¿	.¿	6¿	¬Äø¿	«  ¿	–¿	’   ¿
ÖÄà¿
Ò  ¿
˚¿   ¿
Ö¿
Ü¿
å¿
∞¿
í¿
ç¿
ö¿
Ø¿
õ¿
¢¿
ß¿
£¿
™¿
±¿
ﬂ¿
∏¿
≤¿
∫¿
Ÿ¿
”¿
€¿¿Äâ¿≈    ¿M}¿µ   ¿M¿N¿T¿q¿Z¿U¿b¿p¿c¿j¿o¿k¿r¿£¿y¿s¿{¿ù¿ó¿ü ¿ˇÜ|¿	Å/// A mask filter to apply to shapes as they are painted. A mask filter is a
/// function that takes a bitmap of color pixels, and returns another bitmap of
/// color pixels.
///
/// Instances of this class are used with [Paint.maskFilter] on [Paint] objects. ¿É¿Ú¿Û¿˜Ç•/// Creates a mask filter that takes the shape being drawn and blurs it.
///
/// This is commonly used to approximate shadows.
///
/// The `style` argument controls the kind of effect to draw; see [BlurStyle].
///
/// The `sigma` argument controls the size of the effect. It is the standard
/// deviation of the Gaussian blur to apply. The value must be greater than
/// zero. The sigma corresponds to very roughly half the radius of the effect
/// in pixels.
///
/// A blur is an expensive operation and should therefore be used sparingly.
///
/// The arguments must not be null.
///
/// See also:
///
///  * [Canvas.drawShadow], which is a more efficient way to draw shadows.¿˝¿  ¿¿   ¿#¿3  ¿=¿J  ¿Ê¿˜ ¿¿¿! ¿-¿ﬂ<¿Û   ¿ﬂ¿‡¿GÄî¿a  ¿d¿l  ¿G¿H¿Z¿2   ¿¿  ¿}ôk¿HÅƒ/// A description of a color filter to apply when drawing a shape or compositing
/// a layer with a particular [Paint]. A color filter is a function that takes
/// two colors, and outputs one color. When applied during compositing, it is
/// independently applied to each pixel of the layer being drawn before the
/// entire layer is merged with the destination.
///
/// Instances of this class are used with [Paint.colorFilter] on [Paint]
/// objects. ¿oÇX¿4¿5¿9Å•/// Creates a color filter that applies the blend mode given as the second
/// argument. The source color is the one given as the first argument, and the
/// destination color is the one from the layer being composited.
///
/// The output of this filter is then composited into the background according
/// to the [Paint.blendMode], using the output of this filter as the source
/// and the background as the destination.¿:¿A  ¿G¿R  ¿k¿d¿m¿á¿|¿â¿§¿ú¿¶¿∫¿¥¿º¿ÀàE¿#ä¿#ã¿#ëá7/// Construct a color filter from a 4x5 row-major matrix. The matrix is
/// interpreted as a 5x5 matrix, where the fifth row is the identity
/// configuration.
///
/// Every pixel's color value, represented as an `[R, G, B, A]`, is matrix
/// multiplied to create a new color:
///
///     | R' |   | a00 a01 a02 a03 a04 |   | R |
///     | G' |   | a10 a11 a12 a13 a14 |   | G |
///     | B' | = | a20 a21 a22 a23 a24 | * | B |
///     | A' |   | a30 a31 a32 a33 a34 |   | A |
///     | 1  |   |  0   0   0   0   1  |   | 1 |
///
/// The matrix is in row-major order and the translation column is specified
/// in unnormalized, 0...255, space. For example, the identity matrix is:
///
/// ```dart
/// const ColorFilter identity = ColorFilter.matrix(<double>[
///   1, 0, 0, 0, 0,
///   0, 1, 0, 0, 0,
///   0, 0, 1, 0, 0,
///   0, 0, 0, 1, 0,
/// ]);
/// ```
///
/// ## Examples
///
/// An inversion color matrix:
///
/// ```dart
/// const ColorFilter invert = ColorFilter.matrix(<double>[
///   -1,  0,  0, 0, 255,
///    0, -1,  0, 0, 255,
///    0,  0, -1, 0, 255,
///    0,  0,  0, 1,   0,
/// ]);
/// ```
///
/// A sepia-toned color matrix (values based on the [Filter Effects Spec](https://www.w3.org/TR/filter-effects-1/#sepiaEquivalent)):
///
/// ```dart
/// const ColorFilter sepia = ColorFilter.matrix(<double>[
///   0.393, 0.769, 0.189, 0, 0,
///   0.349, 0.686, 0.168, 0, 0,
///   0.272, 0.534, 0.131, 0, 0,
///   0,     0,     0,     1, 0,
/// ]);
/// ```
///
/// A greyscale color filter (values based on the [Filter Effects Spec](https://www.w3.org/TR/filter-effects-1/#grayscaleEquivalent)):
///
/// ```dart
/// const ColorFilter greyscale = ColorFilter.matrix(<double>[
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0,      0,      0,      1, 0,
/// ]);
/// ```¿#í¿#†  ¿#∂¿#Ø¿#∏¿#—¿#∆¿#”¿#È¿#·¿#Î¿$¿#˚¿$¿$ÄÙ¿$Å¿$Ç¿$ìW/// Construct a color filter that applies the sRGB gamma curve to the RGB
/// channels. ¿$•¿$û¿$ß¿$¿¿$µ¿$¬¿$ÿ¿$–¿$⁄¿$Ó¿$Ë¿$¿%Å¿%Ü¿%á¿%òd/// Creates a color filter that applies the inverse of the sRGB gamma curve
/// to the RGB channels. ¿%™¿%£¿%¨¿%≈¿%∫¿%«¿%›¿%’¿%ﬂ¿%Û¿%Ì¿%ı¿&¿&  ¿&(¿&9  ¿&G¿&[  ¿&f¿&p  ¿&™¿&ª ¿&»¿&ﬂ!¿& ¿&ˇ¿'#,¿'4 ¿'N¿'l,¿'} ¿'ó¿,AÄØ¿,U   ¿,A¿,B¿,ÙÅ¡¿-   ¿,Ù¿,ı¿'ŒV¿'Á   ¿'Œ¿'œ¿((Ç◊¿(6    ¿+Å:¿+  ¿+ ¿+(  ¿+¿+¿.πÇ-¿.Ã   ¿.π¿.∫ ¿0Íáj¿2:ÅD/// A [ColorFilter] that is backed by a native DlColorFilter.
///
/// This is a private class, rather than being the implementation of the public
/// ColorFilter, because we want ColorFilter to be const constructible and
/// efficiently comparable, so that widgets can check for ColorFilter equality to
/// avoid repainting. ¿2lÄ∞¿2x¿2y¿2} ¿2~¿2Ñ  
¿2í¿2ò¿2¿¿2ß¿2ô¿2†¿2°¿2™¿2µ¿2∂¿3 Ä¨¿3,¿3-¿33 ¿34¿3:  
¿3H¿3N¿3x¿3]¿3O¿3V¿3W¿3`¿3k¿3l¿3œÄß¿3€¿3‹¿3Ì ¿3Ó¿3Ù  
¿4¿4¿4=¿4¿4	¿4¿4¿4¿4%¿4&¿4zÄß¿4Ü¿4á¿4ò ¿4ô¿4ü  
¿4≠¿4≥¿4Ë¿4¬¿4¥¿4ª¿4º¿4≈¿4–¿4—¿5%Äç¿5´o/// The original Dart object that created the native wrapper, which retains
/// the values used for the filter.  ¿5∑]¿6   ¿5∑¿5∏¿5æ¿5‘¿5ƒ¿5ø¿5Ã¿5”¿5Õ¿5’¿5Û¿5‹¿5÷¿5ﬁ¿6Äó¿6ã  ¿6ï	¿6ö  ¿6†¿6•  ¿6¿6¿6¿6J¿6%¿6 ¿6-¿6I¿6.¿65¿6:¿66¿6=¿6D¿6K¿6y¿6R¿6L¿6T¿6s¿6m¿6u¿6≥ÄÅ¿7  ¿7 ¿7-  ¿6≥¿6¥¿6∫¿6ﬂ¿6¿¿6ª¿6»¿6ﬁ¿6…¿6–¿6’¿6—¿6ÿ¿6‡¿7¿6Á¿6·¿6È¿78Äã¿7™   ¿78¿79¿7?¿7\¿7E¿7@¿7M¿7[¿7N¿7U¿7Z¿7V¿7]¿7ò¿7d¿7^¿7f¿7í¿7å¿7î¿7«Äã¿89   ¿7«¿7»¿7Œ¿7Î¿7‘¿7œ¿7‹¿7Í¿7›¿7‰¿7È¿7Â¿7Ï¿8'¿7Û¿7Ì¿7ı¿8!¿8¿8# ¿8Vã¿:8Å“/// A filter operation to apply to a raster image.
///
/// See also:
///
///  * [BackdropFilter], a widget that applies [ImageFilter] to its rendering.
///  * [ImageFiltered], a widget that applies [ImageFilter] to its children.
///  * [SceneBuilder.pushBackdropFilter], which is the low-level API for using
///    this class as a backdrop filter.
///  * [SceneBuilder.pushImageFilter], which is the low-level API for using
///    this class as a child layer filter. ¿:ö¿:•¿:¶¿:ß   ¿:»Å¿;¿;¿;9/// Creates an image filter that applies a Gaussian blur.¿;¿;'  ¿;4¿;<  ¿;I"¿;S  ¿;/¿;D¿;]¿;e¿;f¿;—Å&¿<w¿<x¿<~Äé/// Creates an image filter that dilates each input pixel's channel values
/// to the max value within the given radii along the x and y axes.¿<Å¿<â  ¿<ó¿<ü  ¿<í¿<®¿<˚Å'¿=§¿=•¿=™Äë/// Create a filter that erodes each input pixel's channel values
/// to the minimum channel value within the given radii along the x and y axes.¿=≠¿=µ  ¿=√¿=À  ¿=æ¿=‘¿>&Ç'¿?¿?¿?"ÄŸ/// Creates an image filter that applies a matrix transformation.
///
/// For example, applying a positive scale matrix (see [Matrix4.diagonal3])
/// when used with [BackdropFilter] would magnify the background image.¿?#¿?0  ¿?O/¿?^  ¿?m¿?z¿?{¿@QÅ†¿A_¿A`¿AgÄ/// Composes the `inner` filter with `outer`, to combine their effects.
///
/// Creates a single [ImageFilter] that when applied, has the same effect as
/// subsequently applying `inner` and `outer`, i.e.,
/// result = outer(inner(source)).¿Aj¿AÄ  ¿AÜ¿Aú    ¿C<¿CG    ¿Bì$¿B†     ¿C]É`¿Cc  ¿CëH ¿Cë¿C£ ¿C¶¿Cµ  ¿C∫¿C…   ¿C›¿CÔ  ¿C˜!¿D  ¿D>@¿DV ¿De¿Dq¿Dr¿Dx¿D}¿Dy¿D∆L¿D›   ¿D∆¿D«¿FjQ¿F~   ¿Fj¿Fk¿DÇ@¿Dõ   ¿DÇ¿DÉ¿EM¿E)   ¿E¿E¿EgÄˇ¿EÅ  ¿EÑ¿Eå  ¿Eg¿Eh ¿FøÑt¿F≈  ¿F˘a ¿F˘¿G ¿G¿G#  ¿G*¿G9  ¿G@¿GO   ¿G^¿Gk  ¿Gu¿GÇ  ¿Gå¿Gõ  ¿Gº>¿G‘ ¿G„¿GÔ¿G¿GÙ¿G˘¿Gı¿HBÄÓ¿HM    ¿I4S¿IK   ¿I4¿I5¿Jı<¿K	   ¿Jı¿Jˆ¿G˛@¿H   ¿G˛¿Gˇ¿IãT¿Iû   ¿Iã¿Iå¿I„Å¿I˝  ¿J ¿J  ¿I„¿I‰ ¿K5Ç˚¿K;  ¿KiE ¿Ki¿K{ ¿K~¿Kç  ¿Kï¿K§   ¿K≤¿Kø  ¿K ¿K◊  ¿K„@¿K˚ ¿L
¿L¿L¿L¿L"¿L¿LkI¿LÇ   ¿Lk¿Ll¿M>¿N   ¿M¿MÒ¿L'@¿L@   ¿L'¿L(¿L∏J¿LÀ   ¿L∏¿Lπ¿MÄÊ¿M   ¿M#¿M+  ¿M¿M ¿N2Çı¿N8  ¿NeD ¿Ne¿Nv ¿Ny¿Nà  ¿Nê¿Nü   ¿N≠¿N∫  ¿N≈¿N“  ¿Nﬁ?¿Nˆ ¿O¿O¿O¿O¿O¿O¿OeH¿O|   ¿Oe¿Of¿PÁ>¿P˚   ¿PÁ¿PË¿O!@¿O:   ¿O!¿O"¿O±I¿Oƒ   ¿O±¿O≤¿O˛ÄÂ¿P  ¿P¿P#  ¿O˛¿Oˇ ¿Q)Éã¿Q/  ¿Q^N ¿Q^¿Qq ¿Qt¿QÉ  ¿Qè¿Qû   ¿Q∞¿Q¬  ¿Q—¿Q„  ¿RB¿R% ¿R4¿R@¿RA¿RI¿RN¿RJ¿Rós¿RÆ   ¿Ró¿Rò¿TlF¿TÄ   ¿Tl¿Tm¿RS@¿Rl   ¿RS¿RT¿S_¿S!   ¿S¿S¿SqÄ˜¿Sã  ¿Sé¿Sñ  ¿Sq¿Sr ¿T∂çˆ¿UÎÅ)/// An [ImageFilter] that is backed by a native DlImageFilter.
///
/// This is a private class, rather than being the implementation of the public
/// ImageFilter, because we want ImageFilter to be efficiently comparable, so that
/// widgets can check for ImageFilter equality to avoid repainting. ¿VÄ„¿Ve¿Vf¿Vj9/// Creates an image filter that applies a Gaussian blur.¿Vk¿VÖ  ¿Vö¿Ví¿Vú¿WÅ#¿W£¿W§¿W™Äé/// Creates an image filter that dilates each input pixel's channel values
/// to the max value within the given radii along the x and y axes.¿W´¿Wø  ¿W‘¿WÃ¿W÷¿X+Å#¿XÕ¿XŒ¿X”Äë/// Create a filter that erodes each input pixel's channel values
/// to the minimum channel value within the given radii along the x and y axes.¿X‘¿XÁ  ¿X¸¿XÙ¿X˛¿YRÅ„¿Z@¿ZA¿ZGÄŸ/// Creates an image filter that applies a matrix transformation.
///
/// For example, applying a positive scale matrix (see [Matrix4.diagonal3])
/// when used with [BackdropFilter] would magnify the background image.¿ZH¿Z\  ¿Zq¿Zi¿Zs¿[9Ä˝¿[w¿[x¿[á//// Converts a color filter to an image filter.¿[à¿[ï  ¿[™¿[¢¿[¨¿\:Åz¿\y¿\z¿\Ç0/// Composes `_innerFilter` with `_outerFilter`.¿\É¿\ò  ¿\≠¿\•¿\Ø¿bÄç¿b¢o/// The original Dart object that created the native wrapper, which retains
/// the values used for the filter.  ¿]∏]¿^   ¿]∏¿]π¿]ø¿]’¿]≈¿]¿¿]Õ¿]‘¿]Œ¿]÷¿]Ù¿]›¿]◊¿]ﬂ¿^Ä≤¿^ï  ¿^ü¿^ß  ¿^Æ¿^∂  ¿^Ω¿^¬  ¿^¿^¿^ ¿^T¿^&¿^!¿^.¿^S¿^/¿^6¿^;¿^7¿^>¿^F¿^N¿^U¿^É¿^\¿^V¿^^¿^}¿^w¿^¿^œÄ£¿_F  ¿_R¿_Z  ¿_b¿_j  ¿^œ¿^–¿^÷¿_¿^‹¿^◊¿^‰¿_¿^Â¿^Ï¿^Ò¿^Ì¿^Ù¿^¸¿_¿_4¿_¿_¿_¿_.¿_(¿_0¿_vÄ°¿_Ï  ¿_˜¿_ˇ  ¿`¿`  ¿_v¿_w¿_}¿_™¿_É¿_~¿_ã¿_©¿_å¿_ì¿_ò¿_î¿_õ¿_£¿_´¿_⁄¿_≤¿_¨¿_¥¿_‘¿_Œ¿_÷¿`Äú¿`É  ¿`è¿`ú  ¿`§¿`©  ¿`¿`¿`"¿`N¿`(¿`#¿`0¿`M¿`1¿`8¿`=¿`9¿`@¿`H¿`O¿`q¿`V¿`P¿`X¿`ªÄô¿a(  ¿a9¿aH  ¿`ª¿`º¿`¬¿`Ó¿`»¿`√¿`–¿`Ì¿`—¿`ÿ¿`›¿`Ÿ¿`‡¿`Á¿`Ï¿`Ë¿`Ô¿a¿`ˆ¿`¿`¯¿aXÄ¿¿a÷  ¿a‰¿aÚ  ¿a˛¿b  ¿aX¿aY¿a_¿aö¿ae¿a`¿am¿aô¿an¿au¿az¿av¿a}¿aÑ¿aâ¿aÖ¿aå¿aì¿aò¿aî¿aõ¿aƒ¿a¢¿aú¿a§ ¿bÆÑÎ¿c4z/// Base class for objects such as [Gradient] and [ImageShader] which
/// correspond to shaders as used by [Paint.shader]. ¿c`Äç¿cË¿cÈ¿cÍa/// This class is created by the engine, and should not be instantiated
/// or extended directly. ¿c∆¿c«¿cÕ¿cﬁ¿cŒ¿cÒ¿cˆ ¿d¿dÅ¿döy/// Whether [dispose] has been called.
///
/// This must only be used when asserts are enabled. Otherwise, it will throw.   ¿e,Çk¿gÅ€/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// The underlying memory allocated by this object will be retained beyond
/// this call if it is still needed by another object that has not been
/// disposed. For example, a [Picture] that has not been disposed that
/// refers to an [ImageShader] may keep its underlying resources alive.
///
/// Classes that override this method must call `super.dispose()`.    ¿~P©¿úÅ@/// A shader (as used by [Paint.shader]) that renders a color gradient.
///
/// There are several types of gradients, represented by the various constructors
/// on this class.
///
/// See also:
///
///  * [Gradient](https://api.flutter.dev/flutter/painting/Gradient-class.html), the class in the [painting] library.
/// ¿∏â¿Ü¿Ü¿ÜÜ/// Creates a linear gradient from `from` to `to`.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries). Stop values less than 0.0
/// will be rounded up to 0.0 and stop values greater than 1.0 will be rounded
/// down to 1.0. Each stop value must be greater than or equal to the previous
/// stop value. Stop values that do not meet this criteria will be rounded up
/// to the previous stop value.
///
/// The behavior before `from` and after `to` is described by the `tileMode`
/// argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_linear.png)
///
/// If `from`, `to`, `colors`, or `tileMode` are null, or if `colors` or
/// `colorStops` contain null values, this constructor will throw a
/// [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.¿Ü¿Ü  ¿Ü	¿Ü'  ¿Ü.¿Ü;  ¿ÜH¿ÜW  ¿Üf"¿Üp  ¿Üé¿Üú  !¿Üz¿ÜÇ¿ÜÉ¿Ü´¿Ü±¿Ü∆¿Ü≤¿Ü¿¿Ü≈¿Ü¡¿Ü–¿Ü÷¿ÜÈ¿Ü◊¿ÜÂ¿ÜË¿ÜÊ¿ÜÛ¿Ü˘¿á%¿á
¿á¿Ü˙¿á¿á¿á¿á$¿á¿á/¿á4¿á5¿á6¿á7¿à«å¯¿ê˜¿ê¯¿ê˛á„/// Creates a radial gradient centered at `center` that ends at `radius`
/// distance from the center.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries). Stop values less than 0.0
/// will be rounded up to 0.0 and stop values greater than 1.0 will be rounded
/// down to 1.0. Each stop value must be greater than or equal to the previous
/// stop value. Stop values that do not meet this criteria will be rounded up
/// to the previous stop value.
///
/// The behavior before and after the radius is described by the `tileMode`
/// argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_radial.png)
///
/// If `center`, `radius`, `colors`, or `tileMode` are null, or if `colors` or
/// `colorStops` contain null values, this constructor will throw a
/// [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.
///
/// If `focal` is provided and not equal to `center` and `focalRadius` is
/// provided and not equal to 0.0, the generated shader will be a two point
/// conical radial gradient, with `focal` being the center of the focal
/// circle and `focalRadius` being the radius of that circle. If `focal` is
/// provided and not equal to `center`, at least one of the two offsets must
/// not be equal to [Offset.zero].¿ë¿ë  ¿ë¿ë  ¿ë*¿ë7  ¿ëD¿ëS  ¿ëb"¿ël  ¿ëä¿ëò  ¿ë§¿ë≠  ¿ë∑¿ëø  ¿ëv¿ë~¿ë¿ëÃ¿ë◊¿ë›¿ëÙ¿ëﬁ¿ëÏ¿ëÛ¿ëÌ¿ë˛¿í¿í0¿í¿í¿í¿í¿í¿í'¿í/¿í(¿í:¿í?¿í@¿íA¿íB¿ï√äI¿ù=¿ù>¿ùCá3/// Creates a sweep gradient centered at `center` that starts at `startAngle`
/// and ends at `endAngle`.
///
/// `startAngle` and `endAngle` should be provided in radians, with zero
/// radians being the horizontal line to the right of the `center` and with
/// positive angles going clockwise around the `center`.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries). Stop values less than 0.0
/// will be rounded up to 0.0 and stop values greater than 1.0 will be rounded
/// down to 1.0. Each stop value must be greater than or equal to the previous
/// stop value. Stop values that do not meet this criteria will be rounded up
/// to the previous stop value.
///
/// The behavior before `startAngle` and after `endAngle` is described by the
/// `tileMode` argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_sweep.png)
///
/// If `center`, `colors`, `tileMode`, `startAngle`, or `endAngle` are null,
/// or if `colors` or `colorStops` contain null values, this constructor will
/// throw a [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.¿ùI¿ùQ  ¿ù\¿ùi  ¿ùv¿ùÖ  ¿ùî"¿ùû  ¿ùº¿ùƒ  ¿ùŸ¿ù·  ¿ù¸¿û
  &¿ù®¿ù∞¿ù±¿ù–¿ùÛ¿ùÎ¿ùÔ¿ù¿ùı¿û¿û¿û6¿û ¿û.¿û5¿û/¿û@¿ûF¿û\¿ûR¿ûG¿ûT¿ûf¿ûl¿ûò¿û}¿ûu¿ûm¿ûx¿ûÄ¿ûè¿ûó¿ûê¿û¢¿ûß¿û®¿û©¿û™  ¿†Z¿†[   ¿†¿†¿†¿†-¿†¿†¿†%¿†,¿†&¿†.¿†I¿†5¿†/¿†7¿†nÄÔ¿†Î  ¿†˜¿°  ¿°¿°  ¿° ¿°.  ¿°9¿°>  ¿°G¿°U  ¿†n¿†o¿†u¿†π¿†{¿†v¿†É¿†∏¿†Ñ¿†ã¿†ê¿†å¿†ì¿†õ¿†£¿†´¿†≤¿†∫¿†Ÿ¿†¡¿†ª¿†√¿°aÅB¿°Ó  ¿¢¿¢	  ¿¢¿¢  ¿¢-¿¢5  ¿¢B¿¢M  ¿¢Z¿¢h  ¿¢y¿¢~  ¿¢ç¿¢õ  ¿°a¿°b¿°h¿°º¿°n¿°i¿°v¿°ª¿°w¿°~¿°É¿°¿°Ü¿°é¿°ñ¿°û¿°¶¿°Æ¿°µ¿°Ω¿°‹¿°ƒ¿°æ¿°∆¿¢ßÅ•¿£U  
¿£i¿£q  ¿£~¿£Ü  ¿£ì¿£õ  ¿£≠¿£µ  ¿£¿¿£»  ¿£”¿£€  ¿£Î¿£ˆ  ¿§¿§  ¿§"¿§'  ¿§6¿§D  ¿¢ß¿¢®¿¢Æ¿£¿¢¥¿¢Ø¿¢º¿£¿¢Ω¿¢ƒ¿¢…¿¢≈¿¢Ã¿¢‘¿¢‹¿¢‰¿¢Ï¿¢Ù¿¢¸¿£¿£¿£¿£¿£C¿£"¿£¿£$¿§PÅb¿§‰  ¿§ˆ¿§˛  ¿•¿•  ¿•"¿•-  ¿•:¿•H  ¿•Y¿•^  ¿•m¿•u  ¿•Ü¿•é  ¿•ù¿•´  ¿§P¿§Q¿§W¿§≥¿§]¿§X¿§e¿§≤¿§f¿§m¿§r¿§n¿§u¿§}¿§Ö¿§ç¿§ï¿§ú¿§§¿§¨¿§¥¿§“¿§ª¿§µ¿§Ω¿•∂Åü¿•¬  ¿•›¿•Í  ¿•Ò¿¶     ¿ßYàl¿ß¢=/// A shader (as used by [Paint.shader]) that tiles an image. ¿ß¡Öñ ¿´Ö¿´êÉÅ/// Creates an image-tiling shader.
///
/// The first argument specifies the image to render. The
/// [decodeImageFromList] function can be used to decode an image from bytes
/// into the form expected here. (In production code, starting from
/// [instantiateImageCodec] may be preferable.)
///
/// The second and third arguments specify the [TileMode] for the x direction
/// and y direction respectively. [TileMode.repeated] can be used for tiling
/// images.
///
/// The fourth argument gives the matrix to apply to the effect. The
/// expression `Matrix4.identity().storage` creates a [Float64List]
/// prepopulated with the identity matrix.
///
/// All the arguments are required and must not be null, except for
/// [filterQuality]. If [filterQuality] is not specified at construction time
/// it will be deduced from the environment where it is used, such as from
/// [Paint.filterQuality].¿´ë¿´ò  ¿´û¿´®  ¿´¨¿´∂  ¿´∫¿´«  ¿´’¿´Â  ¿´i¿´j¿´p¿´Å¿´q¿´˛¿¨¿¨¿¨¿¨¿¨¿¨¿¨ ¿¨%¿¨&¿¨'¿¨(  ¿≠[E¿≠l   ¿≠[¿≠\¿≠§]¿≠Ú   ¿≠§¿≠•¿≠´¿≠¡¿≠±¿≠¨¿≠π¿≠¿¿≠∫¿≠¬¿≠‡¿≠…¿≠√¿≠À¿ÆÄÈ¿Æí  ¿Æ°¿Æ©  ¿ÆØ¿Æ¥  ¿Æ∏¿ÆΩ  ¿Æ¡¿Æ∆  ¿ÆŸ¿ÆÊ  ¿Æ¿Æ¿Æ¿ÆW¿Æ¿Æ¿Æ¿ÆV¿Æ¿Æ$¿Æ)¿Æ%¿Æ,¿Æ3¿Æ8¿Æ4¿Æ;¿ÆB¿ÆI¿ÆP¿ÆX¿Æ}¿Æ_¿ÆY¿Æa¿ÆÚÄ—¿Ø∏k/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿Øb¿Øc¿Øi¿ØÜ¿Øo¿Øj¿Øw¿ØÖ¿Øx¿Ø¿ØÑ¿ØÄ¿Øá¿Ø¶¿Øé¿Øà¿Øê ¿Ø«åœ¿∞ØÄ‹/// An instance of [FragmentProgram] creates [Shader] objects (as used by
/// [Paint.shader]).
///
/// For more information, see the website
/// [documentation]( https://docs.flutter.dev/development/ui/advanced/shaders). ¿∞‰Å!¿±¿±¿± ¿±¿±#  ¿∞‰¿∞Â¿∞Î¿∞¸¿∞Ï¿≤	¿≤  ¿∑´{¿∑‰ 	¿∏$¿∏%¿∑¸¿∏#¿∑˝¿∏¿∏¿∏"¿∏¿∫ß7¿∫Ã ¿∫ß¿∫®¿∫Æ¿∫ø¿∫Ø¿∫„2¿ª ¿∫„¿∫‰¿∫Í¿∫˚¿∫Î ¿≤ ÑS¿≥{Å//// Creates a fragment program from the asset with key [assetKey].
///
/// The asset must be a file produced as the output of the `impellerc`
/// compiler. The constructed object should then be reused via the
/// [fragmentShader] method to create [Shader] objects that can be used by
/// [Paint.shader]. ¿≥Ö¿≥ç   ¿∏+Çx¿∏7  ¿∏K¿∏S   ¿ªa¿ªl   ¿ª¿ª¿ª!¿ª7¿ª'¿ª"¿ª/¿ª6¿ª0¿ª8¿ªZ¿ª?¿ª9¿ªA¿ªÄå¿ªÎ  ¿ª˙¿º  ¿ª¿ªÄ¿ªÜ¿ª≠¿ªé¿ªá¿ªñ¿ª¨¿ªó¿ªû¿ª£¿ªü¿ª¶¿ªÆ¿ª◊¿ªµ¿ªØ¿ª∑¿ºÄÖ¿ºR1/// Returns a fresh instance of [FragmentShader].    ¿ºòë˛¿øâÇÂ/// A [Shader] generated from a [FragmentProgram].
///
/// Instances of this class can be obtained from the
/// [FragmentProgram.fragmentShader] method. The float uniforms list is
/// initialized to the size expected by the shader and is zero-filled. Uniforms
/// of float type can then be set by calling [setFloat]. Sampler uniforms are
/// set by calling [setImageSampler].
///
/// A [FragmentShader] can be re-used, and this is an efficient way to avoid
/// allocating and re-initializing the uniform buffer and samplers. However,
/// if two [FragmentShader] objects with different float uniforms or samplers
/// are required to exist simultaneously, they must be obtained from two
/// different calls to [FragmentProgram.fragmentShader]. ¿ø´Ä€¿øπ¿ø∫¿øª ¿øº¿øÕ  ¿ø◊¿ø‡  ¿ø˘¿øÓ¿ø˚¿¿¿¿¿¿¿¿¿¿¿¿ä¿¿ò  ¿¿ß<¿¿¿ ¿¿’¿¿‡¿¿‚¿¿·¿¿Á(¿¿Û ¿¿˝ ¿¡áê¿»Üú/// Sets the float uniform at [index] to [value].
///
/// All uniforms defined in a fragment shader that are not samplers must be
/// set through this method. This includes floats and vec2, vec3, and vec4.
/// The correct index for each uniform is determined by the order of the
/// uniforms as defined in the fragment program, ignoring any samplers. For
/// data types that are composed of multiple floats such as a vec4, more than
/// one call to [setFloat] is required.
///
/// For example, given the following uniforms in a fragment program:
///
/// ```glsl
/// uniform float uScale;
/// uniform sampler2D uTexture;
/// uniform vec2 uMagnitude;
/// uniform vec4 uColor;
/// ```
///
/// Then the corresponding Dart code to correctly initialize these uniforms
/// is:
///
/// ```dart
/// void updateShader(ui.FragmentShader shader, Color color, ui.Image image) {
///   shader.setFloat(0, 23);  // uScale
///   shader.setFloat(1, 114); // uMagnitude x
///   shader.setFloat(2, 83);  // uMagnitude y
///
///   // Convert color to premultiplied opacity.
///   shader.setFloat(3, color.red / 255 * color.opacity);   // uColor r
///   shader.setFloat(4, color.green / 255 * color.opacity); // uColor g
///   shader.setFloat(5, color.blue / 255 * color.opacity);  // uColor b
///   shader.setFloat(6, color.opacity);                     // uColor a
///
///   // initialize sampler uniform.
///   shader.setImageSampler(0, image);
/// }
/// ```
///
/// Note how the indexes used does not count the `sampler2D` uniform. This
/// uniform will be set separately with [setImageSampler], with the index starting
/// over at 0.
///
/// Any float uniforms that are left uninitialized will default to `0`. ¿»	¿»  ¿» ¿»(   ¿»®Å¸¿…¯Å</// Sets the sampler uniform at [index] to [image].
///
/// The index provided to setImageSampler is the index of the sampler uniform defined
/// in the fragment program, excluding all non-sampler uniforms.
///
/// All the sampler uniforms that a shader expects must be provided or the
/// results will be undefined. ¿ 	¿   ¿ ¿    ¿ ®ÅÖ¿À◊Å/// Releases the native resources held by the [FragmentShader].
///
/// After this method is called, calling methods on the shader, or attaching
/// it to a [Paint] object will fail with an exception. Calling [dispose]
/// twice will also result in an exception being thrown.  ¿À∆¿À«¿Ã1Ä»¿Ã´  ¿Ã∏¿Ã…  ¿Ã—¿Ã÷  ¿Ã‰¿ÃÈ  ¿Ã1¿Ã2¿Ã8¿Ãh¿Ã@¿Ã9¿ÃH¿Ãg¿ÃI¿ÃQ¿ÃY¿Ãa¿Ãi¿Ãí¿Ãp¿Ãj¿Ãr¿Ã˝Ä•¿Õv  ¿Õá	¿Õå  ¿Õí¿Õö  ¿Ã˝¿Ã˛¿Õ¿Õ1¿Õ
¿Õ¿Õ¿Õ0¿Õ¿Õ¿Õ¿Õ¿Õ"¿Õ*¿Õ2¿Õd¿Õ9¿Õ3¿Õ;¿Õ¶~¿Œ   ¿Õ¶¿Õß¿Õ≠¿Õ ¿Õ≥¿ÕÆ¿Õª¿Õ…¿Õº¿Õ√¿Õ»¿Õƒ¿ÕÀ¿Õ˛¿Õ“¿ÕÃ¿Õ‘¿Œ(l¿Œâ   ¿Œ(¿Œ)¿Œ/¿ŒL¿Œ5¿Œ0¿Œ=¿ŒK¿Œ>¿ŒE¿ŒJ¿ŒF¿ŒM¿Œw¿ŒT¿ŒN¿ŒV ¿—]¨¿Ÿ◊àn/// A set of vertex data used by [Canvas.drawVertices].
///
/// Vertex data consists of a series of points in the canvas coordinate space.
/// Based on the [VertexMode], these points are interpreted either as
/// independent triangles ([VertexMode.triangles]), as a sliding window of
/// points forming a chain of triangles each sharing one side with the next
/// ([VertexMode.triangleStrip]), or as a fan of triangles with a single shared
/// point ([VertexMode.triangleFan]).
///
/// Each point can be associated with a color. Each triangle is painted as a
/// gradient that blends between the three colors at the three points of that
/// triangle. If no colors are specified, transparent black is assumed for all
/// the points.
///
/// These colors are then blended with the [Paint] specified in the call to
/// [Canvas.drawVertices]. This paint is either a solid color ([Paint.color]),
/// or a bitmap, specified using a shader ([Paint.shader]), typically either a
/// gradient ([Gradient]) or image ([ImageFilter]). The bitmap uses the same
/// coordinate space as the canvas (in the case of an [ImageFilter], this is
/// notably different than the coordinate space of the source image; the source
/// image is tiled according to the filter's configuration, and the image that
/// is sampled when painting the triangles is the infinite one after all the
/// repeating is applied.)
///
/// Each point in the [Vertices] is associated with a specific point on this
/// image. Each triangle is painted by sampling points from this image by
/// interpolating between the three points of the image corresponding to the
/// three points of the triangle.
///
/// The [Vertices.new] constructor configures all this using lists of [Offset]
/// and [Color] objects. The [Vertices.raw] constructor instead uses
/// [Float32List], [Int32List], and [Uint16List] objects, which more closely
/// corresponds to the data format used internally and therefore reduces some of
/// the conversion overhead. The raw constructor is useful if the data is coming
/// from another source (e.g. a file) and can therefore be parsed directly into
/// the underlying representation. ¿⁄éÈ ¿„¿„à¨/// Creates a set of vertex data for use with [Canvas.drawVertices].
///
/// The `mode` parameter describes how the points should be interpreted: as
/// independent triangles ([VertexMode.triangles]), as a sliding window of
/// points forming a chain of triangles each sharing one side with the next
/// ([VertexMode.triangleStrip]), or as a fan of triangles with a single
/// shared point ([VertexMode.triangleFan]).
///
/// The `positions` parameter provides the points in the canvas space that
/// will be use to draw the triangles.
///
/// The `colors` parameter, if specified, provides the color for each point in
/// `positions`. Each triangle is painted as a gradient that blends between
/// the three colors at the three points of that triangle. (These colors are
/// then blended with the [Paint] specified in the call to
/// [Canvas.drawVertices].)
///
/// The `textureCoordinates` parameter, if specified, provides the points in
/// the [Paint] image to sample for the corresponding points in `positions`.
///
/// If the `colors` or `textureCoordinates` parameters are specified, they must
/// be the same length as `positions`.
///
/// The `indices` parameter specifies the order in which the points should be
/// painted. If it is omitted (or present but empty), the points are processed
/// in the order they are given in `positions`, as if the `indices` was a list
/// from 0 to n-1, where _n_ is the number of entries in `positions`. The
/// `indices` parameter, if present and non-empty, must have at least three
/// entries, but may be of any length beyond this. Indicies may refer to
/// offsets in the positions array multiple times, or may skip positions
/// entirely.
///
/// If the `indices` parameter is specified, all values in the list must be
/// valid index values for `positions`.
///
/// The `mode` and `positions` parameters must not be null.
///
/// This constructor converts its parameters into [dart:typed_data] lists
/// (e.g. using [Float32List]s for the coordinates) before sending them to the
/// Flutter engine. If the data provided to this constructor is not already in
/// [List] form, consider using the [Vertices.raw] constructor instead to
/// avoid converting the data twice.¿„¿„   ¿„)¿„7  ¿„G¿„U  ¿„` ¿„o  ¿„Ü¿„í   ¿ËÚèW¿Û{¿Û|¿Ûä(/// Creates a set of vertex data for use with [Canvas.drawVertices], using the
/// encoding expected by the Flutter engine.
///
/// The `mode` parameter describes how the points should be interpreted: as
/// independent triangles ([VertexMode.triangles]), as a sliding window of
/// points forming a chain of triangles each sharing one side with the next
/// ([VertexMode.triangleStrip]), or as a fan of triangles with a single
/// shared point ([VertexMode.triangleFan]).
///
/// The `positions` parameter provides the points in the canvas space that
/// will be use to draw the triangles. Each point is represented as two
/// numbers in the list, the first giving the x coordinate and the second
/// giving the y coordinate. (As a result, the list must have an even number
/// of entries.)
///
/// The `colors` parameter, if specified, provides the color for each point in
/// `positions`. Each color is represented as ARGB with 8 bit color channels
/// (like [Color.value]'s internal representation), and the list, if
/// specified, must therefore be half the length of `positions`. Each triangle
/// is painted as a gradient that blends between the three colors at the three
/// points of that triangle. (These colors are then blended with the [Paint]
/// specified in the call to [Canvas.drawVertices].)
///
/// The `textureCoordinates` parameter, if specified, provides the points in
/// the [Paint] image to sample for the corresponding points in `positions`.
/// Each point is represented as two numbers in the list, the first giving the
/// x coordinate and the second giving the y coordinate. This list, if
/// specified, must be the same length as `positions`.
///
/// The `indices` parameter specifies the order in which the points should be
/// painted. If it is omitted (or present but empty), the points are processed
/// in the order they are given in `positions`, as if the `indices` was a list
/// from 0 to n-2, where _n_ is the number of pairs in `positions` (i.e. half
/// the length of `positions`). The `indices` parameter, if present and
/// non-empty, must have at least three entries, but may be of any length
/// beyond this. Indicies may refer to offsets in the positions array multiple
/// times, or may skip positions entirely.
///
/// If the `indices` parameter is specified, all values in the list must be
/// valid index values for pairs in `positions`. For example, if there are 12
/// numbers in `positions` (representing 6 coordinates), the `indicies` must
/// be numbers in the range 0..5 inclusive.
///
/// The `mode` and `positions` parameters must not be null.¿ÛÖ¿Ûë  ¿Ûö¿Ûß  ¿Û∑¿Û√  ¿ÛŒ¿Û‹  ¿ÛÛ¿Ù    ¿˚©¿˚Æ ¿˚∫¿˚√Åû¿¸ÄÄ´/// Whether this reference to the underlying vertex data is [dispose]d.
///
/// This only returns a valid value if asserts are enabled, and must not be
/// used otherwise.   ¿¯MÅé¿¯ƒ  ¿¯ ¿¯‘  ¿¯˝¿˘  ¿˘$¿˘1  ¿˘X¿˘f  ¿˘ñ¿˘¢  ¿˘∆¿˘”  ¿¯M¿¯N¿¯T¿¯ë¿¯Z¿¯U¿¯b¿¯ê¿¯c¿¯k¿¯r¿¯z¿¯Ç¿¯ä¿¯í¿¯´¿¯ô¿¯ì¿¯õ¿˘ﬂÄÙ¿˙Wn/// Release the resources used by this object. The object is no longer usable
/// after this method is called.   ¿˙◊ÄŒ¿˚ök/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿˚G¿˚H¿˚N¿˚k¿˚T¿˚O¿˚\¿˚j¿˚]¿˚d¿˚i¿˚e¿˚l¿˚à¿˚s¿˚m¿˚u ¿´¿ ñ2¿$Éi/// An interface for recording graphical operations.
///
/// [Canvas] objects are used in creating [Picture] objects, which can
/// themselves be used with a [SceneBuilder] to build a [Scene]. In
/// normal usage, however, this is all handled by the framework.
///
/// A canvas has a current transformation matrix which is applied to all
/// operations. Initially, the transformation matrix is the identity transform.
/// It can be modified using the [translate], [scale], [rotate], [skew],
/// and [transform] methods.
///
/// A canvas also has a current clip region which is applied to all operations.
/// Initially, the clip region is infinite. It can be modified using the
/// [clipRect], [clipRRect], and [clipPath] methods.
///
/// The current transform and clip can be saved and restored using the stack
/// managed by the [save], [saveLayer], and [restore] methods. ¿/Ç◊ ¿¡¿«Çq/// Creates a canvas for recording graphical operations into the
/// given picture recorder.
///
/// Graphical operations that affect pixels entirely outside the given
/// `cullRect` might be discarded by the implementation. However, the
/// implementation might draw outside these bounds if, for example, a command
/// draws partially inside and outside the `cullRect`. To ensure that pixels
/// outside a given region are discarded, consider using a [clipRect]. The
/// `cullRect` is optional; by default, all operations are kept.
///
/// To end the recording, call [PictureRecorder.endRecording] on the
/// given recorder.¿»¿Ÿ  ¿‰¿Î     %¿	
Å(¿
+Å/// Saves a copy of the current transform and clip on the save stack.
///
/// Call [restore] to pop the save stack.
///
/// See also:
///
///  * [saveLayer], which does the same thing but additionally also groups the
///    commands done until the matching [restore].   ¿
6îö¿´ìï/// Saves a copy of the current transform and clip on the save stack, and then
/// creates a new group which subsequent calls will become a part of. When the
/// save stack is later popped, the group will be flattened into a layer and
/// have the given `paint`'s [Paint.colorFilter] and [Paint.blendMode]
/// applied.
///
/// This lets you create composite effects, for example making a group of
/// drawing commands semi-transparent. Without using [saveLayer], each part of
/// the group would be painted individually, so where they overlap would be
/// darker than where they do not. By using [saveLayer] to group them
/// together, they can be drawn with an opaque color at first, and then the
/// entire group can be made transparent using the [saveLayer]'s paint.
///
/// Call [restore] to pop the save stack and apply the paint to the group.
///
/// ## Using saveLayer with clips
///
/// When a rectangular clip operation (from [clipRect]) is not axis-aligned
/// with the raster buffer, or when the clip operation is not rectilinear
/// (e.g. because it is a rounded rectangle clip created by [clipRRect] or an
/// arbitrarily complicated path clip created by [clipPath]), the edge of the
/// clip needs to be anti-aliased.
///
/// If two draw calls overlap at the edge of such a clipped region, without
/// using [saveLayer], the first drawing will be anti-aliased with the
/// background first, and then the second will be anti-aliased with the result
/// of blending the first drawing and the background. On the other hand, if
/// [saveLayer] is used immediately after establishing the clip, the second
/// drawing will cover the first in the layer, and thus the second alone will
/// be anti-aliased with the background when the layer is clipped and
/// composited (when [restore] is called).
///
/// For example, this [CustomPainter.paint] method paints a clean white
/// rounded rectangle:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   Rect rect = Offset.zero & size;
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(rect, 100.0, 100.0));
///   canvas.saveLayer(rect, Paint());
///   canvas.drawPaint(Paint()..color = Colors.red);
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
///   canvas.restore();
/// }
/// ```
///
/// On the other hand, this one renders a red outline, the result of the red
/// paint being anti-aliased with the background at the clip edge, then the
/// white paint being similarly anti-aliased with the background _including
/// the clipped red paint_:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   // (this example renders poorly, prefer the example above)
///   Rect rect = Offset.zero & size;
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(rect, 100.0, 100.0));
///   canvas.drawPaint(Paint()..color = Colors.red);
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
/// }
/// ```
///
/// This point is moot if the clip only clips one draw operation. For example,
/// the following paint method paints a pair of clean white rounded
/// rectangles, even though the clips are not done on a separate layer:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(Offset.zero & (size / 2.0), 50.0, 50.0));
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(size.center(Offset.zero) & (size / 2.0), 50.0, 50.0));
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
/// }
/// ```
///
/// (Incidentally, rather than using [clipRRect] and [drawPaint] to draw
/// rounded rectangles like this, prefer the [drawRRect] method. These
/// examples are using [drawPaint] as a proxy for "complicated draw operations
/// that will get clipped", to illustrate the point.)
///
/// ## Performance considerations
///
/// Generally speaking, [saveLayer] is relatively expensive.
///
/// There are a several different hardware architectures for GPUs (graphics
/// processing units, the hardware that handles graphics), but most of them
/// involve batching commands and reordering them for performance. When layers
/// are used, they cause the rendering pipeline to have to switch render
/// target (from one layer to another). Render target switches can flush the
/// GPU's command buffer, which typically means that optimizations that one
/// could get with larger batching are lost. Render target switches also
/// generate a lot of memory churn because the GPU needs to copy out the
/// current frame buffer contents from the part of memory that's optimized for
/// writing, and then needs to copy it back in once the previous render target
/// (layer) is restored.
///
/// See also:
///
///  * [save], which saves the current state, but does not create a new layer
///    for subsequent commands.
///  * [BlendMode], which discusses the use of [Paint.blendMode] with
///    [saveLayer]. ¿µ¿º  ¿√¿    ¿‘ÅF¿ Å(/// Pops the current save stack, if there is anything to pop.
/// Otherwise, does nothing.
///
/// Use [save] and [saveLayer] to push state onto the stack.
///
/// If the state was pushed with [saveLayer], then this call will also
/// cause the new layer to be composited into the previous layer.   ¿ Ç%¿")ÅÛ/// Restores the save stack to a previous level as might be obtained from [getSaveCount].
/// If [count] is less than 1, the stack is restored to its initial state.
/// If [count] is greater than the current [getSaveCount] then nothing happens.
///
/// Use [save] and [saveLayer] to push state onto the stack.
///
/// If any of the state stack levels restored by this call were pushed with
/// [saveLayer], then this call will also cause those layers to be composited
/// into their previous layers. ¿"8	¿"=   ¿"GÅB¿#zÅ"/// Returns the number of items on the save stack, including the
/// initial state. This means it returns 1 for a clean canvas, and
/// that each call to [save] and [saveLayer] increments it, and that
/// each matching call to [restore] decrements it.
///
/// This number cannot go below 1.   ¿#çÄ≈¿$2Äõ/// Add a translation to the current transform, shifting the coordinate space
/// horizontally by the first argument and vertically by the second argument. ¿$<	¿$D  ¿$G	¿$O   ¿$VÅ,¿%cÄ˚/// Add an axis-aligned scale to the current transform, scaling by the first
/// argument in the horizontal direction and the second in the vertical
/// direction.
///
/// If [sy] is unspecified, [sx] will be used for the scale in both
/// directions. ¿%i	¿%q  ¿%u
¿%~   ¿%Üq¿%‡R/// Add a rotation to the current transform. The argument is in radians clockwise. ¿%Á¿%Ô   ¿%˚Å5¿'Å/// Add an axis-aligned skew to the current transform, with the first argument
/// being the horizontal skew in rise over run units clockwise around the
/// origin, and the second argument being the vertical skew in rise over run
/// units clockwise around the origin. ¿'	¿'"  ¿'%	¿'-   ¿'4ÄØ¿'ƒÄà/// Multiply the current transform by the specified 4‚®â4 transformation matrix
/// specified as a list of values in column-major order. ¿'Œ¿'€   ¿'ÁÇ¿)€Å◊/// Returns the current transform including the combined result of all transform
/// methods executed since the creation of this [Canvas] object, and respecting the
/// save/restore history.
///
/// Methods that can change the current transform include [translate], [scale],
/// [rotate], [skew], and [transform]. The [restore] method can also modify
/// the current transform by restoring it to the same value it had before its
/// associated [save] or [saveLayer] call.   ¿)ÓÇê¿,+Ç/// Reduces the clip region to the intersection of the current clip and the
/// given rectangle.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/clip_rect.png)
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that.
///
/// Use [ClipOp.difference] to subtract the provided rectangle from the
/// current clip. ¿,4	¿,:  ¿,A ¿,I  ¿,c¿,i  ¿,Q¿,W¿,X¿,v¿,ÇÇ;¿.ãÅÔ/// Reduces the clip region to the intersection of the current clip and the
/// given rounded rectangle.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/clip_rrect.png)
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that and some examples of using [clipRRect]. ¿.ï¿.ú  ¿.£¿.©  ¿.∂¿.¡Ç¿0óÅº/// Reduces the clip region to the intersection of the current clip and the
/// given [Path].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/clip_path.png)
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that. ¿0†	¿0¶  ¿0¨¿0≤  ¿0ø¿0 ä›¿;íäZ/// Returns the conservative bounds of the combined result of all clip methods
/// executed within the current save stack of this [Canvas] object, as measured
/// in the local coordinate space under which rendering operations are currently
/// performed.
///
/// The combined clip results are rounded out to an integer pixel boundary before
/// they are transformed back into the local coordinate space which accounts for
/// the pixel roundoff in rendering operations, particularly when antialiasing.
/// Because the [Picture] may eventually be rendered into a scene within the
/// context of transforming widgets or layers, the result may thus be overly
/// conservative due to premature rounding. Using the [getDestinationClipBounds]
/// method combined with the external transforms and rounding in the true device
/// coordinate system will produce more accurate results, but this value may
/// provide a more convenient approximation to compare rendering operations to
/// the established clip.
///
/// {@template dart.ui.canvas.conservativeClipBounds}
/// The conservative estimate of the bounds is based on intersecting the bounds
/// of each clip method that was executed with [ClipOp.intersect] and potentially
/// ignoring any clip method that was executed with [ClipOp.difference]. The
/// [ClipOp] argument is only present on the [clipRect] method.
///
/// To understand how the bounds estimate can be conservative, consider the
/// following two clip method calls:
///
/// ```dart
/// void draw(Canvas canvas) {
///   canvas.clipPath(Path()
///     ..addRect(const Rect.fromLTRB(10, 10, 20, 20))
///     ..addRect(const Rect.fromLTRB(80, 80, 100, 100)));
///   canvas.clipPath(Path()
///     ..addRect(const Rect.fromLTRB(80, 10, 100, 20))
///     ..addRect(const Rect.fromLTRB(10, 80, 20, 100)));
///   // ...
/// }
/// ```
///
/// After executing both of those calls there is no area left in which to draw
/// because the two paths have no overlapping regions. But, in this case,
/// [getLocalClipBounds] would return a rectangle from `10, 10` to `100, 100` because it
/// only intersects the bounds of the two path objects to obtain its conservative
/// estimate.
///
/// The clip bounds are not affected by the bounds of any enclosing
/// [saveLayer] call as the engine does not currently guarantee the strict
/// enforcement of those bounds during rendering.
///
/// Methods that can change the current clip include [clipRect], [clipRRect],
/// and [clipPath]. The [restore] method can also modify the current clip by
/// restoring it to the same value it had before its associated [save] or
/// [saveLayer] call.
/// {@endtemplate}   ¿;´Éü¿?/Éb/// Returns the conservative bounds of the combined result of all clip methods
/// executed within the current save stack of this [Canvas] object, as measured
/// in the destination coordinate space in which the [Picture] will be rendered.
///
/// Unlike [getLocalClipBounds], the bounds are not rounded out to an integer
/// pixel boundary as the Destination coordinate space may not represent pixels
/// if the [Picture] being constructed will be further transformed when it is
/// rendered or added to a scene. In order to determine the true pixels being
/// affected, those external transforms should be applied first before rounding
/// out the result to integer pixel boundaries. Most typically, [Picture] objects
/// are rendered in a scene with a scale transform representing the Device Pixel
/// Ratio.
///
/// {@macro dart.ui.canvas.conservativeClipBounds}   ¿?NÄ›¿?ˇÄ•/// Paints the given [Color] onto the canvas, applying the given
/// [BlendMode], with the given color being the source and the background
/// being the destination. ¿@	¿@  ¿@¿@!   ¿@/Å¸¿AˇÅº/// Draws a line between the given points using the given paint. The line is
/// stroked, the value of the [Paint.style] is ignored for this call.
///
/// The `p1` and `p2` arguments are interpreted as offsets from the origin.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_line.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_line_dark.png#gh-dark-mode-only) ¿B	¿B  ¿B	¿B  ¿B¿B%   ¿B/Ä±¿B…Äå/// Fills the canvas with the given [Paint].
///
/// To fill the canvas with a solid color and blend mode, consider
/// [drawColor] instead. ¿B”¿B⁄   ¿B‰Åë¿DTÅ`/// Draws a rectangle with the given [Paint]. Whether the rectangle is filled
/// or stroked (or both) is controlled by [Paint.style].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_rect.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_rect_dark.png#gh-dark-mode-only) ¿D]	¿Dc  ¿Dh¿Do   ¿DyÅû¿EÛÅj/// Draws a rounded rectangle with the given [Paint]. Whether the rectangle is
/// filled or stroked (or both) is controlled by [Paint.style].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_rrect.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_rrect_dark.png#gh-dark-mode-only) ¿E˝¿F  ¿F
¿F   ¿FÅH¿G1Å/// Draws a shape consisting of the difference between two rounded rectangles
/// with the given [Paint]. Whether this shape is filled or stroked (or both)
/// is controlled by [Paint.style].
///
/// This shape is almost but not quite entirely unlike an annulus. ¿G<¿GC  ¿GI¿GP  ¿GV¿G]   ¿GgÅ«¿IÅî/// Draws an axis-aligned oval that fills the given axis-aligned rectangle
/// with the given [Paint]. Whether the oval is filled or stroked (or both) is
/// controlled by [Paint.style].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_oval.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_oval_dark.png#gh-dark-mode-only) ¿I	¿I  ¿I!¿I(   ¿I2Ç)¿K*Å‰/// Draws a circle centered at the point given by the first argument and
/// that has the radius given by the second argument, with the [Paint] given in
/// the third argument. Whether the circle is filled or stroked (or both) is
/// controlled by [Paint.style].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_circle.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_circle_dark.png#gh-dark-mode-only) ¿K5¿K=  ¿K?¿KG  ¿KN¿KU   ¿K_É€¿N‰Éc/// Draw an arc scaled to fit inside the given rectangle.
///
/// It starts from `startAngle` radians around the oval up to
/// `startAngle` + `sweepAngle` radians around the oval, with zero radians
/// being the point on the right hand side of the oval that crosses the
/// horizontal line that intersects the center of the rectangle and with positive
/// angles going clockwise around the oval. If `useCenter` is true, the arc is
/// closed back to the center, forming a circle sector. Otherwise, the arc is
/// not closed, forming a circle segment.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_draw_arc.png#gh-light-mode-only)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/canvas_draw_arc_dark.png#gh-dark-mode-only)
///
/// This method is optimized for drawing arcs and should be faster than [Path.arcTo]. ¿NÏ	¿NÚ  ¿N˜¿Nˇ  ¿O
¿O  ¿O¿O#  ¿O-¿O4   ¿O>Å¿P<ÄÓ/// Draws the given [Path] with the given [Paint].
///
/// Whether this shape is filled or stroked (or both) is controlled by
/// [Paint.style]. If the path is filled, then sub-paths within it are
/// implicitly closed (see [Path.close]). ¿PE	¿PK  ¿PP¿PW   ¿PaÄ›¿QÄ†/// Draws the given [Image] into the canvas with its top-left corner at the
/// given [Offset]. The image is composited into the canvas using the given [Paint]. ¿Q¿Q  ¿Q"¿Q*  ¿Q1¿Q8   ¿QBÅ¯¿R˛Å§/// Draws the subset of the given image described by the `src` argument into
/// the canvas in the axis-aligned rectangle given by the `dst` argument.
///
/// This might sample from outside the `src` rect by up to half the width of
/// an applied filter.
///
/// Multiple calls to this method with different arguments (from the same
/// image) can be batched into a single call to [drawAtlas] to improve
/// performance. ¿S¿S  ¿S¿S  ¿S#¿S)  ¿S-¿S4   ¿S>ÉQ¿VPÇÚ/// Draws the given [Image] into the canvas using the given [Paint].
///
/// The image is drawn in nine portions described by splitting the image by
/// drawing two horizontal lines and two vertical lines, where the `center`
/// argument describes the rectangle formed by the four points where these
/// four lines intersect each other. (This forms a 3-by-3 grid of regions,
/// the center region being described by the `center` argument.)
///
/// The four regions in the corners are drawn, without scaling, in the four
/// corners of the destination rectangle described by `dst`. The remaining
/// five regions are drawn by stretching them to fit such that they exactly
/// cover the destination rectangle while maintaining their relative
/// positions. ¿V^¿Ve  ¿Vk¿Vq  ¿Vx¿V~  ¿VÇ¿Vâ   ¿VìÄÇ¿V¯[/// Draw the given picture onto the canvas. To create a picture, see
/// [PictureRecorder]. ¿W¿W   ¿WÑI¿[0ÉÈ/// Draws the text in the given [Paragraph] into this canvas at the given
/// [Offset].
///
/// The [Paragraph] object must have had [Paragraph.layout] called on it
/// first.
///
/// To align the text, set the `textAlign` on the [ParagraphStyle] object
/// passed to the [ParagraphBuilder.new] constructor. For more details see
/// [TextAlign] and the discussion at [ParagraphStyle.new].
///
/// If the text is left aligned or justified, the left margin will be at the
/// position specified by the `offset` argument's [Offset.dx] coordinate.
///
/// If the text is right aligned or justified, the right margin will be at the
/// position described by adding the [ParagraphConstraints.width] given to
/// [Paragraph.layout], to the `offset` argument's [Offset.dx] coordinate.
///
/// If the text is centered, the centering axis will be at the position
/// described by adding half of the [ParagraphConstraints.width] given to
/// [Paragraph.layout], to the `offset` argument's [Offset.dx] coordinate. ¿[>¿[I  ¿[S¿[[   ¿[fÅÙ¿]Åñ/// Draws a sequence of points according to the given [PointMode].
///
/// The `points` argument is interpreted as offsets from the origin.
///
/// The `paint` is used for each point ([PointMode.points]) or line
/// ([PointMode.lines] or [PointMode.polygon]), ignoring [Paint.style].
///
/// See also:
///
///  * [drawRawPoints], which takes `points` as a [Float32List] rather than a
///    [List<Offset>]. ¿]#¿].  ¿]8¿]F  ¿]M¿]T   ¿]^ÇO¿_iÅÌ/// Draws a sequence of points according to the given [PointMode].
///
/// The `points` argument is interpreted as a list of pairs of floating point
/// numbers, where each pair represents an x and y offset from the origin.
///
/// The `paint` is used for each point ([PointMode.points]) or line
/// ([PointMode.lines] or [PointMode.polygon]), ignoring [Paint.style].
///
/// See also:
///
///  * [drawPoints], which takes `points` as a [List<Offset>] rather than a
///    [List<Float32List>]. ¿_w¿_Ç  ¿_å¿_ô  ¿_†¿_ß   ¿_±Ü;¿e™Öª/// Draws a set of [Vertices] onto the canvas as one or more triangles.
///
/// The [Paint.color] property specifies the default color to use for the
/// triangles.
///
/// The [Paint.shader] property, if set, overrides the color entirely,
/// replacing it with the colors from the specified [ImageShader], [Gradient],
/// or other shader.
///
/// The `blendMode` parameter is used to control how the colors in the
/// `vertices` are combined with the colors in the `paint`. If there are no
/// colors specified in `vertices` then the `blendMode` has no effect. If
/// there are colors in the `vertices`, then the color taken from the
/// [Paint.shader] or [Paint.color] in the `paint` is blended with the colors
/// specified in the `vertices` using the `blendMode` parameter. For the
/// purposes of this blending, the colors from the `paint` parameter are
/// considered the source, and the colors from the `vertices` are considered
/// the destination. [BlendMode.dst] ignores the `paint` and uses only the
/// colors of the `vertices`; [BlendMode.src] ignores the colors of the
/// `vertices` and uses only the colors in the `paint`.
///
/// All parameters must not be null.
///
/// See also:
///   * [Vertices.new], which creates a set of vertices to draw on the canvas.
///   * [Vertices.raw], which creates the vertices using typed data lists
///     rather than unencoded lists.
///   * [paint], Image shaders can be used to draw images on a triangular mesh. ¿e∑¿e¡  ¿e ¿e’  ¿eﬂ¿eÊ   ¿eñï¿{êîî/// Draws many parts of an image - the [atlas] - onto the canvas.
///
/// This method allows for optimization when you want to draw many parts of an
/// image onto the canvas, such as when using sprites or zooming. It is more efficient
/// than using multiple calls to [drawImageRect] and provides more functionality
/// to individually transform each image part by a separate rotation or scale and
/// blend or modulate those parts with a solid color.
///
/// The method takes a list of [Rect] objects that each define a piece of the
/// [atlas] image to be drawn independently. Each [Rect] is associated with an
/// [RSTransform] entry in the [transforms] list which defines the location,
/// rotation, and (uniform) scale with which to draw that portion of the image.
/// Each [Rect] can also be associated with an optional [Color] which will be
/// composed with the associated image part using the [blendMode] before blending
/// the result onto the canvas. The full operation can be broken down as:
///
/// - Blend each rectangular portion of the image specified by an entry in the
/// [rects] argument with its associated entry in the [colors] list using the
/// [blendMode] argument (if a color is specified). In this part of the operation,
/// the image part will be considered the source of the operation and the associated
/// color will be considered the destination.
/// - Blend the result from the first step onto the canvas using the translation,
/// rotation, and scale properties expressed in the associated entry in the
/// [transforms] list using the properties of the [Paint] object.
///
/// If the first stage of the operation which blends each part of the image with
/// a color is needed, then both the [colors] and [blendMode] arguments must
/// not be null and there must be an entry in the [colors] list for each
/// image part. If that stage is not needed, then the [colors] argument can
/// be either null or an empty list and the [blendMode] argument may also be null.
///
/// The optional [cullRect] argument can provide an estimate of the bounds of the
/// coordinates rendered by all components of the atlas to be compared against
/// the clip to quickly reject the operation if it does not intersect.
///
/// An example usage to render many sprites from a single sprite atlas with no
/// rotations or scales:
///
/// ```dart
/// class Sprite {
///   Sprite(this.index, this.center);
///   int index;
///   Offset center;
/// }
///
/// class MyPainter extends CustomPainter {
///   MyPainter(this.spriteAtlas, this.allSprites);
///
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     Paint paint = Paint();
///     canvas.drawAtlas(spriteAtlas, <RSTransform>[
///       for (final Sprite sprite in allSprites)
///         RSTransform.fromComponents(
///           rotation: 0.0,
///           scale: 1.0,
///           // Center of the sprite relative to its rect
///           anchorX: 5.0,
///           anchorY: 5.0,
///           // Location at which to draw the center of the sprite
///           translateX: sprite.center.dx,
///           translateY: sprite.center.dy,
///         ),
///     ], <Rect>[
///       for (final Sprite sprite in allSprites)
///         Rect.fromLTWH(sprite.index * 10.0, 0.0, 10.0, 10.0),
///     ], null, null, null, paint);
///   }
///
///   // ...
/// }
/// ```
///
/// Another example usage which renders sprites with an optional opacity and rotation:
///
/// ```dart
/// class Sprite {
///   Sprite(this.index, this.center, this.alpha, this.rotation);
///   int index;
///   Offset center;
///   int alpha;
///   double rotation;
/// }
///
/// class MyPainter extends CustomPainter {
///   MyPainter(this.spriteAtlas, this.allSprites);
///
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     Paint paint = Paint();
///     canvas.drawAtlas(spriteAtlas, <RSTransform>[
///       for (final Sprite sprite in allSprites)
///         RSTransform.fromComponents(
///           rotation: sprite.rotation,
///           scale: 1.0,
///           // Center of the sprite relative to its rect
///           anchorX: 5.0,
///           anchorY: 5.0,
///           // Location at which to draw the center of the sprite
///           translateX: sprite.center.dx,
///           translateY: sprite.center.dy,
///         ),
///     ], <Rect>[
///       for (final Sprite sprite in allSprites)
///         Rect.fromLTWH(sprite.index * 10.0, 0.0, 10.0, 10.0),
///     ], <Color>[
///       for (final Sprite sprite in allSprites)
///         Colors.white.withAlpha(sprite.alpha),
///     ], BlendMode.srcIn, null, paint);
///   }
///
///   // ...
/// }
/// ```
///
/// The length of the [transforms] and [rects] lists must be equal and
/// if the [colors] argument is not null then it must either be empty or
/// have the same length as the other two lists.
///
/// See also:
///
///  * [drawRawAtlas], which takes its arguments as typed data lists rather
///    than objects. ¿{ö¿{°  ¿{∏¿{À  ¿{Á¿{Û  ¿|
¿|  ¿|0¿|<  ¿|W¿|^  ¿|x¿|   ¿|âõ¿ñôò‰/// Draws many parts of an image - the [atlas] - onto the canvas.
///
/// This method allows for optimization when you want to draw many parts of an
/// image onto the canvas, such as when using sprites or zooming. It is more efficient
/// than using multiple calls to [drawImageRect] and provides more functionality
/// to individually transform each image part by a separate rotation or scale and
/// blend or modulate those parts with a solid color. It is also more efficient
/// than [drawAtlas] as the data in the arguments is already packed in a format
/// that can be directly used by the rendering code.
///
/// A full description of how this method uses its arguments to draw onto the
/// canvas can be found in the description of the [drawAtlas] method.
///
/// The [rstTransforms] argument is interpreted as a list of four-tuples, with
/// each tuple being ([RSTransform.scos], [RSTransform.ssin],
/// [RSTransform.tx], [RSTransform.ty]).
///
/// The [rects] argument is interpreted as a list of four-tuples, with each
/// tuple being ([Rect.left], [Rect.top], [Rect.right], [Rect.bottom]).
///
/// The [colors] argument, which can be null, is interpreted as a list of
/// 32-bit colors, with the same packing as [Color.value]. If the [colors]
/// argument is not null then the [blendMode] argument must also not be null.
///
/// An example usage to render many sprites from a single sprite atlas with no rotations
/// or scales:
///
/// ```dart
/// class Sprite {
///   Sprite(this.index, this.center);
///   int index;
///   Offset center;
/// }
///
/// class MyPainter extends CustomPainter {
///   MyPainter(this.spriteAtlas, this.allSprites);
///
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     // For best advantage, these lists should be cached and only specific
///     // entries updated when the sprite information changes. This code is
///     // illustrative of how to set up the data and not a recommendation for
///     // optimal usage.
///     Float32List rectList = Float32List(allSprites.length * 4);
///     Float32List transformList = Float32List(allSprites.length * 4);
///     for (int i = 0; i < allSprites.length; i++) {
///       Sprite sprite = allSprites[i];
///       final double rectX = sprite.index * 10.0;
///       rectList[i * 4 + 0] = rectX;
///       rectList[i * 4 + 1] = 0.0;
///       rectList[i * 4 + 2] = rectX + 10.0;
///       rectList[i * 4 + 3] = 10.0;
///
///       // This example sets the RSTransform values directly for a common case of no
///       // rotations or scales and just a translation to position the atlas entry. For
///       // more complicated transforms one could use the RSTransform class to compute
///       // the necessary values or do the same math directly.
///       transformList[i * 4 + 0] = 1.0;
///       transformList[i * 4 + 1] = 0.0;
///       transformList[i * 4 + 2] = sprite.center.dx - 5.0;
///       transformList[i * 4 + 3] = sprite.center.dy - 5.0;
///     }
///     Paint paint = Paint();
///     canvas.drawRawAtlas(spriteAtlas, transformList, rectList, null, null, null, paint);
///   }
///
///   // ...
/// }
/// ```
///
/// Another example usage which renders sprites with an optional opacity and rotation:
///
/// ```dart
/// class Sprite {
///   Sprite(this.index, this.center, this.alpha, this.rotation);
///   int index;
///   Offset center;
///   int alpha;
///   double rotation;
/// }
///
/// class MyPainter extends CustomPainter {
///   MyPainter(this.spriteAtlas, this.allSprites);
///
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     // For best advantage, these lists should be cached and only specific
///     // entries updated when the sprite information changes. This code is
///     // illustrative of how to set up the data and not a recommendation for
///     // optimal usage.
///     Float32List rectList = Float32List(allSprites.length * 4);
///     Float32List transformList = Float32List(allSprites.length * 4);
///     Int32List colorList = Int32List(allSprites.length);
///     for (int i = 0; i < allSprites.length; i++) {
///       Sprite sprite = allSprites[i];
///       final double rectX = sprite.index * 10.0;
///       rectList[i * 4 + 0] = rectX;
///       rectList[i * 4 + 1] = 0.0;
///       rectList[i * 4 + 2] = rectX + 10.0;
///       rectList[i * 4 + 3] = 10.0;
///
///       // This example uses an RSTransform object to compute the necessary values for
///       // the transform using a factory helper method because the sprites contain
///       // rotation values which are not trivial to work with. But if the math for the
///       // values falls out from other calculations on the sprites then the values could
///       // possibly be generated directly from the sprite update code.
///       final RSTransform transform = RSTransform.fromComponents(
///         rotation: sprite.rotation,
///         scale: 1.0,
///         // Center of the sprite relative to its rect
///         anchorX: 5.0,
///         anchorY: 5.0,
///         // Location at which to draw the center of the sprite
///         translateX: sprite.center.dx,
///         translateY: sprite.center.dy,
///       );
///       transformList[i * 4 + 0] = transform.scos;
///       transformList[i * 4 + 1] = transform.ssin;
///       transformList[i * 4 + 2] = transform.tx;
///       transformList[i * 4 + 3] = transform.ty;
///
///       // This example computes the color value directly, but one could also compute
///       // an actual Color object and use its Color.value getter for the same result.
///       // Since we are using BlendMode.srcIn, only the alpha component matters for
///       // these colors which makes this a simple shift operation.
///       colorList[i] = sprite.alpha << 24;
///     }
///     Paint paint = Paint();
///     canvas.drawRawAtlas(spriteAtlas, transformList, rectList, colorList, BlendMode.srcIn, null, paint);
///   }
///
///   // ...
/// }
/// ```
///
/// See also:
///
///  * [drawAtlas], which takes its arguments as objects rather than typed
///    data lists. ¿ñ¶¿ñ≠  ¿ñ«¿ñ‘  ¿ñˆ¿ó  ¿ó¿ó)  ¿óD¿óP  ¿ón¿óu  ¿óí¿óô   ¿ó£Å8¿òåÄ◊/// Draws a shadow for a [Path] representing the given material elevation.
///
/// The `transparentOccluder` argument should be true if the occluding object
/// is not opaque.
///
/// The arguments must not be null. ¿òó	¿òù  ¿ò¢¿ò©  ¿òØ¿ò∑  ¿ò¡¿ò«    ¿òﬂ¿ K≠¿òÍ  ¿ô/Åì ¿ô/¿ô< ¿ô=¿ôN  ¿ôY¿ô`   ¿ú£!¿úª   C¿ö∆Ä‹¿õ>  ¿õK¿õc  ¿õl¿õt  ¿õy
¿õÅ  ¿õÖ¿õç  ¿õì¿õõ  ¿ö∆¿ö«¿öÕ¿õ¿ö”¿öŒ¿ö€¿õ¿ö‹¿ö‰¿öÎ¿ö¿öÏ¿öÛ¿ö˚¿õ¿õ¿õ¿õ,¿õ¿õ¿õ¿ú…o¿ù1   ¿ú…¿ú ¿ú’¿ú÷¿ú‹¿ú˘¿ú‚¿ú›¿úÍ¿ú¯¿úÎ¿úÚ¿ú˜¿úÛ¿ú˙¿ù¿ù¿ú˚¿ù¿ù¿ù¿ù¿ù<Å¿ùH  ¿ùP	¿ùV   ¿û\Å-¿ûm  ¿ûw¿û~  ¿ûÖ¿ûå  ¿û\¿û]¿üçÄπ¿ü˝  ¿†¿†%  ¿†2¿†<  ¿üç¿üé¿üî¿ü¡¿üö¿üï¿ü¢¿ü¿¿ü£¿ü™¿üØ¿ü´¿ü≤¿ü∫¿ü¬¿üÎ¿ü…¿ü√¿üÀ¿†JÄı¿†Õ  ¿†ÿ¿†‡  ¿†Â
¿†Ì  ¿†Ò¿†˘  ¿†ˇ¿°  ¿°¿°  ¿°+¿°5  ¿†J¿†K¿†Q¿†û¿†W¿†R¿†_¿†ù¿†`¿†g¿†l¿†h¿†o¿†w¿†¿†á¿†è¿†ó¿†ü¿†ª¿†¶¿††¿†®¿°Cu¿°Æ   ¿°C¿°D¿°O¿°P¿°V¿°s¿°\¿°W¿°d¿°r¿°e¿°l¿°q¿°m¿°t¿°ú¿°{¿°u¿°}¿°ñ¿°ê¿°ò¿°ºÄì¿¢5  ¿¢D	¿¢I  ¿°º¿°Ω¿°»¿°…¿°œ¿°Û¿°’¿°–¿°›¿°Ú¿°ﬁ¿°Â¿°Í¿°Ê¿°Ì¿°Ù¿¢#¿°˚¿°ı¿°˝¿¢¿¢¿¢¿¢S¿¢√   ¿¢S¿¢T¿¢_¿¢`¿¢f¿¢Ñ¿¢m¿¢g¿¢u¿¢É¿¢v¿¢}¿¢Ç¿¢~¿¢Ö¿¢≤¿¢å¿¢Ü¿¢é¿¢¨¿¢¶¿¢Æ¿¢÷Äù¿£S  ¿£]	¿£e  ¿£h	¿£p  ¿¢÷¿¢◊¿¢‚¿¢„¿¢È¿£¿¢Ô¿¢Í¿¢˜¿£¿¢¯¿¢ˇ¿£¿£ ¿£¿£¿£¿£A¿£¿£¿£ ¿£;¿£5¿£=¿£wH¿£à  ¿£é	¿£ñ  ¿£ö
¿££  ¿£w¿£x¿£√Ää¿§0  ¿§7	¿§?  ¿§B	¿§J  ¿£√¿£ƒ¿£ ¿£˜¿£–¿£À¿£ÿ¿£ˆ¿£Ÿ¿£‡¿£Â¿£·¿£Ë¿£¿£¯¿§¿£ˇ¿£˘¿§¿§¿§¿§¿§QÄâ¿§√  ¿§ ¿§“  ¿§Q¿§R¿§]¿§^¿§d¿§â¿§j¿§e¿§r¿§à¿§s¿§z¿§¿§{¿§Ç¿§ä¿§±¿§ë¿§ã¿§ì¿§´¿§•¿§≠¿§ﬁÄì¿•V  ¿•[	¿•c  ¿•f	¿•n  ¿§ﬁ¿§ﬂ¿§Í¿§Î¿§Ò¿•¿§˜¿§Ú¿§ˇ¿•¿• ¿•¿•¿•¿•¿•¿•¿•D¿•&¿• ¿•(¿•>¿•8¿•@¿•uÄ≤¿•Ü  ¿•ê¿•ù  ¿•u¿•v¿¶+{¿¶Ü  ¿¶ë¿¶û  ¿¶+¿¶,¿¶2¿¶W¿¶8¿¶3¿¶@¿¶V¿¶A¿¶H¿¶M¿¶I¿¶P¿¶X¿¶t¿¶_¿¶Y¿¶a¿¶™Äç¿¶¬   ¿¶™¿¶´¿ß;ÄÅ¿ßô  ¿ßß¿ß¥  ¿ß;¿ß<¿ßB¿ßg¿ßH¿ßC¿ßP¿ßf¿ßQ¿ßX¿ß]¿ßY¿ß`¿ßh¿ßá¿ßo¿ßi¿ßq¿ß¿Åÿ¿ß—  ¿ß⁄	¿ß‡  ¿ßÁ ¿ßÔ  ¿®	¿®  ¿ß¿¿ß¡¿ß˜¿ß˝¿ß˛¿®¿©úÄÎ¿™)  ¿™3¿™;  ¿™@
¿™H  ¿™L¿™T  ¿™Z¿™b  ¿™i
¿™n  ¿™u¿™{  ¿©ú¿©ù¿©£¿©Ì¿©©¿©§¿©±¿©Ï¿©≤¿©π¿©æ¿©∫¿©¡¿©…¿©—¿©Ÿ¿©·¿©Ë¿©Ó¿™¿©ı¿©Ô¿©˜¿™¿™¿™¿™ãÄú¿™ú  ¿™¶¿™≠  ¿™¥¿™∫  ¿™ã¿™å¿™«¿´+Äë¿´å  ¿´ó¿´§  ¿´™¿´∞  ¿´+¿´,¿´2¿´]¿´8¿´3¿´@¿´\¿´A¿´H¿´M¿´I¿´P¿´X¿´^¿´z¿´e¿´_¿´g¿´¿v¿´—  ¿´⁄	¿´‡  ¿´Ê¿´Ï  ¿´¿¿´¡¿´˘¿¨:Äï¿¨°  ¿¨´¿¨∏  ¿¨Ω¿¨√  ¿¨:¿¨;¿¨A¿¨s¿¨G¿¨B¿¨O¿¨r¿¨P¿¨W¿¨\¿¨X¿¨_¿¨f¿¨k¿¨g¿¨n¿¨t¿¨è¿¨{¿¨u¿¨}¿¨”Ä¡¿¨‰   ¿¨”¿¨‘¿≠òÄå¿≠¸  ¿Æ¿Æ  ¿≠ò¿≠ô¿≠ü¿≠ƒ¿≠•¿≠†¿≠≠¿≠√¿≠Æ¿≠µ¿≠∫¿≠∂¿≠Ω¿≠≈¿≠Í¿≠Ã¿≠∆¿≠Œ¿Æ(ÄÕ¿Æ9   ¿Æ(¿Æ)¿Æ˘Äò¿Øc  ¿Ø}¿Øä  ¿Æ˘¿Æ˙¿Ø ¿Ø%¿Ø¿Ø¿Ø¿Ø$¿Ø¿Ø¿Ø¿Ø¿Ø¿Ø&¿ØQ¿Ø-¿Ø'¿Ø/¿Øïp¿Ø¶  ¿Ø∞¿Ø∑  ¿ØΩ¿Ø»  ¿Øï¿Øñ¿∞	Äï¿∞y  ¿∞Ñ	¿∞â  ¿∞è¿∞î  ¿∞	¿∞
¿∞¿∞<¿∞¿∞¿∞¿∞;¿∞¿∞&¿∞+¿∞'¿∞.¿∞6¿∞=¿∞g¿∞D¿∞>¿∞F¿∞a¿∞[¿∞c¿∞¢Ä ¿∞≥  ¿∞º	¿∞ƒ  ¿∞«	¿∞œ  ¿∞“¿∞Ÿ  ¿∞¢¿∞£¿±pÄÈ¿±Ú  ¿±¸	¿≤  ¿≤	¿≤  ¿≤	¿≤  ¿≤	¿≤%  ¿≤(¿≤8  ¿≤E¿≤O  ¿±p¿±q¿±w¿±ƒ¿±}¿±x¿±Ö¿±√¿±Ü¿±ç¿±í¿±é¿±ï¿±ù¿±•¿±≠¿±µ¿±Ω¿±≈¿±‡¿±Ã¿±∆¿±Œ¿≤]Z¿≤n  ¿≤x¿≤  ¿≤]¿≤^¿≤ªÄü¿≥  ¿≥)¿≥9  ¿≥F¿≥P  ¿≤ª¿≤º¿≤¬¿≤Ô¿≤»¿≤√¿≤–¿≤Ó¿≤—¿≤ÿ¿≤›¿≤Ÿ¿≤‡¿≤Ë¿≤¿≥¿≤˜¿≤Ò¿≤˘¿≥^Å¿≥o  ¿≥x	¿≥~  ¿≥É¿≥ä  ¿≥^¿≥_¿¥sÄÛ¿¥ı  ¿¥ˇ¿µ  ¿µ
¿µ  ¿µ¿µ   ¿µ&¿µ.  ¿µ5¿µE  ¿µR¿µ\  ¿¥s¿¥t¿¥z¿¥«¿¥Ä¿¥{¿¥à¿¥∆¿¥â¿¥ê¿¥ï¿¥ë¿¥ò¿¥†¿¥®¿¥∞¿¥∏¿¥¿¿¥»¿¥„¿¥œ¿¥…¿¥—¿µjÄû¿µ{  ¿µÖ¿µå  ¿µí¿µô  ¿µj¿µk¿∂Ä∫¿∂w  ¿∂Ç¿∂è  ¿∂ï¿∂•  ¿∂≤¿∂º  ¿∂¿∂¿∂¿∂H¿∂¿∂¿∂!¿∂G¿∂"¿∂)¿∂.¿∂*¿∂1¿∂9¿∂A¿∂I¿∂e¿∂P¿∂J¿∂R¿∂ Ä‰¿∂€  ¿∂Ê¿∂Ì  ¿∂Û¿∂˙  ¿∑ ¿∑  ¿∂ ¿∂À¿∑≤Ä◊¿∏&  ¿∏2¿∏?  ¿∏E¿∏R  ¿∏X¿∏h  ¿∏u¿∏  ¿∑≤¿∑≥¿∑π¿∑ˆ¿∑ø¿∑∫¿∑«¿∑ı¿∑»¿∑œ¿∑‘¿∑–¿∑◊¿∑ﬂ¿∑Á¿∑Ô¿∑˜¿∏¿∑˛¿∑¯¿∏ ¿∏çÅ¿∏û  ¿∏ß	¿∏≠  ¿∏≤¿∏π  ¿∏ç¿∏é¿π¢ÄÛ¿∫$  ¿∫.¿∫6  ¿∫;
¿∫C  ¿∫G¿∫O  ¿∫U¿∫]  ¿∫d¿∫t  ¿∫Å¿∫ã  ¿π¢¿π£¿π©¿πˆ¿πØ¿π™¿π∑¿πı¿π∏¿πø¿πƒ¿π¿¿π«¿πœ¿π◊¿πﬂ¿πÁ¿πÔ¿π˜¿∫¿π˛¿π¯¿∫ ¿∫ôÄ®¿∫™  ¿∫µ¿∫Ω  ¿∫ø¿∫«  ¿∫Œ¿∫’  ¿∫ô¿∫ö¿ªEÄ‹¿ª¡  ¿ªÕ¿ª’  ¿ª◊¿ªﬂ  ¿ª·¿ªÈ  ¿ª¿º   ¿º¿º  ¿ªE¿ªF¿ªL¿ªë¿ªR¿ªM¿ªZ¿ªê¿ª[¿ªb¿ªg¿ªc¿ªj¿ªr¿ªz¿ªÇ¿ªä¿ªí¿ªØ¿ªô¿ªì¿ªõ¿º%Å¿º6  ¿º>	¿ºD  ¿ºI¿ºQ  ¿º\¿ºd  ¿ºo¿ºu  ¿º¿ºÜ  ¿º%¿º&¿Ω1Åt¿Ω»  	¿Ωÿ¿Ω‡  ¿ΩÎ
¿ΩÛ  ¿Ω˝¿æ  ¿æ¿æ  ¿æ&¿æ.  ¿æ?¿æG  ¿æX¿æ^  ¿æn¿æ~  ¿æë¿æõ  ¿Ω1¿Ω2¿Ω8¿Ωõ¿Ω>¿Ω9¿ΩF¿Ωö¿ΩG¿ΩN¿ΩS¿ΩO¿ΩV¿Ω^¿Ωf¿Ωn¿Ωv¿Ω~¿ΩÜ¿Ωå¿Ωî¿Ωú¿Ω∂¿Ω£¿Ωù¿Ω•¿æ©x¿æ∫  ¿æ√	¿æ…  ¿æŒ¿æ’  ¿æ©¿æ™¿ø%Äæ¿øñ  ¿ø†¿ø≠  ¿ø≤¿ø¬  ¿øœ¿øŸ  ¿ø%¿ø&¿ø,¿øh¿ø2¿ø-¿ø:¿øg¿ø;¿øB¿øG¿øC¿øJ¿øQ¿øV¿øR¿øY¿øa¿øi¿øÑ¿øp¿øj¿ør¿øÁÅ~¿ø¯  ¿¿¿¿	  ¿¿¿¿  ¿¿¿¿%  ¿øÁ¿øË¿¡iÅ¿¡˜  ¿¬¿¬
  ¿¬¿¬  ¿¬¿¬"  ¿¬$¿¬4  ¿¬A¿¬K  ¿¬U¿¬Z  ¿¡i¿¡j¿¡p¿¡≈¿¡x¿¡q¿¡Ä¿¡ƒ¿¡Å¿¡à¿¡ç¿¡â¿¡ê¿¡ó¿¡ú¿¡ò¿¡ü¿¡ß¿¡Ø¿¡∑¿¡ø¿¡∆¿¡‚¿¡Õ¿¡«¿¡œ¿¬qÉ¶¿¬Ç  ¿¬ê¿¬ó  ¿¬ù¿¬£  ¿¬ß¿¬≠  ¿¬±¿¬∏  ¿¬q¿¬r¿∆Åı¿∆›  ¿∆Û¿∆˚  ¿«¿«  ¿«¿«%  ¿«2¿«:  ¿«I¿«Q  ¿«a¿«i  ¿«w¿«  ¿«å¿«î  ¿«£¿«´  ¿«ª¿«À  ¿«ﬁ¿«Ë  ¿«¯¿«˝   ¿∆¿∆¿∆"¿∆ß¿∆*¿∆#¿∆2¿∆¶¿∆3¿∆:¿∆?¿∆;¿∆B¿∆I¿∆N¿∆J¿∆Q¿∆Y¿∆a¿∆i¿∆q¿∆y¿∆Å¿∆â¿∆ë¿∆ô¿∆°¿∆®¿∆»¿∆Ø¿∆©¿∆±¿»É∏¿»%  ¿»3¿»:  ¿»@¿»F  ¿»M¿»S  ¿»W¿»^  ¿»¿»¿À–Ç¿Ãí  ¿Ã®¿Ã∞  ¿Ãº¿Ãƒ  ¿Ã’¿Ã›  ¿ÃÌ¿Ãı  ¿Õ¿Õ  ¿Õ"¿Õ*  ¿Õ8¿Õ@  ¿ÕM¿ÕU  ¿Õd¿Õl  ¿Õ|¿Õå  ¿Õü¿Õ©  ¿Õπ¿Õæ   ¿À–¿À—¿À◊¿Ã\¿Àﬂ¿Àÿ¿ÀÁ¿Ã[¿ÀË¿ÀÔ¿ÀÙ¿À¿À˜¿À˛¿Ã¿Àˇ¿Ã¿Ã¿Ã¿Ã¿Ã&¿Ã.¿Ã6¿Ã>¿ÃF¿ÃN¿ÃV¿Ã]¿Ã}¿Ãd¿Ã^¿Ãf¿Õ’ÄÑ¿ÕÊ  ¿ÕÚ¿Õ˚  ¿Õ’¿Õ÷¿Œ]Äâ¿Œ¡  ¿ŒŒ¿Œﬁ  ¿Œ]¿Œ^¿Œd¿Œê¿Œj¿Œe¿Œr¿Œè¿Œs¿Œz¿Œ¿Œ{¿ŒÇ¿Œâ¿Œé¿Œä¿Œë¿ŒØ¿Œò¿Œí¿Œö¿ŒÍÅG¿Œ˚  ¿œ	¿œ  ¿œ¿œ&  ¿ŒÍ¿ŒÎ¿–5Ä±¿–F  ¿–Q¿–\  ¿–f¿–t  ¿–{¿–Ç  ¿–5¿–6¿–ÍÅ¿–˚  ¿—	¿—  ¿—¿—+  ¿—2¿—9  ¿–Í¿–Î¿“Ä”¿“u  ¿“Å¿“ë  ¿“û¿“®  ¿“≤¿“∑  ¿“¡¿“Œ  ¿“¿“¿“	¿“E¿“¿“
¿“¿“D¿“¿“¿“$¿“ ¿“'¿“/¿“7¿“>¿“F¿“c¿“M¿“G¿“O¿“ŸÄ»¿“Í  ¿“˜¿”  ¿”
¿”  ¿”¿”&  ¿“Ÿ¿“⁄¿”•Ä›¿‘!  ¿‘/¿‘9  ¿‘B¿‘G  ¿‘Q¿‘a  ¿‘n¿‘x  ¿”•¿”¶¿”¨¿”Ô¿”≤¿”≠¿”∫¿”Ó¿”ª¿”¬¿”«¿”√¿” ¿”—¿”÷¿”“¿”Ÿ¿”‡¿”Ë¿”¿‘¿”˜¿”Ò¿”˘¿‘Üà"¿‘ó  ¿‘°¿‘®  ¿‘ø¿‘“  ¿‘Ó¿‘˙  ¿’¿’  ¿’7¿’C  ¿’^¿’e  ¿’¿’Ü  ¿‘Ü¿‘á¿‹¨Ñß¿‹Ω  ¿‹ ¿‹—  ¿‹Î¿‹¯  ¿›¿›'  ¿›A¿›M  ¿›h¿›t  ¿›í¿›ô  ¿›∂¿›Ω  ¿‹¨¿‹≠¿·WÅ•¿·¸  	¿‚¿‚  ¿‚1¿‚;  ¿‚K¿‚P  ¿‚i¿‚q  ¿‚}¿‚ä  ¿‚û¿‚´  ¿‚∑¿‚√  ¿‚–¿‚’  ¿‚Â¿‚Û  ¿·W¿·X¿·^¿· ¿·f¿·_¿·n¿·…¿·o¿·v¿·{¿·w¿·~¿·Ü¿·é¿·ï¿·ú¿·°¿·ù¿·§¿·¨¿·¥¿·º¿·√¿·À¿·Á¿·“¿·Ã¿·‘¿„ Ä∏¿„  ¿„	¿„"  ¿„'¿„.  ¿„4¿„<  ¿„F¿„L  ¿„ ¿„¿„ºÄŒ¿‰5  ¿‰A¿‰N  ¿‰S	¿‰X  ¿‰^¿‰f  ¿‰p¿‰v  ¿„º¿„Ω¿„√¿‰¿„…¿„ƒ¿„—¿‰¿„“¿„Ÿ¿„ﬁ¿„⁄¿„·¿„Ë¿„Ì¿„È¿„¿„¯¿‰ ¿‰¿‰#¿‰¿‰¿‰ ¿‰¸ä∏¿ÊZÅN/// An object representing a sequence of recorded graphical operations.
///
/// To create a [Picture], use a [PictureRecorder].
///
/// A [Picture] can be placed in a [Scene] using a [SceneBuilder], via
/// the [SceneBuilder.addPicture] method. A [Picture] can also be
/// drawn into a [Canvas], using the [Canvas.drawPicture] method.  ¿ÊfÅ¿ÁvÄË/// A callback that is invoked to report a picture creation.
///
/// It's preferred to use [MemoryAllocations] in flutter/foundation.dart
/// than to use [onCreate] directly because [MemoryAllocations]
/// allows multiple callbacks. ¿ÁÉÅ¿ËñÄÎ/// A callback that is invoked to report the picture disposal.
///
/// It's preferred to use [MemoryAllocations] in flutter/foundation.dart
/// than to use [onDispose] directly because [MemoryAllocations]
/// allows multiple callbacks. ¿Ì¯Ä«¿Ó±Äß/// Whether this reference to the underlying picture is [dispose]d.
///
/// This only returns a valid value if asserts are enabled, and must not be
/// used otherwise.   ¿Ó√ÄÔ¿ÔùÄ…/// Returns the approximate number of bytes allocated for this object.
///
/// The actual size of this picture may be larger, particularly if it contains
/// references to image or other large objects.   ¿Ë§ÅD¿È…Å/// Creates an image from this picture.
///
/// The returned image will be `width` pixels wide and `height` pixels high.
/// The picture is rasterized within the 0 (left), 0 (top), `width` (right),
/// `height` (bottom) bounds. Content outside these bounds is clipped. ¿È—	¿È÷  ¿È‹
¿È·   ¿ÈÏÉÇ¿ÌKÉ6/// Synchronously creates a handle to an image of this picture.
///
/// {@template dart.ui.painting.Picture.toImageSync}
/// The returned image will be `width` pixels wide and `height` pixels high.
/// The picture is rasterized within the 0 (left), 0 (top), `width` (right),
/// `height` (bottom) bounds. Content outside these bounds is clipped.
///
/// The image object is created and returned synchronously, but is rasterized
/// asynchronously. If the rasterization fails, an exception will be thrown
/// when the image is drawn to a [Canvas].
///
/// If a GPU context is available, this image will be created as GPU resident
/// and not copied back to the host. This means the image will be more
/// efficient to draw.
///
/// If no GPU context is available, the image will be rasterized on the CPU.
/// {@endtemplate} ¿ÌW	¿Ì\  ¿Ìb
¿Ìg   ¿ÌrÄÇ¿ÌÍn/// Release the resources used by this object. The object is no longer usable
/// after this method is called.    ¿Ô∂àã¿Ô¡  ¿Äµ¿∏¿π¿∫Äô/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To create a [Picture], use a [PictureRecorder].  ¿ˆõ¿ˆ† ¿ˆ¨¿ˆ∂Äı¿ˆÀ   ¿ˆ∂¿ˆ∑¿˜ØÄê¿¯*   ¿˜Ø¿˜∞¿˜ª¿˜º¿˜¬¿˜·¿˜ ¿˜√¿˜“¿˜‡¿˜”¿˜⁄¿˜ﬂ¿˜€¿˜‚¿¯¿˜È¿˜„¿˜Î¿¯¿¯	¿¯¿¡ÅΩ¿€  ¿„	¿Ë  ¿Ó
¿Û  ¿¡¿¬¿ÚÇÄ∞¿ÚÒ  ¿Ú˙	¿Úˇ  ¿Û
¿Û
  ¿Û¿Û)  ¿ÚÇ¿ÚÉ¿Úâ¿Ú¿¿Úë¿Úä¿Úô¿Úø¿Úö¿Ú°¿Ú¶¿Ú¢¿Ú©¿Ú±¿Úπ¿Ú¡¿Ú‹¿Ú»¿Ú¬¿Ú ¿Û6Å5¿ÛH  ¿ÛT	¿ÛY  ¿Û_
¿Ûd  ¿Û6¿Û7¿ÙoÄ£¿Ù›  ¿ÙÍ	¿ÙÔ  ¿Ùı
¿Ù˙  ¿ı¿ı	  ¿Ùo¿Ùp¿Ùv¿Ù´¿Ù|¿Ùw¿ÙÑ¿Ù™¿ÙÖ¿Ùå¿Ùë¿Ùç¿Ùî¿Ùú¿Ù§¿Ù¨¿ÙÀ¿Ù≥¿Ù≠¿Ùµ¿ıÄ∞¿ı'   ¿ı¿ı¿ı ÄÕ¿ˆåk/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿ˆ:¿ˆ;¿ˆA¿ˆ^¿ˆG¿ˆB¿ˆO¿ˆ]¿ˆP¿ˆW¿ˆ\¿ˆX¿ˆ_¿ˆz¿ˆf¿ˆ`¿ˆh ¿¯CÑû¿˘'Ä‘/// Records a [Picture] containing a sequence of graphical operations.
///
/// To begin recording, construct a [Canvas] to record the commands.
/// To end recording, use the [PictureRecorder.endRecording] method. ¿˘;Ä◊ ¿˘Á¿˘ˆÄù/// Creates a new idle PictureRecorder. To associate it with a
/// [Canvas] and begin recording, pass this [PictureRecorder] to the
/// [Canvas] constructor.   ¿˙Åô¿˚£Åu/// Whether this object is currently recording commands.
///
/// Specifically, this returns true if a [Canvas] object has been
/// created to record commands and recording has not yet ended via a
/// call to [endRecording], and false if either this
/// [PictureRecorder] has not yet been associated with a [Canvas],
/// or the [endRecording] method has already been called.   ¿˚≥Å,¿¸–Å
/// Finishes recording graphical operations.
///
/// Returns a picture containing the graphical operations that have been
/// recorded thus far. After calling this function, both the picture recorder
/// and the canvas objects are invalid and cannot be used further.    ¿¸„É∆¿¸Ó  ¿˝E, ¿˝E¿˝[   ¿ ê¿ ü  ¿˝⁄4¿˝Ô   ¿˝⁄¿˝€¿˝ua¿˝«   ¿˝u¿˝v¿˝|¿˝í¿˝Ç¿˝}¿˝ä¿˝ë¿˝ã¿˝ì¿˝µ¿˝ö¿˝î¿˝ú¿˛ÅÊ¿˛&   ¿˛¿˛¿ˇ¸Äê¿ c  ¿ q¿ Å  ¿ˇ¸¿ˇ˝¿ ¿ (¿ 	¿ ¿ ¿ '¿ ¿ ¿ ¿ ¿ !¿ )¿ Q¿ 0¿ *¿ 2 ¿ ´õ¿T/// A single shadow.
///
/// Multiple shadows are stacked together in a [TextStyle]. ¿ÇP ¿ú¿¢Åp/// Construct a shadow.
///
/// The default shadow is a black shadow with zero offset and zero blur.
/// Default shadows should be completely covered by the casting element,
/// and not be visible.
///
/// Transparency should be adjusted through the [color] alpha.
///
/// Shadow order matters due to compositing multiple translucent objects not
/// being commutative.¿©(¿Ø  ¿◊¿›  ¿ˆ¿¸  ¿∂¿º¿¡¿–¿¬¿Â¿Î¿Ï¿¿¿¿,¿_¿&¿¿)¿.	¿e,¿v ¿á¿π&¿  ¿›¿„'¿Ù ¿¿¿	¿#¿ ¿-¿+¿0¿5#¿F ¿T¿R¿W¿\&¿m ¿~¿|¿Å¿áÄº¿>Ä¢/// Color that the shadow will be drawn with.
///
/// The shadows are shapes composited directly over the base canvas, and do not
/// represent optical occlusion. ¿HÅ4¿vÅ/// The displacement of the shadow from the casting element.
///
/// Positive x/y offsets will shift the shadow to the right and down, while
/// negative offsets shift the shadow to the left and up. The offsets are
/// relative to the position of the element that is casting it. ¿Åi¿‡O/// The standard deviation of the Gaussian to convolve with the shadow's shape. ¿oÄÆ¿Ôn/// The [blurRadius] in sigmas instead of logical pixels.
///
/// See the sigma argument to [MaskFilter.blur].   ¿ÜG¿ö   ¿Ü¿á¿ÔÅ|¿h/// Converts a blur radius in pixels to sigmas.
///
/// See the sigma argument to [MaskFilter.blur].
/// ¿#¿+   ¿	!Çã¿1Åı/// Create the [Paint] object that corresponds to this shadow description.
///
/// The [offset] is not represented in the [Paint] object.
/// To honor this as well, the shape should be translated by [offset] before
/// being filled using this [Paint].
///
/// This class does not provide a way to disable shadows to avoid
/// inconsistencies in shadow blur rendering, primarily as a method of
/// reducing test flakiness. [toPaint] should be overridden in subclasses to
/// provide this functionality.   ¿∞Äı¿[/// Returns a new shadow with its [offset] and [blurRadius] scaled by the given
/// factor. ¿¿%   ¿©Ö◊¿≥É‘/// Linearly interpolate between two shadows.
///
/// If either shadow is null, this function linearly interpolates from
/// a shadow that matches the other shadow in color but has a zero
/// offset and a zero blurRadius.
///
/// {@template dart.ui.shadow.lerp}
/// The `t` argument represents position on the timeline, with 0.0 meaning
/// that the interpolation has not started, returning `a` (or something
/// equivalent to `a`), 1.0 meaning that the interpolation has finished,
/// returning `b` (or something equivalent to `b`), and values in between
/// meaning that the interpolation is at the relevant point on the timeline
/// between `a` and `b`. The interpolation can be extrapolated beyond 0.0 and
/// 1.0, so negative values and values greater than 1.0 are valid (and can
/// easily be generated by curves such as [Curves.elasticInOut]).
///
/// Values for `t` are usually obtained from an [Animation<double>], such as
/// an [AnimationController].
/// {@endtemplate} ¿∏	¿¡  ¿√	¿Ã  ¿Œ¿÷   ¿ÑÉ¿IÄ•/// Linearly interpolate between two lists of shadows.
///
/// If the lists differ in length, excess items are lerped with null.
///
/// {@macro dart.ui.shadow.lerp} ¿R¿a  ¿c¿r  ¿t¿|   ¿èÄÛ¿©  ¿¨¿¥  ¿è¿ê¿ãÉ”¿õ  ¿™¿π   ¿bL¿u   ¿b¿c ¿≤éÃ¿mÄØ/// A handle to a read-only byte buffer that is managed by the engine.
///
/// The creator of this object is responsible for calling [dispose] when it is
/// no longer needed. ¿¢ ¿±¿≤¿≥ ¿¥¿∫   ¿%µ¿%π  ¿%≈¿%  ¿%€¿%dN¿%†1/// The length, in bytes, of the underlying data.   ¿%ÂÅ¿&ny/// Whether [dispose] has been called.
///
/// This must only be used when asserts are enabled. Otherwise, it will throw.   ¿∆Åg¿H^/// Creates a copy of the data from a [Uint8List] suitable for internal use
/// in the engine. ¿V¿a   ¿1ÉG¿…r/// Create a buffer from the asset with key [assetKey].
///
/// Throws an [Exception] if the asset does not exist. ¿”¿€   ¿!|Å˜¿"i/// Create a buffer from the file with [path].
///
/// Throws an [Exception] if the asset does not exist. ¿"¿"    ¿#wÄï¿#‹  ¿#‚¿#Ì  ¿#Ú¿$  ¿#w¿#x¿#~¿#¶¿#Ü¿#¿#é¿#•¿#è¿#ó¿#ü¿#ß¿#«¿#Æ¿#®¿#∞¿$Äß¿$~  ¿$ç¿$ï  ¿$û¿$Æ  ¿$¿$¿$¿$?¿$¿$¿$'¿$>¿$(¿$0¿$8¿$@¿$i¿$G¿$A¿$I¿$ªÄ•¿%(  ¿%6¿%>  ¿%G¿%W  ¿$ª¿$º¿$¬¿$Í¿$ ¿$√¿$“¿$È¿$”¿$€¿$„¿$Î¿%¿$Ú¿$Ï¿$Ù¿' Ç£¿)Ç/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// The underlying memory allocated by this object will be retained beyond
/// this call if it is still needed by another object that has not been
/// disposed. For example, an [ImageDescriptor] that has not been disposed
/// may still retain a reference to the memory from this buffer even if it
/// has been disposed. Freeing that memory requires disposing all resources
/// that may still hold it.   ¿)ßÄ’¿*qk/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).  ¿*¿*¿*¿*;¿*$¿*¿*,¿*:¿*-¿*4¿*9¿*5¿*<¿*_¿*C¿*=¿*E ¿*Äââ¿+EÄµ/// A descriptor of data that can be turned into an [Image] via a [Codec].
///
/// Use this class to determine the height, width, and byte size of image data
/// before decoding it. ¿+YÇÁ¿-ê¿-ë¿-îÅ–/// Creates an image descriptor from raw image pixels.
///
/// The `pixels` parameter is the pixel data. They are packed in bytes in the
/// order described by `pixelFormat`, then grouped in rows, from left to right,
/// then top to bottom.
///
/// The `rowBytes` parameter is the number of bytes consumed by each row of
/// pixels in the data buffer. If unspecified, it defaults to `width` multiplied
/// by the number of bytes per pixel in the provided `format`.¿-ö¿-´  ¿-∏¿-∆  ¿-–¿-ﬁ  ¿-È¿-Ô  ¿-¸ ¿.    ¿/´y¿0d/// The width, in pixels, of the image.
///
/// On the Web, this is only supported for [raw] images.   ¿0({¿0úe/// The height, in pixels, of the image.
///
/// On the Web, this is only supported for [raw] images.   ¿0ßÄÖ¿1h/// The number of bytes per pixel in the image.
///
/// On web, this is only supported for [raw] images.   ¿.DÅc¿.ÆH/// Creates an image descriptor from encoded data in a supported format. ¿.∂¿.«   ¿10Ä¯¿2Äﬁ/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// This can't be a leaf call because the native function calls Dart API
/// (Dart_SetNativeInstanceField).   ¿2,Å€¿3œÅÇ/// Creates a [Codec] object which is suitable for decoding the data in the
/// buffer to an [Image].
///
/// If only one of targetWidth or  targetHeight are specified, the other
/// dimension will be scaled according to the aspect ratio of the supplied
/// dimension.
///
/// If either targetWidth or targetHeight is less than or equal to zero, it
/// will be treated as if it is null. ¿3·¿3Á  ¿3Û¿3˘    ¿4å¶¿4  ¿4m¿4É¿4Ñ¿4Ö   ¿4åÉ£¿6¬¿6√¿6∆Å–/// Creates an image descriptor from raw image pixels.
///
/// The `pixels` parameter is the pixel data. They are packed in bytes in the
/// order described by `pixelFormat`, then grouped in rows, from left to right,
/// then top to bottom.
///
/// The `rowBytes` parameter is the number of bytes consumed by each row of
/// pixels in the data buffer. If unspecified, it defaults to `width` multiplied
/// by the number of bytes per pixel in the provided `format`.¿6Ã¿6›  ¿6Í¿6¯  ¿7¿7  ¿7¿7!  ¿7. ¿7D   ¿9·¿9Ê  ¿:ü¿:§  ¿;c¿;h  ¿:g4¿:{   ¿:g¿:h¿;(7¿;<   ¿;(¿;)¿<L¿<   ¿<¿<¿83Ä≤¿8¶  ¿8≥¿8ƒ  ¿8À¿8‹  ¿83¿84¿8:¿8i¿8B¿8;¿8J¿8h¿8K¿8S¿8Z¿8_¿8[¿8b¿8j¿8ë¿8q¿8k¿8s¿8ÈÄÙ¿9g  ¿9p¿9Å  ¿9è¿9†  ¿9ß	¿9¨  ¿9≤
¿9∑  ¿9æ¿9√  ¿9Ã¿9—  ¿8È¿8Í¿8¿9*¿8ˆ¿8Ò¿8˛¿9)¿8ˇ¿9¿9¿9¿9¿9$¿9+¿9N¿92¿9,¿94¿9Òr¿:W   ¿9Ò¿9Ú¿9¯¿:¿9ˇ¿9˘¿:¿:¿:¿:¿:¿:¿:¿:F¿:¿:¿: ¿:@¿::¿:B¿:∞t¿;   ¿:∞¿:±¿:∑¿:’¿:æ¿:∏¿:∆¿:‘¿:«¿:Œ¿:”¿:œ¿:÷¿;¿:›¿:◊¿:ﬂ¿; ¿:˙¿;¿;{ÄÇ¿;È   ¿;{¿;|¿;Ç¿;†¿;â¿;É¿;ë¿;ü¿;í¿;ô¿;û¿;ö¿;°¿;ÿ¿;®¿;¢¿;™¿;“¿;Ã¿;‘¿<Qp¿<∑   ¿<Q¿<R¿<]¿<^¿<d¿<Å¿<j¿<e¿<r¿<Ä¿<s¿<z¿<¿<{¿<Ç¿<•¿<â¿<É¿<ã¿<≈É(¿<ﬂ  ¿<Ò¿<˜  ¿=¿=	  ¿<≈¿<∆¿?ÒÄæ¿@j  ¿@|¿@É  ¿@å¿@ë  ¿@ù¿@¢  ¿?Ò¿?Ú¿?¯¿@+¿?˛¿?˘¿@¿@*¿@¿@¿@¿@¿@¿@¿@%¿@,¿@X¿@3¿@-¿@5 ¿L§É˘¿N Åu/// An exception thrown by [Canvas.drawImage] and related methods when drawing
/// an [Image] created via [Picture.toImageSync] that is in an invalid state.
///
/// This exception may be thrown if the requested image dimensions exceeded the
/// maximum 2D texture size allowed by the GPU, or if no GPU surface or context
/// was available for rasterization at request time. ¿NWB¿Nz¿N{¿N| ¿N}¿NÉ  ¿Nå
¿Ní   ¿NùI¿Nﬂ2/// A string containing details about the failure. ¿NÎi¿OOO/// If available, the stack trace at the time [Picture.toImageSync] was called.  ¿OYÅB¿Ol   ¿OY¿OZ  ±Á¿ OÚΩã/// Algorithms to use when painting on the canvas.
///
/// When drawing a shape or image onto a canvas, different algorithms can be
/// used to blend the pixels. The different values of [BlendMode] specify
/// different such algorithms.
///
/// Each algorithm has two inputs, the _source_, which is the image being drawn,
/// and the _destination_, which is the image into which the source image is
/// being composited. The destination is often thought of as the _background_.
/// The source and destination both have four color channels, the red, green,
/// blue, and alpha channels. These are typically represented as numbers in the
/// range 0.0 to 1.0. The output of the algorithm also has these same four
/// channels, with values computed from the source and destination.
///
/// The documentation of each value below describes how the algorithm works. In
/// each case, an image shows the output of blending a source image with a
/// destination image. In the images below, the destination is represented by an
/// image with horizontal lines and an opaque landscape photograph, and the
/// source is represented by an image with vertical lines (the same lines but
/// rotated) and a bird clip-art image. The [src] mode shows only the source
/// image, and the [dst] mode shows only the destination image. In the
/// documentation below, the transparency is illustrated by a checkerboard
/// pattern. The [clear] mode drops both the source and destination, resulting
/// in an output that is entirely transparent (illustrated by a solid
/// checkerboard pattern).
///
/// The horizontal and vertical bars in these images show the red, green, and
/// blue channels with varying opacity levels, then all three color channels
/// together with those same varying opacity levels, then all three color
/// channels set to zero with those varying opacity levels, then two bars showing
/// a red/green/blue repeating gradient, the first with full opacity and the
/// second with partial opacity, and finally a bar with the three color channels
/// set to zero but the opacity varying in a repeating gradient.
///
/// ## Application to the [Canvas] API
///
/// When using [Canvas.saveLayer] and [Canvas.restore], the blend mode of the
/// [Paint] given to the [Canvas.saveLayer] will be applied when
/// [Canvas.restore] is called. Each call to [Canvas.saveLayer] introduces a new
/// layer onto which shapes and images are painted; when [Canvas.restore] is
/// called, that layer is then composited onto the parent layer, with the source
/// being the most-recently-drawn shapes and images, and the destination being
/// the parent layer. (For the first [Canvas.saveLayer] call, the parent layer
/// is the canvas itself.)
///
/// See also:
///
///  * [Paint.blendMode], which uses [BlendMode] to define the compositing
///    strategy.  ΩπÄÓæ¢Äﬁ/// Drop both the source and destination images, leaving nothing.
///
/// This corresponds to the "clear" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_clear.png) æ¨ÅHøÒÅ4/// Drop the destination image, only paint the source image.
///
/// Conceptually, the destination is first cleared, then the source image is
/// painted.
///
/// This corresponds to the "Copy" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_src.png) ø˘ÅM¿ ACÅ9/// Drop the source image, only paint the destination image.
///
/// Conceptually, the source image is discarded, leaving the destination
/// untouched.
///
/// This corresponds to the "Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dst.png) ¿ AKÅÏ¿ C0Å–/// Composite the source image over the destination image.
///
/// This is the default value. It represents the most intuitive case, where
/// shapes are painted on top of what is below, with transparent areas showing
/// the destination layer.
///
/// This corresponds to the "Source over Destination" Porter-Duff operator,
/// also known as the Painter's Algorithm.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcOver.png) ¿ C<Å≠¿ D‚Åë/// Composite the source image under the destination image.
///
/// This is the opposite of [srcOver].
///
/// This corresponds to the "Destination over Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstOver.png)
///
/// This is useful when the source image should have been painted before the
/// destination image, but could not be. ¿ DÓÇö¿ GÉÇx/// Show the source image, but only where the two images overlap. The
/// destination image is not rendered, it is treated merely as a mask. The
/// color channels of the destination are ignored, only the opacity has an
/// effect.
///
/// To show the destination image instead, consider [dstIn].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is absent, rather than where it is present), consider
/// [srcOut].
///
/// This corresponds to the "Source in Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcIn.png) ¿ GçÇÑ¿ JÇf/// Show the destination image, but only where the two images overlap. The
/// source image is not rendered, it is treated merely as a mask. The color
/// channels of the source are ignored, only the opacity has an effect.
///
/// To show the source image instead, consider [srcIn].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is present, rather than where it is absent), consider [dstOut].
///
/// This corresponds to the "Destination in Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstIn.png) ¿ JÇò¿ L®Çy/// Show the source image, but only where the two images do not overlap. The
/// destination image is not rendered, it is treated merely as a mask. The color
/// channels of the destination are ignored, only the opacity has an effect.
///
/// To show the destination image instead, consider [dstOut].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is present, rather than where it is absent), consider [srcIn].
///
/// This corresponds to the "Source out Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcOut.png) ¿ L≥Çé¿ O;Ço/// Show the destination image, but only where the two images do not overlap. The
/// source image is not rendered, it is treated merely as a mask. The color
/// channels of the source are ignored, only the opacity has an effect.
///
/// To show the source image instead, consider [srcOut].
///
/// To reverse the semantic of the mask (only showing the destination where the
/// source is present, rather than where it is absent), consider [dstIn].
///
/// This corresponds to the "Destination out Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstOut.png) ¿ OFÇg¿ Q¶ÇE/// Composite the source image over the destination image, but only where it
/// overlaps the destination.
///
/// This corresponds to the "Source atop Destination" Porter-Duff operator.
///
/// This is essentially the [srcOver] operator, but with the output's opacity
/// channel being set to that of the destination image instead of being a
/// combination of both image's opacity channels.
///
/// For a variant with the destination on top instead of the source, see
/// [dstATop].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcATop.png) ¿ Q≤Ç]¿ TÇ;/// Composite the destination image over the source image, but only where it
/// overlaps the source.
///
/// This corresponds to the "Destination atop Source" Porter-Duff operator.
///
/// This is essentially the [dstOver] operator, but with the output's opacity
/// channel being set to that of the source image instead of being a
/// combination of both image's opacity channels.
///
/// For a variant with the source on top instead of the destination, see
/// [srcATop].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstATop.png) ¿ TÅ;¿ ULÅ+/// Apply a bitwise `xor` operator to the source and destination images. This
/// leaves transparency where they would overlap.
///
/// This corresponds to the "Source xor Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_xor.png) ¿ UTÉO¿ XüÉ,/// Sum the components of the source and destination images.
///
/// Transparency in a pixel of one of the images reduces the contribution of
/// that image to the corresponding output pixel, as if the color of that
/// pixel in that image was darker.
///
/// This corresponds to the "Source plus Destination" Porter-Duff operator.
///
/// This is the right blend mode for cross-fading between two images. Consider
/// two images A and B, and an interpolation time variable _t_ (from 0.0 to
/// 1.0). To cross fade between them, A should be drawn with opacity 1.0 - _t_
/// into a new layer using [BlendMode.srcOver], and B should be drawn on top
/// of it, at opacity _t_, into the same layer, using [BlendMode.plus].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_plus.png) ¿ X®ÉV¿ [ˆÉ'/// Multiply the color components of the source and destination images.
///
/// This can only result in the same or darker colors (multiplying by white,
/// 1.0, results in no change; multiplying by black, 0.0, results in black).
///
/// When compositing two opaque images, this has similar effect to overlapping
/// two transparencies on a projector.
///
/// For a variant that also multiplies the alpha channel, consider [multiply].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_modulate.png)
///
/// See also:
///
///  * [screen], which does a similar computation but inverted.
///  * [overlay], which combines [modulate] and [screen] to favor the
///    destination image.
///  * [hardLight], which combines [modulate] and [screen] to favor the
///    source image. ¿ \LÖ!¿ agÑ‚/// Multiply the inverse of the components of the source and destination
/// images, and inverse the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// This is essentially the same as [modulate] blend mode, but with the values
/// of the colors inverted before the multiplication and the result being
/// inverted back before rendering.
///
/// This can only result in the same or lighter colors (multiplying by black,
/// 1.0, results in no change; multiplying by white, 0.0, results in white).
/// Similarly, in the alpha channel, it can only result in more opaque colors.
///
/// This has similar effect to two projectors displaying their images on the
/// same screen simultaneously.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_screen.png)
///
/// See also:
///
///  * [modulate], which does a similar computation but without inverting the
///    values.
///  * [overlay], which combines [modulate] and [screen] to favor the
///    destination image.
///  * [hardLight], which combines [modulate] and [screen] to favor the
///    source image. ¿ aãÉﬁ¿ ebÉÆ/// Multiply the components of the source and destination images after
/// adjusting them to favor the destination.
///
/// Specifically, if the destination value is smaller, this multiplies it with
/// the source value, whereas is the source value is smaller, it multiplies
/// the inverse of the source value with the inverse of the destination value,
/// then inverts the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_overlay.png)
///
/// See also:
///
///  * [modulate], which always multiplies the values.
///  * [screen], which always multiplies the inverses of the values.
///  * [hardLight], which is similar to [overlay] but favors the source image
///    instead of the destination image. ¿ enÅ7¿ füÅ"/// Composite the source and destination image by choosing the lowest value
/// from each color channel.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_darken.png) ¿ f™Å:¿ g›Å$/// Composite the source and destination image by choosing the highest value
/// from each color channel.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_lighten.png) ¿ gÈÅ{¿ iZÅb/// Divide the destination by the inverse of the source.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_colorDodge.png) ¿ iiÅë¿ jÒÅy/// Divide the inverse of the destination by the source, and inverse the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_colorBurn.png) ¿ jˇÉ‚¿ nÿÉ∞/// Multiply the components of the source and destination images after
/// adjusting them to favor the source.
///
/// Specifically, if the source value is smaller, this multiplies it with the
/// destination value, whereas is the destination value is smaller, it
/// multiplies the inverse of the destination value with the inverse of the
/// source value, then inverts the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hardLight.png)
///
/// See also:
///
///  * [modulate], which always multiplies the values.
///  * [screen], which always multiplies the inverses of the values.
///  * [overlay], which is similar to [hardLight] but favors the destination
///    image instead of the source image. ¿ nÊÅs¿ pPÅU/// Use [colorDodge] for source values below 0.5 and [colorBurn] for source
/// values above 0.5.
///
/// This results in a similar but softer effect than [overlay].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_softLight.png)
///
/// See also:
///
///  * [color], which is a more subtle tinting effect. ¿ p^Å≈¿ rÅ§/// Subtract the smaller value from the bigger value for each channel.
///
/// Compositing black has no effect; compositing white inverts the colors of
/// the other image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// The effect is similar to [exclusion] but harsher.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_difference.png) ¿ r(Å‘¿ sÛÅ≤/// Subtract double the product of the two images from the sum of the two
/// images.
///
/// Compositing black has no effect; compositing white inverts the colors of
/// the other image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// The effect is similar to [difference] but softer.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_exclusion.png) ¿ tÇŸ¿ v“Ç¥/// Multiply the components of the source and destination images, including
/// the alpha channel.
///
/// This can only result in the same or darker colors (multiplying by white,
/// 1.0, results in no change; multiplying by black, 0.0, results in black).
///
/// Since the alpha channel is also multiplied, a fully-transparent pixel
/// (opacity 0.0) in one image results in a fully transparent pixel in the
/// output. This is similar to [dstIn], but with the colors combined.
///
/// For a variant that multiplies the colors but does not multiply the alpha
/// channel, consider [modulate].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_multiply.png) ¿ v¸Ç˜¿ yÇ—/// Take the hue of the source image, and the saturation and luminosity of the
/// destination image.
///
/// The effect is to tint the destination image with the source image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their hue from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hue.png)
///
/// See also:
///
///  * [color], which is a similar but stronger effect as it also applies the
///    saturation of the source image.
///  * [HSVColor], which allows colors to be expressed using Hue rather than
///    the red/green/blue channels of [Color]. ¿ y¯Çd¿ |RÇ=/// Take the saturation of the source image, and the hue and luminosity of the
/// destination image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their saturation from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hue.png)
///
/// See also:
///
///  * [color], which also applies the hue of the source image.
///  * [luminosity], which applies the luminosity of the source image to the
///    destination. ¿ |aÇ„¿ ?ÇΩ/// Take the hue and saturation of the source image, and the luminosity of the
/// destination image.
///
/// The effect is to tint the destination image with the source image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their hue and saturation from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_color.png)
///
/// See also:
///
///  * [hue], which is a similar but weaker effect.
///  * [softLight], which is a similar tinting effect but also tints white.
///  * [saturation], which only applies the saturation of the source image. ¿ IÇç¿ ÅÃÇd/// Take the luminosity of the source image, and the hue and saturation of the
/// destination image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their luminosity from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_luminosity.png)
///
/// See also:
///
///  * [saturation], which applies the saturation of the source image to the
///    destination.
///  * [ImageFilter.blur], which can be used with [BackdropFilter] for a
///    related effect.    ¿ Å€å{¿ áUÖt/// Quality levels for image sampling in [ImageFilter] and [Shader] objects that sample
/// images and for [Canvas] operations that render images.
///
/// When scaling up typically the quality is lowest at [none], higher at [low] and [medium],
/// and for very large scale factors (over 10x) the highest at [high].
///
/// When scaling down, [medium] provides the best quality especially when scaling an
/// image to less than half its size or for animating the scale factor between such
/// reductions. Otherwise, [low] and [high] provide similar effects for reductions of
/// between 50% and 100% but the image may lose detail and have dropouts below 50%.
///
/// To get high quality when scaling images up and down, or when the scale is
/// unknown, [medium] is typically a good balanced choice.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/filter_quality.png)
///
/// When building for the web using the `--web-renderer=html` option, filter
/// quality has no effect. All images are rendered using the respective
/// browser's default setting.
///
/// See also:
///
///  * [Paint.filterQuality], which is used to pass [FilterQuality] to the
///    engine while using drawImage calls on a [Canvas].
///  * [ImageShader].
///  * [ImageFilter.matrix].
///  * [Canvas.drawImage].
///  * [Canvas.drawImageRect].
///  * [Canvas.drawImageNine].
///  * [Canvas.drawAtlas].  ¿ áÊÄŸ¿ àªÄÃ/// The fastest filtering method, albeit also the lowest quality.
///
/// This value results in a "Nearest Neighbor" algorithm which just
/// repeats or eliminates pixels as an image is scaled up or down. ¿ àƒÄ≤¿ âsÄ¶/// Better quality than [none], faster than [medium].
///
/// This value results in a "Bilinear" algorithm which smoothly
/// interpolates between pixels in an image. ¿ â{Çé¿ åÇk/// The best all around filtering method that is only worse than [high]
/// at extremely large scale factors.
///
/// This value improves upon the "Bilinear" algorithm specified by [low]
/// by utilizing a Mipmap that pre-computes high quality lower resolutions
/// of the image at half (and quarter and eighth, etc.) sizes and then
/// blends between those to prevent loss of detail at small scale sizes.
///
/// {@template dart.ui.filterQuality.seeAlso}
/// See also:
///
///  * [FilterQuality] class-level documentation that goes into detail about
///    relative qualities of the constant values.
/// {@endtemplate} ¿ åÇE¿ éOÇ&/// Best possible quality when scaling up images by scale factors larger than
/// 5-10x.
///
/// When images are scaled down, this can be worse than [medium] for scales
/// smaller than 0.5x, or when animating the scale factor.
///
/// This option is also the slowest.
///
/// This value results in a standard "Bicubic" algorithm which uses a 3rd order
/// equation to smooth the abrupt transitions between pixels while preserving
/// some of the sense of an edge and avoiding sharp peaks in the result.
///
/// {@macro dart.ui.filterQuality.seeAlso}    ¿ éXÜ∆¿ èKÄ±/// Styles to use for line endings.
///
/// See also:
///
///  * [Paint.strokeCap] for how this value is used.
///  * [StrokeJoin] for the different kinds of line segment joins.  ¿ èYÅÖ¿ ê⁄År/// Begin and end contours with a flat edge and no extension.
///
/// ![A butt cap ends line segments with a square end that stops at the end of
/// the line segment.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/butt_cap.png)
///
/// Compare to the [square] cap, which has the same shape, but extends past
/// the end of the line by half a stroke width. ¿ ê„ÅÀ¿ í©Åµ/// Begin and end contours with a semi-circle extension.
///
/// ![A round cap adds a rounded end to the line segment that protrudes
/// by one half of the thickness of the line (which is the radius of the cap)
/// past the end of the segment.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_cap.png)
///
/// The cap is colored in the diagram above to highlight it: in normal use it
/// is the same color as the line. ¿ í≥Çh¿ ïÇI/// Begin and end contours with a half square extension. This is
/// similar to extending each contour by half the stroke width (as
/// given by [Paint.strokeWidth]).
///
/// ![A square cap has a square end that effectively extends the line length
/// by half of the stroke width.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/square_cap.png)
///
/// The cap is colored in the diagram above to highlight it: in normal use it
/// is the same color as the line.
///
/// Compare to the [butt] cap, which has the same shape, but doesn't extend
/// past the end of the line.    ¿ ï à¿ ñ Åg/// Styles to use for line segment joins.
///
/// This only affects line joins for polygons drawn by [Canvas.drawPath] and
/// rectangles, not points drawn as lines with [Canvas.drawPoints].
///
/// See also:
///
/// * [Paint.strokeJoin] and [Paint.strokeMiterLimit] for how this value is
///   used.
/// * [StrokeCap] for the different kinds of line endings.  ¿ ñŸÇY¿ ô-Ç7/// Joins between line segments form sharp corners.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value.
///   * [Paint.strokeMiterLimit], used to define when a miter is drawn instead
///     of a bevel when the join is set to this value. ¿ ô7ÅÃ¿ ö˛ÅÆ/// Joins between line segments are semi-circular.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value. ¿ õÇ¿ ùÅ˜/// Joins between line segments connect the corners of the butt ends of the
/// line segments to give a beveled appearance.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/bevel_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value.    ¿ ù$Ç÷¿ ù∫T/// Strategies for painting shapes and paths on a canvas.
///
/// See [Paint.style].  ¿ û&Ä∑¿ ûŸÄ¨/// Apply the [Paint] to the inside of the shape. For example, when
/// applied to the [Canvas.drawCircle] call, this results in a disc
/// of the given size being painted. ¿ û‚Å¿ üÒÅ/// Apply the [Paint] to the edge of the shape. For example, when
/// applied to the [Canvas.drawCircle] call, this results is a hoop
/// of the given size being painted. The line drawn on the edge will
/// be the width given by the [Paint.strokeWidth] property.    ¿ ü¸åá¿ †0./// Different ways to clip a widget's content.  ¿ †9Ç8¿ ¢mÇ/// No clip at all.
///
/// This is the default option for most widgets: if the content does not
/// overflow the widget boundary, don't pay any performance cost for clipping.
///
/// If the content does overflow, please explicitly specify the following
/// [Clip] options:
///  * [hardEdge], which is the fastest clipping, but with lower fidelity.
///  * [antiAlias], which is a little slower than [hardEdge], but with smoothed edges.
///  * [antiAliasWithSaveLayer], which is much slower than [antiAlias], and should
///    rarely be used. ¿ ¢vÇ_¿ §ÕÇ:/// Clip, but do not apply anti-aliasing.
///
/// This mode enables clipping, but curves and non-axis-aligned straight lines will be
/// jagged as no effort is made to anti-alias.
///
/// Faster than other clipping modes, but slower than [none].
///
/// This is a reasonable choice when clipping is needed, if the container is an axis-
/// aligned rectangle or an axis-aligned rounded rectangle with very small corner radii.
///
/// See also:
///
///  * [antiAlias], which is more reasonable when clipping is needed and the shape is not
///    an axis-aligned rectangle. ¿ §⁄É.¿ ßˇÉ /// Clip with anti-aliasing.
///
/// This mode has anti-aliased clipping edges to achieve a smoother look.
///
/// It' s much faster than [antiAliasWithSaveLayer], but slower than [hardEdge].
///
/// This will be the common case when dealing with circles and arcs.
///
/// Different from [hardEdge] and [antiAliasWithSaveLayer], this clipping may have
/// bleeding edge artifacts.
/// (See https://fiddle.skia.org/c/21cb4c2b2515996b537f36e7819288ae for an example.)
///
/// See also:
///
///  * [hardEdge], which is a little faster, but with lower fidelity.
///  * [antiAliasWithSaveLayer], which is much slower, but can avoid the
///    bleeding edges if there's no other way.
///  * [Paint.isAntiAlias], which is the anti-aliasing switch for general draw operations. ¿ ®Ñs¿ ¨jÑ4/// Clip with anti-aliasing and saveLayer immediately following the clip.
///
/// This mode not only clips with anti-aliasing, but also allocates an offscreen
/// buffer. All subsequent paints are carried out on that buffer before finally
/// being clipped and composited back.
///
/// This is very slow. It has no bleeding edge artifacts (that [antiAlias] has)
/// but it changes the semantics as an offscreen buffer is now introduced.
/// (See https://github.com/flutter/flutter/issues/18057#issuecomment-394197336
/// for a difference between paint without saveLayer and paint with saveLayer.)
///
/// This will be only rarely needed. One case where you might need this is if
/// you have an image overlaid on a very different background color. In these
/// cases, consider whether you can avoid overlaying multiple colors in one
/// spot (e.g. by having the background color only present where the image is
/// absent). If you can, [antiAlias] would be fine and much faster.
///
/// See also:
///
///  * [antiAlias], which is much faster, and has similar clipping results.    ¿ ÔhÉ◊¿ Ò9ÅÀ/// The color space describes the colors that are available to an [Image].
///
/// This value can help decide which [ImageByteFormat] to use with
/// [Image.toByteData]. Images that are in the [extendedSRGB] color space
/// should use something like [ImageByteFormat.rawExtendedRgba128] so that
/// colors outside of the sRGB gamut aren't lost.
///
/// This is also the result of [Image.colorSpace].
///
/// See also: https://en.wikipedia.org/wiki/Color_space  ¿ ÒHÄÿ¿ ÚÄ«/// The sRGB color space.
///
/// You may know this as the standard color space for the web or the color
/// space of non-wide-gamut Flutter apps.
///
/// See also: https://en.wikipedia.org/wiki/SRGB ¿ Ú$Å¿ Û0Å/// A color space that is backwards compatible with sRGB but can represent
/// colors outside of that gamut with values outside of [0..1]. In order to
/// see the extended values an [ImageByteFormat] like
/// [ImageByteFormat.rawExtendedRgba128] must be used.    ¿ ÛAâ¿ ÙÕY/// The format in which image bytes should be returned when using
/// [Image.toByteData].  ¿ Ù·ÄÇ¿ ı\t/// Raw RGBA format.
///
/// Unencoded bytes, in RGBA row-primary form with premultiplied alpha, 8 bits per channel. ¿ ıhÄé¿ ıÁx/// Raw straight RGBA format.
///
/// Unencoded bytes, in RGBA row-primary form with straight alpha, 8 bits per channel. ¿ ı˚Äª¿ ˆ©Ä•/// Raw unmodified format.
///
/// Unencoded bytes, in the image's existing format. For example, a grayscale
/// image may use a single 8-bit channel for each pixel. ¿ ˆªÇŒ¿ ˘wÇç/// Raw extended range RGBA format.
///
/// Unencoded bytes, in RGBA row-primary form with straight alpha, 32 bit
/// float (IEEE 754 binary32) per channel.
///
/// Example usage:
///
/// ```dart
/// import 'dart:ui' as ui;
/// import 'dart:typed_data';
///
/// Future<Map<String, double>> getFirstPixel(ui.Image image) async {
///   final ByteData data =
///       (await image.toByteData(format: ui.ImageByteFormat.rawExtendedRgba128))!;
///   final Float32List floats = Float32List.view(data.buffer);
///   return <String, double>{
///     'r': floats[0],
///     'g': floats[1],
///     'b': floats[2],
///     'a': floats[3],
///   };
/// }
/// ``` ¿ ˘éÇæ¿ ¸IÇú/// PNG format.
///
/// A loss-less compression format for images. This format is well suited for
/// images with hard edges, such as screenshots or sprites, and images with
/// text. Transparency is supported. The PNG format supports images up to
/// 2,147,483,647 pixels in either dimension, though in practice available
/// memory provides a more immediate limitation on maximum image size.
///
/// PNG images normally use the `.png` file extension and the `image/png` MIME
/// type.
///
/// See also:
///
///  * <https://en.wikipedia.org/wiki/Portable_Network_Graphics>, the Wikipedia page on PNG.
///  * <https://tools.ietf.org/rfc/rfc2083.txt>, the PNG standard.    ¿ ¸QÉ?¿ ¸ï>/// The format of pixel data given to [decodeImageFromPixels].  ¿ ¸•ÄŸ¿ ˝vÄ /// Each pixel is 32 bits, with the highest 8 bits encoding red, the next 8
/// bits encoding green, the next 8 bits encoding blue, and the lowest 8 bits
/// encoding alpha. Premultiplied alpha is used. ¿ ˝ÉÄŸ¿ ˛TÄ /// Each pixel is 32 bits, with the highest 8 bits encoding blue, the next 8
/// bits encoding green, the next 8 bits encoding red, and the lowest 8 bits
/// encoding alpha. Premultiplied alpha is used. ¿ ˛aÅ,¿ ˇÇÅ/// Each pixel is 128 bits, where each color component is a 32 bit float that
/// is normalized across the sRGB gamut.  The first float is the red
/// component, followed by: green, blue and alpha. Premultiplied alpha isn't
/// used, matching [ImageByteFormat.rawExtendedRgba128].    ¿wbÉï¿wˇÄó/// Determines the winding rule that decides how the interior of a [Path] is
/// calculated.
///
/// This enum is used by the [Path.fillType] property.  ¿xÅØ¿y∏Åó/// The interior is defined by a non-zero sum of signed edge crossings.
///
/// For a given point, the point is considered to be on the inside of the path
/// if a line drawn from the point to infinity crosses lines going clockwise
/// around the point a different number of times than it crosses lines going
/// counter-clockwise around that point.
///
/// See: <https://en.wikipedia.org/wiki/Nonzero-rule> ¿yƒÅ0¿zÌÅ/// The interior is defined by an odd number of edge crossings.
///
/// For a given point, the point is considered to be on the inside of the path
/// if a line drawn from the point to infinity crosses an odd number of lines.
///
/// See: <https://en.wikipedia.org/wiki/Even-odd_rule>    ¿z˘àL¿{≠Äà/// Strategies for combining paths.
///
/// See also:
///
/// * [Path.combine], which uses this enum to decide how to combine two paths.  ¿{øÅ£¿}XÅÑ/// Subtract the second path from the first path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a crescent portion of the
/// first circle that was not overlapped by the second circle.
///
/// See also:
///
///  * [reverseDifference], which is the same but subtracting the first path
///    from the second. ¿}fÅá¿~‰Åk/// Create a new path that is the intersection of the two paths, leaving the
/// overlapping pieces of the path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be only the overlapping portion
/// of the two circles.
///
/// See also:
///  * [xor], which is the inverse of this operation ¿~ÒÅ$¿ÄÅ/// Create a new path that is the union (inclusive-or) of the two paths.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a figure-eight like shape
/// matching the outer boundaries of both circles. ¿ÄÅÇ¿ÅòÅn/// Create a new path that is the exclusive-or of the two paths, leaving
/// everything but the overlapping pieces of the path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the figure-eight like shape less the overlapping parts
///
/// See also:
///  * [intersect], which is the inverse of this operation ¿ÅüÅ£¿É1Å}/// Subtract the first path from the second path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a crescent portion of the
/// second circle that was not overlapped by the first circle.
///
/// See also:
///
///  * [difference], which is the same but subtracting the second path
///    from the first.    ¿ÇÉ{¿¯4/// Styles to use for blurs in [MaskFilter] objects.  ¿?Äñ¿œÄã/// Fuzzy inside and outside. This is useful for painting shadows that are
/// offset from the shape that ostensibly is casting the shadow. ¿⁄ÄÕ¿¢Ä¡/// Solid inside, fuzzy outside. This corresponds to drawing the shape, and
/// additionally drawing the blur. This can make objects appear brighter,
/// maybe even as if they were fluorescent. ¿¨ÄÊ¿çÄ⁄/// Nothing inside, fuzzy outside. This is useful for painting shadows for
/// partially transparent shapes, when they are painted separately but without
/// an offset, so that the shadow doesn't paint below the shape. ¿óc¿ıY/// Fuzzy inside, nothing outside. This can make shapes appear to be lit from
/// within.    ¿gõì¿nnÜí/// Defines what happens at the edge of a gradient or the sampling of a source image
/// in an [ImageFilter].
///
/// A gradient is defined along a finite inner area. In the case of a linear
/// gradient, it's between the parallel lines that are orthogonal to the line
/// drawn between two points. In the case of radial gradients, it's the disc
/// that covers the circle centered on a particular point up to a given radius.
///
/// An image filter reads source samples from a source image and performs operations
/// on those samples to produce a result image. An image defines color samples only
/// for pixels within the bounds of the image but some filter operations, such as a blur
/// filter, read samples over a wide area to compute the output for a given pixel. Such
/// a filter would need to combine samples from inside the image with hypothetical
/// color values from outside the image.
///
/// This enum is used to define how the gradient or image filter should treat the regions
/// outside that defined inner area.
///
/// See also:
///
///  * [painting.Gradient], the superclass for [LinearGradient] and
///    [RadialGradient], as used by [BoxDecoration] et al, which works in
///    relative coordinates and can create a [Shader] representing the gradient
///    for a particular [Rect] on demand.
///  * [dart:ui.Gradient], the low-level class used when dealing with the
///    [Paint.shader] property directly, with its [Gradient.linear] and
///    [Gradient.radial] constructors.
///  * [dart:ui.ImageFilter.blur], an ImageFilter that may sometimes need to
///    read samples from outside an image to combine with the pixels near the
///    edge of the image.  ¿n{Ç£¿qÇá/// Samples beyond the edge are clamped to the nearest color in the defined inner area.
///
/// A gradient will paint all the regions outside the inner area with the
/// color at the end of the color stop list closest to that region.
///
/// An image filter will substitute the nearest edge pixel for any samples taken from
/// outside its source image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_sweep.png) ¿q#É5¿tPÉ/// Samples beyond the edge are repeated from the far end of the defined area.
///
/// For a gradient, this technique is as if the stop points from 0.0 to 1.0 were then
/// repeated from 1.0 to 2.0, 2.0 to 3.0, and so forth (and for linear gradients, similarly
/// from -1.0 to 0.0, -2.0 to -1.0, etc).
///
/// An image filter will treat its source image as if it were tiled across the enlarged
/// sample space from which it reads, each tile in the same orientation as the base image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_sweep.png) ¿t]É|¿w”ÉY/// Samples beyond the edge are mirrored back and forth across the defined area.
///
/// For a gradient, this technique is as if the stop points from 0.0 to 1.0 were then
/// repeated backwards from 2.0 to 1.0, then forwards from 2.0 to 3.0, then backwards
/// again from 4.0 to 3.0, and so forth (and for linear gradients, similarly in the
/// negative direction).
///
/// An image filter will treat its source image as tiled in an alternating forwards and
/// backwards or upwards and downwards direction across the sample space from which
/// it is reading.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_sweep.png) ¿wﬁÇΩ¿zñÇü/// Samples beyond the edge are treated as transparent black.
///
/// A gradient will render transparency over any region that is outside the circle of a
/// radial gradient or outside the parallel lines that define the inner area of a linear
/// gradient.
///
/// An image filter will substitute transparent black for any sample it must read from
/// outside its source image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_sweep.png)    ¿ŒòÇ√¿œRw/// Defines how a list of points is interpreted when drawing a set of triangles.
///
/// Used by [Canvas.drawVertices].  ¿œaQ¿œ©E/// Draw each sequence of three points as the vertices of a triangle. ¿œ∑[¿–K/// Draw each sliding window of three points as the vertices of a triangle. ¿–ÅA¿—MÅ)/// Draw the first point and each sliding window of two points as the vertices
/// of a triangle.
///
/// This mode is not natively supported by most backends, and is instead
/// implemented by unrolling the points into the equivalent
/// [VertexMode.triangles], which is generally more efficient.    ¿˝eÑ-¿˛<Äç/// Defines how a list of points is interpreted when drawing a set of points.
///
/// Used by [Canvas.drawPoints] and [Canvas.drawRawPoints].  ¿˛JÅ∑¿ˇ˚Åû/// Draw each point separately.
///
/// If the [Paint.strokeCap] is [StrokeCap.round], then each point is drawn
/// as a circle with the diameter of the [Paint.strokeWidth], filled as
/// described by the [Paint] (ignoring [Paint.style]).
///
/// Otherwise, each point is drawn as an axis-aligned square with sides of
/// length [Paint.strokeWidth], filled as described by the [Paint] (ignoring
/// [Paint.style]). ¿ ÄÈ¿ ÍÄ◊/// Draw each sequence of two points as a line segment.
///
/// If the number of points is odd, then the last point is ignored.
///
/// The lines are stroked as described by the [Paint] (ignoring
/// [Paint.style]). ¿ ÙÄõ¿àÄã/// Draw the entire sequence of points as one line.
///
/// The lines are stroked as described by the [Paint] (ignoring
/// [Paint.style]).    ¿îÅ¿x/// Defines how a new clip region should be merged with the existing clip
/// region.
///
/// Used by [Canvas.clipRect].  ¿B¿U5/// Subtract the new region from the existing region. ¿dB¿ù6/// Intersect the new region from the existing region.       ÑãoÑê  Ñù	Ñ£   Ñ¸tÖ  ÖÖ   ÖrÄèÖw  ÖÜÖé   ÜÄ€Ü  ÜÜ%   Ü‡ÄçÜÂ  ÜÙÜ¸   áomáu  áÅáà  áäáí   ¿.<p¿.\  ¿.g¿.o  ¿.<¿.=¿.C¿.T¿.D¿Cıâ?¿KÕáâ/// Instantiates an image [Codec].
///
/// This method is a convenience wrapper around the [ImageDescriptor] API, and
/// using [ImageDescriptor] directly is preferred since it allows the caller to
/// make better determinations about how and whether to use the `targetWidth`
/// and `targetHeight` parameters.
///
/// The `list` parameter is the binary image data (e.g a PNG or GIF binary data).
/// The data can be for either static or animated images. The following image
/// formats are supported:
/// {@template dart.ui.imageFormats}
/// JPEG, PNG, GIF, Animated GIF, WebP, Animated WebP, BMP, and WBMP. Additional
/// formats may be supported by the underlying platform. Flutter will
/// attempt to call platform API to decode unrecognized formats, and if the
/// platform API supports decoding the image Flutter will be able to render it.
/// {@endtemplate}
///
/// The `targetWidth` and `targetHeight` arguments specify the size of the
/// output image, in image pixels. If they are not equal to the intrinsic
/// dimensions of the image, then the image will be scaled after being decoded.
/// If the `allowUpscaling` parameter is not set to true, both dimensions will
/// be capped at the intrinsic dimensions of the image, even if only one of
/// them would have exceeded those intrinsic dimensions. If exactly one of these
/// two arguments is specified, then the aspect ratio will be maintained while
/// forcing the image to match the other given dimension. If neither is
/// specified, then the image maintains its intrinsic size.
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform. If the image must be scaled
/// up, the `allowUpscaling` parameter must be set to true.
///
/// The returned future can complete with an error if the image decoding has
/// failed. ¿KÊ¿KÒ  ¿K˙¿L   ¿L¿L  ¿L#¿L)  ¿L9¿M6ä°¿Upà+/// Instantiates an image [Codec].
///
/// This method is a convenience wrapper around the [ImageDescriptor] API, and
/// using [ImageDescriptor] directly is preferred since it allows the caller to
/// make better determinations about how and whether to use the `targetWidth`
/// and `targetHeight` parameters.
///
/// The [buffer] parameter is the binary image data (e.g a PNG or GIF binary data).
/// The data can be for either static or animated images. The following image
/// formats are supported: {@macro dart.ui.imageFormats}
///
/// The [buffer] will be disposed by this method once the codec has been created,
/// so the caller must relinquish ownership of the [buffer] when they call this
/// method.
///
/// The [targetWidth] and [targetHeight] arguments specify the size of the
/// output image, in image pixels. If they are not equal to the intrinsic
/// dimensions of the image, then the image will be scaled after being decoded.
/// If the `allowUpscaling` parameter is not set to true, both dimensions will
/// be capped at the intrinsic dimensions of the image, even if only one of
/// them would have exceeded those intrinsic dimensions. If exactly one of these
/// two arguments is specified, then the aspect ratio will be maintained while
/// forcing the image to match the other given dimension. If neither is
/// specified, then the image maintains its intrinsic size.
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform. If the image must be scaled
/// up, the `allowUpscaling` parameter must be set to true.
///
/// The returned future can complete with an error if the image decoding has
/// failed.
///
/// ## Compatibility note on the web
///
/// When running Flutter on the web, only the CanvasKit renderer supports image
/// resizing capabilities (not the HTML renderer). So if image resizing is
/// critical to your use case, and you're deploying to the web, you should
/// build using the CanvasKit renderer. ¿Uì¿U§  ¿UØ¿Uµ  ¿U√¿U…  ¿Uÿ¿Uﬁ  ¿UÓ¿WŸâÑ¿^á/// Instantiates an image [Codec].
///
/// This method is a convenience wrapper around the [ImageDescriptor] API.
///
/// The [buffer] parameter is the binary image data (e.g a PNG or GIF binary
/// data). The data can be for either static or animated images. The following
/// image formats are supported: {@macro dart.ui.imageFormats}
///
/// The [buffer] will be disposed by this method once the codec has been
/// created, so the caller must relinquish ownership of the [buffer] when they
/// call this method.
///
/// The [getTargetSize] parameter, when specified, will be invoked and passed
/// the image's intrinsic size to determine the size to decode the image to.
/// The width and the height of the size it returns must be positive values
/// greater than or equal to 1, or null. It is valid to return a
/// [TargetImageSize] that specifies only one of `width` and `height` with the
/// other remaining null, in which case the omitted dimension will be scaled to
/// maintain the aspect ratio of the original dimensions. When both are null or
/// omitted, the image will be decoded at its native resolution (as will be the
/// case if the [getTargetSize] parameter is omitted).
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform.
///
/// The returned future can complete with an error if the image decoding has
/// failed.
///
/// ## Compatibility note on the web
///
/// When running Flutter on the web, only the CanvasKit renderer supports image
/// resizing capabilities (not the HTML renderer). So if image resizing is
/// critical to your use case, and you're deploying to the web, you should
/// build using the CanvasKit renderer. ¿_¿_"  ¿_-&¿_G   ¿a_s¿ao  ¿aÑ¿aâ  ¿aò¿aù   ¿i¶Å©¿j‹Å0/// Loads a single image frame from a byte array into an [Image] object.
///
/// This is a convenience wrapper around [instantiateImageCodec]. Prefer using
/// [instantiateImageCodec] which also supports multi frame images and offers
/// better error handling. This function swallows asynchronous errors. ¿j¿j˚  ¿k ¿k   ¿kQÄÔ¿k^  ¿kx¿kÉ  ¿kà¿kû   ¿lBã¿qÂÖù/// Convert an array of pixel values into an [Image] object.
///
/// The `pixels` parameter is the pixel data. They are packed in bytes in the
/// order described by `format`, then grouped in rows, from left to right,
/// then top to bottom.
///
/// The `rowBytes` parameter is the number of bytes consumed by each row of
/// pixels in the data buffer. If unspecified, it defaults to `width` multiplied
/// by the number of bytes per pixel in the provided `format`.
///
/// The `targetWidth` and `targetHeight` arguments specify the size of the
/// output image, in image pixels. If they are not equal to the intrinsic
/// dimensions of the image, then the image will be scaled after being decoded.
/// If the `allowUpscaling` parameter is not set to true, both dimensions will
/// be capped at the intrinsic dimensions of the image, even if only one of
/// them would have exceeded those intrinsic dimensions. If exactly one of these
/// two arguments is specified, then the aspect ratio will be maintained while
/// forcing the image to match the other given dimension. If neither is
/// specified, then the image maintains its intrinsic size.
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform. If the image must be scaled
/// up, the `allowUpscaling` parameter must be set to true. 	¿q˛¿r	  ¿r	¿r  ¿r
¿r$  ¿r-¿r:  ¿rC¿rY  ¿rf¿rl  ¿rw¿r}  ¿rã¿rë  ¿r†¿r¶  ¿r∂¿z†ÄÎ¿z™  ¿zª¿z»   ¿{çÅõ¿{ô  ¿{™¿{∏   ¿}*Å$¿}6  ¿}G¿}O  ¿}V¿}^   ¿F≤Çº¿Fº ¿F∆¿F∆¿F…¿FŸ   ¿IpÉ2¿IΩB/// A variant of `_futurize` that can communicate specific errors.¿I–¿I–¿I”"¿IÏ    ¿ ˇíd¿ ˇ∆+/// Signature for [Image] lifecycle events.  ¿ ˇÈ¿ ˇ   ¿.Æm¿.Ë1/// Callback signature for [decodeImageFromList].  ¿/¿/   ¿a‘Åd¿b’Ä¯/// Signature for a callback that determines the size to which an image should
/// be decoded given its intrinsic size.
///
/// See also:
///
///  * [instantiateImageCodecWithSize], which used this signature for its
///    `getTargetSize` argument.  ¿c¿c  ¿c!¿c&   ¿‰él¿‰ƒ-/// Signature for [Picture] lifecycle events.  ¿‰È¿‰Ú   ¿@≥d¿@4/// Generic callback signature, used by [_futurize].¿@˙¿@˙ ¿A¿A   ¿AÄÖ¿A_=/// Generic callback signature, used by [_futurizeWithError].¿Ar¿Ar ¿AÖ¿Aà  ¿Aè¿Aò   ¿A†Ä’¿B;Äí/// Signature for a method that receives a [_Callback].
///
/// Return value should be null on success, and a string error message on
/// failure.¿BG¿BG ¿B]¿Bl   ¿BwÄ±¿B‹\/// Signature for a method that receives a [_CallbackWithError].
/// See also: [_Callbacker]¿BÒ¿BÒ ¿C¿C       õn <ÄÜÄ§ÄµÄ∂ÄŒÄÔÅ-ÅFÅzÅ≠ÅÆÅ˚ÇEÇïÇÊÉ6ÉÑÉ’ÑÑÑdÑäÑãÑ™ÑÍÑ˘Ñ˚Ñ¸ÖÖ`ÖoÖqÖrÖóÖÒÜ ÜÜÜ/ÜpÜŒÜ›ÜﬂÜ‡áá]álánáoáõá€á›áﬁàààfà∂ââ-â1âaâeâqâôâ÷ääFäNäRä£äÚãBãnãrã~ãÀåååå-å1åÑå åÿçççEçKçsçôç¿çÂçÎé;éâé∑éΩèèPèuè¨è≠èÌèÛê@êPêuêúê¬ê»ëëë\ëiëûë¿ë‚íí2í3íàíéí≥í⁄ì ìMì}ìÉì∆ìÃîîRîàîæîÙï6ï7ïeïkïìïôï¡ïÁññ3ñFñGñÄñÜñ’ñ˜ó&ó'óZó`ó±ó”ó˘ó˙ò1ò^ò_òòò∆ò«òˇô,ô-ôvô¨ô≤ôÍöö5ö9ö:öÉöÀö—õ	õ/õ]õéõíõìõ„úúúNúgúôúùúûúÁùù#ù[ùvù¶ù™ù´ù¸û)û/ûgûÅû≤û∂û∑ûıü2üRürüxüπüΩüæ†	††c†Å†á†≈†„°#°^°õ°◊¢¢¢¢<¢B¢ä¢Õ¢”££j£©£Ô£ı§B§å§◊•#•q•¡¶¶_¶å¶í¶·ßß6ßKßbßwßÜßÆß∂ß√ß⁄ß¸®®*®n®Æ®Ú©4©?©G©M©Q©R©ï©€©·™-™t™ø´´Y´ô´¡¨ ¨¨¨F¨l¨£¨¿¨Œ≠≠^≠¶≠Ø≠Ã≠˛Æ,ÆLÆiÆ{Æ∆ØØbØkØqØuØvØ√Ø…ØÙ∞'∞b∞f∞g∞s∞ñ∞∏∞À∞—∞˝±±±1±R±V±W±c±â±ä±ñ±‰±Ê±Á≤≤≤k≤µ≤‘≤ÿ≥)≥v≥≈¥¥c¥Æ¥Ú¥ˆµFµëµ‚∂.∂|∂…∑∑[∑™∑∏∏∏]∏™∏ÙπFπìπ‰∫%∫)∫P∫T∫¢∫„ª4ªÅª“º!ºpºãºèºùº°ºÏº˝ΩΩ]ΩpΩ∂Ω∑Ω˚ææ=æCæ†æ©æ™æÈæÔø>øMøSøéøîøÔøˆø˜¿ @6¿ @<¿ @á¿ @ò¿ @û¿ @‡¿ @Ê¿ AA¿ AH¿ AI¿ AÜ¿ Aå¿ A⁄¿ B+¿ BH¿ BN¿ Bú¿ B…¿ Bœ¿ C.¿ C9¿ C:¿ Cx¿ C~¿ Cß¿ C≠¿ C˚¿ D¿ D`¿ Df¿ Dµ¿ D‡¿ DÎ¿ DÏ¿ E4¿ EÅ¿ EŒ¿ E‹¿ E‚¿ F!¿ F'¿ Ft¿ Fº¿ FÃ¿ F“¿ G¿ G$¿ GÅ¿ Gä¿ Gã¿ Gÿ¿ H&¿ Hp¿ Hv¿ H∞¿ H∂¿ I¿ IU¿ I[¿ Iß¿ I≠¿ J
¿ J¿ J¿ Jc¿ J∂¿ K¿ K¿ KK¿ KQ¿ Kû¿ KÔ¿ Kı¿ LB¿ LH¿ L¶¿ L∞¿ L±¿ M¿ MS¿ Mù¿ M£¿ Mﬁ¿ M‰¿ N6¿ NÇ¿ Nà¿ N’¿ N€¿ O9¿ OC¿ OD¿ Oì¿ O≥¿ Oπ¿ P¿ P¿ P]¿ P©¿ P›¿ P„¿ Q.¿ Q?¿ QE¿ Q§¿ QØ¿ Q∞¿ Qˇ¿ R¿ R ¿ Rn¿ Rt¿ Rƒ¿ S¿ S?¿ SE¿ Sê¿ S°¿ Sß¿ T¿ T¿ T¿ Tb¿ Tñ¿ Tú¿ TÈ¿ TÔ¿ UJ¿ UQ¿ UR¿ Uë¿ Uó¿ UÊ¿ V2¿ VX¿ V^¿ V¨¿ V≤¿ W¿ WQ¿ W¢¿ WÒ¿ X;¿ XA¿ Xù¿ X•¿ X¶¿ X¿ Xˆ¿ YE¿ Yî¿ Yö¿ YÎ¿ Z¿ Z¿ Zk¿ Zq¿ Z—¿ Z◊¿ ZÁ¿ ZÌ¿ [/¿ [w¿ [ì¿ [›¿ [Ù¿ \ ¿ \¿ \I¿ \J¿ \ï¿ \ª¿ \¡¿ ]¿ ]Z¿ ]â¿ ]è¿ ]‡¿ ^,¿ ^R¿ ^X¿ ^®¿ ^˜¿ _H¿ _N¿ _ù¿ _ø¿ _≈¿ `#¿ `)¿ `9¿ `?¿ `è¿ `†¿ `Ë¿ a¿ aN¿ ae¿ aà¿ aâ¿ a“¿ b¿ b¿ bX¿ b¶¿ b˜¿ c¿ c¿ ch¿ cµ¿ c‰¿ cÍ¿ dI¿ dO¿ d_¿ de¿ dû¿ dÂ¿ e5¿ e`¿ ek¿ el¿ e∫¿ eŸ¿ eﬂ¿ f(¿ f9¿ f?¿ fù¿ fß¿ f®¿ f˜¿ g¿ g¿ ge¿ gv¿ g|¿ g€¿ gÊ¿ gÁ¿ h"¿ h(¿ ht¿ h¡¿ h¿ hˆ¿ iX¿ if¿ ig¿ i∫¿ i¿¿ j¿ jY¿ jà¿ jé¿ jÔ¿ j¸¿ j˝¿ kF¿ kp¿ kv¿ k∆¿ l¿ l]¿ lä¿ lê¿ l‹¿ m)¿ mX¿ m^¿ mø¿ m≈¿ m’¿ m€¿ n¿ n[¿ n™¿ n÷¿ n„¿ n‰¿ o2¿ oJ¿ oP¿ oí¿ oò¿ o˘¿ oˇ¿ p¿ p¿ pN¿ p[¿ p\¿ p•¿ p´¿ p˙¿ q¿ q¿ q`¿ qq¿ qw¿ qØ¿ qµ¿ r¿ r%¿ r&¿ rr¿ rÄ¿ rÜ¿ r’¿ rÏ¿ rÚ¿ s;¿ sL¿ sR¿ sä¿ sê¿ sÒ¿ s˛¿ sˇ¿ tM¿ tf¿ tl¿ tª¿ u
¿ u¿ u\¿ u©¿ uÒ¿ u˜¿ vF¿ vj¿ vp¿ v–¿ v˘¿ v˙¿ wK¿ wd¿ wj¿ w≥¿ wπ¿ x¿ xR¿ xx¿ x~¿ xŸ¿ xﬂ¿ xÔ¿ xı¿ yE¿ yn¿ yΩ¿ yÓ¿ yı¿ yˆ¿ zG¿ z`¿ zf¿ zØ¿ zˇ¿ {,¿ {2¿ {ç¿ {ì¿ {£¿ {©¿ {Î¿ |:¿ |P¿ |^¿ |_¿ |∞¿ |…¿ |œ¿ }¿ }¿ }g¿ }∑¿ }Ï¿ }Ú¿ ~O¿ ~U¿ ~e¿ ~k¿ ~°¿ ~Ô¿ =¿ F¿ G¿ ò¿ ±¿ ∑¿ Ä ¿ ÄP¿ Ä}¿ ÄÉ¿ ÄÂ¿ ÄÎ¿ Ä˚¿ Å¿ ÅP¿ Åf¿ Å±¿ Å ¿ Åÿ¿ Å⁄¿ Å€¿ Ç3¿ Çn¿ Çr¿ Çœ¿ É¿ É¿ Éo¿ É√¿ Ñ¿ Ñm¿ Ñq¿ Ñø¿ Ñ˙¿ Ñ˛¿ ÖW¿ Ö[¿ Ö®¿ Ö¿ Ü¿ Ü¿ Ü!¿ Ü%¿ Üp¿ Ü©¿ Üø¿ Ü‹¿ Ü˜¿ á¿ á5¿ áP¿ áe¿ áª¿ á„¿ á‰¿ à(¿ à.¿ àt¿ àπ¿ à¡¿ à¬¿ à˙¿ â ¿ âB¿ âq¿ âx¿ ây¿ â√¿ âÎ¿ âÒ¿ ä<¿ äâ¿ ä“¿ ã¿ ã#¿ ãS¿ ãc¿ ãi¿ ã∏¿ ãÏ¿ å¿ å¿ å¿ å\¿ åi¿ åo¿ åΩ¿ å˙¿ ç ¿ ç'¿ ç-¿ ç¿ çœ¿ é¿ é ¿ éM¿ éU¿ éW¿ éX¿ é|¿ éÄ¿ éé¿ éí¿ é«¿ è
¿ èF¿ èW¿ èó¿ èù¿ èÓ¿ êR¿ êX¿ ê¶¿ êÿ¿ ê‡¿ ê·¿ ë¿ ë"¿ ël¿ ëº¿ í,¿ í2¿ íÇ¿ íß¿ í∞¿ í±¿ íÙ¿ ì9¿ ì^¿ ìd¿ ì≥¿ î$¿ î*¿ îz¿ îü¿ î•¿ îÛ¿ ï¿ ï¿ ï¿ ï ¿ ïJ¿ ïN¿ ïõ¿ ïﬂ¿ ï„¿ ïÒ¿ ïı¿ ñA¿ ñM¿ ñà¿ ñ≈¿ ñ◊¿ ó¿ ó¿ ó|¿ óÇ¿ ó ¿ ò¿ ò&¿ ò,¿ ò<¿ òB¿ òê¿ ò°¿ òÚ¿ ô+¿ ô4¿ ô5¿ ôj¿ ôp¿ ô◊¿ ô›¿ ö%¿ öu¿ öÅ¿ öá¿ öó¿ öù¿ öÎ¿ ö¸¿ õ¿ õ¿ õT¿ õÜ¿ õå¿ õÛ¿ õ˘¿ úA¿ úë¿ úù¿ ú£¿ ú≥¿ úπ¿ ù¿ ù¿ ù!¿ ù#¿ ù$¿ ù^¿ ùb¿ ùy¿ ùµ¿ ù ¿ û¿ û#¿ û$¿ ûj¿ û∞¿ û◊¿ ûﬂ¿ û‡¿ ü$¿ üj¿ ü±¿ üÔ¿ ü˘¿ ü˚¿ ü¸¿ †+¿ †7¿ †M¿ †S¿ †û¿ †Ô¿ †ı¿ °A¿ °W¿ °§¿ °˝¿ ¢R¿ ¢k¿ ¢s¿ ¢t¿ ¢†¿ ¢¶¿ ¢ˇ¿ £0¿ £6¿ £v¿ £|¿ £‘¿ §/¿ §5¿ §E¿ §K¿ §ß¿ §À¿ §◊¿ §ÿ¿ §˜¿ §˝¿ •I¿ •O¿ •¢¿ •®¿ •Ô¿ •ı¿ ¶J¿ ¶i¿ ¶¿¿ ¶∆¿ ¶÷¿ ¶‹¿ ß$¿ ßo¿ ß†¿ ß˝¿ ®
¿ ®¿ ®W¿ ®]¿ ®∞¿ ©¿ ©+¿ ©1¿ ©É¿ ©–¿ ™"¿ ™t¿ ™z¿ ™ ¿ ´¿ ´h¿ ´∏¿ ´˛¿ ¨¿ ¨¿ ¨¿ ¨h¿ ¨Ç¿ ¨Ñ¿ ¨Ö¿ ¨«¿ ¨À¿ ≠¿ ≠0¿ ≠>¿ ≠Ü¿ ≠ú¿ ≠ß¿ ≠®¿ ≠◊¿ ≠‹¿ Æ'¿ Ær¿ Æ¡¿ Ø¿ Ø^¿ Øc¿ Ø≥¿ ∞¿ ∞¿ ∞¿ ∞b¿ ∞c¿ ∞Ñ¿ ∞†¿ ∞‘¿ ∞’¿ ± ¿ ±%¿ ±N¿ ±s¿ ±û¿ ±«¿ ±Ò¿ ≤!¿ ≤N¿ ≤x¿ ≤¨¿ ≤‹¿ ≥¿ ≥	¿ ≥K¿ ≥Å¿ ≥ø¿ ≥ı¿ ¥7¿ ¥u¿ ¥µ¿ µ¿ µG¿ µá¿ µŸ¿ ∂#¿ ∂e¿ ∂f¿ ∂ß¿ ∂È¿ ∂Í¿ ∑.¿ ∑O¿ ∑k¿ ∑Ü¿ ∑á¿ ∑µ¿ ∑¯¿ ∑¸¿ ∑˝¿ ∏#¿ ∏N¿ ∏y¿ ∏Õ¿ ∏Œ¿ π¿ π"¿ π(¿ π@¿ πY¿ π†¿ π§¿ πƒ¿ ∫¿ ∫>¿ ∫e¿ ∫©¿ ∫≠¿ ∫Æ¿ ∫Ê¿ ª¿ ª¿ ªP¿ ªV¿ ªv¿ ª|¿ ªå¿ ªí¿ ªÿ¿ º	¿ ºQ¿ ºW¿ ºü¿ º¥¿ º»¿ Ω¿ Ω=¿ ΩA¿ Ω\¿ Ωí¿ Ω–¿ Ω‘¿ Ω’¿ æ¿ æN¿ æO¿ æõ¿ æ°¿ æ„¿ ø4¿ øÖ¿ ø¶¿ ø¨¿ ø˘¿ ¿¿ ¿ ¿ ¿G¿ ¿M¿ ¿]¿ ¿c¿ ¿≤¿ ¿Ê¿ ¡0¿ ¡F¿ ¡b¿ ¡Ø¿ ¡Í¿ ¡Ó¿ ¬¿ ¬K¿ ¬ç¿ ¬ë¿ ¬í¿ ¬÷¿ ¬‹¿ √¿ √ ¿ √r¿ √v¿ √ô¿ √æ¿ √¸¿ ƒ ¿ ƒ¿ ƒ;¿ ƒä¿ ƒ«¿ ƒÕ¿ ≈
¿ ≈%¿ ≈i¿ ≈m¿ ≈è¿ ≈±¿ ≈˜¿ ≈˚¿ ≈¸¿ ∆=¿ ∆m¿ ∆s¿ ∆•¿ ∆¡¿ «¿ «¿ «:¿ «_¿ «°¿ «•¿ «¶¿ «Á¿ «Ì¿ »>¿ »â¿ »è¿ »…¿ »œ¿ »Ì¿ »Û¿ …\¿ …b¿ ……¿ …œ¿  6¿  <¿  à¿  Ÿ¿  Â¿  Î¿  ˚¿ À¿ ÀP¿ À|¿ À≈¿ Ã¿ Ã"¿ Ãv¿ Ãz¿ Ãü¿ Ãƒ¿ Õ¿ Õ¿ Õ¿ ÕD¿ Õ{¿ Õ|¿ Õ«¿ Œ¿ Œ`¿ Œ≠¿ Œ˚¿ œ¿ œF¿ œL¿ œö¿ œæ¿ œƒ¿ –-¿ –3¿ –ú¿ –¢¿ —¿ —¿ —]¿ —Æ¿ —∫¿ —¿¿ —–¿ —÷¿ “ ¿ “;¿ “Ñ¿ “§¿ “Ì¿ “Ò¿ ”¿ ”V¿ ”°¿ ”•¿ ”¶¿ ”ˆ¿ ‘4¿ ‘:¿ ‘^¿ ‘}¿ ‘¡¿ ‘‚¿ ‘˜¿ ’¿ ’8¿ ’ì¿ ’⁄¿ ’Â¿ ’Î¿ ’¸¿ ÷ ¿ ÷&¿ ÷?¿ ÷ë¿ ÷Ÿ¿ ◊!¿ ◊.¿ ◊{¿ ◊≠¿ ◊ˇ¿ ÿX¿ ÿ©¿ ÿØ¿ ÿ≥¿ ÿ¥¿ Ÿ¿ ŸZ¿ Ÿ¶¿ Ÿ¨¿ Ÿ‘¿ ⁄!¿ ⁄E¿ ⁄ü¿ ⁄£¿ ⁄Œ¿ ⁄Û¿ €9¿ €=¿ €>¿ €x¿ €~¿ €¥¿ €∫¿ € ¿ €–¿ ‹¿ ‹D¿ ‹v¿ ‹æ¿ ‹’¿ ›¿ ›	¿ ›'¿ ›7¿ ›E¿ ›t¿ ›´¿ ›¥¿ ›«¿ ›—¿ ›·¿ ﬁ¿ ﬁ0¿ ﬁê¿ ﬁö¿ ﬁ¢¿ ﬁµ¿ ﬁø¿ ﬁ˜¿ ﬁ˚¿ ﬁ¸¿ ﬂC¿ ﬂU¿ ﬂ[¿ ﬂÄ¿ ﬂÜ¿ ﬂ◊¿ ﬂ¯¿ ‡O¿ ‡q¿ ‡u¿ ‡ù¿ ‡„¿ ·¿ ·!¿ ·O¿ ·W¿ ·d¿ ·™¿ ·∞¿ ·¥¿ ·µ¿ ·¿ ·ˆ¿ ‚=¿ ‚W¿ ‚]¿ ‚k¿ ‚ò¿ ‚≤¿ ‚ƒ¿ ‚ﬁ¿ „.¿ „9¿ „A¿ „K¿ „Q¿ „a¿ „g¿ „¢¿ „√¿ ‰¿ ‰<¿ ‰@¿ ‰h¿ ‰Å¿ ‰ü¿ ‰Õ¿ ‰’¿ ‰‚¿ Â#¿ Ây¿ Â§¿ ÂË¿ Â¿ Âˆ¿ Â˙¿ Â˚¿ Ê:¿ Ê@¿ Êå¿ Ê÷¿ Á¿ Á!¿ Áh¿ Ál¿ Áç¿ Á◊¿ Á€¿ Á‹¿ ÁË¿ Á˛¿ Ë7¿ ËV¿ Ë\¿ Ëå¿ Ëß¿ Ë√¿ ËÏ¿ È
¿ È*¿ Èf¿ Èu¿ Èò¿ È†¿ È…¿ ÈÓ¿ Èˆ¿ Í"¿ Í_¿ Í¥¿ Íæ¿ ÍÕ¿ ÍÛ¿ Í˚¿ Î¿ Î¿ Î1¿ Îb¿ Îz¿ ÎÄ¿ Î∞¿ Îÿ¿ Î¿ Îˆ¿ Ï'¿ ÏS¿ Ïk¿ Ïq¿ Ïê¿ ÏÕ¿ ÏÂ¿ ÏÎ¿ Ì	¿ ÌD¿ Ì\¿ Ìb¿ Ìë¿ Ì“¿ ÌÍ¿ Ì¿ Ó
¿ Ó=¿ ÓU¿ Ó[¿ Óz¿ Ó∑¿ Óœ¿ Ó’¿ ÓÌ¿ Ô&¿ Ô,¿ ÔC¿ Ôa¿ Ôe¿ Ôg¿ Ôh¿ Ô≥¿ Ô∑¿ Ô˙¿ D¿ è¿ ¡¿ ≈¿ ¯¿ ¸¿ Ò4¿ ÒF¿ Òb¿ Òh¿ Òµ¿ Ò·¿ ÒÁ¿ Ú¿ Ú"¿ Úo¿ ÚΩ¿ Úı¿ Û.¿ Û>¿ Û@¿ ÛA¿ ÛÉ¿ Ûõ¿ ÛÈ¿ Ù6¿ Ù~¿ Ù»¿ Ùﬂ¿ Ùˆ¿ Ù¸¿ ıZ¿ ıe¿ ıf¿ ıÜ¿ ıå¿ ıÂ¿ ı¯¿ ı˘¿ ˆ¿ ˆ¿ ˆl¿ ˆß¿ ˆ∏¿ ˆπ¿ ˆﬂ¿ ˆÂ¿ ˜1¿ ˜^¿ ˜d¿ ˜y¿ ˜¿ ˜ç¿ ˜´¿ ˜À¿ ˜—¿ ¯¿ ¯7¿ ¯ç¿ ¯œ¿ ¯¿ ˘
¿ ˘$¿ ˘>¿ ˘X¿ ˘c¿ ˘k¿ ˘u¿ ˘ã¿ ˘å¿ ˘û¿ ˘§¿ ˘Ù¿ ˙B¿ ˙é¿ ˙€¿ ˚$¿ ˚*¿ ˚{¿ ˚á¿ ˚ç¿ ˚ù¿ ˚£¿ ¸¿ ¸G¿ ¸N¿ ¸P¿ ¸Q¿ ¸ê¿ ¸£¿ ¸Ò¿ ˝A¿ ˝t¿ ˝Ä¿ ˝Å¿ ˝–¿ ˛¿ ˛R¿ ˛^¿ ˛_¿ ˛Ø¿ ˛ˆ¿ ˇE¿ ˇÄ¿ ˇè¿ ˇë¿ ˇí¿ ˇæ¿ ˇ˜¿ ˇ¯¿ .¿ 2¿ r¿ v¿ ƒ¿ ‹¿ ‡¿/¿~¿≈¿¿[¿i¿m¿π¿¿O¿S¿a¿e¿”¿"¿H¿ó¿•¿◊¿Á¿¿"¿,¿K¿e¿i¿j¿ã¿ß¿æ¿ø¿˝¿¿N¿ê¿±¿ÿ¿Ÿ¿¿¿i¿¨¿Õ¿ı¿ˆ¿¿¿V¿i¿j¿¨¿¿¿¡¿€¿	(¿	Y¿	_¿	∞¿	À¿	—¿
¿
g¿
∂¿
÷¿
È¿¿1¿]¿s¿™¿ø¿‚¿˙¿ ¿¿¿I¿O¿ù¿≥¿Œ¿‚¿Ú¿¿!¿+¿ô¿ù¿û¿”¿Ÿ¿%¿5¿;¿Ä¿œ¿¿¿i¿Ç¿“¿!¿k¿∑¿¿9¿g¿k¿l¿®¿Æ¿˙¿I¿u¿{¿ ¿¿K¿ó¿ƒ¿‚¿¿4¿B¿b¿p¿ò¿ß¿ı¿˚¿ˇ¿ ¿Q¿s¿y¿π¿Ô¿¿¿q¿Ñ¿é¿°¿•¿¶¿◊¿›¿,¿{¿Ã¿¿d¿≤¿˛¿¿"¿p¿ô¿ü¿Á¿8¿N¿T¿ä¿ê¿û¿π¿Ÿ¿Ò¿˜¿/¿n¿ç¿◊¿Ë¿˙¿¿j¿∏¿ﬁ¿¿¿@¿H¿N¿p¿§¿Ô¿¿]¿°¿ﬁ¿˜¿˝¿9¿i¿o¿å¿¶¿¨¿Œ¿Ï¿ ¿ ¿ ¿ 1¿ T¿ Z¿ u¿ {¿ û¿ ◊¿ ·¿ Á¿!¿!¿!$¿!*¿!o¿!Ω¿!·¿!Û¿"¿" ¿"K¿"ú¿"Í¿#,¿#5¿#;¿#Z¿#Ö¿#â¿#ä¿#÷¿$¿$"¿$o¿$π¿%	¿%X¿%¢¿%Ô¿&(¿&)¿&5¿&_¿&a¿&b¿&|¿&±¿&˙¿'¿'¿'h¿'ä¿'¶¿'¥¿'µ¿(¿(¿(¿(o¿(ä¿(ã¿(‡¿))¿)v¿)¶¿)›¿)Ó¿*¿*¿*#¿*+¿*/¿*0¿*l¿*¬¿+¿+¿+6¿+I¿+a¿+m¿+Ö¿+“¿+Í¿,4¿,l¿,s¿,â¿,ô¿,ù¿,û¿,È¿-¿-P¿-l¿-m¿-ñ¿-ó¿-›¿-¸¿-˝¿.	¿.9¿.;¿.<¿.V¿.w¿.´¿.≠¿.Æ¿.‡¿/¿/¿/Q¿/U¿/ë¿/´¿/Ø¿/˘¿0B¿0ê¿0÷¿1!¿1J¿1N¿1á¿1ã¿1ó¿1£¿1›¿2¿2<¿2â¿2‘¿2Ò¿3=¿3\¿3}¿3É¿3ã¿3è¿3•¿3©¿3µ¿3¬¿3¸¿4=¿4}¿4º¿5¿5"¿5q¿5π¿5⁄¿5‡¿5Ë¿5˙¿6D¿6`¿6f¿6§¿6¿¿6˛¿6ˇ¿7.¿74¿7Å¿7ú¿7ù¿7∆¿7Ã¿8¿8¿8f¿8{¿8}¿8~¿8û¿8¢¿8Í¿9¿9¿9@¿9]¿9t¿9ö¿9∞¿9±¿9‡¿9Ê¿:¿:?¿:Z¿:[¿:É¿:â¿:Õ¿:”¿;$¿;*¿;k¿;õ¿;ø¿;¿¿<¿<3¿<9¿<Ñ¿<©¿<ª¿<Ω¿<æ¿=
¿=¿=X¿=s¿=x¿=±¿=œ¿=„¿=‰¿=˛¿=ˇ¿>¿>F¿>G¿>õ¿>ª¿>º¿>€¿>‹¿>Ë¿?2¿?3¿?å¿?±¿?≤¿?æ¿?È¿@1¿@ô¿@¥¿@◊¿A8¿AB¿A{¿Aä¿A≤¿AÓ¿B0¿B<¿BD¿BL¿Be¿BÉ¿Bâ¿B¶¿B™¿B´¿BÁ¿C8¿Cà¿Câ¿Cï¿C◊¿CÚ¿CÙ¿Cı¿D¿D¿Dk¿Dª¿E	¿E,¿E0¿EÇ¿E–¿EÎ¿F+¿FP¿F°¿FÁ¿G3¿GÉ¿Gñ¿Gö¿GÂ¿H/¿H¿HŒ¿I¿Ik¿I∫¿J¿J>¿JB¿Jå¿J÷¿K&¿Kb¿Kf¿K≥¿Kø¿K‰¿K¯¿L¿L!¿L?¿LJ¿Lñ¿L¿¿LÃ¿LÍ¿M
¿M.¿M3¿M5¿M6¿MY¿M]¿M¨¿M¸¿NJ¿Nm¿Nq¿N≈¿O¿OL¿OP¿O¢¿OÚ¿O˛¿P¿PM¿Pó¿PÁ¿Q6¿QÇ¿Q”¿R"¿Rj¿R¶¿R™¿RÙ¿S>¿Sé¿S ¿SŒ¿T¿T'¿T+¿TP¿TT¿T§¿TÔ¿U:¿Ub¿Uë¿U≠¿U¡¿U÷¿UÙ¿U˘¿V!¿V-¿Vl¿Vâ¿VÕ¿Vı¿Vˇ¿WF¿Wp¿Wz¿WÇ¿W ¿W—¿W÷¿Wÿ¿WŸ¿W¸¿X ¿XK¿XO¿Xú¿XÎ¿Y*¿Y.¿Yw¿Y∆¿Y‹¿Y‡¿Z.¿Z{¿Z«¿[¿[W¿[ß¿[˜¿\G¿\~¿\Ç¿\Ã¿]¿]J¿]N¿]õ¿]ß¿]´¿]–¿]‘¿^$¿^o¿^∫¿^‚¿_¿_+¿_U¿_`¿_ä¿_÷¿_ﬁ¿`9¿`x¿`π¿`·¿a¿a-¿a4¿aB¿aX¿a\¿a^¿a_¿aØ¿a—¿a”¿a‘¿b#¿bL¿bP¿b^¿bb¿b¨¿bÕ¿c	¿c¿c6¿c9¿c:¿c¿cÉ¿cë¿cï¿c·¿d¿dG¿d_¿dã¿dë¿d‡¿d¯¿e+¿eW¿eÖ¿eÜ¿e¥¿e∫¿f	¿fY¿fß¿fÙ¿g¿g%¿g[¿go¿gp¿gü¿g•¿gı¿hD¿hë¿hﬂ¿i	¿i¿iE¿iZ¿i[¿ig¿i£¿i•¿i¶¿iÔ¿iÛ¿jB¿jê¿j◊¿k!¿kN¿kP¿kQ¿kØ¿kË¿l"¿l?¿lA¿lB¿l¿lÉ¿l—¿m¿m4¿m8¿mÑ¿m’¿n¿n¿nc¿n≠¿n˝¿oL¿oò¿oÈ¿p8¿pÄ¿pº¿p¿¿q
¿qT¿q§¿q‡¿q¸¿r¿r¿r+¿rA¿rd¿ru¿râ¿rû¿rº¿r¡¿rﬁ¿s¿s¿s4¿sj¿sn¿so¿só¿sº¿s˙¿t
¿t ¿t8¿tT¿tq¿tz¿t{¿tò¿tﬁ¿u¿u¿u[¿uá¿uë¿uô¿uö¿u´¿u∆¿uÍ¿v¿v¿v8¿v|¿vó¿v≥¿væ¿v‰¿w ¿w ¿w!¿wM¿wY¿w_¿wa¿wb¿wØ¿wø¿w√¿w˙¿x¿xX¿x^¿xØ¿x˛¿yM¿yx¿y~¿y∂¿y¡¿y¬¿z¿z
¿z[¿z¨¿z≤¿zÎ¿zˆ¿z¯¿z˘¿{¿{!¿{/¿{3¿{Ç¿{®¿{Ω¿{Ò¿{˜¿|E¿|ê¿|—¿|◊¿|Á¿|Ì¿}<¿}V¿}d¿}≥¿}Ÿ¿}ﬂ¿~-¿~{¿~ï¿~õ¿~´¿~‚¿~Ô¿:¿@¿é¿Ÿ¿Ä¿Ä¿Äb¿Äõ¿Ä°¿ÄÔ¿ÅC¿ÅI¿ÅY¿Åñ¿Åù¿Å—¿Å◊¿Ç%¿Çp¿Ç±¿Ç∑¿Ç«¿ÇÕ¿É¿É/¿ÉD¿ÉF¿ÉG¿Éò¿Éµ¿Ñ¿Ñ(¿Ñ.¿Ñ~¿Ñ«¿Ö¿Öa¿Ö{¿ÖÅ¿Ö–¿Ü¿ÜV¿Ü\¿Üß¿ÜÃ¿Üﬁ¿Ü‡¿Ü·¿á9¿áÉ¿áü¿áπ¿á∫¿á∆¿à¿à)¿à+¿à,¿à^¿àb¿àß¿à´¿àÓ¿â-¿âA¿âE¿âã¿â∂¿â∫¿â˘¿ä<¿äd¿äh¿ä¨¿äÂ¿ä˚¿ã¿ã¿ãD¿ãJ¿ãó¿ãÊ¿å	¿å=¿åm¿åÑ¿åà¿åâ¿å«¿åÕ¿ç¿ç/¿çS¿çT¿çâ¿ç¨¿ç≠¿çı¿é"¿é#¿éj¿éw¿éö¿éõ¿é‚¿è¿èA¿èB¿èÖ¿è≈¿è‘¿è⁄¿êK¿ê¿¿ë¿ë¿ëJ¿ëë¿ë÷¿ë„¿í1¿í2¿íw¿íæ¿íÕ¿í”¿ì@¿ì±¿î¿î¿îI¿îê¿î’¿îÍ¿ïD¿ïE¿ïã¿ïœ¿ñ¿ñ[¿ñÄ¿ñÜ¿ñÛ¿ód¿ó™¿ó´¿óÒ¿ò5¿òz¿ò¡¿ô¿ô/¿ô}¿ô~¿ô¡¿ô„¿ôÈ¿ö,¿öP¿öV¿öù¿ö›¿õ$¿õh¿õØ¿õÛ¿ú!¿ú'¿úl¿ú¢¿úÛ¿úÙ¿ùC¿ùà¿ùé¿ù›¿û&¿ûj¿ûë¿ûó¿û‹¿ü+¿üw¿ü}¿ü†¿ü¡¿ü‹¿ü˜¿†¿†¿†¿†h¿†≠¿†≥¿†Á¿†Ì¿°<¿°ä¿°Õ¿¢¿¢¿¢`¿¢Æ¿¢˚¿£¿£-¿£G¿£h¿£É¿£û¿£π¿£ø¿£¿¿§¿§¿§9¿§:¿§|¿§™¿§∞¿•¿•P¿•k¿•l¿•¥¿•Ò¿¶0¿¶q¿¶∑¿¶˚¿ß?¿ßK¿ßQ¿ßΩ¿®-¿®3¿®£¿©¿©W¿©X¿©™¿©∏¿©æ¿™¿™2¿™8¿™¿™≥¿™¥¿™ˆ¿´9¿´I¿´g¿´h¿´Æ¿´¥¿¨¿¨O¿¨z¿¨º¿¨Ω¿≠¿≠B¿≠¿≠Ö¿≠“¿Æ#¿ÆN¿Æó¿Æò¿Æ›¿Ø¿Ø.¿Ø/¿Øt¿Ø∏¿Ø”¿Ø„¿Ø‰¿∞4¿∞Å¿∞†¿∞¶¿∞Ó¿∞Ù¿±9¿±X¿±Y¿±ô¿±»¿±Â¿±Ê¿≤&¿≤V¿≤}¿≤~¿≤≥¿≤π¿≥	¿≥V¿≥°¿≥‡¿≥Ê¿¥7¿¥Ü¿¥ÿ¿µ%¿µo¿µΩ¿µÀ¿∂¿∂$¿∂%¿∂q¿∂Ñ¿∂ä¿∂⁄¿∑(¿∑b¿∑´¿∑◊¿∏(¿∏;¿∏A¿∏∏¿∏º¿∏Ω¿π¿π=¿πC¿πè¿π◊¿∫&¿∫u¿∫ø¿∫˜¿∫˝¿ªH¿ªï¿ªﬁ¿º¿º¿ºh¿ºµ¿Ω¿ΩH¿Ωï¿Ω‚¿æ1¿æÅ¿æ–¿æ÷¿ø$¿øs¿øß¿ø≠¿ø˛¿¿I¿¿É¿¿Ö¿¿Ü¿¿–¿¿¯¿¡¿¡¿¡k¿¡∞¿¡√¿¡ƒ¿¡˝¿¬¿¬¿¬e¿¬ã¿¬å¿¬ò¿¬‹¿¬Ë¿√)¿√*¿√~¿√ù¿√û¿√¯¿ƒ$¿ƒ%¿ƒ1¿ƒè¿ƒª¿ƒº¿ƒ»¿≈.¿≈d¿≈e¿≈q¿≈œ¿≈˚¿≈¸¿∆¿∆n¿∆§¿∆•¿∆±¿«*¿«y¿«z¿«Ü¿»¿»2¿»e¿»f¿»r¿»Ò¿…L¿…M¿…Y¿…‡¿ C¿ D¿ P¿ «¿À¿À¿À#¿À¢¿À˘¿À˙¿Ã¿ÃX¿Ãx¿Ã◊¿Ã€¿Ã‹¿Õ_¿ÕÂ¿ÕÊ¿ÕÚ¿Œ¿Œ6¿ŒQ¿Œl¿Œá¿Œé¿Œ≤¿Œ÷¿œ0¿œ4¿œ5¿œª¿–H¿–I¿–U¿–p¿–ä¿–´¿–∆¿–·¿–¸¿—¿—,¿—P¿—º¿—¿¿—¡¿“O¿“t¿“ä¿“†¿“∂¿“Ã¿“„¿“¯¿”¿”¿”¿”8¿”X¿”î¿”ò¿”ô¿‘¿‘X¿‘Y¿‘e¿‘Å¿‘°¿‘›¿‘·¿‘‚¿’Q¿’°¿’¢¿’Æ¿’Ô¿÷¿÷b¿÷f¿÷g¿÷Â¿◊Z¿◊[¿◊g¿◊ú¿◊Œ¿◊“¿◊”¿ÿ%¿ÿb¿ÿc¿ÿo¿ÿé¿ÿ∞¿ÿ‘¿ÿÿ¿ÿŸ¿Ÿ#¿ŸQ¿ŸR¿Ÿ^¿Ÿ°¿Ÿ≈¿Ÿ‡¿⁄¿⁄V¿⁄c¿⁄û¿⁄§¿⁄®¿⁄©¿€	¿€K¿€L¿€æ¿‹¿‹¿‹+¿‹u¿‹ô¿‹¥¿‹‹¿›0¿›=¿›¿›Ö¿›â¿›ä¿›Ò¿ﬁ:¿ﬁ;¿ﬁ≥¿ﬂ¿ﬂ¿ﬂ&¿ﬂs¿ﬂå¿ﬂç¿ﬂô¿ﬂÊ¿ﬂˇ¿‡ ¿‡¿‡,¿‡O¿‡y¿‡}¿‡~¿‡ﬁ¿·¿·¿·¿·8¿·\¿·ä¿·≤¿·√¿·«¿·»¿‚¿‚[¿‚\¿‚h¿‚ê¿‚∂¿‚‰¿„¿„¿„¿„¿„l¿„´¿„¨¿„∏¿„Õ¿„¯¿‰6¿‰:¿‰;¿‰Ä¿‰•¿‰¶¿Â¿ÂQ¿ÂR¿Â^¿Âô¿Â∆¿Â ¿ÂÃ¿ÂÕ¿Ê¿Ê¿Ê!¿Ê¿Êè¿Ê¿¿Ê∆¿ÊÏ¿Á¿Á¿Á_¿Áe¿Á∫¿ÁÊ¿Ë#¿Ëk¿Ëo¿Ëp¿Ëè¿Ëï¿ËË¿È,¿ÈE¿ÈF¿Ès¿Èy¿È ¿Í¿Í8¿ÍO¿ÍP¿ÍÄ¿ÍÜ¿Í÷¿Î%¿ÎA¿ÎG¿Îï¿Î‰¿Ï3¿ÏÅ¿Ïí¿Ï◊¿Ì¿Ì¿Ì¿Ì[¿Ì_¿Ì∞¿Ì¸¿ÓB¿ÓF¿Óå¿Óê¿Ó‹¿Ô+¿ÔI¿ÔM¿Ôó¿ÔÁ¿¿H¿w¿Õ¿Œ¿ˆ¿˜¿Ò¿Ò5¿Ò7¿Ò8¿Òá¿Ò°¿Ò‹¿Ú¿Ú¿Ú#¿ÚF¿ÚG¿ÚS¿Ún¿Ú°¿Ú¬¿Ú⁄¿Û=¿Ûô¿Ù¿Ù¿Ù¿Ù6¿Ù:¿Ù;¿ÙG¿Ù[¿ÙÇ¿Ù≤¿Ù≈¿ÙÀ¿Ù„¿Ùı¿Ù˘¿Ù˚¿Ù¸¿ı;¿ı?¿ıá¿ı“¿ˆ ¿ˆD¿ˆH¿ˆñ¿ˆÂ¿˜1¿˜Å¿˜œ¿˜›¿˜¿¯¿¯L¿¯é¿¯¡¿¯¬¿¯¯¿¯˛¿˘G¿˘ë¿˘⁄¿˘Ò¿˘Ú¿˙¿˙¿˙k¿˙±¿˚¿˚ ¿˚7¿˚8¿˚c¿˚i¿˚π¿¸ ¿¸N¿¸ù¿¸÷¿¸‹¿˝*¿˝z¿˝…¿˛¿˛¿˛¿˛<¿˛=¿˛ç¿˛¥¿˛∫¿ˇ	¿ˇV¿ˇn¿ˇt¿ˇ©¿ˇØ¿ˇı¿ '¿ h¿ l¿ m¿ ∂¿ º¿ ˛¿B¿ê¿Ì¿Ò¿Ú¿˛¿f¿h¿i¿§¿Ÿ¿˛¿¿¿X¿ö¿õ¿ø¿5¿W¿[¿\¿Ω¿Í¿Î¿/¿_¿≠¿¿+¿G¿Z¿g¿}¿£¿»¿—¿◊¿€¿‹¿7¿}¿~¿Ω¿‰¿Z¿à¿À¿‹¿‡¿·¿	Q¿	ø¿	¿¿	‰¿
Z¿
~¿
Ç¿
É¿
·¿¿¿:¿?¿î¿æ¿÷¿¿¿/¿5¿F¿J¿K¿•¿À¿Ã¿¿¿_¿¿Å¿Ç¿∑¿Û¿¿<¿=¿ä¿Õ¿◊¿ÿ¿&¿r¿†¿©¿™¿˜¿H¿ã¿î¿ï¿Â¿Û¿¸¿˛¿ˇ¿L¿ú¿Æ¿≤¿¿¿a¿g¿õ¿°¿Ú¿¯¿G¿ï¿Â¿ˆ¿¸¿K¿Q¿w¿}¿ç¿ì¿‡¿˘¿
¿¿ ¿!¿;¿R¿S¿ô¿‰¿¿D¿E¿Q¿t¿ì¿µ¿ÿ¿‹¿›¿È¿¿¿)¿z¿|¿}¿Œ¿¿k¿∑¿Ë¿Ï¿5¿B¿m¿∫¿¿O¿U¿¶¿Ù¿!¿\¿t¿î¿¨¿»¿…¿¿Z¿o¿u¿¬¿Í¿¿#¿V¿â¿º¿Ô¿ı¿D¿ê¿ñ¿§¿‰¿˚¿¿)¿@¿J¿T¿Z¿l¿r¿ì¿ô¿ß¿Â¿ ¿ ¿ 9¿ U¿ _¿ i¿ o¿ ˆ¿ ¸¿!
¿!G¿!j¿!ç¿!∞¿!”¿!›¿!Á¿!Ì¿"v¿"|¿"ä¿"À¿"Ò¿#¿#=¿#c¿#m¿#w¿#ß¿#æ¿#Ÿ¿#Û¿$¿$¿$^¿$n¿$ñ¿$≠¿$»¿$‡¿%	¿%
¿%X¿%s¿%õ¿%≤¿%Õ¿%Â¿&¿&¿&&¿&E¿&d¿&w¿&x¿&®¿&›¿'!¿'j¿'≥¿'¥¿'Ã¿'ÿ¿(%¿(&¿(O¿(d¿({¿(Ø¿(∆¿(–¿(¯¿)¿)?¿)]¿)t¿)~¿)…¿)Û¿*¿*L¿*p¿*•¿*¥¿*ˆ¿*¸¿+ ¿+¿+¿+0¿+\¿+p¿+v¿+ñ¿+∂¿+Ì¿,¿,:¿,>¿,?¿,K¿,`¿,ä¿,Ì¿,Ò¿,Ú¿,˛¿-¿-4¿-K¿-Ñ¿-ù¿-Ã¿-¿."¿.F¿.x¿.á¿.¨¿.≤¿.∂¿.∑¿.√¿.Ÿ¿.Ó¿/¿/>¿/W¿/Ü¿/™¿/‹¿0 ¿02¿0A¿0›¿0„¿0Á¿0È¿0Í¿1(¿1,¿1|¿1«¿2¿2/¿2j¿2å¿2ƒ¿2ÿ¿3¿3¿3¿3B¿3|¿3ê¿3…¿3Õ¿3¸¿4A¿4U¿4s¿4w¿4x¿4ß¿4Ï¿5 ¿5¿5"¿5#¿5q¿5ó¿5¥¿5µ¿5ı¿6¿6¿6{¿6∞¿6±¿7¿75¿76¿7ö¿7ƒ¿7≈¿8)¿8S¿8U¿8V¿8â¿8ç¿8õ¿8ü¿8Ó¿9;¿9ä¿9≤¿9˛¿:)¿:F¿:ò¿:≈¿:∆¿;¿;q¿; ¿;Œ¿;œ¿<¿<b¿<±¿<Ù¿<¯¿<˘¿==¿=è¿=›¿>¿>#¿>$¿>h¿>n¿>º¿?¿?8¿?Ñ¿?§¿?‚¿?Ë¿@J¿@N¿@O¿@ô¿@ü¿@Ó¿A%¿AJ¿A¶¿AÓ¿AÚ¿AÛ¿BD¿Bë¿B∏¿Bπ¿C¿C:¿CZ¿C\¿C]¿Cè¿C⁄¿C€¿Cı¿D¿D¿D<¿DÄ¿Då¿D√¿Dƒ¿D–¿E¿E¿E ¿Ed¿Ee¿Eq¿Eî¿E¿¿E‘¿E⁄¿F¿F1¿Fc¿Fg¿Fh¿Ft¿Fº¿Fæ¿Fø¿F˜¿G[¿G\¿Gs¿Gä¿G•¿G¶¿G∫¿G¸¿H¿H?¿H@¿H[¿Hs¿Hû¿HÀ¿H¸¿I'¿I-¿I1¿I2¿I>¿Ià¿Iâ¿Iï¿I‡¿I·¿IÌ¿J¿J<¿JP¿JV¿JÉ¿J•¿J«¿JÓ¿JÚ¿JÛ¿Jˇ¿K2¿K4¿K5¿Kg¿KØ¿K∞¿K»¿K‡¿K·¿L%¿L1¿Lh¿Li¿Lu¿Lµ¿L∂¿L¬¿M¿M¿M¿M3¿M_¿Ms¿My¿M†¿Mƒ¿MÈ¿MÌ¿MÓ¿M˙¿N/¿N1¿N2¿Nc¿N™¿N´¿N√¿N€¿N‹¿O¿O+¿Ob¿Oc¿Oo¿OÆ¿OØ¿Oª¿O˚¿O¸¿P¿P+¿PW¿Pk¿Pq¿Pó¿Pª¿P‡¿P‰¿PÂ¿PÒ¿Q&¿Q(¿Q)¿Q\¿Q≠¿QÆ¿Qœ¿Q¿QÒ¿R¿RQ¿R]¿Rî¿Rï¿R°¿S¿S¿S¿Sn¿So¿S{¿Sû¿S ¿Sﬁ¿S‰¿T¿T8¿Te¿Ti¿Tj¿Tv¿T≥¿Tµ¿T∂¿Tı¿T˘¿UI¿Uú¿U‡¿V¿VW¿Vå¿V•¿Vπ¿V˝¿W¿W¿WO¿Wï¿W∆¿Wﬂ¿WÛ¿X$¿X(¿X)¿Xm¿Xø¿XÓ¿Y¿Y¿YK¿YO¿YP¿Yî¿Yö¿YË¿Z2¿Zc¿Z|¿Z†¿Zﬁ¿Z‰¿Z¯¿[2¿[6¿[7¿[i¿[ú¿[µ¿[…¿\¿\3¿\7¿\8¿\k¿\ü¿\∏¿\Ã¿]"¿]x¿]±¿]µ¿]∂¿]ˆ¿^¿^¿^Ö¿^Ã¿^Õ¿_6¿_s¿_t¿_‹¿`¿`¿`s¿`∏¿`π¿a¿aU¿aV¿a∆¿b¿b¿bh¿bé¿b´¿b≠¿bÆ¿bÙ¿c)¿c^¿c®¿cƒ¿c‡¿cÓ¿cÔ¿d¿d¿d8¿d>¿dè¿d™¿d¬¿d“¿dÛ¿e¿e¿e%¿e)¿e*¿ez¿eù¿e£¿e¿f:¿fÉ¿fÕ¿f”¿g¿g+¿g;¿gZ¿gw¿gä¿gî¿gò¿gö¿gõ¿g¿h	¿h¿hZ¿h®¿hı¿iE¿iI¿iû¿iÚ¿jK¿j£¿jˆ¿k¿k#¿k}¿k¢¿k¶¿k¥¿k∏¿k¸¿lF¿lñ¿l¿¿m
¿mR¿my¿m∆¿n¿n.¿ni¿ny¿n”¿nŸ¿o%¿ok¿oq¿o…¿oÈ¿oÔ¿pR¿pµ¿q¿q ¿q!¿qr¿qx¿q–¿r.¿rZ¿r`¿r∫¿s¿s¿sÉ¿sÈ¿tN¿tZ¿t[¿tÆ¿t¥¿u¿ud¿u∫¿u’¿u€¿v5¿vã¿v†¿v¶¿w
¿wn¿w—¿w€¿w‹¿x¿x"¿x|¿x◊¿xÁ¿xÌ¿yF¿yf¿yl¿yœ¿z2¿zî¿zù¿zü¿z†¿z—¿z˘¿{+¿{T¿{u¿{y¿{ä¿{å¿{ç¿{¡¿{È¿|#¿|L¿|j¿|ç¿|±¿|‘¿|Û¿}¿}¿}'¿})¿}*¿}g¿}â¿}´¿}ÿ¿}Ò¿~
¿~#¿~<¿~M¿~O¿~P¿~ò¿~ú¿~Ó¿¿¿¿¿ç¿ë¿∂¿Î¿Ò¿Ä@¿Äë¿Ä€¿Å*¿Å{¿ÅÃ¿Ç¿Ç>¿ÇD¿Çì¿Ç…¿Çœ¿É2¿Éï¿É˘¿Ñ_¿Ñe¿Ñ∞¿Ñˆ¿Ö¿Ö¿Öd¿Ö∑¿Ö˜¿Ü
¿Ü¿Ü*¿ÜD¿Üb¿Üä¿Ü§¿Ü…¿ÜÏ¿á(¿á;¿áh¿á¨¿áÈ¿àQ¿àe¿à¿¿àƒ¿à≈¿â¿â0¿â6¿âÖ¿â÷¿ä ¿äo¿ä¿¿ã¿ãa¿ãÉ¿ãâ¿ã◊¿å¿å¿åv¿åŸ¿ç=¿ç£¿ç©¿ç˙¿é@¿é[¿éa¿éÆ¿è¿èA¿èG¿èì¿è·¿ê+¿êy¿ê»¿êÌ¿ë ¿ë¿ë&¿ë@¿ë^¿ëÜ¿ë†¿ë≥¿ë–¿ë˜¿í3¿íF¿ís¿í∞¿ì¿ì¿ì~¿ì⁄¿î¿î4¿îû¿î´¿ï¿ï*¿ï∂¿ïº¿ï¿¿ï¡¿ñ¿ñ/¿ñ5¿ñÄ¿ñŒ¿ó	¿ó¿ó^¿óØ¿ó˘¿òH¿òô¿òÍ¿ô:¿ô\¿ôb¿ô≤¿ôÛ¿ô˘¿ö[¿öΩ¿õ ¿õÖ¿õã¿õ⁄¿ú*¿úM¿úS¿ú†¿úÛ¿ù3¿ùE¿ùX¿ùr¿ùê¿ù∏¿ù’¿ù¯¿û¿û9¿û_¿ûõ¿ûÆ¿û€¿ü¿üÄ¿üî¿†	¿†¿†¿†K¿†k¿†l¿†€¿°^¿°_¿°ﬁ¿°˚¿¢¿¢'¿¢<¿¢T¿¢s¿¢á¿¢§¿¢•¿£E¿£c¿£x¿£ç¿£ß¿£∫¿£Õ¿£Â¿£˝¿§¿§0¿§M¿§N¿§‘¿§¿•¿•¿•4¿•S¿•g¿•Ä¿•ó¿•≥¿•¥¿•◊¿¶¿¶+¿¶K¿¶£¿¶´¿¶∏¿¶Ë¿ßD¿ßL¿ßR¿ßV¿ßX¿ßY¿ßó¿ßø¿ßÂ¿ßÎ¿®'¿®v¿®º¿®Ó¿®Ù¿©D¿©ì¿©°¿©ß¿©Ó¿™4¿™a¿™g¿™≠¿™˝¿´J¿´g¿´É¿´—¿´Û¿´˙¿¨¿¨,¿¨L¿¨ä¿¨ê¿¨§¿≠¿≠0¿≠N¿≠T¿≠X¿≠Y¿≠e¿≠x¿≠ç¿≠ù¿≠°¿≠¢¿≠‚¿Æ¿Æ¿Æ¿ÆÔ¿Æ¿Ø;¿Ø`¿Ø®¿Øƒ¿Ø∆¿Ø«¿∞¿∞&¿∞*¿∞T¿∞§¿∞‚¿∞˛¿±.¿±B¿±v¿±ì¿±≤¿±∏¿±»¿±Â¿±¯¿≤¿≤¿≤¿≤¿≤¿≤c¿≤i¿≤≤¿≤˜¿≥D¿≥Z¿≥ò¿≥›¿¥&¿¥p¿¥ù¿¥Â¿µ/¿µJ¿µ¿µÖ¿µ∑¿∂¿∂R¿∂h¿∂p¿∂t¿∂u¿∂Æ¿∂ˇ¿∑M¿∑ù¿∑©¿∑ˆ¿∏(¿∏)¿∏^¿∏©¿∏˜¿π#¿πu¿πì¿π°¿πß¿π®¿π‡¿π˚¿∫	¿∫¿∫¿∫L¿∫i¿∫ö¿∫†¿∫§¿∫•¿∫¡¿∫‡¿∫·¿∫˝¿ª¿ª¿ª\¿ª|¿ª}¿ªŸ¿º¿º¿ºA¿ºï¿ºó¿ºò¿ºÀ¿ºœ¿Ω¿ΩL¿Ωú¿ΩÍ¿æ¿æ¿æa¿æÆ¿æ¸¿øE¿ø~¿ø©¿¿¿¿.¿¿=¿¿_¿¿|¿¿É¿¿á¿¿à¿¿§¿¿•¿¿Â¿¡¿¡¿¡F¿¡L¿¡ö¿¡Ë¿¬3¿¬Å¿¬—¿¬˚¿√¿√H¿√N¿√\¿√x¿√ö¿√π¿√‘¿√ﬁ¿√‰¿ƒ2¿ƒ<¿ƒB¿ƒP¿ƒ°¿ƒÃ¿ƒ˝¿≈.¿≈4¿≈g¿≈≤¿≈˝¿∆H¿∆ì¿∆ô¿∆¿¿∆Í¿∆Ú¿∆¸¿«¿«O¿«§¿«µ¿«ª¿»¿»0¿»Ö¿»°¿»•¿»¶¿»‹¿»‚¿…:¿…}¿…É¿…–¿…Ò¿ "¿ v¿ °¿ •¿ ¶¿ Ë¿ Ó¿À=¿Àâ¿Àƒ¿À–¿À„¿À¯¿Ã¿Ã*¿Ã.¿Ã/¿Ãî¿Ã˙¿Ã˚¿Õf¿Õ£¿Õ§¿Œ ¿Œ%¿Œ&¿Œy¿Œï¿Œó¿Œò¿ŒÈ¿ŒÌ¿œ¿œM¿œ_¿œß¿œ¥¿œµ¿–¿–¿–¿–f¿–{¿–Å¿–Ã¿—
¿—K¿—Z¿—\¿—]¿—ï¿—ô¿—Ë¿“.¿“y¿“≈¿”¿”;¿”?¿”å¿”⁄¿‘)¿‘9¿‘=¿‘â¿‘ÿ¿’'¿’t¿’¡¿÷¿÷`¿÷≠¿÷»¿÷Ã¿◊¿◊c¿◊∞¿◊“¿◊÷¿ÿ%¿ÿj¿ÿ∑¿Ÿ¿ŸY¿Ÿ©¿ŸÃ¿⁄¿⁄J¿⁄P¿⁄û¿⁄Î¿€9¿€Ñ¿€≥¿€π¿‹¿‹/¿‹5¿‹Ü¿‹‘¿›#¿›`¿›~¿›Ñ¿›”¿ﬁ"¿ﬁ(¿ﬁz¿ﬁ£¿ﬁ©¿ﬁ˘¿ﬂJ¿ﬂõ¿ﬂÁ¿‡5¿‡Ä¿‡À¿‡€¿‡·¿·/¿·Y¿·_¿·ù¿·£¿·Ô¿‚@¿‚ë¿‚›¿„¿„¿„%¿„C¿„\¿„Ç¿„ö¿„°¿„‡¿‰+¿‰1¿‰à¿‰ﬂ¿‰Â¿Â ¿Â@¿Âr¿Âë¿Â›¿Ê$¿Êo¿Ê|¿ÊÜ¿Êé¿Êî¿Ê⁄¿Á*¿ÁW¿Áe¿Áô¿Á∫¿Á»¿Áˇ¿Ë$¿Ë2¿Ë3¿Ë£¿ËÂ¿ËÎ¿ËÔ¿Ë¿ÈA¿Èp¿Èv¿Èƒ¿Í¿Í_¿Í™¿ÍŸ¿Íﬂ¿Î,¿Îv¿Î¬¿Ï¿Ï$¿Ï*¿Ï{¿Ï ¿Ì¿Ìb¿Ì≥¿Ó¿Ó9¿Ó?¿Óé¿Ó›¿Ô.¿Ôw¿Ô∞¿Ô∂¿¿W¿®¿¯¿ÒB¿Òé¿Òﬂ¿Ú¿Ú¿Ú`¿Ú∞¿Úˇ¿Û-¿Û3¿Ûq¿ÛÅ¿Ûñ¿Û≥¿Û ¿ÛÔ¿Ù¿Ù¿Ù4¿Ù§¿Ù™¿ÙÌ¿ı8¿ı>¿ıï¿ıÏ¿ıÚ¿ˆ¿ˆM¿ˆÉ¿ˆ¢¿ˆÓ¿˜:¿˜Ö¿˜í¿˜ú¿˜§¿˜™¿˜˛¿¯@¿¯F¿¯J¿¯K¿¯≠¿¯‡¿˘¿˘;¿˘y¿˘©¿˘‹¿˘›¿˙-¿˙P¿˙c¿˙{¿˙ã¿˙£¿˙∂¿˙¿¿˙–¿˙‘¿˙’¿˚ ¿˚E¿˚ä¿˚¶¿˚ß¿˚¡¿¸¿¸¿¸_¿¸u¿¸ê¿¸§¿¸¥¿¸–¿¸„¿¸Ì¿˝^¿˝b¿˝d¿˝e¿˝≥¿˝∑¿˝Û¿˛7¿˛H¿˛j¿˛p¿˛æ¿ˇ¿ˇA¿ˇG¿ˇî¿ˇ„¿ˇ˘¿ ¿ ¿ >¿ D¿ ä¿ ê¿ “¿ Ë¿ Ò¿ Ú¿(¿.¿p¿Ü¿ë¿ì¿î¿ﬁ¿Í¿Ó¿¿¿S¿a¿b¿õ¿®¿™¿´¿‡¿‰¿+¿o¿∞¿¥¿˝¿M¿ñ¿≥¿∑¿¿P¿Ö¿â¿÷¿¿-¿p¿é¿î¿›¿%¿u¿ƒ¿¿T¿Z¿°¿∑¿	¿	¿	P¿	V¿	Ç¿	à¿	ò¿	û¿	Ô¿
$¿
3¿
4¿
Ö¿
÷¿%¿n¿}¿É¿œ¿ ¿n¿∂¿¿N¿T¿°¿ß¿À¿—¿¿k¿ª¿¿0¿6¿Ñ¿Õ¿¿l¿∫¿
¿R¿¿Ö¿œ¿Ë¿Ó¿¸¿)¿Q¿h¿®¿—¿¿A¿[¿u¿}¿á¿ç¿‹¿*¿x¿ñ¿ú¿™¿◊¿¿B¿Y¿ô¿–¿	¿#¿+¿5¿;¿å¿“¿¿"¿0¿]¿t¿»¿¿¿2¿ì¿Ã¿Ê¿Ó¿¯¿˛¿I¿í¿„¿¿!¿E¿K¿ä¿ê¿ﬁ¿,¿}¿»¿¿e¿∞¿˚¿L¿ù¿∏¿æ¿Œ¿‘¿$¿F¿é¿§¿—¿“¿¿1¿7¿v¿|¿≈¿ 	¿ ¿ ¿ x¿ ≈¿!¿!¿!\¿!b¿!∞¿" ¿""¿"D¿"E¿"à¿"Õ¿#¿#I¿#O¿#t¿#ä¿#ã¿#€¿$+¿$S¿$T¿$£¿$Ì¿$˛¿%¿%J¿%\¿%É¿%Ñ¿%Ÿ¿%¯¿%˘¿&J¿&ñ¿&Â¿'¿'1¿'2¿'Ç¿'Ω¿'‰¿'Â¿(8¿(é¿(™¿(∞¿)¿)P¿)†¿)Õ¿)Î¿)Ï¿*:¿*Q¿*W¿*≠¿*≥¿*˜¿*˝¿+O¿+ó¿+¿¿+∆¿,¿,$¿,¿,Ä¿,Œ¿,Ì¿,Û¿-J¿-P¿-î¿-ö¿-Ï¿.4¿.Ñ¿.æ¿.ø¿/¿/!¿/'¿/}¿/É¿/«¿/Õ¿0¿0g¿0ê¿0«¿0»¿1¿1k¿1æ¿1œ¿1’¿2)¿2|¿2Œ¿3¿3l¿3ø¿4¿4a¿4≤¿4Œ¿4‘¿5¿5^¿5≤¿6¿6C¿6I¿6ó¿6æ¿6ƒ¿6“¿6Û¿7¿7K¿7à¿7ß¿7·¿8¿8,¿84¿8>¿8D¿8ï¿8·¿9<¿9ê¿9†¿9¶¿9Ï¿:9¿:m¿:s¿:√¿;¿;^¿;v¿;ã¿;®¿;©¿;˙¿<L¿<ü¿<•¿<ı¿=G¿=ó¿=Á¿>9¿>ç¿>‡¿>Ì¿>Û¿?(¿?K¿?L¿?è¿?€¿?¯¿@,¿@-¿@|¿@ƒ¿@ ¿A¿A¿Aâ¿A¯¿B,¿B-¿B\¿Bb¿Bß¿B¬¿B·¿B‚¿C2¿Cm¿Cs¿Cﬁ¿DM¿Dv¿Dw¿D»¿E
¿E¿E|¿EÏ¿F¿F¿Fi¿Fπ¿Fﬂ¿FÂ¿G*¿Gd¿Ge¿G≤¿H¿H&¿H,¿Hó¿I¿I/¿I0¿I{¿IÕ¿J¿J?¿JE¿J≤¿K#¿K\¿K]¿Kô¿Kü¿Kﬂ¿L,¿Lv¿L ¿M¿Mk¿Mó¿Mù¿N¿N¿NÖ¿N›¿O;¿O<¿Oq¿Ow¿O¿¿P	¿P5¿P^¿P_¿P≠¿Q¿Q?¿Q@¿Qè¿Q€¿Q·¿R0¿RI¿RO¿Rõ¿R‰¿R˜¿S;¿S<¿SÉ¿Sâ¿S◊¿T%¿Tr¿Tø¿U¿U¿UV¿U£¿UÒ¿V8¿VI¿Vê¿Vë¿Vÿ¿VÒ¿W¿W¿Wc¿Ws¿Wy¿Wƒ¿W—¿W◊¿X#¿Xp¿XÆ¿X¥¿Y¿YO¿YU¿Y¶¿YÛ¿Z@¿ZF¿Zê¿Z‹¿[)¿[c¿[d¿[©¿[Ø¿[ˆ¿[¸¿\B¿\å¿\í¿\¢¿\®¿\¯¿]¿][¿]\¿]°¿]ß¿]˜¿^D¿^J¿^ê¿^⁄¿^‡¿^¿^ˆ¿_D¿_b¿_Æ¿_Ø¿_˘¿_ˇ¿`K¿`\¿`b¿`´¿`¸¿a¿a¿ab¿a∞¿a¸¿bD¿bî¿bﬂ¿c*¿cy¿c∆¿d¿dJ¿dP¿dw¿d}¿dç¿dﬁ¿e*¿eQ¿e£¿eÌ¿eÓ¿f2¿f8¿fâ¿f‚¿g5¿gâ¿g¡¿g«¿h¿hh¿h∑¿i	¿iY¿i≠¿i˘¿iˇ¿jP¿j†¿jı¿kL¿k|¿k–¿l¿lb¿lh¿lª¿m
¿mU¿m£¿m¯¿m˛¿nR¿n£¿nÏ¿nÚ¿oC¿o^¿od¿or¿oá¿o∞¿o√¿o⁄¿o‚¿oË¿p¿pL¿pR¿p´¿p…¿pÍ¿p¿q¿q1¿qR¿qâ¿qΩ¿qÁ¿r¿r"¿r_¿r}¿rõ¿r·¿s¿s=¿sN¿sc¿só¿s⁄¿t¿t¿t¿t ¿t(¿t2¿t8¿të¿tó¿t•¿t∫¿t˛¿u¿u(¿u;¿uT¿u\¿ub¿uê¿u∆¿uÃ¿v%¿vC¿vd¿vj¿v|¿v´¿vÃ¿w¿w7¿wa¿wå¿w®¿wÂ¿x¿x!¿xg¿xï¿x√¿x‘¿xÈ¿y¿y`¿yv¿y™¿yﬁ¿z
¿z¿z¿z)¿z1¿z;¿zA¿zä¿z’¿{¿{¿{¿{$¿{r¿{â¿{ß¿{÷¿{˘¿|¿|F¿|g¿|Ü¿|á¿|À¿|—¿}"¿}{¿}Œ¿~"¿~t¿~∆¿~˝¿¿S¿õ¿°¿Ú¿Ä2¿Ä]¿Äc¿Ä±¿Ä˚¿Å¿ÅM¿Åö¿ÅÍ¿Å¿ÇK¿Ç\¿Çb¿Çp¿ÇÖ¿ÇÆ¿Ç¡¿Çÿ¿Ç‡¿ÇÊ¿É¿ÉJ¿ÉP¿É©¿É«¿ÉË¿ÉÓ¿Ñ ¿Ñ/¿Ñ¿ÑŒ¿Ö¿Ö;¿ÖÄ¿Ö ¿Ü¿Ü-¿Üc¿Üå¿Ü≥¿Ü„¿á¿á¿áj¿á≈¿à¿àa¿àç¿àπ¿à¯¿â7¿âC¿âd¿â¬¿âÃ¿â“¿â·¿âÈ¿âÛ¿â˘¿äR¿äX¿äf¿ä{¿äø¿ä“¿äÈ¿ä¸¿ã¿ã¿ã#¿ãQ¿ãá¿ãç¿ãÊ¿å¿å%¿å+¿å=¿ål¿åº¿ç¿ç\¿çx¿çΩ¿é¿éE¿é}¿é®¿éﬁ¿è¿è.¿è^¿èÜ¿èå¿èÁ¿ê>¿êô¿êˆ¿ëA¿ëá¿ë∞¿ë ¿í¿í!¿í=¿íÅ¿í≠¿íŸ¿íË¿ì¿ìV¿ìã¿ì¿¿ì∆¿î ¿îz¿î“¿ï¿ïH¿ïT¿ïu¿ï„¿ïÌ¿ïÛ¿ñ¿ñ
¿ñ¿ñ¿ñ*¿ñ0¿ñ}¿ñí¿ñ≥¿ñ‚¿ó	¿ó0¿óZ¿ó~¿ó†¿ó°¿óÓ¿óÙ¿òD¿òY¿ò_¿òÖ¿ò‹¿òﬁ¿òﬂ¿ô-¿ôn¿ôé¿ôÎ¿ôÒ¿ö%¿öD¿öc¿öø¿ö√¿öƒ¿õ.¿õ£¿õ§¿ú ¿ú\¿ú°¿ú∆¿ú«¿ú”¿ù!¿ù9¿ù:¿ù]¿ùu¿ùë¿ù∫¿ù„¿û¿û5¿û>¿ûD¿ûU¿ûY¿ûZ¿ûf¿ûî¿ûÆ¿ûÍ¿û˜¿ü¿üÄ¿üÜ¿üä¿üã¿üÌ¿†G¿†H¿†Ω¿°@¿°A¿°M¿°û¿°π¿°∫¿°∆¿¢%¿¢P¿¢Q¿¢]¿¢¥¿¢”¿¢‘¿¢‡¿£C¿£t¿£u¿£Å¿£¿¿£¡¿§ ¿§N¿§O¿§[¿§≥¿§€¿§‹¿§Ë¿•F¿•r¿•s¿•¿•ß¿•«¿¶¿¶¿¶$¿¶(¿¶)¿¶v¿¶ß¿¶®¿¶¥¿¶”¿ß¿ß ¿ß4¿ß8¿ß9¿ßâ¿ßΩ¿ßæ¿ß ¿®&¿®F¿®`¿®≠¿®˚¿©=¿©ï¿©ô¿©ö¿™¿™à¿™â¿™ï¿™–¿™Ú¿´$¿´(¿´)¿´|¿´Ω¿´æ¿´ ¿¨¿¨3¿¨7¿¨8¿¨ë¿¨–¿¨—¿¨›¿¨˚¿≠*¿≠K¿≠ë¿≠ï¿≠ñ¿≠Ï¿Æ%¿Æ&¿Æ2¿ÆV¿ÆÖ¿Æ¨¿ÆÚ¿Æˆ¿Æ˜¿ØS¿Øí¿Øì¿Øü¿Ø‘¿∞¿∞¿∞¿∞i¿∞ü¿∞†¿∞¨¿∞·¿±¿±!¿±i¿±m¿±n¿±‚¿≤Z¿≤[¿≤g¿≤á¿≤¥¿≤∏¿≤π¿≥¿≥[¿≥\¿≥h¿≥í¿≥≤¿≥Ã¿¥
¿¥f¿¥l¿¥p¿¥q¿¥Â¿µg¿µh¿µt¿µ°¿µ√¿∂¿∂	¿∂
¿∂g¿∂«¿∂»¿∂‘¿∑¿∑1¿∑S¿∑´¿∑Ø¿∑∞¿∏¿∏ä¿∏ã¿∏ó¿∏¡¿∏·¿∏˚¿π9¿πï¿πõ¿πü¿π†¿∫¿∫ñ¿∫ó¿∫£¿∫›¿∫¸¿ª>¿ªB¿ªC¿ª±¿º"¿º#¿º/¿ºé¿ºÆ¿Ω*¿Ω.¿Ω/¿Ω∏¿Ω“¿ΩÂ¿Ω˜¿æ¿æ ¿æ9¿æR¿æh¿æã¿æ¶¿æß¿æ≥¿æ›¿ø¿ø"¿ø#¿øÜ¿ø‰¿øÂ¿øÒ¿¿-¿¿O¿¿s¿¿ı¿¡¿¡\¿¡b¿¡f¿¡g¿¡‰¿¬n¿¬o¿¬{¿¬¿¿¬‚¿√¿√ ¿√W¿√ä¿√º¿√¿ƒ%¿ƒX¿ƒä¿ƒæ¿ƒÛ¿≈,¿≈b¿≈ß¿≈¿¿∆¿∆¿∆¿∆¿∆ ¿∆Ì¿«¿«¿«,¿«C¿«[¿«q¿«Ü¿«ù¿«µ¿«ÿ¿«Ú¿»¿»¿»¿»f¿»à¿»™¿»…¿… ¿…6¿…k¿…¢¿…⁄¿ ¿ ?¿ s¿ ®¿ ·¿À¿À\¿Àu¿À√¿À…¿ÀÕ¿ÀŒ¿Ã¿Ã¢¿Ã∂¿Ãœ¿ÃÁ¿Õ¿Õ¿Õ2¿ÕG¿Õ^¿Õv¿Õô¿Õ≥¿Õ“¿Õ”¿Õﬂ¿Œ¿Œ)¿ŒV¿ŒZ¿Œ[¿Œ±¿ŒÁ¿ŒË¿ŒÙ¿œ/¿œ{¿œß¿œÀ¿œˆ¿–.¿–2¿–3¿–?¿–ä¿–„¿–Á¿–Ë¿–Ù¿—A¿—c¿—Æ¿—¥¿—˚¿—ˇ¿“ ¿“e¿“÷¿“◊¿“„¿”.¿”S¿”û¿”¢¿”£¿‘¿‘É¿‘Ñ¿‘ê¿‘Æ¿‘›¿’ ¿’&¿’M¿’n¿’é¿’∞¿’Û¿’Ù¿÷¿÷F¿÷ë¿÷ó¿÷‰¿◊L¿◊R¿◊S¿◊ö¿◊Ÿ¿◊⁄¿ÿ¿ÿ$¿ÿI¿ÿn¿ÿì¿ÿ…¿ÿÎ¿Ÿ¿ŸC¿Ÿy¿Ÿ≠¿Ÿ·¿⁄¿⁄,¿⁄S¿⁄{¿⁄Å¿⁄Ç¿⁄Î¿€,¿€d¿€e¿€ã¿€Í¿‹0¿‹7¿‹8¿‹Q¿‹ü¿‹•¿‹©¿‹™¿‹∂¿‹◊¿›¿›-¿›T¿›~¿›¢¿›≈¿›ˆ¿›˜¿ﬁ¿ﬁL¿ﬁö¿ﬁ†¿ﬁæ¿ﬂ¿ﬂ"¿ﬂ^¿ﬂ◊¿ﬂ›¿‡¿‡¿‡<¿‡ë¿‡€¿‡‚¿‡„¿‡¸¿·J¿·P¿·T¿·U¿·È¿‚¿‚+¿‚E¿‚c¿‚w¿‚ò¿‚±¿‚ ¿‚ﬂ¿‚˝¿‚˛¿„
¿„b¿„µ¿„π¿„∫¿‰%¿‰ã¿‰ç¿‰é¿‰º¿‰˚¿‰¸¿ÂD¿ÂH¿Â|¿ÂÄ¿Â«¿Ê	¿ÊK¿Êd¿Ê£¿Ê©¿ÊÙ¿Á6¿ÁW¿ÁÄ¿ÁÅ¿Á¬¿Á»¿Ë¿ËV¿Ëw¿Ë°¿Ë¢¿ËÃ¿Ë“¿È!¿Èp¿Èπ¿ÈÈ¿ÈÍ¿Í,¿Í2¿Íi¿Í∏¿Î¿ÎP¿ÎV¿Î¶¿ÎÙ¿Ï!¿Ï'¿Ïw¿Ï¿¿ÏŸ¿Ïﬂ¿Ì.¿ÌC¿Ìo¿Ìp¿Ì¿¿Ì„¿Ìı¿Ìˆ¿Ó<¿ÓB¿Óê¿Ó¶¿Ó¿¿Ó¡¿Ô
¿Ô¿Ôa¿Ôì¿Ô≥¿Ôµ¿Ô∂¿¿P¿l¿r¿®¿æ¿ø¿À¿¸¿Ò¿Ò9¿Òm¿Òs¿Òâ¿ÒŸ¿Òˆ¿Ú¿Ú!¿Ú`¿Új¿Út¿Ú{¿Ú¿ÚÄ¿Úﬁ¿Û3¿Û4¿Û@¿Ûm¿ÛÖ¿Û™¿Ûﬁ¿Û‰¿ÛÂ¿Ù
¿Ù2¿Ùh¿Ùl¿Ùm¿ÙÕ¿ı¿ı¿ı ¿ı3¿ıK¿ı[¿ıs¿ıÜ¿ıê¿ı≥¿ı√¿ı«¿ı»¿ˆ¿ˆ8¿ˆ|¿ˆò¿ˆô¿ˆ≥¿ˆ¥¿ˆ¿¿ˆ€¿ˆÔ¿ˆˇ¿˜¿˜.¿˜8¿˜®¿˜¨¿˜≠¿˜π¿¯¿¯@¿¯B¿¯C¿¯ä¿¯é¿¯”¿˘¿˘9¿˘z¿˘¡¿˘›¿˙¿˙¿˙O¿˙U¿˙ô¿˙‡¿˚¿˚\¿˚ò¿˚∞¿˚±¿˚‡¿˚Ê¿¸1¿¸Å¿¸∆¿¸‡¿¸‚¿¸„¿˝C¿˝r¿˝s¿˝∑¿˝◊¿˝ÿ¿˝‰¿˛¿˛¿˛¿˛7¿˛R¿˛ñ¿˛ú¿˛”¿˛Ô¿ˇ¿ˇ"¿ˇu¿ˇº¿ˇ·¿ˇı¿ˇ˘¿ˇ˙¿ S¿ ç¿ é¿ ®¿ ™¿ ´¿ ¿¿ ƒ¿ ¿¿)¿/¿z¿≈¿ﬂ¿Â¿&¿,¿{¿î¿•¿”¿Ú¿¿b¿c¿ì¿∑¿·¿¿3¿Z¿Ñ¿Ö¿µ¿ª¿¿0¿E¿F¿Ö¿ã¿Ÿ¿%¿g¿~¿¿—¿Ï¿Ì¿¿%¿X¿^¿ã¿˛¿4¿h¿l¿m¿©¿Ø¿‚¿	¿	¿	l¿	r¿	Ø¿	˛¿
%¿
+¿
o¿
∏¿¿)¿=¿P¿f¿©¿≠¿Æ¿ ¿¿.¿A¿U¿t¿õ¿¢¿¶¿ß¿◊¿›¿&¿k¿è¿ï¿ª¿¿R¿ù¿È¿7¿á¿‘¿¿¿m¿ç¿¢¿⁄¿Ô¿¿¿*¿K¿S¿`¿w¿í¿°¿∏¿Î¿"¿d¿o¿w¿}¿Å¿Ç¿ª¿¡¿	¿¿2¿Ä¿¢¿µ¿ª¿—¿Á¿¿N¿~¿≠¿≥¿Í¿¿¿N¿o¿u¿à¿å¿ç¿ô¿º¿ﬁ¿Ò¿˜¿¿2¿T¿¿É¿Ñ¿ê¿Œ¿œ¿¿m¿â¿√¿ﬁ¿¯¿˛¿ˇ¿<¿r¿s¿ç¿⁄¿¿A¿B¿{¿¬¿√¿˙¿'¿(¿_¿å¿ç¿‹¿¿<¿B¿C¿[¿_¿`¿l¿Ø¿±¿≤¿˘¿˝¿L¿b¿†¿√¿ƒ¿¿'¿h¿≠¿ﬂ¿¿*¿.¿/¿i¿o¿®¿Ê¿+¿t¿æ¿Î¿ 3¿ n¿ ü¿ €¿ ˆ¿!¿!<¿!D¿!m¿!u¿!y¿!z¿!´¿!±¿!Í¿"'¿"b¿"ì¿"»¿"„¿"˝¿#7¿#?¿#h¿#p¿#t¿#u¿#…¿$¿$¿$k¿$∏¿$π¿%¿%a¿%b¿%ñ¿%≥¿%¬¿%√¿%‚¿%„¿&¿&¿&c¿&~¿&ñ¿&¶¿&«¿&⁄¿&‰¿&˘¿&˝¿&˛¿'N¿'q¿'w¿'ƒ¿(¿([¿(®¿(ˆ¿)¿)'¿)7¿)V¿)s¿)Ü¿)ê¿)†¿)§¿)•¿)¿*¿*a¿*}¿*¿*Ä¿*À¿*œ¿+¿+6¿+W¿+ê¿+ñ¿+Ê¿,8¿,R¿,X¿,¶¿,˘¿-:¿-w¿-ñ¿-¥¿-Ã¿-Â¿-¯¿.¿.A¿.B¿.ç¿.–¿/¿/L¿/Ñ¿/§¿/®¿/©¿/”¿/Ÿ¿0¿0%¿0&¿0Q¿0W¿0í¿0§¿0•¿0◊¿0›¿1¿1-¿1.¿1~¿1°¿1ß¿1Ú¿2¿2)¿2*¿2x¿2î¿2ö¿2Â¿32¿3C¿3I¿3ó¿3ø¿4¿4
¿4¿4k¿4â¿4ä¿4√¿4…¿5¿5k¿5Ö¿5ã¿5Ÿ¿6,¿6m¿6™¿6»¿6Ê¿6˛¿7¿7*¿7P¿7W¿7k¿7Å¿7∆¿7ﬁ¿8,¿80¿81¿8ì¿8Ê¿8Á¿9P¿9ﬁ¿9ﬂ¿9Ó¿9Ô¿:H¿:d¿:e¿:q¿:ú¿:ù¿:≠¿:Æ¿;¿;%¿;&¿;2¿;`¿;a¿;x¿;y¿;⁄¿;˛¿;ˇ¿<¿<N¿<O¿<[¿<ß¿<¬¿<√¿<œ¿=¿=R¿=l¿=r¿=ß¿=¬¿=»¿=…¿> ¿>¿>8¿>v¿>µ¿>Û¿?)¿?/¿?P¿?r¿?s¿?ù¿?ÿ¿?Í¿?Ó¿?Ô¿@Z¿@∞¿@≤¿@≥¿@Ë¿A¿A¿AW¿Aü¿A†¿Aÿ¿A‹¿B&¿B3¿Bv¿Bw¿B∏¿B‘¿C)¿C*¿Cy¿Cé¿Cë¿Cﬁ¿C˚¿C˛¿DJ¿DM¿D_¿Db¿Dm¿D°¿D§¿Dﬂ¿E¿E!¿E$¿EC¿Es¿Ex¿E¿EÇ¿E◊¿F-¿FY¿F\¿F≤¿FÊ¿G¿Gc¿Gß¿G‰¿G˙¿H&¿H;¿HO¿H|¿Hã¿HÀ¿H”¿H‡¿H˝¿I¿I	¿I¿I2¿IN¿IR¿Im¿Io¿Ip¿I≥¿I˘¿J/¿Jv¿J∫¿J˜¿K¿KH¿K]¿Kz¿Ká¿Kõ¿K—¿K‡¿L)¿L1¿L7¿L=¿LO¿Lf¿LÇ¿LÜ¿L°¿L£¿L§¿LÛ¿MA¿ME¿Mï¿MÂ¿N¿NU¿Nö¿Nõ¿N–¿NË¿NÈ¿O;¿OV¿OW¿Oc¿Oy¿O”¿OÏ¿P¿PK¿Pt¿Pz¿Pò¿Pú¿Pû  dart.uiÄ¨ O_rectIsValid_rrectIsValid_offsetIsValid_matrix4IsValid_radiusIsValid_scaleAlphaColor	BlendModeFilterQuality	StrokeCap
StrokeJoinPaintingStyleClipPaint
ColorSpaceImageByteFormatPixelFormatImage_Image
_wrapImage	FrameInfoCodec_NativeCodecinstantiateImageCodecinstantiateImageCodecFromBufferinstantiateImageCodecWithSize_getDefaultImageSizeTargetImageSizedecodeImageFromList_decodeImageFromListAsyncdecodeImageFromPixelsPathFillTypePathOperationEngineLayer_NativeEngineLayerPath_NativePathTangentPathMetricsPathMetricIterator
PathMetric_PathMeasure	BlurStyle
MaskFilterColorFilter_ColorFilterImageFilter_MatrixImageFilter_GaussianBlurImageFilter_DilateImageFilter_ErodeImageFilter_ComposeImageFilter_ImageFilterShaderTileMode_encodeColorList_encodePointList_encodeTwoPointsGradientImageShaderFragmentProgramFragmentShader
VertexModeVertices	PointModeClipOpCanvas_NativeCanvasPicture_NativePicturePictureRecorder_NativePictureRecorderShadowImmutableBufferImageDescriptor_NativeImageDescriptor	_futurize_futurizeWithErrorPictureRasterizationException 15