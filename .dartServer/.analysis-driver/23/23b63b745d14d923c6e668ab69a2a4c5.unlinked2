Å%nametoStringmergeUpsiblingMergeGroups_mergeUp_siblingMergeGroupsmarkAsMergeUpmarkAsSiblingMergeGroupbuildlabelhintactionhashCode==_nextId_actions_idsgetIdentifier	getActionresetForTestsstring
attributes+showWhenEmptyisInterestingvalueToStringflagsactions
identifierattributedLabelvalueattributedValueincreasedValueattributedIncreasedValuedecreasedValueattributedDecreasedValueattributedHinttooltiptextDirectiontextSelectionscrollChildCountscrollIndexscrollPositionscrollExtentMaxscrollExtentMinplatformViewIdmaxValueLengthcurrentValueLengthrecttags	transform	elevation	thicknesscustomSemanticsActionIdshasFlag	hasActiontoStringShortdebugFillProperties_sortedListsEqual
childOrdergetChildren	onTapHintonLongPressHint
isNotEmptyenabledcheckedmixedexpandedtoggledselectedbuttonlinkheader	textFieldsliderkeyboardKeyreadOnly	focusablefocusedinMutuallyExclusiveGrouphiddenobscured	multilinescopesRoute
namesRouteimage
liveRegionhintOverridessortKeytagForChildrenonTaponLongPressonScrollLeftonScrollRight
onScrollUponScrollDown
onIncrease
onDecreaseonCopyonCutonPasteonMoveCursorForwardByCharacteronMoveCursorBackwardByCharacteronMoveCursorForwardByWordonMoveCursorBackwardByWordonSetSelection	onSetTextonDidGainAccessibilityFocusonDidLoseAccessibilityFocus	onDismisscustomSemanticsActions$_maxFrameworkAccessibilityIdentifier_lastIdentifier_generateNewIdkeyid_id_showOnScreen
_transform_rectparentSemanticsClipRectparentPaintClipRectelevationAdjustmentindexInParentisInvisibleisMergedIntoParent_isMergedIntoParentareUserActionsBlocked_areUserActionsBlockedisPartOfNodeMergingmergeAllDescendantsIntoThisNode _mergeAllDescendantsIntoThisNode	_children_debugPreviousSnapshot_replaceChildrenhasChildren_deadchildrenCountvisitChildren_visitDescendantsowner_ownerattachedparent_parentdepth_depth_redepthChild_redepthChildren _updateChildMergeFlagRecursively_updateChildrenMergeFlags_adoptChild
_dropChildattachdetach_dirty
_markDirty)_isDifferentFromCurrentSemanticAnnotation_customSemanticsActions_effectiveActionsAsBits_actionsAsBitsisTagged_flags_identifier_attributedLabel_attributedValue_attributedIncreasedValue_attributedDecreasedValue_attributedHint_tooltip
_elevation
_thickness_hintOverrides_textDirection_sortKey_textSelectionisMultiline_isMultiline_scrollChildCount_scrollIndex_scrollPosition_scrollExtentMax_scrollExtentMin_platformViewId_maxValueLength_currentValueLength_canPerformAction_kEmptyConfig
updateWithgetSemanticsData_initIdentityTransform_kEmptyChildList!_kEmptyCustomSemanticsActionsList_kIdentityTransform_addToUpdate_childrenInTraversalOrder	sendEvent_debugIsActionBlockedtoStringDeeptoDiagnosticsNodedebugDescribeChildrendebugListChildrenInOrderisLeadingEdgeoffsetnode	compareTostartOffsetnodessortedWithinVerticalGroupsortedWithinKnotpositiononSemanticsUpdate_dirtyNodes_nodes_detachedNodesrootSemanticsNodedisposesendSemanticsUpdate_getSemanticsActionHandlerForIdperformAction%_getSemanticsActionHandlerForPositionperformActionAtisSemanticBoundary_isSemanticBoundaryisBlockingUserActionsexplicitChildNodes+isBlockingSemanticsOfPreviouslyPaintedNodeshasBeenAnnotated_hasBeenAnnotated
_addAction_addArgumentlessAction_onTap_onLongPress_onScrollLeft
_onDismiss_onScrollRight_onScrollUp_onScrollDown_onIncrease_onDecrease_onCopy_onCut_onPasteonShowOnScreen_onShowOnScreen_onMoveCursorForwardByCharacter _onMoveCursorBackwardByCharacter_onMoveCursorForwardByWord_onMoveCursorBackwardByWord_onSetSelection
_onSetText_onDidGainAccessibilityFocus_onDidLoseAccessibilityFocuschildConfigurationsDelegate_childConfigurationsDelegategetActionHandler_indexInParentisMergingSemanticsOfDescendants _isMergingSemanticsOfDescendants_onCustomSemanticsActionisImage
isSelected
isExpanded	isEnabled	isCheckedisCheckStateMixed	isToggledisInMutuallyExclusiveGroupisFocusable	isFocusedisButtonisLinkisHeaderisSliderisKeyboardKeyisHiddenisTextField
isReadOnly
isObscuredhasImplicitScrollingtagsForChildrentagsChildrenWith_tagsForChildrenaddTagForChildren_setFlag_hasFlagisCompatibleWithabsorbcopyinverseHitTesttraversalOrder	doCompareorderSemanticsNodeVisitorMoveCursorHandlerSetSelectionHandlerSetTextHandlerSemanticsActionHandlerSemanticsUpdateCallback$ChildSemanticsConfigurationsDelegate_kUnblockedUserActionsSemanticsTag"ChildSemanticsConfigurationsResult)ChildSemanticsConfigurationsResultBuilderCustomSemanticsActionAttributedStringAttributedStringPropertySemanticsData_SemanticsDiagnosticableNodeSemanticsHintOverridesSemanticsPropertiesdebugResetSemanticsIdCounterSemanticsNode_BoxEdge_SemanticsSortGroup_pointInParentCoordinates_childrenInDefaultOrder_TraversalSortNodeSemanticsOwnerSemanticsConfigurationDebugSemanticsDumpOrder_concatAttributedStringSemanticsSortKeyOrdinalSortKeyÅ≠OffsetRectSemanticsActionSemanticsFlagSemanticsUpdateSemanticsUpdateBuilderStringAttributeTextDirectionMatrixUtilsTransformPropertySemanticsBindingVoidCallbackDiagnosticLevelDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsTreeStyleKeyTextTreeConfigurationTextSelectionMatrix4SemanticsEventvisitChildrenboolvoidsetSelectionsetTextStringgetActionHandlerObjectonSemanticsUpdatechildConfigurationsDelegatetagsChildrenWithListintdidGainAccessibilityFocusindexdidLoseAccessibilityFocusRenderSemanticsGestureHandleroverrideobjectRuntimeTypePipelineOwnermergeUpaddsiblingMergeGroupsSet	flattenedconfig_	immutablehashruntimeTypelabelhintactionMapvisibleForTestingclear	TextRange
isNotEmptyisEmptylength	attributerangestartendstringof
attributescopy
listEqualsDiagnosticsPropertyvaluedefaultValueisInterestingparentConfigurationlineBreakProperties
replaceAllmergeAllDescendantsIntoThisNodegetSemanticsDataDiagnosticableincreasedecreaseScrollPositionpixelsdoublemaxScrollExtentminScrollExtentAndroidView	UiKitViewisTextField	elevation	thicknessdebugFillPropertiesshowNameDoublePropertyvaluesnamemap	getActionactionIdtoListIterablePropertyifEmptyflagStringPropertyEnumPropertyisValidMessagePropertyIntPropertyflagsactions
identifierattributedLabelattributedValueattributedIncreasedValueattributedDecreasedValueattributedHinttooltiptextDirectionrect	setEqualstagsscrollChildCountscrollIndextextSelectionscrollPositionscrollExtentMaxscrollExtentMinplatformViewIdmaxValueLengthcurrentValueLength	transformcustomSemanticsActionIdshashAlliDiagnosticableNodedebugDescribeChildren
childOrderDiagnosticableTree	onTapHintonLongPressHintCheckboxtristateSubmenuButtonexplicitChildNodesscopesRoute
namesRouteisImageSnackBarisLiveRegion
liveRegionDirectionalityincreasedValuedecreasedValueRenderObjectaddTagForChildrentap	longPress
scrollLeftscrollRightscrollUp
scrollDowncutpastemoveCursorForwardByCharactermoveCursorBackwardByCharactermoveCursorForwardByWordmoveCursorBackwardByWord	FocusNode
FocusScopeFocusManagerdismisscustomActionid_lastIdentifierflushSemanticsDiagnosticableTreeMixinshowOnScreenmatrixEquals
isIdentityzeroisFiniteisMergingSemanticsOfDescendantsanychild_deadparent
_dropChildattached	identicalErrorDescriptionErrorSpacertoDiagnosticsNodestyle
singleLineFlutterError	fromPartsErrorSummary	ErrorHint_visitDescendantsowner_depth_redepthChildrenforEach_isMergedIntoParent_updateChildrenMergeFlags_parentattachdetach_nodescontainsKey_detachedNodesremovecontains_dirtyNodes_flags_sortKey_textSelection_scrollPosition_scrollExtentMax_scrollExtentMin_actionsAsBitsindexInParent_maxValueLength_currentValueLengthisBlockingUserActions_actions_customSemanticsActionsPhysicalModelAchildrenInInversePaintOrderhintOverridessortKeyisMultiline_platformViewIdkeysgetIdentifieroverridingActionnodeisMergedIntoParent_effectiveActionsAsBits_textDirection_scrollChildCount_scrollIndex_identifier_attributedValue_attributedIncreasedValue_attributedDecreasedValue_tooltipaddAllthisAttributedStringthisTextDirectionotherAttributedString_attributedLabelotherTextDirection_attributedHintmax
_thickness
_elevationsortFloat64Listidentitystorage	Int32List
updateNodelabelAttributesvalueAttributesincreasedValueAttributesdecreasedValueAttributeshintAttributestextSelectionBase
baseOffsettextSelectionExtentextentOffsetscrollChildrennanchildrenInTraversalOrderchildrenInHitTestOrderadditionalActionspositionsortNodeSystemChannelsaccessibilitysendtoMapnodeIdFlagPropertyifTrueifFalselevelhiddeninfogetAsTranslationshift
getAsScaletoStringAsFixedtoStringsplittakeline	substringjoindescriptiontagwhereisHiddendebugtraversalOrdertoStringDeepprefixLineOneprefixOtherLinesminLevelsparseinverseHitTest
Comparable	compareTooffsetstartOffsetdeflateisLeadingEdgetopLeftdxbottomRightedgenodesrtlreversedexpandsortedWithinKnot	directioncenternextNodeltrpiabdyVector3
transform3xysortedWithinVerticalGroupensureSemanticsSemanticsHandleChangeNotifier kFlutterMemoryAllocationsEnabledFlutterMemoryAllocationsinstancedispatchObjectCreatedlibrary	classNameobjectFlutterViewdispatchObjectDisposeddisposerootSemanticsNodechildrenCounterrorPropertydepth_dirtyisPartOfNodeMerging
_markDirtycreateSemanticsUpdateBuilder_addToUpdateupdateCustomAction
overrideIdbuildnotifyListeners_canPerformActionargs_showOnScreencopyInversetransformPointhasChildren	_childrendescribeIdentityvisitChildrenForSemantics	addActionGestureDetectordynamiccastListTileselected
isSelectedhasExpandedState
isExpandedExcludeSemanticshasEnabledState	isEnabledhasCheckedState	isCheckedisCheckStateMixedhasToggledState	isToggledRadioisInMutuallyExclusiveGroupisFocusable	isFocusedisButtonisLinkisHeaderisSliderisKeyboardKey
isReadOnly
isObscuredListViewTabBarhasImplicitScrollingIterableRenderViewportexcludeFromScrollinghasBeenAnnotatedkey_hintOverrides_hasBeenAnnotated_isSemanticBoundary+isBlockingSemanticsOfPreviouslyPaintedNodes _isMergingSemanticsOfDescendants_tagsForChildren_indexInParentdebugDumpSemanticsTreeUnicodeRLEPDFLRE	protectedinfinitynegativeInfinityorderDiagnosticsPropertyDiagnosticableDiagnosticableNodeDiagnosticableTreeDiagnosticableTreeMixin
ComparableChangeNotifierSemanticsSortKey≠O‰Ωbò8Ja0ç¸øG6 Ç´É
OffsetRectSemanticsActionSemanticsFlagStringAttributeTextDirectionVoidCallback Çödart:uiÉ6É™DiagnosticLevelDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsTreeStyleKeyTextTreeConfiguration Épackage:flutter/foundation.dartÉ”ÉÂTextSelection É¨package:flutter/services.dartÑÑ$Matrix4 ÉÁ'package:vector_math/vector_math_64.dartÑEÑXSemanticsEvent Ñ'semantics_event.dart
  Ä¶  Ä∏mathÄª	dart:mathÄ“ÅLOffsetRectSemanticsActionSemanticsFlagSemanticsUpdateSemanticsUpdateBuilderStringAttributeTextDirection Ä¬  dart:ui  ÅP  "package:collection/collection.dart  Å}  package:flutter/foundation.dartÅÕÅMatrixUtilsTransformProperty Åß  package:flutter/painting.dart  ÅÛ  package:flutter/services.dart  Ç  'package:vector_math/vector_math_64.dartÇcÇxSemanticsBinding ÇN  binding.dart  Ç{  semantics_event.dart    	dart:core¿˛î ¿∂î; <ÄÜÄ§Ä•Ä¡ÅNÅOÅ|Å¶ÅÚÇÇLÇMÇzÇôÇöÉÉÉ¨ÉÁÑ&Ñ'ÑZÑ[Ñ°Ñ•ÑŒÑ“Ñ˝Ö?Ö@Ö{ÖÖÕÜÜ]Ü^Ü™ÜÈá/á0áxá†á’á÷à
ààIàáààà›à·ââZâ[âßâ´âÙä9ä~ä≠ä±ä˚ãLãPãõã¶å å!åtå©å™åÀåœçç[çßç´ç˘éFéTéXé¶éÙèBèQèfèÜèåè‹ê,ê|êçêÆêØêÏêÚë8ëMëNëZë¶ë®ë©ë‰íííTíÇíŸíÍíÓì7ìbì±ì≤îî#î)îuîøïï/ï0ïï©ïØï¯ñ1ñ}ñ∆ñÃóómó∫òòXòëò–ò“ò”ô ô1ô5ônô´ô˙ö4öfö£ö“ö”õõÇõÉõ”õﬂõÂúújú∑ú∏ú˚ù%ù+ùmù≈û/û0û~û≠ûºüüãüõüæ††X†|†á†è†¢†¨†¸° °°°3°7°y°¡¢	¢Q¢†¢Ô¢˝££P£Ñ£à£◊£Í£Ó§6§a§e§s§w§»§”§Ò••$•I•Ö•†•≥•»•…¶¶'¶-¶Q¶√¶›¶Ò¶Úß0ßGßHßÑßößõß’ßˆß˜®®;®<®H®k®ó®´®±®€®˚©©<©@©A©M©c©¿©ƒ©≈™™'™A™õ™Ò™Ú´!´\´|´ñ´∞´Õ´Ó´Ù¨¨¨¨;¨o¨à¨å¨ç¨ﬁ¨Û≠≠#≠;≠O≠b≠u≠≠É≠Ö≠Ü≠æ≠…≠‚ÆÆÆVÆfÆlÆ∂Æ≈ÆŸÆÏØØUØhØ¶Ø∏ØÓ∞ ∞h∞u∞∞î∞†∞°∞Ÿ∞∞Ò±±!±c±ç±é±—±◊≤(≤q≤©≤√≤◊≤›≤˝≥≥≥≥<≥p≥∆≥Ì¥¥W¥Ö¥∂¥„¥ÓµAµoµwµ}µ¿µƒµ≈∂∂∂@∂l∂ë∂≥∂˘∂˝∂˛∑
∑A∑B∑N∑d∑≈∑…∑À∑Ã∏∏T∏£∏È∏Ôπ,πHπ_πrπÜπ¶πæπœπÊπÏπÌ∫:∫u∫{∫†∫º∫Ω∫…ª<ª=ªIªêª©ªæªƒªÂºº@º{º¶º¨º—ºÈºÔΩ\Ω`ΩbΩcΩõΩüΩÎæ<æåæûæ¢æ‡æÎøø<øBøçøüø∏ø”øÒ¿ @¿ @7¿ @c¿ @è¿ @±¿ @Ã¿ @Ì¿ A¿ A"¿ A?¿ A`¿ A¿ A£¿ A≈¿ AË¿ B¿ B-¿ BO¿ Bu¿ BÑ¿ Bò¿ Bª¿ C>¿ Cﬂ¿ DÄ¿ E<¿ E¯¿ Fñ¿ Fó¿ F÷¿ FÈ¿ FÍ¿ G+¿ G@¿ GA¿ GÅ¿ Gú¿ Gù¿ G‹¿ G‚¿ H¿ H!¿ H[¿ Hâ¿ Hä¿ HÀ¿ HÏ¿ HÚ¿ I+¿ I1¿ Ij¿ Iî¿ Iï¿ I‘¿ I⁄¿ J¿ J¿ JS¿ JÅ¿ JÇ¿ J√¿ J‰¿ JÍ¿ K#¿ K)¿ Kb¿ Kå¿ Kç¿ K…¿ KÚ¿ K¯¿ L1¿ L7¿ Lz¿ L∫¿ Lª¿ L˜¿ M=¿ MC¿ M|¿ MÇ¿ Mƒ¿ M˜¿ M¯¿ N4¿ N]¿ Nc¿ Nú¿ N¢¿ NÂ¿ O%¿ O&¿ Ob¿ O®¿ OÆ¿ OÁ¿ OÌ¿ P/¿ Pb¿ Pc¿ P±¿ P∑¿ P¿ Pˆ¿ Q/¿ Q[¿ Q\¿ Q©¿ QÕ¿ Q”¿ R¿ R¿ RJ¿ Rs¿ Rt¿ R©¿ RØ¿ RË¿ S ¿ S¿ S?¿ Su¿ Sõ¿ Sú¿ SÌ¿ T¿ T?¿ T@¿ Tå¿ Tí¿ Tﬂ¿ TÎ¿ U
¿ U¿ UQ¿ Uk¿ Ul¿ Uº¿ UŒ¿ U‘¿ V$¿ Vp¿ V∂¿ Vº¿ VÃ¿ V“¿ W¿ W<¿ W=¿ Wå¿ Wû¿ W§¿ Wﬂ¿ WÂ¿ Wı¿ W˚¿ XN¿ Xo¿ Xp¿ Xø¿ X—¿ X◊¿ Y¿ Y¿ Y(¿ Y.¿ YÅ¿ Y¢¿ Y£¿ YÌ¿ Z
¿ Z¿ Z^¿ Z®¿ ZΩ¿ Z√¿ Z”¿ ZŸ¿ [¿ [S¿ [p¿ [q¿ [Ω¿ [œ¿ [’¿ \"¿ \6¿ \<¿ \å¿ \Œ¿ \Î¿ \Ï¿ ];¿ ]M¿ ]S¿ ]†¿ ]¥¿ ]∫¿ ^¿ ^6¿ ^W¿ ^X¿ ^ó¿ ^™¿ ^´¿ ^Á¿ _¿ _	¿ _c¿ _i¿ _∞¿ `¿ `¿ `,¿ `-¿ `u¿ `{¿ `ã¿ `ë¿ `·¿ a¿ a¿ a¿ ad¿ aj¿ az¿ aÄ¿ aÃ¿ aÊ¿ aÁ¿ b2¿ bQ¿ bW¿ bä¿ bê¿ b†¿ b¶¿ bÓ¿ c¿ c¿ cK¿ cå¿ cç¿ c¿¿ d¿ d¿ d¿ d^¿ d_¿ dk¿ d∞¿ d€¿ e)¿ eç¿ e‹¿ f+¿ f\¿ fü¿ f ¿ f·¿ fË¿ g9¿ gë¿ g¢¿ g˘¿ hf¿ hg¿ hñ¿ h”¿ h˙¿ i¿ i¿ ii¿ iπ¿ j¿ jI¿ j£¿ j˝¿ kC¿ kç¿ kÚ¿ l¿ lâ¿ lè¿ lÊ¿ m=¿ mú¿ mı¿ nF¿ n¢¿ n¸¿ oX¿ o\¿ o]¿ oi¿ oå¿ oÆ¿ oŒ¿ oÚ¿ p¿ pP¿ pÑ¿ p ¿ q¿ qB¿ qf¿ qñ¿ q¥¿ q€¿ r¿ r=¿ rm¿ rü¿ r”¿ s¿ s9¿ sk¿ s•¿ sÕ¿ sı¿ t¿ tu¿ ty¿ tz¿ tÜ¿ t©¿ t¥¿ t¡¿ t—¿ tÊ¿ t˚¿ u¿ u7¿ uK¿ uX¿ uk¿ uu¿ u¿ uí¿ u®¿ uπ¿ uÕ¿ u‚¿ u˜¿ v¿ v¿ v2¿ vL¿ v]¿ vn¿ v¿ v⁄¿ v·¿ vÊ¿ vÁ¿ w,¿ wU¿ wh¿ wn¿ wó¿ w¿¿ w÷¿ wﬁ¿ x¿ x/¿ xG¿ xO¿ xY¿ xl¿ xr¿ xÑ¿ xà¿ xä¿ xã¿ x⁄¿ x˚¿ y¿ y%¿ y?¿ y]¿ yc¿ yd¿ yê¿ yë¿ yù¿ y˚¿ y˝¿ y˛¿ zE¿ zT¿ zX¿ zÖ¿ zê¿ z ¿ zÙ¿ {¿ {)¿ {C¿ {c¿ {â¿ {ä¿ {∞¿ {∂¿ {Ë¿ {Ó¿ |5¿ |b¿ |h¿ |ê¿ |´¿ |∆¿ |«¿ |Ù¿ |˙¿ },¿ }2¿ }|¿ }∂¿ }º¿ }Ó¿ ~
¿ ~+¿ ~,¿ ~^¿ ~•¿ ~¶¿ ~≤¿ ~Ò¿ ~Ú¿ ~˛¿ !¿ M¿ a¿ g¿ í¿ ∫¿ Ô¿ Û¿ Ù¿ Ä ¿ ÄE¿ Äp¿ Ä¿¿ Å¿ Å ¿ Å"¿ Å#¿ År¿ Åá¿ Åã¿ Å€¿ ÅÔ¿ Å˙¿ Ç1¿ ÇV¿ Çt¿ ÇÜ¿ Çò¿ Ç®¿ Çª¿ ÇŒ¿ Ç‡¿ ÇÒ¿ É ¿ É¿ É%¿ É6¿ ÉL¿ É_¿ És¿ ÉÖ¿ É®¿ Éπ¿ ÉÃ¿ É‡¿ Éˆ¿ Ñ¿ Ñ¿ Ñ0¿ ÑI¿ Ñf¿ Ñ{¿ Ñã¿ Ñ•¿ Ñµ¿ Ñœ¿ ÑË¿ Ö¿ Ö$¿ ÖG¿ ÖV¿ Öh¿ ÖÅ¿ Öô¿ Ö±¿ Ö√¿ Ö‹¿ ÖÏ¿ Ü¿ Ü¿ Ü1¿ ÜF¿ Ü]¿ Ür¿ Üá¿ Üò¿ Ü®¿ Ü∫¿ Ü„¿ á¿ á1¿ áV¿ áo¿ áÉ¿ á©¿ áœ¿ á„¿ à¿ àx¿ àÏ¿ âÑ¿ ä¿ äå¿ äç¿ ä›¿ ã¿ ã
¿ ãX¿ ã£¿ ã’¿ ãÏ¿ ãÌ¿ å2¿ åw¿ åá¿ åç¿ åÕ¿ ç¿ ç3¿ ç9¿ çv¿ çç¿ çé¿ ç”¿ é¿ éQ¿ éW¿ éï¿ éŒ¿ è
¿ è¿ è ¿ è_¿ èt¿ èu¿ èπ¿ èÚ¿ è¯¿ ê9¿ êy¿ êÜ¿ êû¿ êü¿ êÈ¿ ë*¿ ë:¿ ë@¿ ë}¿ ëî¿ ëï¿ ë‰¿ í,¿ í2¿ íÇ¿ íß¿ íø¿ í¿¿ ì¿ ì
¿ ìW¿ ìi¿ ì¿ ìÄ¿ ì¬¿ ì»¿ î¿ îb¿ îp¿ îÑ¿ îÖ¿ î…¿ îœ¿ ï¿ ïl¿ ïë¿ ïß¿ ï®¿ ï¿ ïˆ¿ ñ@¿ ñR¿ ñk¿ ñl¿ ñ∞¿ ñ∂¿ ñ˝¿ ó¿ ó,¿ ó-¿ ów¿ óí¿ óì¿ ó–¿ ó÷¿ ò¿ ò¿ òO¿ òg¿ òh¿ ò©¿ òØ¿ òˆ¿ ò¸¿ ôN¿ ôò¿ ôÈ¿ ö(¿ öA¿ öB¿ öÉ¿ öâ¿ ö⁄¿ õ¿ õ ¿ õr¿ õº¿ ú¿ úL¿ úc¿ úd¿ ú±¿ ú∑¿ ù¿ ùH¿ ùp¿ ùq¿ ù´¿ ù±¿ û ¿ ûQ¿ ûW¿ ûß¿ ûÙ¿ ü¿ ü¿ ü\¿ ü{¿ üÅ¿ ü“¿ † ¿ †m¿ †•¿ †ª¿ †º¿ †Û¿ †˘¿ °F¿ °ñ¿ °€¿ °Û¿ °Ù¿ ¢B¿ ¢Q¿ ¢W¿ ¢°¿ ¢€¿ ¢·¿ £¿ £/¿ £0¿ £}¿ £´¿ £±¿ £‚¿ §0¿ §f¿ §l¿ §|¿ §Ç¿ §Œ¿ §Í¿ •¿ •¿ •S¿ •Y¿ •i¿ •o¿ •æ¿ •ÿ¿ •Ÿ¿ ¶¿ ¶¿ ¶(¿ ¶.¿ ¶t¿ ¶â¿ ¶ä¿ ¶“¿ ¶ÿ¿ ß$¿ ßq¿ ß§¿ ß™¿ ß¯¿ ®F¿ ®î¿ ®Ÿ¿ ©(¿ ©R¿ ©X¿ ©h¿ ©n¿ ©ø¿ ™¿ ™0¿ ™1¿ ™}¿ ™è¿ ™ï¿ ™‚¿ ™ˆ¿ ™¸¿ ´F¿ ´¿ ´ú¿ ´ù¿ ´Ï¿ ´˛¿ ¨¿ ¨Q¿ ¨e¿ ¨k¿ ¨¥¿ ¨”¿ ¨Ù¿ ¨ı¿ ≠8¿ ≠è¿ ≠ï¿ ≠Œ¿ ≠‘¿ Æ ¿ Æc¿ Æi¿ Æª¿ Æ˛¿ Ø¿ ØR¿ Øg¿ ØÉ¿ ØÑ¿ Ø∏¿ Øæ¿ ∞¿ ∞F¿ ∞L¿ ∞õ¿ ∞Ø¿ ∞µ¿ ∞≈¿ ∞À¿ ±¿ ±@¿ ±è¿ ±¶¿ ±ß¿ ±˙¿ ≤ ¿ ≤J¿ ≤î¿ ≤ö¿ ≤È¿ ≤˝¿ ≥¿ ≥¿ ≥¿ ≥i¿ ≥ò¿ ≥÷¿ ¥¿ ¥¿ ¥C¿ ¥I¿ ¥ò¿ ¥—¿ ¥◊¿ µ&¿ µ:¿ µ@¿ µP¿ µV¿ µß¿ µÀ¿ ∂¿ ∂1¿ ∂2¿ ∂É¿ ∂ò¿ ∂û¿ ∂Ë¿ ∑2¿ ∑8¿ ∑á¿ ∑õ¿ ∑°¿ ∑±¿ ∑∑¿ ∏¿ ∏6¿ ∏t¿ ∏ü¿ ∏†¿ ∏Ê¿ π1¿ π7¿ πÇ¿ πÕ¿ πÂ¿ πÎ¿ ∫$¿ ∫`¿ ∫f¿ ∫v¿ ∫|¿ ∫À¿ ∫˙¿ ªH¿ ª[¿ ª{¿ ª|¿ ªÕ¿ º¿ º ¿ ºq¿ ºª¿ º„¿ ºÈ¿ Ω"¿ Ω^¿ Ωd¿ Ωt¿ Ωz¿ Ω ¿ æ¿ æI¿ æ}¿ æ~¿ æƒ¿ ø¿ ø¿ ø`¿ ø´¿ ø√¿ ø…¿ ¿¿ ¿>¿ ¿D¿ ¿T¿ ¿Z¿ ¿©¿ ¿ÿ¿ ¡&¿ ¡9¿ ¡Y¿ ¡Z¿ ¡´¿ ¡¯¿ ¡˛¿ ¬O¿ ¬ô¿ ¬¡¿ ¬«¿ √ ¿ √H¿ √N¿ √^¿ √d¿ √¥¿ √Ï¿ ƒ3¿ ƒg¿ ƒh¿ ƒ∏¿ ƒÕ¿ ƒ”¿ ≈!¿ ≈Z¿ ≈`¿ ≈≠¿ ≈¡¿ ≈«¿ ≈◊¿ ≈›¿ ∆-¿ ∆Q¿ ∆ü¿ ∆µ¿ ∆∂¿ «¿ «:¿ «@¿ «â¿ «”¿ «Ÿ¿ »&¿ »:¿ »@¿ »P¿ »V¿ »•¿ »‘¿ …¿ …;¿ …<¿ …z¿ …Ä¿ …—¿  ¿  >¿  D¿  Ü¿  –¿  È¿  Í¿ À3¿ ÀD¿ ÀJ¿ Àñ¿ ÀÂ¿ Ã¿ Ã"¿ Ãq¿ Ã†¿ Ã°¿ ÃË¿ Õ¿ Õ¿ ÕB¿ Õh¿ Õi¿ Õ∏¿ Õ ¿ Õ–¿ Œ¿ Œl¿ Œì¿ Œ∂¿ Œ∑¿ Œˇ¿ œ¿ œP¿ œü¿ œ¿¿ œ∆¿ –¿ –a¿ –™¿ –∞¿ –¿¿ –∆¿ —¿ —4¿ —Z¿ —[¿ —à¿ —é¿ —ﬁ¿ “.¿ “<¿ “B¿ “ê¿ “◊¿ “›¿ ”*¿ ”z¿ ” ¿ ‘¿ ‘!¿ ‘"¿ ‘U¿ ‘[¿ ‘´¿ ‘Ê¿ ‘Ï¿ ’:¿ ’â¿ ’õ¿ ’°¿ ’Ó¿ ÷?¿ ÷ê¿ ÷›¿ ÷Í¿ ◊¿ ◊¿ ◊B¿ ◊H¿ ◊ó¿ ◊Â¿ ÿ¿ ÿ
¿ ÿZ¿ ÿ¶¿ ÿÒ¿ Ÿ@¿ ŸS¿ Ÿw¿ Ÿx¿ Ÿ≠¿ Ÿ≥¿ ⁄¿ ⁄P¿ ⁄o¿ ⁄u¿ ⁄∆¿ €¿ €_¿ €Ø¿ €¬¿ €Á¿ €Ë¿ ‹¿ ‹ ¿ ‹o¿ ‹Ω¿ ‹⁄¿ ‹‡¿ ›.¿ ›z¿ ›≈¿ ﬁ¿ ﬁ'¿ ﬁI¿ ﬁJ¿ ﬁ~¿ ﬁÑ¿ ﬁ”¿ ﬂ!¿ ﬂ>¿ ﬂD¿ ﬂî¿ ﬂ‡¿ ‡-¿ ‡}¿ ‡ê¿ ‡¥¿ ‡µ¿ ‡Á¿ ‡Ì¿ ·:¿ ·~¿ ·Ñ¿ · ¿ ‚¿ ‚¿ ‚i¿ ‚π¿ ‚—¿ ‚Û¿ ‚Ù¿ „&¿ „,¿ „y¿ „Ω¿ „√¿ ‰	¿ ‰V¿ ‰\¿ ‰™¿ ‰˙¿ Â¿ Â6¿ Â7¿ Âe¿ Âk¿ Â≥¿ Âπ¿ Ê¿ Ê1¿ ÊO¿ ÊP¿ Ê}¿ ÊÉ¿ ÊÃ¿ Ê›¿ Ê„¿ Á2¿ Á[¿ Áx¿ Áy¿ Á®¿ ÁÆ¿ Áı¿ Á˚¿ ËJ¿ Ës¿ Ëí¿ Ëì¿ ËŸ¿ Ëﬂ¿ È)¿ ÈT¿ ÈZ¿ È®¿ ÈŒ¿ Í	¿ Í
¿ ÍQ¿ ÍW¿ Í°¿ ÍÕ¿ Í”¿ Î#¿ ÎI¿ ÎÖ¿ ÎÜ¿ Î«¿ ÎÕ¿ Ï¿ Ï>¿ ÏD¿ Ïî¿ Ï∫¿ Ï¿ ÏÒ¿ Ì3¿ Ì9¿ ÌÉ¿ Ì™¿ Ì∞¿ Ó ¿ Ó&¿ Ó]¿ Ó^¿ Óî¿ Óö¿ ÓÎ¿ Ô5¿ Ô;¿ ÔÜ¿ Ô»¿ Ôı¿ Ôˆ¿ '¿ -¿ ~¿ §¿ ™¿ ˘¿ Ò¿ Ò9¿ Ò:¿ Ò}¿ ÒÉ¿ Ò—¿ Ú¿ ÚW¿ Ú°¿ ÚÀ¿ Ú—¿ Û"¿ Ûs¿ Û¡¿ Û«¿ Û◊¿ Û›¿ Ù-¿ ÙV¿ Ù®¿ Ù€¿ Ù‹¿ ı¿ ı%¿ ım¿ ı≠¿ ı˘¿ ˆC¿ ˆm¿ ˆs¿ ˆƒ¿ ˜¿ ˜c¿ ˜i¿ ˜y¿ ˜¿ ˜Ã¿ ˜Í¿ ¯<¿ ¯o¿ ¯p¿ ¯°¿ ¯ß¿ ¯Ê¿ ¯Ï¿ ˘9¿ ˘à¿ ˘¶¿ ˘«¿ ˘»¿ ˙¿ ˙¿ ˙g¿ ˙∂¿ ˚¿ ˚U¿ ˚[¿ ˚k¿ ˚q¿ ˚π¿ ¸¿ ¸¿ ¸¿ ¸U¿ ¸Ä¿ ¸◊¿ ˝*¿ ˝É¿ ˝‹¿ ˛.¿ ˛v¿ ˛‹¿ ˇ$¿ ˇä¿ ˇ€¿ S¿ §¿¿b¿∆¿¿w¿⁄¿O¿S¿T¿`¿‚¿‰¿Â¿*¿B¿h¿ç¿è¿ê¿ø¿√¿¿Z¿ß¿ƒ¿˜¿¿¿l¿~¿ê¿û¿æ¿›¿¿¿N¿T¿ã¿¢¿∞¿–¿Û¿¿)¿<¿@¿A¿B¿à¿ç¿¿	R¿	É¿	 ¿	À¿	Ì¿
¿
a¿
}¿
Å¿
Ç¿
ƒ¿
 ¿¿;¿M¿N¿y¿¿»¿¿F¿L¿î¿‡¿¿/¿:¿;¿`¿a¿o¿p¿ ¿–¿¿h¿w¿ü¿∂¿ÿ¿¿b¿v¿|¿Ä¿Å¿¿¿⁄¿Ù¿¿`¿z¿è¿£¿©¿≠¿Æ¿ˆ¿¸¿M¿a¿g¿∑¿¿W¿•¿‘¿⁄¿!¿]¿c¿ü¿Ó¿ˇ¿ ¿!¿f¿l¿Ω¿—¿◊¿'¿v¿≈¿¿¿P¿V¿†¿Ω¿æ¿¿	¿S¿ù¿Â¿/¿¿å¿í¿ﬂ¿'¿-¿=¿C¿á¿¶¿ß¿Û¿˘¿A¿ê¿‡¿¿(¿)¿N¿T¿£¿Ò¿7¿S¿Y¿¶¿ı¿¿U¿V¿c¿d¿≥¿π¿˝¿2¿z¿û¿ü¿Ì¿Û¿?¿å¿«¿Í¿ &¿ M¿ w¿ ¢¿ ∞¿ ∂¿ ⁄¿ Ï¿ ¿ Ò¿!<¿!B¿!ì¿!√¿!…¿!Ÿ¿!ﬂ¿!˝¿"(¿"Å¿"Ç¿"ﬁ¿#.¿#á¿#à¿#â¿#ó¿#ò¿#‚¿$¿$¿$T¿$£¿$∂¿$È¿$Í¿%%¿%k¿%{¿%º¿%Û¿&¿&@¿&S¿&]¿&^¿&ñ¿&≥¿&È¿'¿'¿'¿'H¿'c¿'i¿'Ö¿'¢¿'ÿ¿'Û¿(¿(^¿(ñ¿(µ¿(¡¿(›¿(Á¿(Ô¿(ı¿)*¿)L¿)p¿)º¿*¿*K¿*ì¿*À¿*ˆ¿+ ¿+!¿+=¿+W¿+_¿+e¿+≤¿+≈¿+’¿,¿,N¿,ë¿,¿¿-¿-<¿-J¿-[¿-î¿-›¿.¿.?¿.O¿.Æ¿/=¿/º¿/ ¿/÷¿/‡¿0	¿0C¿0∫¿16¿1f¿1Ö¿1ì¿1ù¿1•¿1È¿1Í¿2¿2@¿2e¿2m¿2π¿2Ã¿2÷¿2◊¿3¿39¿3X¿3å¿3¡¿3›¿3Ó¿3¯¿4 ¿4¿4#¿48¿4L¿4R¿4V¿4W¿4í¿4Ã¿4‚¿4„¿5¿5O¿5P¿5Ç¿5à¿5Ÿ¿6%¿6:¿6o¿6å¿6¬¿6·¿6Û¿6˝¿7¿7¿7¿7¿7>¿7D¿7ì¿7‹¿8
¿8C¿8`¿8ñ¿8⁄¿8Ú¿8¸¿9¿9
¿9¿9¿9 ¿9T¿9Z¿9Æ¿9’¿9Ô¿9¿:I¿:O¿:Ñ¿:ä¿:¿¿:Á¿:Ë¿;¿;#¿;f¿;é¿;®¿;©¿;›¿;„¿<3¿<{¿<Å¿<Ã¿<Á¿<˘¿<˙¿=&¿=H¿=j¿=ã¿=´¿=±¿=µ¿=∂¿=“¿=˘¿=˝¿=˛¿>=¿>_¿>û¿>ü¿>‡¿>Ó¿>Ù¿>ı¿?/¿?A¿?B¿?s¿?ƒ¿?—¿?˙¿@ ¿@¿@¿@*¿@d¿@h¿@i¿@ì¿@∂¿@∆¿@Á¿A¿A(¿A0¿Ay¿Aå¿Añ¿A∞¿Aƒ¿A·¿AÁ¿B¿B.¿B2¿B3¿B\¿B¿Bß¿B¡¿B’¿BÎ¿BÒ¿Bı¿Bˆ¿C+¿C@¿Cf¿CÇ¿Cñ¿C¡¿D¿DV¿Dt¿Dz¿Dó¿Dæ¿D–¿DÊ¿D˙¿E ¿E¿ES¿Ep¿Ex¿E~¿EÇ¿EÉ¿E¥¿E…¿E€¿E˜¿F"¿FU¿Fs¿Fò¿F´¿FÁ¿G¿G:¿Gá¿G∑¿G€¿Gı¿Gˇ¿H¿H¿HQ¿Hí¿H¥¿H∆¿H ¿HÀ¿H·¿H‚¿H˘¿I¿I!¿I/¿I5¿IH¿I\¿Ië¿Iµ¿Iª¿Iø¿I¿¿J¿JH¿J|¿J¶¿J–¿K¿KN¿Kñ¿Kº¿Kﬂ¿L¿L8¿Lk¿L†¿L◊¿M¿MA¿Mr¿M•¿M⁄¿N¿Nm¿N∞¿N¥¿Nµ¿N–¿N—¿O#¿Oè¿Oê¿P¿P=¿P>¿Pr¿Px¿P»¿PÈ¿Q¿Q¿Q3¿Q}¿Q~¿Q£¿Q§¿Q„¿R#¿R$¿Rd¿Rå¿RΩ¿Ræ¿RË¿RÓ¿S'¿S-¿Sg¿Sñ¿Só¿Sﬁ¿S‰¿T¿T#¿T\¿Tò¿T›¿Tﬁ¿U¿U#¿U\¿Ub¿Uú¿UÀ¿UÃ¿V¿V.¿V4¿Vm¿Vs¿V¨¿VË¿W-¿W.¿W¿Wô¿Wü¿WÌ¿X¿X¿XJ¿XP¿Xì¿X‘¿X’¿Y$¿Yr¿Yx¿Y∆¿Y‰¿YÍ¿Z#¿Z)¿Zk¿Zπ¿[¿[¿[b¿[|¿[Ç¿[–¿[Ó¿[Ù¿\-¿\3¿\v¿\∑¿\∏¿]¿]U¿][¿]©¿]«¿]Õ¿^¿^¿^N¿^ú¿^Û¿^Ù¿_B¿_H¿_Å¿_á¿_¿¿_Ì¿_Ó¿`;¿`_¿`e¿`û¿`§¿`‹¿a¿aY¿aZ¿aè¿aï¿aŒ¿a¿b¿b¿bm¿bê¿bñ¿bﬁ¿c.¿cW¿c]¿cm¿cs¿cº¿c¸¿dI¿do¿dû¿dü¿dÌ¿dÛ¿e=¿eä¿eŸ¿f"¿fr¿fª¿f¡¿f◊¿g#¿gK¿gQ¿g°¿gÊ¿h¿h¿hb¿h„¿hÈ¿i9¿iÜ¿i”¿i˜¿j¿j¿j<¿jV¿jz¿j•¿j∆¿j‚¿k	¿k+¿kJ¿kn¿k}¿kä¿kï¿kù¿kß¿kπ¿kø¿kœ¿k’¿l¿lo¿lï¿lƒ¿l≈¿m¿m¿m^¿mà¿mâ¿mŸ¿mÒ¿n'¿nf¿ng¿n∂¿n»¿nŒ¿o¿oj¿oë¿oæ¿o‹¿o›¿p.¿pZ¿pê¿p±¿p≤¿q¿q¿qH¿q^¿q_¿q´¿q±¿q˛¿r
¿r<¿rV¿rW¿rù¿r≈¿r⁄¿r€¿s+¿s=¿sC¿sì¿sﬂ¿t%¿t+¿t;¿tA¿tã¿tº¿t◊¿tÿ¿u'¿u9¿u?¿uz¿uÄ¿uê¿uñ¿uÈ¿v¿v8¿v9¿và¿vö¿v†¿v€¿v·¿vÒ¿v˜¿wI¿w|¿wò¿wô¿w„¿x ¿x¿xT¿xû¿x≥¿xπ¿x…¿xœ¿y¿yI¿yw¿yè¿yê¿y‹¿yÓ¿yÙ¿zA¿zU¿z[¿z´¿zÌ¿{¿{3¿{4¿{É¿{ï¿{õ¿{Ë¿{¸¿|¿|Q¿|y¿|Ø¿|À¿|Ã¿}¿}¿}o¿}p¿}ø¿~¿~4¿~:¿~á¿~µ¿~ª¿¿Z¿n¿õ¿—¿ÿ¿ˆ¿Ä3¿ÄG¿ÄM¿ÄN¿ÄZ¿ÄÕ¿Å¿Å¿Å¿Åß¿Å®¿ÅÕ¿Å¸¿Ç+¿Çl¿Ç≠¿Ç⁄¿Ç˘¿É$¿ÉG¿Éj¿ÉÜ¿É±¿É–¿Ñ!¿Ñå¿Ñ∏¿Ñ‰¿Ö¿Ö9¿Öi¿Öô¿ÖË¿Ü¿Ü@¿Üj¿Üò¿Ü∆¿Ü¸¿á7¿áÖ¿áÜ¿áΩ¿á‡¿áÊ¿áÁ¿áÛ¿àR¿à—¿àÿ¿à‰¿âC¿â¬¿â…¿âÕ¿âŒ¿âœ¿ä¿ä¿ä^¿ä™¿ä›¿ã¿ã¿ãf¿ã°¿ã√¿ãË¿å!¿åZ¿å•¿å¿ç'¿çF¿çy¿ç–¿é¿é2¿éW¿éÖ¿éµ¿éÂ¿è¿è;¿èn¿èó¿è∫¿èÒ¿ê@¿êë¿êó¿ê∏¿êÊ¿ë;¿ëf¿ëç¿ëò¿ëÎ¿ëÛ¿í'¿í|¿í≠¿í⁄¿íÂ¿ì8¿ì@¿ìF¿ìG¿ìr¿ì°¿ì ¿ìË¿î¿î¿îI¿îx¿î≠¿îÿ¿ï	¿ï<¿ïo¿ï†¿ï—¿ñ
¿ñ*¿ñS¿ñ]¿ñâ¿ñº¿ñ∆¿ñ˚¿ó@¿óJ¿ó¿óƒ¿óŒ¿óÎ¿ò¿ò¿ò9¿òd¿òé¿òò¿òÎ¿ô@¿ôJ¿ôt¿ô´¿ö¿ö8¿öc¿ör¿ö…¿ö’¿õ¿õk¿õ•¿õ÷¿õÂ¿ú<¿úH¿úR¿úÖ¿ú∂¿ú‚¿ù¿ùM¿ùX¿ùä¿ù∫¿ùÊ¿û¿ûP¿û[¿û\¿û®¿û©¿ûæ¿û»¿ûŒ¿ûœ¿ûÈ¿û˝¿üQ¿üo¿üó¿üø¿ü˘¿†3¿†Y¿†q¿†ï¿†ß¿†√¿†ﬂ¿†˚¿°¿°7¿°a¿°Å¿°ß¿°œ¿°˜¿¢¿¢C¿¢q¿¢º¿¢√¿¢«¿¢»¿¢¯¿£¿£#¿£$¿£^¿£©¿£Ù¿£ı¿§T¿§h¿§õ¿§…¿§ı¿•0¿•c¿•î¿•°¿•—¿¶¿¶W¿¶á¿¶√¿¶À¿ß¿ß,¿ßb¿ßó¿ßﬁ¿ßÊ¿ßÏ¿®¿®S¿®¶¿®Ó¿©7¿©Ü¿©é¿©î¿©¨¿©∫¿©”¿©¿™¿™*¿™T¿™å¿™∂¿™Ó¿´*¿´t¿´∞¿´˙¿¨"¿¨X¿¨u¿¨û¿¨˘¿≠X¿≠â¿≠∫¿≠Û¿Æ%¿ÆP¿Æâ¿Æƒ¿Æˇ¿Ø@¿Øa¿ØÇ¿Øº¿ØÚ¿∞J¿∞Q¿∞e¿∞i¿∞j¿∞∫¿∞Ó¿±)¿±O¿±ê¿±«¿±È¿±Ô¿±¿≤!¿≤K¿≤ß¿≤¥¿≤ˆ¿≥ ¿≥&¿≥'¿≥v¿≥≈¿¥¿¥Y¿¥ß¿¥Ó¿µ¿µh¿µ¨¿µ„¿∂¿∂=¿∂O¿∂ì¿∂œ¿∑¿∑W¿∑ß¿∑«¿∑Í¿∏¿∏¿∏<¿∏W¿∏_¿∏`¿∏à¿∏ù¿∏∑¿∏”¿∏›¿∏„¿∏‰¿π0¿πL¿πk¿πÉ¿πâ¿π±¿π≤¿πŒ¿∫¿∫)¿∫-¿∫.¿∫s¿∫y¿∫¬¿ª¿ª<¿ªQ¿ª_¿ªe¿ª•¿ª©¿ª™¿ª·¿ª˙¿º	¿ºG¿ºZ¿ºd¿ºw¿º{¿º|¿ºà¿º◊¿ºÿ¿º‰¿Ω)¿ΩT¿Ωo¿ΩÅ¿Ω’¿æA¿æa¿æg¿æÚ¿ø]¿øÁ¿¿G¿¿a¿¿ø¿¿Ã¿¡'¿¡B¿¡]¿¡£¿¡¿¬s¿¬´¿¬≥¿√¿√#¿√ò¿ƒ@¿ƒé¿ƒ“¿ƒ„¿≈4¿≈õ¿∆-¿∆z¿∆‘¿«<¿«ç¿«÷¿»¿»z¿»’¿…¿…g¿…Õ¿ 0¿ \¿ À¿ —¿À(¿À¿Àﬁ¿Ã7¿Ãà¿Ã‰¿Õ>¿Õö¿ÕÈ¿Œ8¿Œ<¿Œ=¿ŒÖ¿Œã¿Œ€¿œ¿œ¿œ/¿œN¿œl¿œ¢¿œÛ¿œ˙¿–ì¿–ó¿–ò¿–§¿– ¿–‹¿—¿—l¿—s¿—ú¿—Æ¿—¡¿—’¿—Û¿—˙¿—˛¿—ˇ¿“¿“å¿“º¿” ¿”1¿”5¿”6¿”Ö¿”⁄¿”˜¿‘¿‘#¿‘$¿‘>¿‘q¿‘å¿‘ø¿‘Î¿‘Ò¿‘ı¿‘˜¿‘¯¿’B¿’Ä¿’Ñ¿’‘¿÷!¿÷z¿÷ ¿◊¿◊F¿◊S¿◊t¿◊é¿◊¶¿◊∆¿◊«¿ÿ¿ÿ6¿ÿ<¿ÿ\¿ÿb¿ÿ∂¿Ÿ¿ŸX¿Ÿl¿Ÿà¿Ÿâ¿Ÿ”¿Ÿı¿⁄¿⁄¿⁄4¿⁄P¿⁄Q¿⁄]¿⁄¿⁄™¿⁄Æ¿⁄∞¿⁄±¿€ ¿€6¿€:¿€É¿€ ¿€‚¿‹¿‹"¿‹(¿‹)¿‹s¿‹ï¿‹õ¿‹Á¿›¿›(¿›)¿›N¿›O¿›Å¿›∏¿›π¿›≈¿›Ú¿ﬁ'¿ﬁ+¿ﬁ,¿ﬁ|¿ﬁÇ¿ﬁ–¿ﬂ ¿ﬂ4¿ﬂc¿ﬂí¿ﬂ‡¿‡¿‡0¿‡M¿‡ï¿‡™¿‡¥¿‡Œ¿‡Ï¿·8¿·M¿·W¿·]¿·o¿·p¿·∫¿·⁄¿·Ì¿‚¿‚6¿‚J¿‚q¿‚ï¿‚Ω¿‚»¿‚Ï¿‚˚¿„¿„¿„/¿„U¿„k¿„s¿„y¿„ñ¿„ó¿„≈¿‰¿‰¿‰	¿‰%¿‰l¿‰}¿‰Å¿‰Ç¿‰Œ¿‰‘¿Â#¿ÂD¿ÂJ¿Âò¿ÂÂ¿Ê5¿Ê\¿Êb¿Ê≠¿Ê˝¿ÁK¿Áö¿Á∆¿ÁÒ¿Ë¿Ë4¿ËH¿ËN¿Ëí¿Ë¿¿ËÓ¿È¿È\¿Èê¿È⁄¿Í&¿ÍK¿Í_¿Íi¿Íj¿Í«¿Íˇ¿Î3¿Îk¿Î∂¿Î˚¿ÏF¿Ïë¿Ï√¿ÏÎ¿Ïı¿Ï˝¿Ì¿Ì¿Ì-¿ÌV¿Ìª¿Ó¿ÓS¿Óñ¿Óµ¿Ó”¿Ó€¿Ô¿Ô¿Ô¿Ô0¿ÔU¿Ôe¿Ôm¿Ôá¿Ô™¿Ô∆¿ÔŒ¿ÔÁ¿ÔÌ¿ÔÓ¿8¿ñ¿ö¿ú¿ù¿ﬁ¿Ò#¿ÒC¿ÒU¿ÒY¿Òî¿Ò∫¿Òﬂ¿Ò·¿Ò‚¿Ú2¿Ú@¿ÚD¿Úí¿Ú„¿Û¿Û!¿ÛS¿Ûà¿Ûå¿Û‚¿ÙK¿Ùx¿Ù®¿Ù…¿ı¿ıI¿ıa¿ı|¿ı¬¿ı’¿ı›¿ıı¿ˆ¿ˆ[¿ˆn¿ˆv¿ˆz¿ˆä¿ˆã¿ˆ◊¿ˆı¿˜¿˜-¿˜K¿˜]¿˜Ç¿˜§¿˜ ¿˜”¿˜ı¿¯¿¯¿¯¿¯0¿¯R¿¯f¿¯l¿¯p¿¯â¿¯ä¿¯¢¿¯¿¯ˇ¿˘¿˘¿˘I¿˘~¿˘Ç¿˘Ã¿˘–¿˙¿˙g¿˙¨¿˙√¿˙€¿˙Ì¿˚	¿˚¿˚¿˚I¿˚e¿˚f¿˚•¿˚´¿˚Í¿˚¸¿¸¿¸ ¿¸m¿¸z¿¸ê¿¸ë¿¸ù¿¸…¿¸˝¿˝%¿˝+¿˝Z¿˝^¿˝`¿˝a¿˝´¿˝∆¿˝ ¿˛¿˛f¿˛í¿˛¿¿ˇ¿ˇ'¿ˇL¿ˇR¿ˇí¿ˇ ¿ˇˆ¿ 5¿ h¿ é¿ §¿ ≠¿ ≥¿ ∑¿ ∏¿
¿Y¿q¿w¿«¿¿?¿r¿Æ¿Ô¿.¿/¿b¿h¿ú¿—¿“¿ﬁ¿Ò¿¿k¿q¿ä¿û¿∫¿œ¿”¿‘¿
¿)¿p¿Ä¿ƒ¿¿^¿Ñ¿∏¿Ÿ¿˝¿9¿k¿u¿ä¿í¿ì¿⁄¿¿N¿£¿‘¿	¿	\¿	f¿	n¿	o¿	ì¿	®¿	∞¿	±¿	˙¿
6¿
W¿
≠¿e¿p¿x¿y¿Ø¿¿^¿è¿¢¿¿Z¿e¿x¿Œ¿!¿M¿X¿k¿»¿$¿t¿¿â¿ì¿î¿≥¿¡¿«¿˛¿>¿c¿È¿¿"¿w¿£¿›¿˙¿_¿á¿÷¿4¿}¿œ¿¿+¿5¿=¿C¿ì¿¯¿-¿ä¿Ã¿¿W¿ò¿º¿˝¿@¿Ü¿ ¿ﬂ¿	¿G¿O¿U¿n¿©¿ ¿Ä¿Ü¿Æ¿≈¿…¿ ¿&¿N¿´¿·¿¿(¿Z¿d¿ä¿î¿ö¿⁄¿Ì¿Û¿¿¿¿k¿q¿¿¿‚¿Ë¿5¿Q¿ö¿Û¿¿#¿1¿7¿8¿m¿ƒ¿Ë¿Ó¿Ú¿Û¿r¿î¿∆¿ˇ¿ ¿ ¿ \¿ b¿ ã¿ û¿ §¿ ‘¿ Ò¿!&¿!U¿!o¿!á¿!ë¿!¶¿!∞¿!◊¿!›¿!˘¿"=¿"≠¿"Ã¿"Ê¿"¿"¯¿"˛¿# ¿#$¿#%¿#w¿#}¿#Ã¿#Ó¿#Ù¿$A¿$]¿$±¿$‰¿$¸¿%
¿%¿%{¿%ñ¿%´¿%±¿%µ¿%∂¿%¬¿%Ò¿%Û¿%Ù¿&6¿&J¿&N¿&ò¿&¨¿&À¿&Ã¿&Ï¿&Ì¿';¿'V¿'\¿'´¿'˙¿(F¿(_¿(e¿(≥¿(˝¿)*¿)0¿)}¿)≥¿)◊¿)˛¿*5¿*V¿*Z¿*[¿*™¿*∞¿*¯¿+E¿+ë¿+ó¿+‰¿,$¿,p¿,¿,Ö¿,”¿-"¿-L¿-r¿-s¿-ƒ¿.¿.F¿.L¿.ô¿.Á¿/¿/i¿/∑¿/Ë¿/Ó¿0;¿0ä¿0≠¿0Æ¿0˝¿1K¿1[¿1a¿1∞¿1¸¿2K¿2v¿2|¿2Ã¿3¿3a¿3g¿3∑¿3Ú¿4.¿4/¿4I¿4É¿4£¿4§¿4œ¿4’¿5#¿5T¿5Ü¿5®¿5©¿5ı¿6+¿61¿6A¿6G¿6n¿6€¿6‹¿7S¿7m¿7n¿7ú¿7¢¿7Í¿7˙¿8F¿8f¿8ä¿8®¿8¨¿8≠¿8˚¿9¿9¿9^¿9n¿9º¿9‰¿: ¿:¿:¿:¿:¿:K¿:Q¿:°¿:Ò¿:ˇ¿;¿;Q¿;ò¿;û¿;È¿<7¿<à¿<÷¿=&¿=w¿=¬¿>¿>X¿>©¿>È¿?¿?&¿?I¿?Ç¿?ñ¿?ö¿?õ¿?Œ¿?‘¿@$¿@_¿@e¿@±¿A ¿A¿AC¿Aa¿Aä¿A…¿A„¿AÁ¿AË¿B¿B"¿Bq¿Bø¿Bﬁ¿B‰¿C4¿CÄ¿CÀ¿D¿D-¿D`¿D¿D©¿DÈ¿E¿E¿E	¿E:¿E@¿E¿EÖ¿E“¿F!¿F?¿Fl¿Fà¿FØ¿FÏ¿G¿G¿G	¿G>¿GD¿Gì¿G·¿H ¿H¿HW¿H£¿H¿I@¿IS¿Ià¿I®¿I”¿J¿J0¿J4¿J5¿Jg¿Jm¿Jº¿K
¿K'¿K-¿K{¿K«¿L¿La¿Lt¿L£¿L¿¿LË¿M&¿M?¿MC¿MD¿Mx¿M~¿MÕ¿N¿N8¿N>¿Né¿N⁄¿O'¿Ow¿Oä¿OΩ¿O‹¿P¿PF¿Pa¿Pe¿Pf¿Pò¿Pû¿PÎ¿Q/¿Q5¿Q~¿Qæ¿Q÷¿Q‹¿R(¿Rx¿Rê¿Rø¿R‹¿S¿SB¿S[¿S_¿S`¿Sí¿Sò¿SÂ¿T)¿T/¿Tx¿T∏¿T–¿T÷¿U$¿Ut¿Ué¿UΩ¿U⁄¿V¿V@¿VY¿V]¿V^¿Vå¿Ví¿V⁄¿V‡¿W/¿WX¿W¿Wò¿Wº¿Wˆ¿X¿X¿X¿X=¿XC¿Xå¿Xù¿X£¿XÚ¿Y¿Y@¿YX¿Y{¿Y¥¿Y»¿YÃ¿YÕ¿Y¸¿Z¿ZI¿ZO¿Zû¿Z«¿Z¿[
¿[/¿[j¿[Ä¿[Ñ¿[Ö¿[ª¿[¡¿\¿\_¿\É¿\â¿\“¿]¿]<¿]s¿]î¿]¿¿^¿^¿^#¿^$¿^j¿^p¿^∫¿^Â¿^Î¿_9¿__¿_ª¿_Ò¿`2¿`M¿`õ¿`Õ¿`Ï¿`Ù¿a!¿a%¿a&¿am¿as¿aΩ¿aÈ¿aÔ¿b?¿be¿b√¿b˙¿c<¿cW¿c¶¿cÿ¿c˜¿cˇ¿d-¿d1¿d2¿ds¿dy¿d√¿dÍ¿d¿e@¿ef¿e∏¿eÈ¿f%¿f@¿fâ¿fª¿f⁄¿f‚¿g¿g¿g¿gV¿g\¿g¶¿gÕ¿g”¿h#¿hI¿hù¿hœ¿i¿i'¿iq¿i£¿i¬¿i ¿i¯¿i¸¿i˝¿j3¿j9¿jä¿j‘¿j⁄¿k%¿kg¿k•¿kÕ¿l ¿l¿lY¿lÑ¿l„¿m+¿mG¿mo¿mõ¿m•¿m≠¿m ¿mŒ¿mœ¿n ¿n¿nW¿n}¿nÉ¿n“¿nÔ¿o¿o<¿oe¿oÄ¿oπ¿oÁ¿p¿p&¿p.¿pF¿pJ¿pK¿pé¿pî¿p‚¿q ¿qh¿q≤¿q‹¿q‚¿r3¿rÑ¿r“¿rÿ¿rË¿rÓ¿s>¿sg¿sπ¿t
¿t8¿tq¿t¿¿tÍ¿tÓ¿tÔ¿u2¿u8¿uÄ¿u¿¿v¿vV¿vÄ¿vÜ¿v◊¿w(¿wv¿w|¿wå¿wí¿wﬂ¿w˝¿xO¿x†¿xŒ¿y¿yV¿yÄ¿yÑ¿yÖ¿y‘¿yÒ¿y˜¿zD¿zë¿z„¿{/¿{5¿{Ö¿{‘¿|¿|o¿|µ¿}¿}!¿}K¿}î¿}¿¿}ƒ¿}≈¿~¿~$¿~|¿~}¿~Ã¿~ﬁ¿~‰¿2¿Ä¿ß¿≠¿¸¿ÄG¿Äç¿Äµ¿Ä‚¿Å ¿Å)¿ÅD¿ÅZ¿Åx¿Å|¿Å}¿Å…¿Åœ¿Ç¿Çf¿Ç∂¿ÇË¿É¿É+¿ÉM¿Éi¿Éá¿Éã¿Éå¿Éÿ¿Éﬁ¿Ñ+¿Ñ7¿Ñi¿ÑÉ¿Ñ®¿ÑÕ¿Ñ€¿Ñ·¿Ö ¿Ö¿Ö"¿Ö#¿Öm¿Ö~¿Ö¶¿Öª¿Ö€¿Ö˚¿Ü	¿Ü¿Ü)¿ÜG¿ÜK¿ÜL¿Üñ¿Ü≥¿Ü·¿Ü˘¿á¿á?¿áM¿áS¿áp¿áé¿áí¿áì¿áﬂ¿áÒ¿á˜¿àD¿àX¿à^¿à™¿à„¿â¿â)¿âL¿âo¿â}¿âÉ¿â†¿âæ¿â¬¿â√¿ä¿ä$¿ä*¿äw¿äã¿äë¿ä‹¿ä˚¿ã1¿ãM¿ãt¿ãõ¿ã©¿ãØ¿ã–¿ãÓ¿ãÚ¿ãÛ¿åD¿åä¿åê¿å’¿ç¿çX¿ç^¿ç™¿ç˙¿é+¿é_¿é¿é≠¿éÀ¿éœ¿é–¿è¿è¿èa¿è´¿èÙ¿ê+¿êç¿ê˚¿ëJ¿ëh¿ë¢¿ë«¿í¿í¿í¿íC¿íú¿í∂¿íƒ¿í ¿ì¿ì*¿ì<¿ìB¿ìF¿ìG¿ìá¿ìØ¿ì ¿ì¿î¿î,¿î0¿î1¿îk¿îq¿î≥¿îπ¿îÚ¿î¯¿ï¿ï¿ï\¿ïã¿ïß¿ï◊¿ïı¿ï˘¿ï˙¿ñI¿ñW¿ñ]¿ñß¿ñˆ¿óB¿óã¿óÃ¿ó“¿ò¿ò¿ò!¿ò'¿òa¿òù¿òŸ¿ô¿ô;¿ôY¿ô]¿ô^¿ôÆ¿ô¥¿ôˆ¿ô¸¿ö5¿ö;¿öK¿öQ¿öü¿öÌ¿õ3¿õÅ¿õ«¿õˆ¿ú¿úB¿ú`¿úd¿úe¿ú¥¿úÿ¿úﬁ¿ù(¿ùw¿ù√¿û¿ûM¿ûS¿ûå¿ûí¿û¢¿û®¿û‚¿ü2¿üb¿ü≤¿ü‚¿†¿†Z¿†î¿†º¿†⁄¿†ﬁ¿†ﬂ¿°¿°B¿°H¿°ì¿°ô¿°Ë¿¢2¿¢]¿¢c¿¢ú¿¢¢¿¢≤¿¢∏¿£¿£P¿£~¿£¿¿£ﬁ¿£‚¿£„¿§¿§c¿§i¿§∏¿•¿•-¿•3¿•l¿•r¿•Ç¿•à¿•À¿¶¿¶^¿¶™¿¶‰¿ß¿ß¿ß¿ßA¿ßj¿ßp¿ßª¿ß¡¿®¿®Z¿®Ö¿®ã¿®ƒ¿® ¿©!¿©b¿©ê¿©“¿©¿©Ù¿©ı¿™/¿™u¿™{¿™ ¿´¿´?¿´E¿´~¿´Ñ¿´î¿´ö¿´›¿¨+¿¨p¿¨º¿¨ˆ¿≠¿≠¿≠¿≠g¿≠m¿≠Æ¿≠¥¿≠Ì¿≠Û¿Æ¿Æ	¿ÆV¿ÆÉ¿Æù¿ÆÀ¿ÆÈ¿ÆÌ¿ÆÓ¿Ø>¿Ø_¿Øe¿ØÆ¿Ø˝¿∞J¿∞ì¿∞‘¿∞⁄¿±¿±¿±)¿±/¿±h¿±¢¿±›¿≤¿≤;¿≤Y¿≤]¿≤^¿≤ì¿≤ô¿≤“¿≤Ù¿≥¿≥,¿≥D¿≥b¿≥f¿≥g¿≥∞¿≥¡¿¥ ¿¥*¿¥_¿¥x¿¥Ü¿¥å¿¥®¿¥∆¿¥ ¿¥À¿µ¿µ:¿µ`¿µ{¿µõ¿µµ¿µ‘¿µ‚¿µË¿∂ ¿∂¿∂"¿∂#¿∂t¿∂ä¿∂ê¿∂‡¿∑/¿∑C¿∑i¿∑Ñ¿∑§¿∑æ¿∑›¿∑Î¿∑Ò¿∏	¿∏'¿∏+¿∏,¿∏w¿∏í¿∏ò¿∏®¿∏Æ¿∏˝¿π<¿π\¿πå¿πê¿πë¿π—¿π◊¿πÁ¿πÌ¿∫:¿∫w¿∫ñ¿∫≈¿∫…¿∫ ¿ª ¿ª7¿ªS¿ª¿ªÉ¿ªÑ¿ª∑¿ªΩ¿º	¿ºV¿ºâ¿ºè¿º›¿Ω+¿Ωy¿Ωæ¿æ¿æ7¿æ=¿æM¿æS¿æ©¿æË¿ø¿ø8¿ø<¿ø=¿øÉ¿ø±¿øÁ¿¿¿¿<¿¿`¿¿~¿¿Ç¿¿É¿¿Œ¿¿‘¿¡!¿¡t¿¡∆¿¡˛¿¬;¿¬Z¿¬â¿¬ç¿¬é¿¬ﬂ¿√9¿√?¿√ê¿√ÿ¿√ﬁ¿ƒ'¿ƒG¿ƒ∑¿ƒ◊¿≈¿≈;¿≈?¿≈@¿≈~¿≈Ñ¿≈’¿∆$¿∆Y¿∆_¿∆Ø¿∆”¿∆Ÿ¿«(¿«U¿«[¿«Æ¿»¿»¿»¿»û¿»—¿… ¿…¿…¿…V¿…°¿…µ¿…ª¿ ¿ S¿ Y¿ ¢¿ ¡¿À.¿ÀM¿ÀÖ¿À∏¿ÀÁ¿ÀÎ¿ÀÏ¿Ã8¿Ã`¿Ãf¿Ã∑¿Ã˛¿Õ¿ÕM¿Õh¿ÕÂ¿Œ¿Œ<¿Œo¿Œ¶¿Œ™¿Œ´¿Œ¸¿œJ¿œP¿œ°¿œ›¿œ„¿–,¿–@¿–≠¿–Ã¿–ˇ¿—.¿—2¿—3¿—É¿—π¿—ø¿“¿“T¿“±¿“‡¿”¿”#¿”$¿”f¿”•¿”≈¿”ı¿”˘¿”˙¿‘C¿‘~¿‘ú¿‘ ¿‘Œ¿‘œ¿’¿’S¿’p¿’ù¿’°¿’¢¿’Î¿÷ ¿÷;¿÷f¿÷j¿÷k¿÷∂¿÷Ô¿◊¿◊9¿◊=¿◊>¿◊â¿◊¬¿◊ﬂ¿ÿ¿ÿ¿ÿ¿ÿY¿ÿf¿ÿ©¿ÿÀ¿ÿ˝¿Ÿ¿Ÿ¿Ÿ@¿ŸF¿Ÿï¿ŸÊ¿ŸÏ¿⁄<¿⁄â¿⁄õ¿⁄°¿⁄Ò¿€¿€¿€g¿€µ¿‹¿‹:¿‹s¿‹ê¿‹Ω¿‹¡¿‹¬¿‹˚¿›:¿›Z¿›ä¿›é¿›è¿›≈¿›À¿›˝¿ﬁ:¿ﬁY¿ﬁà¿ﬁå¿ﬁç¿ﬁº¿ﬁ¬¿ﬂ¿ﬂa¿ﬂß¿ﬂ‰¿‡¿‡2¿‡6¿‡7¿‡b¿‡h¿‡∑¿‡¿·/¿·O¿·¿·É¿·Ñ¿·‘¿·ˇ¿‚¿‚U¿‚£¿‚Ó¿„¿„p¿„ô¿„“¿„÷¿„◊¿‰ ¿‰Y¿‰è¿‰∞¿‰‹¿‰˜¿Â¿Â1¿Â5¿Â6¿ÂÜ¿Âò¿Âû¿ÂÓ¿Ê:¿ÊÄ¿ÊÜ¿Êñ¿Êú¿ÊÊ¿Á¿Á2¿ÁX¿Ás¿Áê¿ÁÆ¿Á≤¿Á≥¿Ë¿Ë¿Ë¿ËU¿Ë[¿Ëk¿Ëq¿Ëƒ¿Ë˜¿È¿È:¿ÈU¿Ès¿Èë¿Èï¿Èñ¿ÈÂ¿È˜¿È˝¿Í8¿Í>¿ÍN¿ÍT¿Íß¿Í⁄¿Íˆ¿Î¿Î8¿ÎV¿Ît¿Îx¿Îy¿ÎÉ¿ÎÑ¿ÎÃ¿Î‰¿ÎÍ¿Î˙¿Ï ¿ÏO¿Ï_¿Ï¢¿Ï£¿ÏÓ¿Ì
¿Ìa¿Ìb¿Ìâ¿Ìä¿ÌŸ¿Ì˜¿Ì˝¿ÓA¿Óí¿Ó∞¿Ó∂¿Ô¿ÔS¿Ô†¿Ô¶¿Ô∂¿Ôº¿Ô˝¿¿F¿q¿ë¿ï¿ñ¿¥¿µ¿«¿˘¿Ò
¿Ò&¿Ò3¿ÒP¿ÒV¿Òt¿Òx¿Òy¿Òº¿ÒΩ¿Ò‚¿Ò„¿Ú,¿ÚA¿ÚG¿Úñ¿Ú€¿Û¿Û]¿Ûp¿Ûv¿Û¨¿Û¿¿Û∆¿ÛÓ¿Ù¿Ù¿ÙL¿Ù`¿Ùf¿Ù™¿Ùæ¿Ùƒ¿ı¿ı$¿ı*¿ıÑ¿ıò¿ıû¿ıØ¿ı≥¿ı¥¿ˆ ¿ˆ¿ˆT¿ˆx¿ˆ~¿ˆÕ¿˜¿˜¿˜W¿˜©¿˜„¿¯¿¯2¿¯3¿¯V¿¯d¿¯j¿¯ë¿¯‰¿˘¿˘;¿˘E¿˘O¿˘\¿˘É¿˘â¿˘æ¿˙¿˙¿˙J¿˙y¿˙™¿˙€¿˚¿˚4¿˚]¿˚ê¿˚ø¿˚Ó¿¸%¿¸&¿¸Q¿¸r¿¸è¿¸∂¿¸º¿¸Ï¿˝¿˝B¿˝w¿˝¶¿˝≠¿˝÷¿˛¿˛¿˛?¿˛Ç¿˛à¿˛∫¿˛˝¿ˇ¿ˇ2¿ˇ_¿ˇá¿ˇª¿ˇÍ¿ˇÒ¿ ¿ ,¿ 2¿ 3¿ ¿ Ä¿ ∆¿  ¿ À¿ ˛¿ ¿D¿v¿¶¿¿6¿Ç¿™¿∆¿Ë¿¿R¿~¿º¿Ê¿¿*¿J¿j¿Ç¿Æ¿÷¿ ¿,¿X¿Ä¿ß¿À¿˘¿#¿M¿¿°¿·¿¿¿¿¿n¿¿û¿À¿—¿¿l¿†¿≤¿≥¿‚¿Ë¿	7¿	V¿	h¿	j¿	k¿	ñ¿	»¿	˚¿
(¿
V¿
[¿
â¿
™¿
Æ¿
˝¿¿=¿¥¿“¿I¿O¿S¿Ä¿¢¿¶¿ß¿˜¿˘¿˙¿K¿h¿l¿π¿	¿C¿G¿ì¿¿¿ƒ¿¿A¿E¿S¿W¿õ¿˘¿J¿í¿π¿∫¿¿¿$¿d¿j¿∏¿Á¿˝¿˛¿
¿4¿j¿È¿Í¿9¿Z¿x¿ó¿ù¿û¿¿ˇ¿-¿>¿s¿É¿â¿ä¿≥¿∑¿∏¿·¿Á¿7¿N¿T¿•¿ı¿C¿P¿]¿ê¿ë¿ù¿‚¿¿S¿W¿Y¿Z¿†¿´¿Ø¿ı¿!¿%¿u¿ƒ¿¿¿ ¿l¿ô¿ù¿È¿2¿t¿™¿⁄¿*¿0¿[¿s¿Ö¿ï¿≈¿Ì¿Ó¿<¿å¿ú¿¢¿¿=¿S¿T¿`¿à¿®¿∏¿æ¿Á¿Î¿Ï¿¯¿=¿h¿∞¿¥¿∂    	Ä•Äº Ä¡ Ä“ÅLÅO  Å|  Å¶ ÅÕÅÅÚ  Ç  ÇM ÇcÇxÇz  ÇöÇ´É
ÉÉ6É™É¨É”ÉÂÉÁÑÑ$Ñ'ÑEÑX å™Ñ˝èWÇ¶/// A tag for a [SemanticsNode].
///
/// Tags can be interpreted by the parent of a [SemanticsNode]
/// and depending on the presence of a tag the parent can for example decide
/// how to add the tagged node as a child. Tags are not sent to the engine.
///
/// As an example, the [RenderSemanticsGestureHandler] uses tags to determine
/// if a child node should be excluded from the scrollable area for semantic
/// purposes.
///
/// The provided [name] is only used for debugging. Two tags created with the
/// same [name] and the `new` operator are not considered identical. However,
/// two tags created with the same [name] and the `const` operator are always
/// identical. èhÅE êïê°Å/// Creates a [SemanticsTag].
///
/// The provided [name] is only used for debugging. Two tags created with the
/// same [name] and the `new` operator are not considered identical. However,
/// two tags created with the same [name] and the `const` operator are always
/// identical.ê¢	ê®   ê±ÄöëGÄÇ/// A human-readable name for this tag used for debugging.
///
/// This string is not used to determine if two tags are identical.  ëPUëc   ëPëQ ë©á(ì=Åç/// The result that contains the arrangement for the child
/// [SemanticsConfiguration]s.
///
/// When the [PipelineOwner] builds the semantics tree, it uses the returned
/// [ChildSemanticsConfigurationsResult] from
/// [SemanticsConfiguration.childConfigurationsDelegate] to decide how semantics nodes
/// should form.
///
/// Use [ChildSemanticsConfigurationsResultBuilder] to build the result. ìdLìÜìáìà ìâìè  ìóìù   ì¥Åyï&ÅB/// Returns the [SemanticsConfiguration]s that are supposed to be merged into
/// the parent semantics node.
///
/// [SemanticsConfiguration]s that are either semantics boundaries or are
/// conflicting with other [SemanticsConfiguration]s will form explicit
/// semantics nodes. All others will be merged into the parent. ï2ÉúòºÉD/// The groups of child semantics configurations that want to merge together
/// and form a sibling [SemanticsNode].
///
/// All the [SemanticsConfiguration]s in a given group that are either
/// semantics boundaries or are conflicting with other
/// [SemanticsConfiguration]s of the same group will be excluded from the
/// sibling merge group and form independent semantics nodes as usual.
///
/// The result [SemanticsNode]s from the merges are attached as the sibling
/// nodes of the immediate parent semantics node. For example, a `RenderObjectA`
/// has a rendering child, `RenderObjectB`. If both of them form their own
/// semantics nodes, `SemanticsNodeA` and `SemanticsNodeB`, any semantics node
/// created from sibling merge groups of `RenderObjectB` will be attach to
/// `SemanticsNodeA` as a sibling of `SemanticsNodeB`.    ò”à.ö:Å`/// The builder to build a [ChildSemanticsConfigurationsResult] based on its
/// annotations.
///
/// To use this builder, one can use [markAsMergeUp] and
/// [markAsSiblingMergeGroup] to annotate the arrangement of
/// [SemanticsConfiguration]s. Once all the configs are annotated, use [build]
/// to generate the [ChildSemanticsConfigurationsResult]. öhi ö•öŒ:/// Creates a [ChildSemanticsConfigurationsResultBuilder].  ö’Hö¯ õõõõõõ!_õJ õ~õõ`õ}õaõeõ|õf õÖÅ1úqÄ‹/// Marks the [SemanticsConfiguration] to be merged into the parent semantics
/// node.
///
/// The [SemanticsConfiguration] will be added to the
/// [ChildSemanticsConfigurationsResult.mergeUp] that this builder builds. úúó   ú∫ÅtùÃÅ/// Marks a group of [SemanticsConfiguration]s to merge together
/// and form a sibling [SemanticsNode].
///
/// The group of [SemanticsConfiguration]s will be added to the
/// [ChildSemanticsConfigurationsResult.siblingMergeGroups] that this builder builds. ù‰$û   û2ÇÕû£K/// Builds a [ChildSemanticsConfigurationsResult] contains the arrangement.    °åÅ§ŸÉƒ/// An identifier of a custom semantics action.
///
/// Custom semantics actions can be provided to make complex user
/// interactions more accessible. For instance, if an application has a
/// drag-and-drop list that requires the user to press and hold an item
/// to move it, users interacting with the application using a hardware
/// switch may have difficulty. This can be made accessible by creating custom
/// actions and pairing them with handlers that move a list item up or down in
/// the list.
///
/// In Android, these actions are presented in the local context menu. In iOS,
/// these are presented in the radial context menu.
///
/// Localization and text direction do not automatically apply to the provided
/// label or hint.
///
/// Instances of this class should either be instantiated with const or
/// new instances cached in static fields.
///
/// See also:
///
///  * [SemanticsProperties], where the handler for a custom action is provided. §ÛÄ‘ •Q•fQ/// Creates a new [CustomSemanticsAction].
///
/// The [label] must not be empty.•h•~  •ã•ë•ù•ò•í•õ•´•¶•≠•¿•π•¬•ÀÅ%¶n¶o¶/// Creates a new [CustomSemanticsAction] that overrides a standard semantics
/// action.
///
/// The [hint] must not be empty.¶Å¶ó  ¶ú$¶ª  	¶…¶œ¶⁄¶’¶–¶ÿ¶È¶„¶Î¶ÙQß@;/// The user readable name of this custom semantics action. ßJNßî9/// The hint description of this custom semantics action. ßùWßÓ7/// The standard semantics action this action replaces. ™)™4 ™>™CV™p ™ó™ò™{™ñ™|™Å™ùR™  ™Ì™Ó™—™Ï™“™Èß˘A®   ß˘ß˙®>Å®X  ®[®c  ®>®?©CÄÄ©V   ©C©D™ÙÅ´.,/// Get the identifier for a given `action`. ´<´S   ¨}¨[,/// Get the `action` for a given identifier. ¨e¨j   ¨èÄÛ≠N/// Resets internal state between tests. Does nothing if asserts are disabled.  ¨‡¨·§»§…≠ÜäD≠œ7/// A string that carries a list of [StringAttribute]s. ≠‰Çª Æ«Æ◊Ä‘/// Creates a attributed string.
///
/// The [TextRange] in the [attributes] must be inside the length of the
/// [string].
///
/// The [attributes] must not be changed after the attributed string is
/// created.Æ›Æ„  Æ+Æˆ  ØØØØØØ	Ø$Ø*ØRØ=Ø+Ø1Ø2Ø@ØJØKØ\Øb∞ùØc∞ö∞õ∞ú∞£K∞Ë5/// The plain string stored in the attributed string. ∞ÛÄò±Åk/// The attributes this string carries.
///
/// The list must not be modified after this string is created. ∑ @∑   ∑ ∑±êÑ3≤çÄ⁄/// Returns a new [AttributedString] by concatenate the operands
///
/// The string attribute list of the returned [AttributedString] will contains
/// the string attributes from both operands with updated text ranges. ≤è≤°   µ«Å5∂-I/// Two [AttributedString]s are equal if their string and attributes are. ∂0∂8  ∂∂∑DÄÑ∑W   ∑D∑E≠æ≠ø∑ÃÖï∏ZÄá/// A [DiagnosticsProperty] for [AttributedString]s, which shows a string
/// when there are no attributes, and more details otherwise. ∏•ÅF π.πFÄÇ/// Create a diagnostics property for an [AttributedString] object.
///
/// Such properties are used with [SemanticsData] objects.πLπZ  πcπj  πvπ}  πäπê  π™π±  π¬π…  π”π⁄  πüπÔÄÀ∫≠Ä™/// Whether to show the property when the [value] is an [AttributedString]
/// whose [AttributedString.string] is the empty string.
///
/// This overrides [defaultValue]. ∫ø|∫‘   ∫ø∫¿ª?Ç ªR  ªa*ªy  ª?ª@ Ωcª&æÒÅ|/// Summary information about a [SemanticsNode] object.
///
/// A semantics node might [SemanticsNode.mergeAllDescendantsIntoThisNode],
/// which means the individual fields on the semantics node don't fully describe
/// the semantics at that node. This data structure contains the full semantics
/// for the node.
///
/// Typically obtained from [SemanticsNode.getSemanticsData]. øá~ øèøúq/// Creates a semantics data object.
///
/// If [label] is not empty, then [textDirection] must also not be null.ø£ø≤  øºøÀ  ø◊øÊ  øı¿ @  ¿ @¿ @'  ¿ @;&¿ @J  ¿ @g&¿ @v  ¿ @ì¿ @¢  ¿ @µ¿ @ƒ  ¿ @–¿ @ﬂ  ¿ @Ò¿ A   ¿ A	¿ A  ¿ A&¿ A5  ¿ AC¿ AR  ¿ Ad¿ As  ¿ AÉ¿ Aí  ¿ Aß¿ A∂  ¿ A…¿ Aÿ  ¿ AÏ¿ A˚  ¿ B¿ B  ¿ B1¿ B@  ¿ BS ¿ Bb  ¿ By	¿ B  ¿ Bà¿ Bé  ¿ Bú¿ B¢  s¿ B¬¿ B»¿ BÔ¿ C;¿ B◊¿ B—¿ B…¿ B‘¿ BË¿ B⁄¿ BÎ¿ BÒ¿ C¿ C¿ C¿ CE¿ CK¿ CÅ¿ C‹¿ Ci¿ Cc¿ CL¿ C[¿ C\¿ Cf¿ Cz¿ Cl¿ C}¿ CÉ¿ Cß¿ Cø¿ C©¿ C∏¿ Cπ¿ C¿¿ CÊ¿ CÏ¿ D"¿ D}¿ D
¿ D¿ CÌ¿ C¸¿ C˝¿ D¿ D¿ D¿ D¿ D$¿ DH¿ D`¿ DJ¿ DY¿ DZ¿ Da¿ Dá¿ Dç¿ DÃ¿ E9¿ D¥¿ DÆ¿ Dé¿ D¶¿ Dß¿ D±¿ D≈¿ D∑¿ D»¿ DŒ¿ D˚¿ E¿ D˝¿ E¿ E¿ E¿ EC¿ EI¿ Eà¿ Eı¿ Ep¿ Ej¿ EJ¿ Eb¿ Ec¿ Em¿ EÅ¿ Es¿ EÑ¿ Eä¿ E∑¿ Eÿ¿ Eπ¿ E—¿ E“¿ EŸ¿ Eˇ¿ F¿ F:¿ Fì¿ F"¿ F¿ F¿ F¿ F¿ F¿ F3¿ F%¿ F6¿ F<¿ F_¿ Fv¿ Fa¿ Fo¿ Fp¿ Fw¿ FôN¿ F‚</// A bit field of [SemanticsFlag]s that apply to this node. ¿ FÏR¿ G7>/// A bit field of [SemanticsAction]s that apply to this node. ¿ GCW¿ Gê=/// {@macro flutter.semantics.SemanticsProperties.identifier} ¿ HåÅ¿ IÉÄ”/// A textual description for the current label of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [label], which exposes just the raw text. ¿ JÑÅ¿ K{Ä”/// A textual description for the current value of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [value], which exposes just the raw text. ¿ LΩÅ8¿ M›Ä¸/// The value that [value] will become after performing a
/// [SemanticsAction.increase] action in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [increasedValue], which exposes just the raw text. ¿ O(Å8¿ PHÄ¸/// The value that [value] will become after performing a
/// [SemanticsAction.decrease] action in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [decreasedValue], which exposes just the raw text. ¿ Q^Å¿ RcÄ·/// A brief description of the result of performing an action on this node
/// in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [hint], which exposes just the raw text. ¿ RvÄà¿ R˜m/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection]. ¿ SÄñ¿ Såo/// The reading direction for the text in [label], [value],
/// [increasedValue], [decreasedValue], and [hint]. ¿ SûÄü¿ T0x/// The currently selected text (or the position of the cursor) within [value]
/// if this node represents a text field. ¿ TBÄ∆¿ T¯Ä¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null. ¿ U\¿ U^C/// The index of the first visible semantic child of a scroll node. ¿ UnÅÃ¿ W,Åõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken. ¿ W?Å.¿ X^Å /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken. ¿ XrÅ.¿ YëÅ /// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent], from where this value is usually taken. ¿ Y•Å…¿ [`Åô/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.
///
/// If this value is non-null, the SemanticsNode must not have any children
/// as those would be replaced by the semantics nodes of the referenced
/// platform view.
///
/// See also:
///
///  * [AndroidView], which is the platform view for Android.
///  * [UiKitView], which is the platform view for iOS. ¿ [sÅv¿ \€ÅL/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Defaults
/// to null, which means no limit is imposed on the text field. ¿ \ÓÅg¿ ^CÅ9/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. This must
/// be set when [maxValueLength] is set. ¿ ^ZN¿ ^§</// The bounding box for this node in its coordinate system. ¿ ^≠Y¿ _9/// The set of [SemanticsTag]s associated with this node. ¿ _Å¿ `!Ä¸/// The transform from this node's coordinate system to its parent's coordinate system.
///
/// By default, the transform is null, which represents the identity
/// transformation (i.e., that this node has the same coordinate system as its
/// parent). ¿ `/ÄÏ¿ aÄ…/// The elevation of this node relative to the parent semantics node.
///
/// See also:
///
///  * [SemanticsConfiguration.elevation] for a detailed discussion regarding
///    elevation and semantics. ¿ a Äƒ¿ a€Ä£/// The extent of this node along the z-axis beyond its [elevation]
///
/// See also:
///
///  * [SemanticsConfiguration.thickness] for a more detailed definition. ¿ aÈÅ0¿ cÄˆ/// The identifiers for the custom semantics actions and standard action
/// overrides for this node.
///
/// The list must be sorted in increasing order.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions. ¿ GüÄÈ¿ HhÄ≥/// A textual description for the current label of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedLabel].   ¿ IóÄÈ¿ J`Ä≥/// A textual description for the current value of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedValue].   ¿ KèÅ*¿ LáÄ‡/// The value that [value] will become after performing a
/// [SemanticsAction.increase] action.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedIncreasedValue].   ¿ M˙Å*¿ NÚÄ‡/// The value that [value] will become after performing a
/// [SemanticsAction.decrease] action.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedDecreasedValue].   ¿ PeÄı¿ Q<Ä¡/// A brief description of the result of performing an action on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedHint].   ¿ t|Çi¿ tê   ¿ t|¿ t}¿ cm¿ cR,/// Whether [flags] contains the given flag. ¿ cZ¿ ci   ¿ cè{¿ c«0/// Whether [actions] contains the given action. ¿ c—¿ c‚   ¿ dO¿ d!   ¿ d¿ d¿ daä˙¿ dr  ¿ dÜ&¿ d£  ¿ da¿ db¿ o_Ö¿ oy  ¿ o|¿ oÑ  ¿ o_¿ o`¿ vÈÅû¿ vı  ¿ w¿ w  ¿ w¿ w$   æ‡æ·¿ xãÅq¿ xë  ¿ x‹ÄÜ ¿ x‹¿ x¯ ¿ xˇ
¿ y  ¿ y¿ y  ¿ y)¿ y9  ¿ yC¿ yR   ¿ yf(¿ yÑ   ¿ yìg¿ yµ   ¿ yì¿ yî ¿ y˛á#¿ zñÄÜ/// Provides hint values which override the default hints on supported
/// platforms.
///
/// On iOS, these values are always ignored. ¿ zÃÄº ¿ z¸¿ {'/// Creates a semantics hint overrides.¿ {¿ {  ¿ {-¿ {3  ¿ {J¿ {P¿ {`¿ {[¿ {Q¿ {^¿ {j¿ {p¿ {Ü¿ {Å¿ {q¿ {Ñ¿ {åÅ8¿ |ªÅ/// The hint text for a tap action.
///
/// If null, the standard hint is used instead.
///
/// The hint should describe what happens when a tap occurs, not the
/// manner in which a tap is accomplished.
///
/// Bad: 'Double tap to show movies'.
/// Good: 'show movies'. ¿ |…Å`¿ ~Å0/// The hint text for a long press action.
///
/// If null, the standard hint is used instead.
///
/// The hint should describe what happens when a long press occurs, not
/// the manner in which the long press is accomplished.
///
/// Bad: 'Double tap and hold to show tooltip'.
/// Good: 'show tooltip'. ¿ ~.v¿ ~i//// Whether there are any non-null hint values.   ¿ ~®H¿ ~º   ¿ ~®¿ ~©¿ ~ÙÄ˛¿   ¿ ¿   ¿ ~Ù¿ ~ı¿ ˆÅ)¿ Ä  ¿ Ä&¿ Ä8  ¿ ˆ¿ ˜¿ zÖ¿ zÜ¿ Å#¿ Ç¿¿ Ç ÄÀ/// Contains properties used by assistive technologies to make the application
/// more accessible.
///
/// The properties of this class are used to generate a [SemanticsNode]s in the
/// semantics tree. ¿ Ç3àX ¿ Ç^¿ Çq"/// Creates a semantic annotation.>¿ Çx¿ Ç~  ¿ Çä¿ Çê  ¿ Çú
¿ Ç¢  ¿ Ç¨¿ Ç≤  ¿ Çø¿ Ç≈  ¿ Ç“¿ Çÿ  ¿ Ç‰¿ ÇÍ  ¿ Çı	¿ Ç˚  ¿ É¿ É
  ¿ É¿ É  ¿ É)¿ É/  ¿ É:¿ É@  ¿ ÉP¿ ÉV  ¿ Éc¿ Éi  ¿ Éw¿ É}  ¿ Éâ¿ Éè  ¿ É¨¿ É≤  ¿ ÉΩ¿ É√  ¿ É–¿ É÷  ¿ É‰¿ ÉÍ  ¿ É˙¿ Ñ   ¿ Ñ
¿ Ñ  ¿ Ñ¿ Ñ%  ¿ Ñ4¿ Ñ:  ¿ ÑM¿ ÑS  ¿ Ñj¿ Ñp  ¿ Ñ
¿ ÑÖ  ¿ Ñè¿ Ñï  ¿ Ñ©
¿ ÑØ  ¿ Ñπ¿ Ñø  ¿ Ñ”¿ ÑŸ  ¿ ÑÏ¿ ÑÚ  ¿ Ö¿ Ö  ¿ Ö(¿ Ö.  ¿ ÖK	¿ ÖQ  ¿ ÖZ¿ Ö`  ¿ Öl¿ Ör  ¿ ÖÖ¿ Öã  ¿ Öù¿ Ö£  ¿ Öµ¿ Öª  ¿ Ö«¿ ÖÕ  ¿ Ö‡
¿ ÖÊ  ¿ Ö¿ Öˆ  ¿ Ü¿ Ü  ¿ Ü¿ Ü#  ¿ Ü5¿ Ü;  ¿ ÜJ¿ ÜP  ¿ Üa¿ Üg  ¿ Üv¿ Ü|  ¿ Üã¿ Üë  ¿ Üú
¿ Ü¢  ¿ Ü¨¿ Ü≤  ¿ Üæ#¿ Üƒ  ¿ ÜÁ$¿ ÜÌ  ¿ á¿ á  ¿ á5¿ á;  ¿ áZ¿ á`  ¿ ás¿ áy  ¿ áá ¿ áç  ¿ á≠ ¿ á≥  ¿ á”¿ áŸ  ¿ áÁ¿ áÌ  <¿ à¿ à¿ à:¿ àu¿ à ¿ à¿ à¿ à¿ à3¿ à#¿ à6¿ à<¿ à¿ àÖ¿ àÆ¿ àÈ¿ àî¿ àå¿ àÜ¿ àè¿ àß¿ àó¿ à™¿ à∞¿ àÛ¿ à˘¿ â4¿ âÅ¿ â¿ â	¿ à˙¿ â¿ â-¿ â¿ â0¿ â6¿ âã¿ âë¿ âÃ¿ ä¿ â©¿ â°¿ âí¿ â§¿ â≈¿ â¨¿ â»¿ âŒ¿ ä#¿ ä)¿ äP¿ äâ¿ ä7¿ ä/¿ ä*¿ ä2¿ äI¿ ä:¿ äL¿ äR>¿ äèÅ[¿ ã„Å;/// If non-null, indicates that this subtree represents something that can be
/// in an enabled or disabled state.
///
/// For example, a button that a user can currently interact with would set
/// this field to true. A button that currently does not respond to user
/// interactions would set this field to false. ¿ ãÔÅú¿ çÑÅv/// If non-null, indicates that this subtree represents a checkbox
/// or similar widget with a "checked" state, and what its current
/// state is.
///
/// When the [Checkbox.value] of a tristate Checkbox is null,
/// indicating a mixed-state, this value shall be false, in which
/// case, [mixed] will be true.
///
/// This is mutually exclusive with [toggled] and [mixed]. ¿ çêÅ‚¿ èmÅº/// If non-null, indicates that this subtree represents a checkbox
/// or similar widget with a "half-checked" state or similar, and
/// whether it is currently in this half-checked state.
///
/// This must be null when [Checkbox.tristate] is false, or
/// when the widget is not a checkbox. When a tristate
/// checkbox is fully unchecked/checked, this value shall
/// be false.
///
/// This is mutually exclusive with [checked] and [toggled]. ¿ èwÅ%¿ êîÅ/// If non-null, indicates that this subtree represents something
/// that can be in an "expanded" or "collapsed" state.
///
/// For example, if a [SubmenuButton] is opened, this property
/// should be set to true; otherwise, this property should be
/// false. ¿ ê°ÄÒ¿ ëãÄ”/// If non-null, indicates that this subtree represents a toggle switch
/// or similar widget with an "on" state, and what its current
/// state is.
///
/// This is mutually exclusive with [checked] and [mixed]. ¿ ëóÅ&¿ íµÅ/// If non-null indicates that this subtree represents something that can be
/// in a selected or unselected state, and what its current state is.
///
/// The active tab in a tab bar for example is considered "selected", whereas
/// all other tabs are unselected. ¿ í¬Äª¿ ìwÄ†/// If non-null, indicates that this subtree represents a button.
///
/// TalkBack/VoiceOver provides users with the hint "button" when a button
/// is focused. ¿ ìÇÅ ¿ î~ÄÂ/// If non-null, indicates that this subtree represents a link.
///
/// iOS's VoiceOver provides users with a unique hint when a link is focused.
/// Android's Talkback will announce a link hint the same way it does a
/// button. ¿ îáÅ¿ ïüÅ/// If non-null, indicates that this subtree represents a header.
///
/// A header divides into sections. For example, an address book application
/// might define headers A, B, C, etc. to divide the list of alphabetically
/// sorted contacts into sections. ¿ ï™Äø¿ ñ`Ä°/// If non-null, indicates that this subtree represents a text field.
///
/// TalkBack/VoiceOver provide special affordances to enter text into a
/// text field. ¿ ñnÄº¿ ó$Ä°/// If non-null, indicates that this subtree represents a slider.
///
/// Talkback/\VoiceOver provides users with the hint "slider" when a
/// slider is focused. ¿ ó/a¿ óÖG/// If non-null, indicates that this subtree represents a keyboard key. ¿ óïÄ–¿ ò]Ä±/// If non-null, indicates that this subtree is read only.
///
/// Only applicable when [textField] is true.
///
/// TalkBack/VoiceOver will treat it as non-editable text field. ¿ òjÅ’¿ ö6ÅØ/// If non-null, whether the node is able to hold input focus.
///
/// If [focusable] is set to false, then [focused] must not be true.
///
/// Input focus indicates that the node will receive keyboard events. It is not
/// to be confused with accessibility focus. Accessibility focus is the
/// green/black rectangular highlight that TalkBack/VoiceOver draws around the
/// element it is reading, and is separate from input focus. ¿ öDÇ¿ úZÅ˜/// If non-null, whether the node currently holds input focus.
///
/// At most one node in the tree should hold input focus at any point in time,
/// and it should not be set to true if [focusable] is false.
///
/// Input focus indicates that the node will receive keyboard events. It is not
/// to be confused with accessibility focus. Accessibility focus is the
/// green/black rectangular highlight that TalkBack/VoiceOver draws around the
/// element it is reading, and is separate from input focus. ¿ úfÅ¿ ùVÄ€/// If non-null, whether a semantic node is in a mutually exclusive group.
///
/// For example, a radio button is in a mutually exclusive group because only
/// one radio button in that group can be marked as [checked]. ¿ ùsÉF¿ †≥É/// If non-null, whether the node is considered hidden.
///
/// Hidden elements are currently not visible on screen. They may be covered
/// by other elements or positioned outside of the visible area of a viewport.
///
/// Hidden elements cannot gain accessibility focus though regular touch. The
/// only way they can be focused is by moving the focus to them via linear
/// navigation.
///
/// Platforms are free to completely ignore hidden elements and new platforms
/// are encouraged to do so.
///
/// Instead of marking an element as hidden it should usually be excluded from
/// the semantics tree altogether. Hidden elements are only included in the
/// semantics tree to work around platform limitations and they are mainly
/// used to implement accessibility scrolling on iOS. ¿ †æÅ3¿ °ÈÅ/// If non-null, whether [value] should be obscured.
///
/// This option is usually set in combination with [textField] to indicate
/// that the text field contains a password (or other sensitive information).
/// Doing so instructs screen readers to not read out the [value]. ¿ °ˆÅ7¿ £$Å/// Whether the [value] is coming from a field that supports multiline text
/// editing.
///
/// This option is only meaningful when [textField] is true to indicate
/// whether it's a single-line or multiline text field.
///
/// This option is null when [textField] is false. ¿ £2Å—¿ §¯Å£/// If non-null, whether the node corresponds to the root of a subtree for
/// which a route name should be announced.
///
/// Generally, this is set in combination with
/// [SemanticsConfiguration.explicitChildNodes], since nodes with this flag
/// are not considered focusable by Android or iOS.
///
/// See also:
///
///  * [SemanticsFlag.scopesRoute] for a description of how the announced
///    value is selected. ¿ •ÄŒ¿ •ÃÄ≠/// If non-null, whether the node contains the semantic label for a route.
///
/// See also:
///
///  * [SemanticsFlag.namesRoute] for a description of how the name is used. ¿ •€Ä¨¿ ¶ÇÄê/// If non-null, whether the node represents an image.
///
/// See also:
///
///  * [SemanticsFlag.isImage], for the flag this setting controls. ¿ ¶åÉ¢¿ ™$Éi/// If non-null, whether the node should be considered a live region.
///
/// A live region indicates that updates to semantics node are important.
/// Platforms may use this information to make polite announcements to the
/// user to inform them of updates to this node.
///
/// An example of a live region is a [SnackBar] widget. On Android and iOS,
/// live region causes a polite announcement to be generated automatically,
/// even if the widget does not have accessibility focus. This announcement
/// may not be spoken if the OS accessibility services are already
/// announcing something else, such as reading the label of a focused widget
/// or providing a system announcement.
///
/// See also:
///
///  * [SemanticsFlag.isLiveRegion], the semantics flag this setting controls.
///  * [SemanticsConfiguration.liveRegion], for a full description of a live region. ¿ ™3Åg¿ ´åÅ=/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [textField] is true. Defaults to null,
/// which means no limit is imposed on the text field. ¿ ´üÅS¿ ¨‡Å%/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [textField] is true. Must be set when
/// [maxValueLength] is set. ¿ ¨˜Çä¿ ØwÇW/// {@template flutter.semantics.SemanticsProperties.identifier}
/// Provides an identifier for the semantics node in native accessibility hierarchy.
///
/// This value is not exposed to the users of the app.
///
/// It's usually used for UI testing with tools that work by querying the
/// native accessibility, like UIAutomator, XCUITest, or Appium.
///
/// On Android, this is used for `AccessibilityNodeInfo.setViewIdResourceName`.
/// It'll be appear in accessibility hierarchy as `resource-id`.
///
/// On iOS, this will set `UIAccessibilityElement.accessibilityIdentifier`.
/// {@endtemplate} ¿ ØÜÇ¿ ±üÅ/// Provides a textual description of the widget.
///
/// If a label is provided, there must either by an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [label] and [attributedLabel]. One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.label] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedLabel] for an [AttributedString] version of this property. ¿ ±©ÇV¿ ≥Ç/// Provides an [AttributedString] version of textual description of the widget.
///
/// If a [attributedLabel] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [label] and [attributedLabel]. One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedLabel] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [label] for a plain string version of this property. ¿ ¥Ç+¿ ∂*Å˝/// Provides a textual description of the value of the widget.
///
/// If a value is provided, there must either by an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [value] and [attributedValue], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.value] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedLabel] for an [AttributedString] version of this property. ¿ ∂4Çi¿ ∏éÇ%/// Provides an [AttributedString] version of textual description of the value
/// of the widget.
///
/// If a [attributedValue] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [value] and [attributedValue], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [value] for a plain string version of this property. ¿ ∏¢Ç◊¿ ªkÇö/// The value that [value] or [attributedValue] will become after a
/// [SemanticsAction.increase] action has been performed on this widget.
///
/// If a value is provided, [onIncrease] must also be set and there must
/// either be an ambient [Directionality] or an explicit [textDirection]
/// must be provided.
///
/// Callers must not provide both [increasedValue] and
/// [attributedIncreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.increasedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [attributedIncreasedValue] for an [AttributedString] version of this
///    property. ¿ ª~Ç˝¿ æcÇÆ/// The [AttributedString] that [value] or [attributedValue] will become after
/// a [SemanticsAction.increase] action has been performed on this widget.
///
/// If a [attributedIncreasedValue] is provided, [onIncrease] must also be set
/// and there must either be an ambient [Directionality] or an explicit
/// [textDirection] must be provided.
///
/// Callers must not provide both [increasedValue] and
/// [attributedIncreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedIncreasedValue] for a description of
///    how this is exposed in TalkBack and VoiceOver.
///  * [increasedValue] for a plain string version of this property. ¿ æÄÇ◊¿ ¡IÇö/// The value that [value] or [attributedValue] will become after a
/// [SemanticsAction.decrease] action has been performed on this widget.
///
/// If a value is provided, [onDecrease] must also be set and there must
/// either be an ambient [Directionality] or an explicit [textDirection]
/// must be provided.
///
/// Callers must not provide both [decreasedValue] and
/// [attributedDecreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.decreasedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [attributedDecreasedValue] for an [AttributedString] version of this
///    property. ¿ ¡\É	¿ ƒMÇ∫/// The [AttributedString] that [value] or [attributedValue] will become after
/// a [SemanticsAction.decrease] action has been performed on this widget.
///
/// If a [attributedDecreasedValue] is provided, [onDecrease] must also be set
/// and there must either be an ambient [Directionality] or an explicit
/// [textDirection] must be provided.
///
/// Callers must not provide both [decreasedValue] and
/// [attributedDecreasedValue], One or both must be null/// provided.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedDecreasedValue] for a description of
///    how this is exposed in TalkBack and VoiceOver.
///  * [decreasedValue] for a plain string version of this property. ¿ ƒjÇI¿ ∆ØÇ/// Provides a brief textual description of the result of an action performed
/// on the widget.
///
/// If a hint is provided, there must either be an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [hint] and [attributedHint], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.hint] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedHint] for an [AttributedString] version of this property. ¿ ∆∏ÇÅ¿ …+Ç>/// Provides an [AttributedString] version of brief textual description of the
/// result of an action performed on the widget.
///
/// If a [attributedHint] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [hint] and [attributedHint], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedHint] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [hint] for a plain string version of this property. ¿ …>Å©¿  ‡ÅÉ/// Provides a textual description of the widget's tooltip.
///
/// In Android, this property sets the `AccessibilityNodeInfo.setTooltipText`.
/// In iOS, this property is appended to the end of the
/// `UIAccessibilityElement.accessibilityLabel`.
///
/// If a [tooltip] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided. ¿  ÏÅ≤¿ ÃëÅv/// Provides hint values which override the default hints on supported
/// platforms.
///
/// On Android, If no hint overrides are used then default [hint] will be
/// combined with the [label]. Otherwise, the [hint] will be ignored as long
/// as there as at least one non-null hint override.
///
/// On iOS, these are always ignored and the default [hint] is used instead. ¿ Ã£Ä√¿ ÕYÄò/// The reading direction of the [label], [value], [increasedValue],
/// [decreasedValue], and [hint].
///
/// Defaults to the ambient [Directionality]. ¿ ÕkÅI¿ Œ≠Å/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android). ¿ ŒπÇü¿ —JÇ`/// A tag to be applied to the child [SemanticsNode]s of this widget.
///
/// The tag is added to all child [SemanticsNode]s that pass through the
/// [RenderObject] corresponding to this widget while looking to be attached
/// to a parent SemanticsNode.
///
/// Tags are used to communicate to a parent SemanticsNode that a child
/// SemanticsNode was passed through a particular RenderObject. The parent can
/// use this information to determine the shape of the semantics tree.
///
/// See also:
///
///  * [SemanticsConfiguration.addTagForChildren], to which the tags provided
///    here will be passed. ¿ —]Ç¬¿ ‘Çé/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android *may* trigger this
/// action by double-tapping the screen while an element is focused.
///
/// Note: different OSes or assistive technologies may decide to interpret
/// user inputs differently. Some may simulate real screen taps, while others
/// may call semantics tap. One way to handle taps properly is to provide the
/// same handler to both gesture tap and semantics tap. ¿ ‘$ÇÁ¿ ◊ Ç´/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android *may* trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap.
///
/// Note: different OSes or assistive technologies may decide to interpret
/// user inputs differently. Some may simulate real long presses, while others
/// may call semantics long press. One way to handle long press properly is to
/// provide the same handler to both gesture long press and semantics long
/// press. ¿ ◊Çe¿ ŸiÇ./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ŸzÇk¿ €ÿÇ3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided. ¿ €ÍÇ]¿ ﬁ=Ç(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ﬁLÇf¿ ‡¶Ç//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ‡∑Ç:¿ ‚ÁÇ/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If a [value] is set, [increasedValue] must also be provided and
/// [onIncrease] must ensure that [value] will be set to [increasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button. ¿ ‚ˆÇ>¿ Â*Ç	/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If a [value] is set, [decreasedValue] must also be provided and
/// [onDecrease] must ensure that [value] will be set to [decreasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button. ¿ Â9Å¿ ÊGÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ ÊRÅ$¿ ÁqÄ¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ Á{Å¿ ËâÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ ËïÅr¿ ÈÈÅ,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field. ¿ ÍÅw¿ ÎdÅ0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ ÎàÅf¿ Ï’Å%/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ ÏÛÅh¿ ÓAÅ&/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ Ó`Åì¿ ÔÂÅ[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu. ¿ Ô¯Å?¿ Ò.Å/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking "type <text>" to
/// their Android devices. ¿ Ò<Éù¿ ÙæÉK/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus. ¿ ÙﬁÉè¿ ¯RÉ=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus. ¿ ¯rÅS¿ ˘ºÅ'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option. ¿ ˘ Ç7¿ ˚ÎÅ‹/// A map from each supported [CustomSemanticsAction] to a provided handler.
///
/// The handler associated with each custom action is called whenever a
/// semantics action of type [SemanticsAction.customAction] is received. The
/// provided argument will be an identifier used to retrieve an instance of
/// a custom action which can then retrieve the correct handler from this map.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions.  ¿ ¸áL¿ ¸  ¿ ¸+&¿ ¸H  ¿ ¸¿ ¸¿VU¿i   ¿V¿W¿ ÅÔ¿ Å¿ê¿ –f¿ Å3/// A node that represents some semantic data.
///
/// The semantics tree is maintained during the semantics phase of the pipeline
/// (i.e., during [PipelineOwner.flushSemantics]), which happens after
/// compositing. The semantics tree is then uploaded into the engine for use
/// by assistive technology. ¿˘Å ¿Ä¿ç~/// Creates a semantic node.
///
/// Each semantic node has a unique identifier that is assigned when the node
/// is created.¿î¿ö  ¿¢¿±  ¿…¿≈¿À¿Ÿ¿⁄¿Ú¿‰¿Ù¿Å:¿ö¿õ¿üÄÅ/// Creates a semantic node to represent the root of the semantics tree.
///
/// The root node is assigned an identifier of zero.¿¶¿¨  ¿¥¿√  ¿‘¿Ì  ¿˛¿˙¿ ¿¿
¿4¿	ÖC¿	ñ ¿	≈¿	Ω¿	√¿	ø¿	æ¿	¡¿	«¿	Õ¿	ÿ ¿	Í¿
ÑÄ«¿HÄ∞/// Uniquely identifies this node in the list of sibling nodes.
///
/// Keys are used during the construction of the semantics tree. They are not
/// transferred to the engine. ¿1¿5  ¿=!¿Q  ¿°¿™  ¿‹¿· ¿È¿Ì¿Ó¿∞Én¿É./// The semantic clip from an ancestor that was applied to this node.
///
/// Expressed in the coordinate system of the node. May be null if no clip has
/// been applied.
///
/// Descendant [SemanticsNode]s that are positioned outside of this rect will
/// be excluded from the semantics tree. Descendant [SemanticsNode]s that are
/// overlapping with this rect, but are outside of [parentPaintClipRect] will
/// be included in the tree, but they will be marked as hidden because they
/// are assumed to be not visible on screen.
///
/// If this rect is null, all descendant [SemanticsNode]s outside of
/// [parentPaintClipRect] will be excluded from the tree.
///
/// If this rect is non-null it has to completely enclose
/// [parentPaintClipRect]. If [parentPaintClipRect] is null this property is
/// also null. ¿#Çò¿®Çd/// The paint clip from an ancestor that was applied to this node.
///
/// Expressed in the coordinate system of the node. May be null if no clip has
/// been applied.
///
/// Descendant [SemanticsNode]s that are positioned outside of this rect will
/// either be excluded from the semantics tree (if they have no overlap with
/// [parentSemanticsClipRect]) or they will be included and marked as hidden
/// (if they are overlapping with [parentSemanticsClipRect]).
///
/// This rect is completely enclosed by [parentSemanticsClipRect].
///
/// If this rect is null [parentSemanticsClipRect] also has to be null. ¿¿Ç‰¿ëÇÆ/// The elevation adjustment that the parent imposes on this node.
///
/// The [elevation] property is relative to the elevation of the parent
/// [SemanticsNode]. However, as [SemanticsConfiguration]s from various
/// ascending [RenderObject]s are merged into each other to form that
/// [SemanticsNode] the parent‚Äôs elevation may change. This requires an
/// adjustment of the child‚Äôs relative elevation which is represented by this
/// value.
///
/// The value is rarely accessed directly. Instead, for most use cases the
/// [elevation] value should be used, which includes this adjustment.
///
/// See also:
///
///  * [elevation], the actual elevation of this [SemanticsNode]. ¿©Å}¿Å^/// The index of this node within the parent's list of semantic children.
///
/// This includes all semantic nodes, not just those currently in the
/// child list. For example, if a scrollable has five children but the first
/// two are not visible (and thus not included in the list of children), then
/// the index of the last node will still be 4. ¿| ¿Å ¿ó¿ (#¿ - ¿ F¿#0U¿#5 ¿#X¿#e¿#f¿#öh¿#˘G/// Contains the children in inverse hit test order (i.e. paint order). ¿$Ä‡¿$—Ä™/// A snapshot of `newChildren` passed to [_replaceChildren] that we keep in
/// debug mode. It supports the assertion that user does not mutate the list
/// of children. ¿4Œ¿4” ¿4€¿9◊¿9Á  ¿;ê¿;ü  ¿<È¿<Ì ¿<ˆ¿H‰¿HÈ ¿HÚ¿N”N¿O  ¿O¿O¿O¿O%h¿ON ¿Oh¿Ou¿Ov¿P
1¿P ¿P¿P,¿P-¿P@Ä¬¿P˛Ä¢/// The [SemanticsTag]s this node is tagged with.
///
/// Tags are used during the construction of the semantics tree. They are not
/// transferred to the engine. ¿QÄ!¿QÑ ¿Qç¿Qö¿Qõ¿Ré-¿Rï ¿R£¿R∞¿R±¿TöA¿T´ ¿Tæ¿TÀ¿TÃ¿VÍA¿V˚ ¿W¿W¿W¿ZªS¿ZÃ ¿ZË¿Zı¿Zˆ¿^ûS¿^Ø ¿^À¿^ÿ¿^Ÿ¿a?¿a) ¿a;¿aH¿aI¿aÚ'¿a˘ ¿b¿b¿b¿dq+¿dx ¿dÖ¿dí¿dì¿ló+¿lû ¿l´¿l∏¿lπ¿m`&¿mx  ¿n);¿n8 ¿nI¿nV¿nW¿o¿¿o“  ¿pí¿p°  ¿qJ¿qP  ¿r>¿rC  ¿r«¿rÃ  ¿tæ¿t∆  ¿v¿v&  ¿w~¿wÜ  ¿yy¿y~  ¿{¿{"  ¿|±¿|∂  ¿}!L¿}E ¿}U¿}k¿}l¿£&6¿£= ¿£P¿£Y¿£[¿£Z¿£`G¿£w ¿£õ¿£§¿£¶¿£•¿£´G¿£ƒ ¿£⁄¿£¿£Ò-¿PÅﬁ¿$Åπ/// The unique identifier for this node.
///
/// The root node has an id of zero. Other nodes are given a unique id
/// when they are attached to a [SemanticsOwner]. If they are detached, their
/// ids are invalid and should not be used.
///
/// In rare circumstances, id may change if this node is detached and
/// re-attached to the [SemanticsOwner]. This should only happen when the
/// application has generated too many semantics nodes.   ¿rÅ,¿ÜÄ¸/// The transform from this node's coordinate system to its parent's coordinate system.
///
/// By default, the transform is null, which represents the identity
/// transformation (i.e., that this node has the same coordinate system as its
/// parent).   ¿∏Ä«¿º  ¿∆¿–   ¿ÉV¿À</// The bounding box for this node in its coordinate system.   ¿ˆÄ∂¿˙  ¿ˇ
¿   ¿+Ç)¿!Åÿ/// Whether the node is invisible.
///
/// A node whose [rect] is outside of the bounds of the screen and hence not
/// reachable for users is considered invisible if its semantic information
/// is not merged into a (partially) visible parent as indicated by
/// [isMergedIntoParent].
///
/// An invisible node can be safely dropped from the semantic tree without
/// loosing semantic information that is relevant for describing the content
/// currently shown on screen.   ¿fÅ¿=Ä≈/// Whether this node merges its semantic information into an ancestor node.
///
/// This value indicates whether this node has any ancestors with
/// [mergeAllDescendantsIntoThisNode] set to true.   ¿°ÅÑ¿ıÅ>/// Whether the user can interact with this node in assistive technologies.
///
/// This node can still receive accessibility focus even if this is true.
/// Setting this to true prevents the user from activating pointer related
/// [SemanticsAction]s, such as [SemanticsAction.tap] or
/// [SemanticsAction.longPress].   ¿ OÄ†¿ S  ¿ i
¿ o   ¿ ÛÅç¿"3Å$/// Whether this node is taking part in a merge of semantic information.
///
/// This returns true if the node is either merged into an ancestor node or if
/// decedent nodes are merged into this node.
///
/// See also:
///
///  * [isMergedIntoParent]
///  * [mergeAllDescendantsIntoThisNode]   ¿"ÑÄ©¿"ÈY/// Whether this node and all of its descendants should be treated as one logical entity.   ¿4Yr¿4ù8/// Whether this node has a non-zero number of children.   ¿4Âi¿5)/// The number of children this node has.   ¿9"Ä≤¿9ƒÄá/// The owner for this node (null if unattached).
///
/// The entire semantics tree that this node belongs to will have the same owner.   ¿9ÚÄÙ¿:ÀÄ≈/// Whether the semantics tree this node belongs to is attached to a [SemanticsOwner].
///
/// This becomes true during the call to [attach].
///
/// This becomes false during the call to [detach].   ¿:ÍÄ£¿;{w/// The parent of this node in the semantics tree.
///
/// The [parent] of the root node in the semantics tree is null.   ¿;´Å;¿<÷Å/// The depth of this node in the semantics tree.
///
/// The depth of nodes in a tree monotonically increases as you traverse down
/// the tree.  There's no guarantee regarding depth between siblings.
///
/// The depth is used to ensure that nodes are processed in depth order.   ¿Oíu¿Oö    ¿R&e¿Rq=/// {@macro flutter.semantics.SemanticsProperties.identifier}   ¿R¿Ä’¿StÄû/// A textual description of this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedLabel].   ¿SôÄ˛¿TsÄ∫/// A textual description of this node in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [label], which exposes just the raw text.   ¿T‡ÄÍ¿U©Ä≥/// A textual description for the current value of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedValue].   ¿UŒÅ¿V√Ä”/// A textual description for the current value of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [value], which exposes just the raw text.   ¿W0Å£¿X†ÅR/// The value that [value] will have after a [SemanticsAction.increase] action
/// has been performed.
///
/// This property is only valid if the [SemanticsAction.increase] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedIncreasedValue].   ¿X◊Å·¿ZÇÅÉ/// The value in [AttributedString] format that [value] or [attributedValue]
/// will have after a [SemanticsAction.increase] action has been performed.
///
/// This property is only valid if the [SemanticsAction.increase] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// See also [increasedValue], which exposes just the raw text.   ¿[Å£¿\ÉÅR/// The value that [value] will have after a [SemanticsAction.decrease] action
/// has been performed.
///
/// This property is only valid if the [SemanticsAction.decrease] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedDecreasedValue].   ¿\∫Å·¿^eÅÉ/// The value in [AttributedString] format that [value] or [attributedValue]
/// will have after a [SemanticsAction.decrease] action has been performed.
///
/// This property is only valid if the [SemanticsAction.decrease] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// See also [decreasedValue], which exposes just the raw text.   ¿^ˆÄˆ¿_ÕÄ¡/// A brief description of the result of performing an action on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedHint].   ¿_Å%¿`ÛÄ·/// A brief description of the result of performing an action on this node
/// in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [hint], which exposes just the raw text.   ¿a\Äì¿a€m/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection].   ¿bÇP¿dVÇ/// The elevation along the z-axis at which the [rect] of this [SemanticsNode]
/// is located above its parent.
///
/// The value is relative to the parent's [elevation]. The sum of the
/// [elevation]s of all ancestor node plus this value determines the absolute
/// elevation of this [SemanticsNode].
///
/// See also:
///
///  * [thickness], which describes how much space in z-direction this
///    [SemanticsNode] occupies starting at this [elevation].
///  * [elevationAdjustment], which has been used to calculate this value.   ¿d°áÛ¿l|áq/// Describes how much space the [SemanticsNode] takes up along the z-axis.
///
/// A [SemanticsNode] represents multiple [RenderObject]s, which can be
/// located at various elevations in 3D. The [thickness] is the difference
/// between the absolute elevations of the lowest and highest [RenderObject]
/// represented by this [SemanticsNode]. In other words, the thickness
/// describes how high the box is that this [SemanticsNode] occupies in three
/// dimensional space. The two other dimensions are defined by [rect].
///
/// {@tool snippet}
/// The following code stacks three [PhysicalModel]s on top of each other
/// separated by non-zero elevations.
///
/// [PhysicalModel] C is elevated 10.0 above [PhysicalModel] B, which in turn
/// is elevated 5.0 above [PhysicalModel] A. The side view of this
/// constellation looks as follows:
///
/// ![A diagram illustrating the elevations of three PhysicalModels and their
/// corresponding SemanticsNodes.](https://flutter.github.io/assets-for-api-docs/assets/semantics/SemanticsNode.thickness.png)
///
/// In this example the [RenderObject]s for [PhysicalModel] C and B share one
/// [SemanticsNode] Y. Given the elevations of those [RenderObject]s, this
/// [SemanticsNode] has a [thickness] of 10.0 and an elevation of 5.0 over
/// its parent [SemanticsNode] X.
/// ```dart
/// PhysicalModel( // A
///   color: Colors.amber,
///   child: Semantics(
///     explicitChildNodes: true,
///     child: const PhysicalModel( // B
///       color: Colors.brown,
///       elevation: 5.0,
///       child: PhysicalModel( // C
///         color: Colors.cyan,
///         elevation: 10.0,
///         child: Placeholder(),
///       ),
///     ),
///   ),
/// )
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [elevation], which describes the elevation of the box defined by
///    [thickness] and [rect] relative to the parent of this [SemanticsNode].   ¿l«Äñ¿m=U/// Provides hint values which override the default hints on supported
/// platforms.   ¿mãÄõ¿nc/// The reading direction for [label], [value], [hint], [increasedValue], and
/// [decreasedValue].   ¿niÅT¿o©Å/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android).   ¿oﬂÄ∞¿pox/// The currently selected text (or the position of the cursor) within [value]
/// if this node represents a text field.   ¿p¥Äì¿q+h/// If this node represents a text field, this indicates whether or not it's
/// a multiline text field.   ¿qaÄ⁄¿rÄ¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null.   ¿rYk¿r®C/// The index of the first visible semantic child of a scroll node.   ¿r›Åﬁ¿tôÅõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken.   ¿t⁄ÅA¿u˜Å /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken.   ¿v;Å@¿wWÄˇ/// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent] from where this value is usually taken.   ¿wõÅ€¿yTÅô/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.
///
/// If this value is non-null, the SemanticsNode must not have any children
/// as those would be replaced by the semantics nodes of the referenced
/// platform view.
///
/// See also:
///
///  * [AndroidView], which is the platform view for Android.
///  * [UiKitView], which is the platform view for iOS.   ¿yíÅà¿z¯ÅL/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Defaults
/// to null, which means no limit is imposed on the text field.   ¿{6Åx¿|ÑÅ4/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Must be
/// set when [maxValueLength] is set.   ¿	ÔÄë¿	˙    ¿$Ïèi¿$Ò  ¿%¿%   ¿5RÅº¿6AÄﬂ/// Visits the immediate children of this node.
///
/// This function calls visitor for each immediate child until visitor returns
/// false. Returns true if all the visitor calls returned true, otherwise
/// returns false. ¿6O¿6e   ¿7Ç¿8ÄÔ/// Visit all the descendants of this node.
///
/// This function calls visitor for each descendant in a pre-order traversal
/// until visitor returns false. Returns true if all the visitor calls
/// returned true, otherwise returns false. ¿8#¿89   ¿<¸Ä∏¿=  ¿=¿=   ¿=∏D¿=Ω    ¿> Ç¿>  ¿>&¿>5   ¿@`¿@    ¿@kÅ∆¿@p  ¿@|¿@ã   ¿B5Äø¿B:  ¿BE¿BT   ¿B¯Çâ¿CG2/// Mark this node as attached to the given owner. ¿CN¿C^  ¿C-¿C.¿EÖÉD¿E–./// Mark this node as detached from its owner.  ¿E∂¿E∑¿H˚Ä√¿I     ¿I¬ÑÒ¿I«  ¿IÒ¿J	   ¿Qu¿Q:+/// Whether this node is tagged with `tag`. ¿QC¿QQ   ¿Q¶|¿QÍ</// Whether this node currently has a given [SemanticsFlag]. ¿QÚ¿R   ¿|ŒO¿|”  ¿|Â¿|ˆ   ¿}råZ¿aÅ◊/// Reconfigures the properties of this object to describe the configuration
/// provided in the `config` argument and the children listed in the
/// `childrenInInversePaintOrder` argument.
///
/// The arguments may be null; this represents an empty configuration (all
/// values at their defaults, no children).
///
/// No reference is kept to the [SemanticsConfiguration] object, but the child
/// list is used as-is and should therefore not be changed after this call. ¿r'¿î  ¿ü0¿µ   ¿â—òı¿äÌÅ/// Returns a summary of the semantics for this node.
///
/// If this node has [mergeAllDescendantsIntoThisNode], then the returned data
/// includes the information from this node's descendants. Otherwise, the
/// returned data matches the data on this node.   ¿¢ X¿¢›    ¿£˜åq¿£¸  ¿§	¿§!  ¿§)'¿§3   ¿∞lâ¿¿∞–M/// Builds a new list made of [_children] sorted in semantic traversal order.   ¿∫0Åx¿ªÄ‹/// Sends a [SemanticsEvent] associated with this [SemanticsNode].
///
/// Semantics events should be sent to inform interested parties (like
/// the accessibility system of the operating system) about changes to the UI. ¿ª$¿ª4   ¿ª¨ÄŒ¿ª±  ¿ª«¿ªÿ   ¿º~X¿ºë   ¿º~¿º¿º⁄ëa¿ºÎ  ¿ºˇ&¿Ω  ¿º⁄¿º€¿Œ?ÇW¿œ Ä≈/// Returns a string representation of this node and its descendants.
///
/// The order in which the children of the [SemanticsNode] will be printed is
/// controlled by the [childOrder] parameter. ¿œ3¿œ;  ¿œR¿œ[  ¿œp0¿œÅ  ¿œ¶K¿œø  	¿œ¿œ¿œJ¿œã¿œö¿œõ¿œÀ¿œ‚¿œ„¿–öÅc¿–∂  ¿–Œ¿–◊  ¿–‡9¿–˜  ¿—K¿—8  ¿–ö¿–õ¿–˛¿—¿—¿—D¿—[¿—\¿“Å3¿“#  ¿“;K¿“T  ¿“¿“¿“`¿“w¿“x¿”8Åº¿”õL/// Returns the list of direct children of this node in the specified order. ¿”¥"¿”Õ    ¿‘¯Ö∑¿◊Ç/// An edge of a box, such as top, bottom, left or right, used to compute
/// [SemanticsNode]s that overlap vertically or horizontally.
///
/// For computing horizontal overlap in an LTR setting we create two [_BoxEdge]
/// objects for each [SemanticsNode]: one representing the left edge (marked
/// with [isLeadingEdge] equal to true) and one for the right edge (with [isLeadingEdge]
/// equal to false). Similarly, for vertical overlap we also create two objects
/// for each [SemanticsNode], one for the top and one for the bottom edge. ¿◊H} ¿◊H¿◊P ¿◊W¿◊f  ¿◊x¿◊á  ¿◊í¿◊°  ¿◊≠¿◊≥¿◊√¿◊¥¿◊∫¿◊ª¿◊…ÅΩ¿ŸyÅí/// True if the edge comes before the seconds edge along the traversal
/// direction, and false otherwise.
///
/// This field is never null.
///
/// For example, in LTR traversal the left edge's [isLeadingEdge] is set to true,
/// the right edge's [isLeadingEdge] is set to false. When considering vertical
/// ordering of boxes, the top edge is the start edge, and the bottom edge is
/// the end edge. ¿Ÿã¿⁄g/// The offset from the start edge of the parent [SemanticsNode] in the
/// direction of the traversal. ¿⁄?¿⁄J$/// The node whom this edge belongs.  ¿⁄SZ¿⁄c  ¿⁄m¿⁄w  ¿⁄S¿⁄T ¿⁄±ïÍ¿€âÄ—/// A group of [nodes] that are disjoint vertically or horizontally from other
/// nodes that share the same [SemanticsNode] parent.
///
/// The [nodes] are sorted among each other separately from other nodes. ¿€Ã[ ¿€Ã¿€ﬂ ¿€Ê¿€ı  ¿‹¿‹   ¿‹+Ä˚¿›Äÿ/// The offset from the start edge of the parent [SemanticsNode] in the
/// direction of the traversal.
///
/// This value is equal to the [_BoxEdge.offset] of the first node in the
/// [nodes] list being considered. ¿›+!¿›?  ¿›Qe¿›ù//// The nodes that are sorted among each other.¿›¥¿›µ¿›•¿›≥¿›¶ ¿›ªo¿›À  ¿›’¿›Í  ¿›ª¿›º¿ﬁ.ÜR¿ﬂÄÀ/// Sorts this group assuming that [nodes] belong to the same vertical group.
///
/// This method breaks up this group into horizontal [_SemanticsSortGroup]s
/// then sorts them using [sortedWithinKnot].   ¿‰Ñå¿Á‹É%/// Sorts [nodes] where nodes intersect both vertically and horizontally.
///
/// In the special case when [nodes] contains one or less nodes, this method
/// returns [nodes] unchanged.
///
/// This method constructs a graph, where vertices are [SemanticsNode]s and
/// edges are "traversed before" relation between pairs of nodes. The sort
/// order is the topological sorting of the graph, with the original order of
/// [nodes] used as the tie breaker.
///
/// Whether a node is traversed before another node is determined by the
/// vector that connects the two nodes' centers. If the vector "points to the
/// right or down", defined as the [Offset.direction] being between `-pi/4`
/// and `3*pi/4`), then the semantics node whose center is at the end of the
/// vector is said to be traversed after.    ¿˘Ñ]¿˙mÅd/// The implementation of [Comparable] that implements the ordering of
/// [SemanticsNode]s in the accessibility traversal.
///
/// [SemanticsNode]s are sorted prior to sending them to the engine side.
///
/// This implementation considers a [node]'s [sortKey] and its position within
/// the list of its siblings. [sortKey] takes precedence over position. ¿˙Æ` ¿˙Æ¿˙¿ ¿˙«¿˙÷  ¿˙ﬂ¿˙Â  ¿˙Ò¿˚    ¿˚Q¿˚_6/// The node whose position this sort node determines. ¿˚hÄµ¿¸Äç/// Determines the position of this node among its siblings.
///
/// Sort keys take precedence over other attributes, such as
/// [position]. ¿¸"l¿¸ÜU/// Position within the list of siblings as determined by the default sort
/// order.  ¿¸ìÄ ¿¸£  ¿¸≠¿¸¡  ¿¸ì¿¸î ¿˝a®ë¿˛òÅ0/// Owns [SemanticsNode] objects and notifies listeners of changes to the
/// render tree semantics.
///
/// To listen for semantic updates, call [SemanticsBinding.ensureSemantics] or
/// [PipelineOwner.ensureSemantics] to obtain a [SemanticsHandle]. This will
/// create a [SemanticsOwner] if necessary. ¿˛¬ÅÙ ¿ˇ¿ˇ$Q/// Creates a [SemanticsOwner] that manages zero or more [SemanticsNode] objects.¿ˇ+¿ˇ:   ¿ ∫Å∂¿_Åx/// The [onSemanticsUpdate] callback is expected to dispatch [SemanticsUpdate]s
/// to the [FlutterView] that is associated with this [PipelineOwner] and/or
/// [SemanticsOwner].
///
/// A [SemanticsOwner] calls [onSemanticsUpdate] during [sendSemanticsUpdate]
/// after the [SemanticsUpdate] has been build, but before the [SemanticsOwner]'s
/// listeners have been notified. ¿t8¿ç ¿™¿´¿õ¿©¿ú¿∞=¿Œ ¿Î¿Ï¿◊¿Í¿ÿ¿›¿Ò;¿
 ¿*¿+¿¿)¿¿1Äü¿±f/// The root node of the semantics tree, if any.
///
/// If the semantics tree is empty, returns null.   ¿‘Ä˛¿Â   ¿‘¿’¿÷îÚ¿3/// Update the semantics using [onSemanticsUpdate].   ¿ÃÇO¿‰  ¿¿	  ¿¿   ¿Ç“¿XÅ%/// Asks the [SemanticsNode] with the given id to perform the given action.
///
/// If the [SemanticsNode] has not indicated that it can perform the action,
/// this function does nothing.
///
/// If the given `action` requires arguments they need to be passed in via
/// the `args` parameter. ¿f¿k  ¿n¿  ¿à¿ë   ¿ıÑ.¿  ¿3¿B  ¿G¿O  ¿X¿i   ¿#'Çç¿$dÅ)/// Asks the [SemanticsNode] at the given position to perform the given action.
///
/// If the [SemanticsNode] has not indicated that it can perform the action,
/// this function does nothing.
///
/// If the given `action` requires arguments they need to be passed in via
/// the `args` parameter. ¿$t¿$|  ¿$Ö¿$ñ  ¿$ü¿$®   ¿%∏8¿%À   ¿%∏¿%π ¿%Ù¿ ·)¿&≤Ä∑/// Describes the semantic information associated with the owning
/// [RenderObject].
///
/// The information provided in the configuration is used to generate the
/// semantics tree.  7¿)µ ¿)∫ ¿)–¿*]É¿-SÇ‘/// Whether to block pointer related user actions for the rendering subtree.
///
/// Setting this to true will prevent users from interacting with the
/// rendering object produces this semantics configuration and its subtree
/// through pointer-related [SemanticsAction]s in assistive technologies.
///
/// The [SemanticsNode] created from this semantics configuration is still
/// focusable by assistive technologies. Only pointer-related
/// [SemanticsAction]s, such as [SemanticsAction.tap] or its friends, are
/// blocked.
///
/// If this semantics configuration is merged into a parent semantics node,
/// only the [SemanticsAction]s from this rendering object and the rendering
/// objects in the subtree are blocked.¿-k¿-uÉ6¿0ëÇ¸/// Whether the configuration forces all children of the owning [RenderObject]
/// that want to contribute semantic information to the semantics tree to do
/// so in the form of explicit [SemanticsNode]s.
///
/// When set to false children of the owning [RenderObject] are allowed to
/// annotate [SemanticsNode]s of their parent with the semantic information
/// they want to contribute to the semantic tree.
/// When set to true the only way for children of the owning [RenderObject]
/// to contribute semantic information to the semantic tree is to introduce
/// new explicit [SemanticsNode]s to the tree.
///
/// This setting is often used in combination with [isSemanticBoundary] to
/// create semantic boundaries that are either writable or not for children.¿0¶¿0∞É|¿3˘É%/// Whether the owning [RenderObject] makes other [RenderObject]s previously
/// painted within the same semantic boundary unreachable for accessibility
/// purposes.
///
/// If set to true, the semantic information for all siblings and cousins of
/// this node, that are earlier in a depth-first pre-order traversal, are
/// dropped from the semantics tree up until a semantic boundary (as defined
/// by [isSemanticBoundary]) is reached.
///
/// If [isSemanticBoundary] and [isBlockingSemanticsOfPreviouslyPaintedNodes]
/// is set on the same node, all previously painted siblings and cousins up
/// until the next ancestor that is a semantic boundary are dropped.
///
/// Paint order as established by [RenderObject.visitChildrenForSemantics] is
/// used to determine if a node is previous to this one.¿4'¿5à¿5ç ¿5°¿5´Å.¿6£Ä∏/// The actions (with associated action handlers) that this configuration
/// would like to contribute to the semantics tree.
///
/// See also:
///
///  * [addAction] to add an action.¿6◊¿6ÿ¿6Æ¿6÷¿6Ø¿6¿¿7U¿7Y ¿7j¿?¿?  ¿AE¿AS  ¿Db¿Dp  ¿Fn¿F|  ¿Iä¿Iò  ¿L•¿L≥  ¿Oø¿OÕ  ¿R¡¿Rœ  ¿Uø¿UÕ  ¿WÅ¿Wè  ¿YB¿YP  ¿ZÚ¿[   ¿]u¿]É  ¿_Ω2¿_–  ¿b≈3¿bÿ  ¿e∫-¿eÕ  ¿hü.¿h≤  ¿kß$¿kº  ¿o ¿o0  ¿t*¿t  ¿x¢*¿x∞  ¿|qB¿|ó  ¿Ä‰¿Äˆ  ¿É¿É  ¿Ñk¿Ñp  ¿Ö®¿Ö≠  ¿Ü„¿ÜË  ¿â¿â  ¿ã3¿ã8  ¿ç¸-¿é ¿é$¿êèj¿ê∏ ¿ê˜¿ê¯¿ê“¿êˆ¿ê”¿êÍ¿ì±¿ì∏ ¿ì∆¿òü8¿ò∞ ¿ò√¿ò”¿ò÷¿ò‘¿† 8¿†1 ¿†D¿†T¿†W¿†U¿¶A¿¶, ¿¶H¿¶X¿¶[¿¶Y¿¨-A¿¨> ¿¨Z¿¨j¿¨m¿¨k¿±§7¿±µ ¿±«¿±◊¿±⁄¿±ÿ¿≤ˆ¿≤˝ ¿≥¿¥&¿¥  ¿µb¿µi ¿µv¿∑k¿∑r ¿∑¿øÈ¿ø¯  ¿‰ë¿‰†  ¿Á¿Á!  ¿Ë˘¿È  ¿Í‹¿Í‰  ¿Ìd#¿Ìw  ¿∑¿ª ¿ƒÄõ¿&ÔÇ√¿)àÇu/// Whether the [RenderObject] owner of this configuration wants to own its
/// own [SemanticsNode].
///
/// When set to true semantic information associated with the [RenderObject]
/// owner of this configuration or any of its descendants will not leak into
/// parents. The [SemanticsNode] generated out of this configuration will
/// act as a boundary.
///
/// Whether descendants of the owning [RenderObject] can add their semantic
/// information to the [SemanticsNode] introduced by this configuration
/// is controlled by [explicitChildNodes].
///
/// This has to be true if [isMergingSemanticsOfDescendants] is also true.   ¿)ŸÄÄ¿)›  ¿)
¿)ˆ   ¿4¶Äﬂ¿5_Äß/// Whether this configuration is empty.
///
/// An empty configuration doesn't contain any semantic information that it
/// wants to contribute to the semantics tree.   ¿6ﬁt¿6Ê    ¿: ÑÌ¿>˝Ñ¢/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen while an element is focused.
///
/// On Android prior to Android Oreo a double-tap on the screen while an
/// element with an [onTap] handler is focused will not call the registered
/// handler. Instead, Android will simulate a pointer down and up event at the
/// center of the focused element. Those pointer events will get dispatched
/// just like a regular tap with TalkBack disabled would: The events will get
/// processed by any [GestureDetector] listening for gestures in the center of
/// the focused element. Therefore, to ensure that [onTap] handlers work
/// properly on Android versions prior to Oreo, a [GestureDetector] with an
/// onTap handler should always be wrapping an element that defines a
/// semantic [onTap] handler. By default a [GestureDetector] will register its
/// own semantic [onTap] handler that follows this principle.   ¿?(q¿?,  ¿?2¿?A   ¿?ùÅ•¿A&Åf/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap.   ¿AcÄÉ¿Ag  ¿As¿AÇ   ¿AÍÇu¿DAÇ./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿DÅÄÜ¿DÖ  ¿Dí¿D°   ¿EÅ`¿FSÅ'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option.   ¿Fä}¿Fé  ¿Fò¿Fß   ¿GÇ|¿IgÇ3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿I™Äâ¿IÆ  ¿Iº¿IÀ   ¿J7Çk¿LàÇ(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿L¬ÄÄ¿L∆  ¿L—¿L‡   ¿MFÇv¿OûÇ//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿OﬁÄÜ¿O‚  ¿OÔ¿O˛   ¿PhÇV¿R§Ç/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If [this.value] is set, [increasedValue] must also be provided and
/// [onIncrease] must ensure that [this.value] will be set to
/// [increasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button.   ¿RﬁÄÄ¿R‚  ¿RÌ¿R¸   ¿SbÇZ¿U¢Ç/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If [this.value] is set, [decreasedValue] must also be provided and
/// [onDecrease] must ensure that [this.value] will be set to
/// [decreasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button.   ¿U‹ÄÄ¿U‡  ¿UÎ¿U˙   ¿V`Å¿WlÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿Wöt¿Wû  ¿W•¿W¥   ¿XÅ-¿Y/Ä¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿YZq¿Y^  ¿Yd¿Ys   ¿YœÅ ¿Z€ÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿[w¿[  ¿[¿['   ¿[áÅÎ¿]PÅ§/// The handler for [SemanticsAction.showOnScreen].
///
/// A request to fully show the semantics node on screen. For example, this
/// action might be send to a node in a scrollable list that is partially off
/// screen to bring it on screen.
///
/// For elements in a scrollable list the framework provides a default
/// implementation for this action and it is not advised to provide a
/// custom one via this setter.   ¿]ñÄå¿]ö  ¿]©¿]∏   ¿^&Åî¿_xÅ,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field.   ¿_ÛÅ1¿_˜  ¿`¿`*   ¿a(Åö¿b~Å0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿b¸Å4¿c   ¿c ¿c4   ¿d4ÅÉ¿eÅ%/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿eÎÅ'¿eÔ  ¿f	¿f   ¿gÅÜ¿hbÅ&/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿h—Å*¿h’  ¿h¿i   ¿iˇÅ•¿kÇÅ[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu.   ¿kœÅ˛¿k”  ¿k‚¿k¯   ¿m—ÅL¿oÅ/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking "type <text>" to
/// their Android devices.   ¿o>Å¿oB  ¿oL¿o]   ¿pMÉº¿sÕÉK/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿t:Ä≥¿t>  ¿tZ¿ti   ¿tÒÉÆ¿xcÉ=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿x–Ä≥¿x‘  ¿x¿xˇ   ¿yáÇÁ¿|2Çj/// A delegate that decides how to handle [SemanticsConfiguration]s produced
/// in the widget subtree.
///
/// The [SemanticsConfiguration]s are produced by rendering objects in the
/// subtree and want to merge up to their parent. This delegate can decide
/// which of these should be merged together to form sibling SemanticsNodes and
/// which of them should be merged upwards into the parent SemanticsNode.
///
/// The input list of [SemanticsConfiguration]s can be empty if the rendering
/// object of this semantics configuration is a leaf node or child rendering
/// objects do not contribute to the semantics.   ¿|∑Å¿|ª  ¿|◊+¿|˛   ¿~Çb¿ÄÕÇ!/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android).
///
/// Whether this sort key has an effect on the [SemanticsNode] sort order is
/// subject to how this configuration is used. For example, the [absorb]
/// method may decide to not use this key when it combines multiple
/// [SemanticsConfiguration] objects.   ¿Åy¿Å  ¿Å¿Å!   ¿ÅÅî¿ÇÛÅ^/// The index of this node within the parent's list of semantic children.
///
/// This includes all semantic nodes, not just those currently in the
/// child list. For example, if a scrollable has five children but the first
/// two are not visible (and thus not included in the list of children), then
/// the index of the last node will still be 4.   ¿É-]¿É1  ¿É?
¿ÉE   ¿ÉéÄ⁄¿ÑBÄ¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null.   ¿ÑÖÄú¿Ñâ  ¿Ñö
¿Ñ†   ¿Ö%ÄÄ¿ÖâV/// The index of the first visible scrollable child that contributes to
/// semantics.   ¿ÖΩÄç¿Ö¡  ¿ÖÕ
¿Ö”   ¿ÜNÄí¿Üæb/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.   ¿Ü˚Äñ¿Üˇ  ¿á
¿á   ¿áïÅ{¿àÓÅ?/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [isTextField] is true. Defaults to null,
/// which means no limit is imposed on the text field.   ¿â+Äñ¿â/  ¿â>
¿âD   ¿â≈Åk¿ãÅ'/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [isTextField] is true. Must be set when
/// [maxValueLength] is set.   ¿ãOÄ¢¿ãS  ¿ãf
¿ãl   ¿ãıÇ¿çµÅ¶/// Whether the semantic information provided by the owning [RenderObject] and
/// all of its descendants should be treated as one logical entity.
///
/// If set to true, the descendants of the owning [RenderObject]'s
/// [SemanticsNode] will merge their semantic information into the
/// [SemanticsNode] representing the owning [RenderObject].
///
/// Setting this to true requires that [isSemanticBoundary] is also true.   ¿é-Ä°¿é1  ¿éQ
¿éW   ¿é“Å∫¿êZÅN/// The handlers for each supported [CustomSemanticsAction].
///
/// Whenever a custom accessibility action is added to a node, the action
/// [SemanticsAction.customAction] is automatically added. A handler is
/// created which uses the passed argument to lookup the custom action
/// handler from this map and invoke it, if present.   ¿ê˝Å¿ë  ¿ë.¿ëB   ¿ìIe¿ìî=/// {@macro flutter.semantics.SemanticsProperties.identifier}   ¿ìÃc¿ì–  ¿ì€¿ì„   ¿î3ÅW¿ïiÅ/// A textual description of the owning [RenderObject].
///
/// Setting this attribute will override the [attributedLabel].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedLabel], which is the [AttributedString] of this property.   ¿ïçk¿ïë  ¿ïó¿ïü   ¿ï¸Ç†¿òxÇJ/// A textual description of the owning [RenderObject] in [AttributedString]
/// format.
///
/// On iOS this is used for the `accessibilityAttributedLabel` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedValue] and [attributedHint] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [label], which is the raw text of this property.   ¿ò€ÄÅ¿òﬂ  ¿òÔ ¿ô   ¿ô`Çï¿õ‘ÇN/// A textual description for the current value of the owning [RenderObject].
///
/// Setting this attribute will override the [attributedValue].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedValue], which is the [AttributedString] of this property.
///  * [increasedValue] and [attributedIncreasedValue], which describe what
///    [value] will be after performing [SemanticsAction.increase].
///  * [decreasedValue] and [attributedDecreasedValue], which describe what
///    [value] will be after performing [SemanticsAction.decrease].   ¿õ¯k¿õ¸  ¿ú¿ú
   ¿úgÉ∂¿ü˘ÉX/// A textual description for the current value of the owning [RenderObject]
/// in [AttributedString] format.
///
/// On iOS this is used for the `accessibilityAttributedValue` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedLabel] and [attributedHint] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [value], which is the raw text of this property.
///  * [attributedIncreasedValue], which describes what [value] will be after
///    performing [SemanticsAction.increase].
///  * [attributedDecreasedValue], which describes what [value] will be after
///    performing [SemanticsAction.decrease].   ¿†\ÄÅ¿†`  ¿†p ¿†Ç   ¿†·Çn¿£Ç/// The value that [value] will have after performing a
/// [SemanticsAction.increase] action.
///
/// Setting this attribute will override the [attributedIncreasedValue].
///
/// One of the [attributedIncreasedValue] or [increasedValue] must be set if
/// a handler for [SemanticsAction.increase] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedIncreasedValue], which is the [AttributedString] of this property.   ¿£RÄè¿£V  ¿£e¿£m   ¿£ÂÇ3¿•‚Åœ/// The value that [value] will have after performing a
/// [SemanticsAction.increase] action in [AttributedString] format.
///
/// One of the [attributedIncreasedValue] or [increasedValue] must be set if
/// a handler for [SemanticsAction.increase] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [increasedValue], which is the raw text of this property.   ¿¶`Ä•¿¶d  ¿¶})¿¶è   ¿ß	ÇX¿©.Ç/// The value that [value] will have after performing a
/// [SemanticsAction.decrease] action.
///
/// Setting this attribute will override the [attributedDecreasedValue].
///
/// One of the [attributedDecreasedValue] or [decreasedValue] must be set if
/// a handler for [SemanticsAction.decrease] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
///  * [attributedDecreasedValue], which is the [AttributedString] of this property.   ¿©dÄè¿©h  ¿©w¿©   ¿©˜Ç3¿´ÙÅœ/// The value that [value] will have after performing a
/// [SemanticsAction.decrease] action in [AttributedString] format.
///
/// One of the [attributedDecreasedValue] or [decreasedValue] must be set if
/// a handler for [SemanticsAction.decrease] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [decreasedValue], which is the raw text of this property.   ¿¨rÄ•¿¨v  ¿¨è)¿¨°   ¿≠Åg¿ÆcÅ*/// A brief description of the result of performing an action on this node.
///
/// Setting this attribute will override the [attributedHint].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedHint], which is the [AttributedString] of this property.   ¿ÆÖg¿Æâ  ¿Æé¿Æñ   ¿ÆÇ±¿±Ç]/// A brief description of the result of performing an action on this node in
/// [AttributedString] format.
///
/// On iOS this is used for the `accessibilityAttributedHint` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedLabel] and [attributedValue] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [hint], which is the raw text of this property.   ¿±ﬂ}¿±„  ¿±Ú¿≤   ¿≤`Äì¿≤ﬂm/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection].   ¿≥W¿≥  ¿≥¿≥"   ¿≥iÄñ¿≥ﬂU/// Provides hint values which override the default hints on supported
/// platforms.   ¿¥,Äù¿¥0  ¿¥>¿¥W   ¿¥ÕÄí¿µGj/// The elevation in z-direction at which the owning [RenderObject] is
/// located relative to its parent.   ¿µ}Ä§¿µÅ  ¿µã¿µì   ¿∂%ÅC¿∑PÅ/// The extend that the owning [RenderObject] occupies in z-direction starting
/// at [elevation].
///
/// It's extremely rare to set this value directly. Instead, it is calculated
/// implicitly when other [SemanticsConfiguration]s are merged into this one
/// via [absorb].   ¿∑ÜÄ§¿∑ä  ¿∑î¿∑ú   ¿∏.Å¿πÄƒ/// Whether the semantics node is the root of a subtree for which values
/// should be announced.
///
/// See also:
///
///  * [SemanticsFlag.scopesRoute], for a full description of route scoping.   ¿π>Q¿πB  ¿πN
¿πT   ¿πìÄ„¿∫EÄû/// Whether the semantics node contains the label of a route.
///
/// See also:
///
///  * [SemanticsFlag.namesRoute], for a full description of route naming.   ¿∫yO¿∫}  ¿∫à
¿∫é   ¿∫Ãj¿ª3/// Whether the semantics node represents an image.   ¿ª9I¿ª=  ¿ªE
¿ªK   ¿ªÜÉa¿æ¥É/// Whether the semantics node is a live region.
///
/// A live region indicates that updates to semantics node are important.
/// Platforms may use this information to make polite announcements to the
/// user to inform them of updates to this node.
///
/// An example of a live region is a [SnackBar] widget. On Android and iOS,
/// live region causes a polite announcement to be generated automatically,
/// even if the widget does not have accessibility focus. This announcement
/// may not be spoken if the OS accessibility services are already
/// announcing something else, such as reading the label of a focused widget
/// or providing a system announcement.
///
/// See also:
///
///  * [SemanticsFlag.isLiveRegion], the semantics flag that this setting controls.   ¿æÍQ¿æÓ  ¿æ˘
¿æˇ   ¿ø?Äß¿ø∆o/// The reading direction for the text in [label], [value], [hint],
/// [increasedValue], and [decreasedValue].   ¿¿
w¿¿  ¿¿¿¿,   ¿¿ÖÅµ¿¬	Ån/// Whether the owning [RenderObject] is selected (true) or not (false).
///
/// This is different from having accessibility focus. The element that is
/// accessibility focused may or may not be selected; e.g. a [ListTile] can have
/// accessibility focus but have its [ListTile.selected] property set to false,
/// in which case it will not be flagged as selected.   ¿¬=O¿¬A  ¿¬L
¿¬R   ¿¬êÇ&¿ƒSÅ®/// If this node has Boolean state that can be controlled by the user, whether
/// that state is expanded or collapsed, corresponding to true and false, respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have expanded/collapsed state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// expanded/collapsed state.   ¿ƒπÄÖ¿ƒΩ  ¿ƒ»¿ƒœ   ¿≈BÉ<¿»Ç≥/// Whether the owning [RenderObject] is currently enabled.
///
/// A disabled object does not respond to user interactions. Only objects that
/// usually respond to user interactions, but which currently do not (like a
/// disabled button) should be marked as disabled.
///
/// The setter should not be called for objects (like static text) that never
/// respond to user interactions.
///
/// The getter will return null if the owning [RenderObject] doesn't support
/// the concept of being enabled/disabled.
///
/// This property does not control whether semantics are enabled. If you wish to
/// disable semantics for a particular widget, you should use an [ExcludeSemantics]
/// widget.   ¿»ÅÄÇ¿»Ö  ¿»è¿»ñ   ¿…Ç&¿ ÕÅ©/// If this node has Boolean state that can be controlled by the user, whether
/// that state is checked or unchecked, corresponding to true and false,
/// respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have checked/unchecked state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// checked/unchecked state.   ¿À0Ä∫¿À4  ¿À>¿ÀE   ¿ÀÓÅˆ¿ÕtÅk/// If this node has tristate that can be controlled by the user, whether
/// that state is in its mixed state.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have checked/unchecked state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// mixed checked state.   ¿ÕÁÄ¬¿ÕÎ  ¿Õ˝¿Œ   ¿Œ≠Åˇ¿–LÅÑ/// If this node has Boolean state that can be controlled by the user, whether
/// that state is on or off, corresponding to true and false, respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have on/off state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// on/off state.   ¿–ØÄÇ¿–≥  ¿–Ω¿–ƒ   ¿—5Å{¿“_Å/// Whether the owning RenderObject corresponds to UI that allows the user to
/// pick one of several mutually exclusive options.
///
/// For example, a [Radio] button is in a mutually exclusive group because
/// only one radio button in that group can be marked as [isChecked].   ¿“≥o¿“∑  ¿““
¿“ÿ   ¿”&~¿”q?/// Whether the owning [RenderObject] can hold the input focus.   ¿”ßQ¿”´  ¿”∑
¿”Ω   ¿”¸ÄÅ¿‘NF/// Whether the owning [RenderObject] currently holds the input focus.   ¿‘ÄM¿‘Ñ  ¿‘é
¿‘î   ¿‘—ÄÅ¿’%H/// Whether the owning [RenderObject] is a button (true) or not (false).   ¿’UK¿’Y  ¿’b
¿’h   ¿’§{¿’ˆF/// Whether the owning [RenderObject] is a link (true) or not (false).   ¿÷"G¿÷&  ¿÷-
¿÷3   ¿÷mÄÅ¿÷¡H/// Whether the owning [RenderObject] is a header (true) or not (false).   ¿÷ÒK¿÷ı  ¿÷˛
¿◊   ¿◊@ÄÅ¿◊îH/// Whether the owning [RenderObject] is a slider (true) or not (false).   ¿◊ƒK¿◊»  ¿◊—
¿◊◊   ¿ÿÄï¿ÿqE/// Whether the owning [RenderObject] is a keyboard key (true) or not   ¿ÿ´U¿ÿØ  ¿ÿΩ
¿ÿ√   ¿ŸÉn¿‹EÉ/// Whether the owning [RenderObject] is considered hidden.
///
/// Hidden elements are currently not visible on screen. They may be covered
/// by other elements or positioned outside of the visible area of a viewport.
///
/// Hidden elements cannot gain accessibility focus though regular touch. The
/// only way they can be focused is by moving the focus to them via linear
/// navigation.
///
/// Platforms are free to completely ignore hidden elements and new platforms
/// are encouraged to do so.
///
/// Instead of marking an element as hidden it should usually be excluded from
/// the semantics tree altogether. Hidden elements are only included in the
/// semantics tree to work around platform limitations and they are mainly
/// used to implement accessibility scrolling on iOS.   ¿‹uK¿‹y  ¿‹Ç
¿‹à   ¿‹ƒu¿›6/// Whether the owning [RenderObject] is a text field.   ¿›<Q¿›@  ¿›L
¿›R   ¿›ëÄ®¿ﬁg/// Whether the owning [RenderObject] is read only.
///
/// Only applicable when [isTextField] is true.   ¿ﬁ<O¿ﬁ@  ¿ﬁK
¿ﬁQ   ¿ﬁèÅT¿ﬂ≤Å/// Whether [this.value] should be obscured.
///
/// This option is usually set in combination with [isTextField] to indicate
/// that the text field contains a password (or other sensitive information).
/// Doing so instructs screen readers to not read out [this.value].   ¿ﬂÊO¿ﬂÍ  ¿ﬂı
¿ﬂ˚   ¿‡9Äı¿‡˚Ä∞/// Whether the text field is multiline.
///
/// This option is usually set in combination with [isTextField] to indicate
/// that the text field is configured to be multiline.   ¿·1Q¿·5  ¿·A
¿·G   ¿·ÜÅÈ¿„*Åå/// Whether the platform can scroll the semantics node when the user attempts
/// to move focus to an offscreen child.
///
/// For example, a [ListView] widget has implicit scrolling so that users can
/// easily move to the next visible set of children. A [TabBar] widget does
/// not have implicit scrolling, so that users can navigate into the tab
/// body when reaching the end of the tab bar.   ¿„rc¿„v  ¿„ã
¿„ë   ¿„ŸÄµ¿‰n}/// The currently selected text (or the position of the cursor) within
/// [this.value] if this node represents a text field.   ¿‰≤ÄÇ¿‰∂  ¿‰ƒ¿‰‘   ¿Â8Åﬁ¿ÊÙÅõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken.   ¿Á4}¿Á8  ¿ÁG¿ÁP   ¿ÁµÅA¿Ë“Å /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken.   ¿È¿È  ¿È)¿È2   ¿ÈòÅA¿ÍµÅ /// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent], from where this value is usually taken.   ¿Í¯¿Í¸  ¿Î¿Î   ¿ÎÜÅ¿Ï}ÄÃ/// The set of tags that this configuration wants to add to all child
/// [SemanticsNode]s.
///
/// See also:
///
///  * [addTagForChildren] to add a tag and for more information about their
///    usage.   ¿7pÅ;¿8ÄÉ/// Adds an `action` to the semantics tree.
///
/// The provided `handler` is called to respond to the user triggered
/// `action`. ¿8¿8  ¿8$¿8<   ¿8ØÅm¿9uÄ∂/// Adds an `action` to the semantics tree, whose `handler` does not expect
/// any arguments.
///
/// The provided `handler` is called to respond to the user triggered
/// `action`. ¿9å¿9ù  ¿9§¿9≤   ¿}«Ä¥¿~>Z/// Returns the action handler registered for [action] or null if none was
/// registered. ¿~O¿~`   ¿íÅ0¿í  ¿í3¿í<   ¿Ï•Äª¿Ìb/// Whether this configuration will tag the child semantics nodes with a
/// given [SemanticsTag]. ¿Ì"¿Ì0   ¿ÌåÉ¿ Çp/// Specifies a [SemanticsTag] that this configuration wants to apply to all
/// child [SemanticsNode]s.
///
/// The tag is added to all [SemanticsNode] that pass through the
/// [RenderObject] owning this configuration while looking to be attached to a
/// parent [SemanticsNode].
///
/// Tags are used to communicate to a parent [SemanticsNode] that a child
/// [SemanticsNode] was passed through a particular [RenderObject]. The parent
/// can use this information to determine the shape of the semantics tree.
///
/// See also:
///
///  * [RenderViewport.excludeFromScrolling] for an example of
///    how tags are used. ¿2¿@   ¿…ÄÆ¿Œ  ¿◊¿Ê  ¿Î
¿Ò   ¿Ò{@¿ÒÄ  ¿Òâ¿Òò   ¿ÒÂÉÕ¿Ú‚ÄÌ/// Whether this configuration is compatible with the provided `other`
/// configuration.
///
/// Two configurations are said to be compatible if they can be added to the
/// same [SemanticsNode] without losing any semantics information. ¿ÚÛ¿Û   ¿ı∂ã¿˜ÍÇ/// Absorb the semantic information from `child` into this configuration.
///
/// This adds the semantic information of both configurations and saves the
/// result in this configuration.
///
/// The [RenderObject] owning the `child` configuration must be a descendant
/// of the [RenderObject] that owns this configuration.
///
/// Only configurations that have [explicitChildNodes] set to false can
/// absorb other configurations and it is recommended to only absorb compatible
/// configurations as determined by [isCompatibleWith]. ¿˜Ò¿¯	   ¿ ÕÜN¿0/// Returns an exact copy of this configuration.    ¿˙ä^¿™Ç†/// Base class for all sort keys for [SemanticsProperties.sortKey] accessibility
/// traversal order sorting.
///
/// Sort keys are sorted by [name], then by the comparison that the subclass
/// implements. If [SemanticsProperties.sortKey] is specified, sort keys within
/// the same semantic group must all be of the same type.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].
///
/// If no sort key is applied to a semantics node, then it will be ordered using
/// a platform dependent default algorithm.
///
/// See also:
///
///  * [OrdinalSortKey] for a sort key that sorts using an ordinal. ¿˚ÄΩ ¿ö¿™Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿¨	¿≤   ¿ºÅ?¿˜Å/// An optional name that will group this sort key with other sort keys of the
/// same [name].
///
/// Sort keys must have the same `runtimeType` when compared.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].  ¿ Ç∂¿  ¿¿,  ¿ ¿¿∫Å’¿cÅÖ/// The implementation of [compareTo].
///
/// The argument is guaranteed to be of the same type as this object and have
/// the same [name].
///
/// The method should return a negative number if this object comes earlier in
/// the sort order than the argument; and a positive number if it comes later
/// in the sort order. Returning zero causes the system to use default sort
/// order. ¿m ¿â  ¿R¿S¿ìÄ√¿§  ¿∏&¿’  ¿ì¿î ¿Zá[¿∞ÉO/// A [SemanticsSortKey] that sorts based on the `double` value it is
/// given.
///
/// The [OrdinalSortKey] compares itself with other [OrdinalSortKey]s
/// to sort based on the order it is given.
///
/// [OrdinalSortKey]s are sorted by the optional [name], then by their [order].
/// If [SemanticsProperties.sortKey] is a [OrdinalSortKey], then all the other
/// specified sort keys in the same semantics group must also be
/// [OrdinalSortKey]s.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].
///
/// The ordinal value [order] is typically a whole number, though it can be
/// fractional, e.g. in order to fit between two other consecutive whole
/// numbers. The value must be finite (it cannot be [double.nan],
/// [double.infinity], or [double.negativeInfinity]). ¿‹Å ¿c¿qz/// Creates a const semantics sort key that uses a [double] as its key value.
///
/// The [order] must be a finite number.¿w
¿}  ¿â
¿ê  ¿ú¿¢¿¬¿©¿£¿´¿±¿≤¿Ã¿“¿Í¿Ÿ¿”¿€¿·¿‚¿Åa¿LÅB/// Determines the placement of this key in a sequence of keys that defines
/// the order in which this node is traversed by the platform's accessibility
/// services.
///
/// Lower values will be traversed first. Keys with the same [name] will be
/// grouped together and sorted by name first, and then sorted by [order].  ¿VÄî¿f  ¿p¿Ä  ¿V¿W¿ÓÄ≈¿ˇ  ¿&¿0  ¿Ó¿Ô  ¿ÇJ¿Ñ_/// Used by [debugDumpSemanticsTree] to specify the order in which child nodes
/// are printed.  ¿†Å¿¢Ä˜/// Print nodes in inverse hit test order.
///
/// In inverse hit test order, the last child of a [SemanticsNode] will be
/// asked first if it wants to respond to a user's interaction, followed by
/// the second last, etc. until a taker is found. ¿µÄ±¿	XÄö/// Print nodes in semantic traversal order.
///
/// This is the order in which a user would navigate the UI using the "next"
/// and "previous" gestures.       ¿ÂÄ©¿G\/// In tests use this function to reset the counter used to generate
/// [SemanticsNode.id].   ¿ùÅC¿Â@/// Converts `point` to the `node`'s parent's coordinate system. ¿ˇ¿Ò  ¿Ò¿Ò   ¿Ò‚á¿ÛˆÅˇ/// Sorts `children` using the default sorting algorithm, and returns them as a
/// new list.
///
/// The algorithm first breaks up children into groups such that no two nodes
/// from different groups overlap vertically. These groups are sorted vertically
/// according to their [_SemanticsSortGroup.startOffset].
///
/// Within each group, the nodes are sorted using
/// [_SemanticsSortGroup.sortedWithinVerticalGroup].
///
/// For an illustration of the algorithm see http://bit.ly/flutter-default-traversal. ¿Ù¿Ù#  ¿Ù,¿Ù;   ¿	kÉç¿	|  ¿	ò.¿	≥  ¿	 /¿	Â  ¿	˝)¿
  ¿
**¿
C    Ñ[Ä„ÖÄ°/// Signature for a function that is called for each [SemanticsNode].
///
/// Return false to stop visiting nodes.
///
/// Used by [SemanticsNode.visitChildren].  Ö*Ö9   Ö@ÅÜ$Ä€/// Signature for [SemanticsAction]s that move the cursor.
///
/// If `extendSelection` is set to true the cursor movement should extend the
/// current selection or (if nothing is currently selected) start a selection.  ÜFÜL   Ü^Ä–ÜÒÄä/// Signature for the [SemanticsAction.setSelection] handlers to change the
/// text selection (or re-position the cursor) to `selection`.  áá$   á0Ä§á®o/// Signature for the [SemanticsAction.setText] handlers to replace the
/// current text with the input `text`.  á«áœ   á÷Ä∞àQr/// Signature for a handler of a [SemanticsAction].
///
/// Returned by [SemanticsConfiguration.getActionHandler].  àxàÅ   ààÄ—âÄà/// Signature for a function that receives a semantics update and returns no result.
///
/// Used by [SemanticsOwner.onSemanticsUpdate].  âAâR   â[ÇƒãÆÇJ/// Signature for the [SemanticsConfiguration.childConfigurationsDelegate].
///
/// The input list contains all [SemanticsConfiguration]s that rendering
/// children want to merge upward. One can tag a render child with a
/// [SemanticsTag] and look up its [SemanticsConfiguration]s through
/// [SemanticsConfiguration.tagsChildrenWith].
///
/// The return value is the arrangement of these configs, including which
/// configs continue to merge upward and which configs form sibling merge group.
///
/// Use [ChildSemanticsConfigurationsResultBuilder] to generate the return
/// value.  å     å!ÄÜå+ åvåDåSåTåmånåxåáåàå°å¢  î; <ÄÜÄ§Ä•Ä¡ÅNÅOÅ|Å¶ÅÚÇÇLÇMÇzÇôÇöÉÉÉ¨ÉÁÑ&Ñ'ÑZÑ[Ñ°Ñ•ÑŒÑ“Ñ˝Ö?Ö@Ö{ÖÖÕÜÜ]Ü^Ü™ÜÈá/á0áxá†á’á÷à
ààIàáààà›à·ââZâ[âßâ´âÙä9ä~ä≠ä±ä˚ãLãPãõã¶å å!åtå©å™åÀåœçç[çßç´ç˘éFéTéXé¶éÙèBèQèfèÜèåè‹ê,ê|êçêÆêØêÏêÚë8ëMëNëZë¶ë®ë©ë‰íííTíÇíŸíÍíÓì7ìbì±ì≤îî#î)îuîøïï/ï0ïï©ïØï¯ñ1ñ}ñ∆ñÃóómó∫òòXòëò–ò“ò”ô ô1ô5ônô´ô˙ö4öfö£ö“ö”õõÇõÉõ”õﬂõÂúújú∑ú∏ú˚ù%ù+ùmù≈û/û0û~û≠ûºüüãüõüæ††X†|†á†è†¢†¨†¸° °°°3°7°y°¡¢	¢Q¢†¢Ô¢˝££P£Ñ£à£◊£Í£Ó§6§a§e§s§w§»§”§Ò••$•I•Ö•†•≥•»•…¶¶'¶-¶Q¶√¶›¶Ò¶Úß0ßGßHßÑßößõß’ßˆß˜®®;®<®H®k®ó®´®±®€®˚©©<©@©A©M©c©¿©ƒ©≈™™'™A™õ™Ò™Ú´!´\´|´ñ´∞´Õ´Ó´Ù¨¨¨¨;¨o¨à¨å¨ç¨ﬁ¨Û≠≠#≠;≠O≠b≠u≠≠É≠Ö≠Ü≠æ≠…≠‚ÆÆÆVÆfÆlÆ∂Æ≈ÆŸÆÏØØUØhØ¶Ø∏ØÓ∞ ∞h∞u∞∞î∞†∞°∞Ÿ∞∞Ò±±!±c±ç±é±—±◊≤(≤q≤©≤√≤◊≤›≤˝≥≥≥≥<≥p≥∆≥Ì¥¥W¥Ö¥∂¥„¥ÓµAµoµwµ}µ¿µƒµ≈∂∂∂@∂l∂ë∂≥∂˘∂˝∂˛∑
∑A∑B∑N∑d∑≈∑…∑À∑Ã∏∏T∏£∏È∏Ôπ,πHπ_πrπÜπ¶πæπœπÊπÏπÌ∫:∫u∫{∫†∫º∫Ω∫…ª<ª=ªIªêª©ªæªƒªÂºº@º{º¶º¨º—ºÈºÔΩ\Ω`ΩbΩcΩõΩüΩÎæ<æåæûæ¢æ‡æÎøø<øBøçøüø∏ø”øÒ¿ @¿ @7¿ @c¿ @è¿ @±¿ @Ã¿ @Ì¿ A¿ A"¿ A?¿ A`¿ A¿ A£¿ A≈¿ AË¿ B¿ B-¿ BO¿ Bu¿ BÑ¿ Bò¿ Bª¿ C>¿ Cﬂ¿ DÄ¿ E<¿ E¯¿ Fñ¿ Fó¿ F÷¿ FÈ¿ FÍ¿ G+¿ G@¿ GA¿ GÅ¿ Gú¿ Gù¿ G‹¿ G‚¿ H¿ H!¿ H[¿ Hâ¿ Hä¿ HÀ¿ HÏ¿ HÚ¿ I+¿ I1¿ Ij¿ Iî¿ Iï¿ I‘¿ I⁄¿ J¿ J¿ JS¿ JÅ¿ JÇ¿ J√¿ J‰¿ JÍ¿ K#¿ K)¿ Kb¿ Kå¿ Kç¿ K…¿ KÚ¿ K¯¿ L1¿ L7¿ Lz¿ L∫¿ Lª¿ L˜¿ M=¿ MC¿ M|¿ MÇ¿ Mƒ¿ M˜¿ M¯¿ N4¿ N]¿ Nc¿ Nú¿ N¢¿ NÂ¿ O%¿ O&¿ Ob¿ O®¿ OÆ¿ OÁ¿ OÌ¿ P/¿ Pb¿ Pc¿ P±¿ P∑¿ P¿ Pˆ¿ Q/¿ Q[¿ Q\¿ Q©¿ QÕ¿ Q”¿ R¿ R¿ RJ¿ Rs¿ Rt¿ R©¿ RØ¿ RË¿ S ¿ S¿ S?¿ Su¿ Sõ¿ Sú¿ SÌ¿ T¿ T?¿ T@¿ Tå¿ Tí¿ Tﬂ¿ TÎ¿ U
¿ U¿ UQ¿ Uk¿ Ul¿ Uº¿ UŒ¿ U‘¿ V$¿ Vp¿ V∂¿ Vº¿ VÃ¿ V“¿ W¿ W<¿ W=¿ Wå¿ Wû¿ W§¿ Wﬂ¿ WÂ¿ Wı¿ W˚¿ XN¿ Xo¿ Xp¿ Xø¿ X—¿ X◊¿ Y¿ Y¿ Y(¿ Y.¿ YÅ¿ Y¢¿ Y£¿ YÌ¿ Z
¿ Z¿ Z^¿ Z®¿ ZΩ¿ Z√¿ Z”¿ ZŸ¿ [¿ [S¿ [p¿ [q¿ [Ω¿ [œ¿ [’¿ \"¿ \6¿ \<¿ \å¿ \Œ¿ \Î¿ \Ï¿ ];¿ ]M¿ ]S¿ ]†¿ ]¥¿ ]∫¿ ^¿ ^6¿ ^W¿ ^X¿ ^ó¿ ^™¿ ^´¿ ^Á¿ _¿ _	¿ _c¿ _i¿ _∞¿ `¿ `¿ `,¿ `-¿ `u¿ `{¿ `ã¿ `ë¿ `·¿ a¿ a¿ a¿ ad¿ aj¿ az¿ aÄ¿ aÃ¿ aÊ¿ aÁ¿ b2¿ bQ¿ bW¿ bä¿ bê¿ b†¿ b¶¿ bÓ¿ c¿ c¿ cK¿ cå¿ cç¿ c¿¿ d¿ d¿ d¿ d^¿ d_¿ dk¿ d∞¿ d€¿ e)¿ eç¿ e‹¿ f+¿ f\¿ fü¿ f ¿ f·¿ fË¿ g9¿ gë¿ g¢¿ g˘¿ hf¿ hg¿ hñ¿ h”¿ h˙¿ i¿ i¿ ii¿ iπ¿ j¿ jI¿ j£¿ j˝¿ kC¿ kç¿ kÚ¿ l¿ lâ¿ lè¿ lÊ¿ m=¿ mú¿ mı¿ nF¿ n¢¿ n¸¿ oX¿ o\¿ o]¿ oi¿ oå¿ oÆ¿ oŒ¿ oÚ¿ p¿ pP¿ pÑ¿ p ¿ q¿ qB¿ qf¿ qñ¿ q¥¿ q€¿ r¿ r=¿ rm¿ rü¿ r”¿ s¿ s9¿ sk¿ s•¿ sÕ¿ sı¿ t¿ tu¿ ty¿ tz¿ tÜ¿ t©¿ t¥¿ t¡¿ t—¿ tÊ¿ t˚¿ u¿ u7¿ uK¿ uX¿ uk¿ uu¿ u¿ uí¿ u®¿ uπ¿ uÕ¿ u‚¿ u˜¿ v¿ v¿ v2¿ vL¿ v]¿ vn¿ v¿ v⁄¿ v·¿ vÊ¿ vÁ¿ w,¿ wU¿ wh¿ wn¿ wó¿ w¿¿ w÷¿ wﬁ¿ x¿ x/¿ xG¿ xO¿ xY¿ xl¿ xr¿ xÑ¿ xà¿ xä¿ xã¿ x⁄¿ x˚¿ y¿ y%¿ y?¿ y]¿ yc¿ yd¿ yê¿ yë¿ yù¿ y˚¿ y˝¿ y˛¿ zE¿ zT¿ zX¿ zÖ¿ zê¿ z ¿ zÙ¿ {¿ {)¿ {C¿ {c¿ {â¿ {ä¿ {∞¿ {∂¿ {Ë¿ {Ó¿ |5¿ |b¿ |h¿ |ê¿ |´¿ |∆¿ |«¿ |Ù¿ |˙¿ },¿ }2¿ }|¿ }∂¿ }º¿ }Ó¿ ~
¿ ~+¿ ~,¿ ~^¿ ~•¿ ~¶¿ ~≤¿ ~Ò¿ ~Ú¿ ~˛¿ !¿ M¿ a¿ g¿ í¿ ∫¿ Ô¿ Û¿ Ù¿ Ä ¿ ÄE¿ Äp¿ Ä¿¿ Å¿ Å ¿ Å"¿ Å#¿ År¿ Åá¿ Åã¿ Å€¿ ÅÔ¿ Å˙¿ Ç1¿ ÇV¿ Çt¿ ÇÜ¿ Çò¿ Ç®¿ Çª¿ ÇŒ¿ Ç‡¿ ÇÒ¿ É ¿ É¿ É%¿ É6¿ ÉL¿ É_¿ És¿ ÉÖ¿ É®¿ Éπ¿ ÉÃ¿ É‡¿ Éˆ¿ Ñ¿ Ñ¿ Ñ0¿ ÑI¿ Ñf¿ Ñ{¿ Ñã¿ Ñ•¿ Ñµ¿ Ñœ¿ ÑË¿ Ö¿ Ö$¿ ÖG¿ ÖV¿ Öh¿ ÖÅ¿ Öô¿ Ö±¿ Ö√¿ Ö‹¿ ÖÏ¿ Ü¿ Ü¿ Ü1¿ ÜF¿ Ü]¿ Ür¿ Üá¿ Üò¿ Ü®¿ Ü∫¿ Ü„¿ á¿ á1¿ áV¿ áo¿ áÉ¿ á©¿ áœ¿ á„¿ à¿ àx¿ àÏ¿ âÑ¿ ä¿ äå¿ äç¿ ä›¿ ã¿ ã
¿ ãX¿ ã£¿ ã’¿ ãÏ¿ ãÌ¿ å2¿ åw¿ åá¿ åç¿ åÕ¿ ç¿ ç3¿ ç9¿ çv¿ çç¿ çé¿ ç”¿ é¿ éQ¿ éW¿ éï¿ éŒ¿ è
¿ è¿ è ¿ è_¿ èt¿ èu¿ èπ¿ èÚ¿ è¯¿ ê9¿ êy¿ êÜ¿ êû¿ êü¿ êÈ¿ ë*¿ ë:¿ ë@¿ ë}¿ ëî¿ ëï¿ ë‰¿ í,¿ í2¿ íÇ¿ íß¿ íø¿ í¿¿ ì¿ ì
¿ ìW¿ ìi¿ ì¿ ìÄ¿ ì¬¿ ì»¿ î¿ îb¿ îp¿ îÑ¿ îÖ¿ î…¿ îœ¿ ï¿ ïl¿ ïë¿ ïß¿ ï®¿ ï¿ ïˆ¿ ñ@¿ ñR¿ ñk¿ ñl¿ ñ∞¿ ñ∂¿ ñ˝¿ ó¿ ó,¿ ó-¿ ów¿ óí¿ óì¿ ó–¿ ó÷¿ ò¿ ò¿ òO¿ òg¿ òh¿ ò©¿ òØ¿ òˆ¿ ò¸¿ ôN¿ ôò¿ ôÈ¿ ö(¿ öA¿ öB¿ öÉ¿ öâ¿ ö⁄¿ õ¿ õ ¿ õr¿ õº¿ ú¿ úL¿ úc¿ úd¿ ú±¿ ú∑¿ ù¿ ùH¿ ùp¿ ùq¿ ù´¿ ù±¿ û ¿ ûQ¿ ûW¿ ûß¿ ûÙ¿ ü¿ ü¿ ü\¿ ü{¿ üÅ¿ ü“¿ † ¿ †m¿ †•¿ †ª¿ †º¿ †Û¿ †˘¿ °F¿ °ñ¿ °€¿ °Û¿ °Ù¿ ¢B¿ ¢Q¿ ¢W¿ ¢°¿ ¢€¿ ¢·¿ £¿ £/¿ £0¿ £}¿ £´¿ £±¿ £‚¿ §0¿ §f¿ §l¿ §|¿ §Ç¿ §Œ¿ §Í¿ •¿ •¿ •S¿ •Y¿ •i¿ •o¿ •æ¿ •ÿ¿ •Ÿ¿ ¶¿ ¶¿ ¶(¿ ¶.¿ ¶t¿ ¶â¿ ¶ä¿ ¶“¿ ¶ÿ¿ ß$¿ ßq¿ ß§¿ ß™¿ ß¯¿ ®F¿ ®î¿ ®Ÿ¿ ©(¿ ©R¿ ©X¿ ©h¿ ©n¿ ©ø¿ ™¿ ™0¿ ™1¿ ™}¿ ™è¿ ™ï¿ ™‚¿ ™ˆ¿ ™¸¿ ´F¿ ´¿ ´ú¿ ´ù¿ ´Ï¿ ´˛¿ ¨¿ ¨Q¿ ¨e¿ ¨k¿ ¨¥¿ ¨”¿ ¨Ù¿ ¨ı¿ ≠8¿ ≠è¿ ≠ï¿ ≠Œ¿ ≠‘¿ Æ ¿ Æc¿ Æi¿ Æª¿ Æ˛¿ Ø¿ ØR¿ Øg¿ ØÉ¿ ØÑ¿ Ø∏¿ Øæ¿ ∞¿ ∞F¿ ∞L¿ ∞õ¿ ∞Ø¿ ∞µ¿ ∞≈¿ ∞À¿ ±¿ ±@¿ ±è¿ ±¶¿ ±ß¿ ±˙¿ ≤ ¿ ≤J¿ ≤î¿ ≤ö¿ ≤È¿ ≤˝¿ ≥¿ ≥¿ ≥¿ ≥i¿ ≥ò¿ ≥÷¿ ¥¿ ¥¿ ¥C¿ ¥I¿ ¥ò¿ ¥—¿ ¥◊¿ µ&¿ µ:¿ µ@¿ µP¿ µV¿ µß¿ µÀ¿ ∂¿ ∂1¿ ∂2¿ ∂É¿ ∂ò¿ ∂û¿ ∂Ë¿ ∑2¿ ∑8¿ ∑á¿ ∑õ¿ ∑°¿ ∑±¿ ∑∑¿ ∏¿ ∏6¿ ∏t¿ ∏ü¿ ∏†¿ ∏Ê¿ π1¿ π7¿ πÇ¿ πÕ¿ πÂ¿ πÎ¿ ∫$¿ ∫`¿ ∫f¿ ∫v¿ ∫|¿ ∫À¿ ∫˙¿ ªH¿ ª[¿ ª{¿ ª|¿ ªÕ¿ º¿ º ¿ ºq¿ ºª¿ º„¿ ºÈ¿ Ω"¿ Ω^¿ Ωd¿ Ωt¿ Ωz¿ Ω ¿ æ¿ æI¿ æ}¿ æ~¿ æƒ¿ ø¿ ø¿ ø`¿ ø´¿ ø√¿ ø…¿ ¿¿ ¿>¿ ¿D¿ ¿T¿ ¿Z¿ ¿©¿ ¿ÿ¿ ¡&¿ ¡9¿ ¡Y¿ ¡Z¿ ¡´¿ ¡¯¿ ¡˛¿ ¬O¿ ¬ô¿ ¬¡¿ ¬«¿ √ ¿ √H¿ √N¿ √^¿ √d¿ √¥¿ √Ï¿ ƒ3¿ ƒg¿ ƒh¿ ƒ∏¿ ƒÕ¿ ƒ”¿ ≈!¿ ≈Z¿ ≈`¿ ≈≠¿ ≈¡¿ ≈«¿ ≈◊¿ ≈›¿ ∆-¿ ∆Q¿ ∆ü¿ ∆µ¿ ∆∂¿ «¿ «:¿ «@¿ «â¿ «”¿ «Ÿ¿ »&¿ »:¿ »@¿ »P¿ »V¿ »•¿ »‘¿ …¿ …;¿ …<¿ …z¿ …Ä¿ …—¿  ¿  >¿  D¿  Ü¿  –¿  È¿  Í¿ À3¿ ÀD¿ ÀJ¿ Àñ¿ ÀÂ¿ Ã¿ Ã"¿ Ãq¿ Ã†¿ Ã°¿ ÃË¿ Õ¿ Õ¿ ÕB¿ Õh¿ Õi¿ Õ∏¿ Õ ¿ Õ–¿ Œ¿ Œl¿ Œì¿ Œ∂¿ Œ∑¿ Œˇ¿ œ¿ œP¿ œü¿ œ¿¿ œ∆¿ –¿ –a¿ –™¿ –∞¿ –¿¿ –∆¿ —¿ —4¿ —Z¿ —[¿ —à¿ —é¿ —ﬁ¿ “.¿ “<¿ “B¿ “ê¿ “◊¿ “›¿ ”*¿ ”z¿ ” ¿ ‘¿ ‘!¿ ‘"¿ ‘U¿ ‘[¿ ‘´¿ ‘Ê¿ ‘Ï¿ ’:¿ ’â¿ ’õ¿ ’°¿ ’Ó¿ ÷?¿ ÷ê¿ ÷›¿ ÷Í¿ ◊¿ ◊¿ ◊B¿ ◊H¿ ◊ó¿ ◊Â¿ ÿ¿ ÿ
¿ ÿZ¿ ÿ¶¿ ÿÒ¿ Ÿ@¿ ŸS¿ Ÿw¿ Ÿx¿ Ÿ≠¿ Ÿ≥¿ ⁄¿ ⁄P¿ ⁄o¿ ⁄u¿ ⁄∆¿ €¿ €_¿ €Ø¿ €¬¿ €Á¿ €Ë¿ ‹¿ ‹ ¿ ‹o¿ ‹Ω¿ ‹⁄¿ ‹‡¿ ›.¿ ›z¿ ›≈¿ ﬁ¿ ﬁ'¿ ﬁI¿ ﬁJ¿ ﬁ~¿ ﬁÑ¿ ﬁ”¿ ﬂ!¿ ﬂ>¿ ﬂD¿ ﬂî¿ ﬂ‡¿ ‡-¿ ‡}¿ ‡ê¿ ‡¥¿ ‡µ¿ ‡Á¿ ‡Ì¿ ·:¿ ·~¿ ·Ñ¿ · ¿ ‚¿ ‚¿ ‚i¿ ‚π¿ ‚—¿ ‚Û¿ ‚Ù¿ „&¿ „,¿ „y¿ „Ω¿ „√¿ ‰	¿ ‰V¿ ‰\¿ ‰™¿ ‰˙¿ Â¿ Â6¿ Â7¿ Âe¿ Âk¿ Â≥¿ Âπ¿ Ê¿ Ê1¿ ÊO¿ ÊP¿ Ê}¿ ÊÉ¿ ÊÃ¿ Ê›¿ Ê„¿ Á2¿ Á[¿ Áx¿ Áy¿ Á®¿ ÁÆ¿ Áı¿ Á˚¿ ËJ¿ Ës¿ Ëí¿ Ëì¿ ËŸ¿ Ëﬂ¿ È)¿ ÈT¿ ÈZ¿ È®¿ ÈŒ¿ Í	¿ Í
¿ ÍQ¿ ÍW¿ Í°¿ ÍÕ¿ Í”¿ Î#¿ ÎI¿ ÎÖ¿ ÎÜ¿ Î«¿ ÎÕ¿ Ï¿ Ï>¿ ÏD¿ Ïî¿ Ï∫¿ Ï¿ ÏÒ¿ Ì3¿ Ì9¿ ÌÉ¿ Ì™¿ Ì∞¿ Ó ¿ Ó&¿ Ó]¿ Ó^¿ Óî¿ Óö¿ ÓÎ¿ Ô5¿ Ô;¿ ÔÜ¿ Ô»¿ Ôı¿ Ôˆ¿ '¿ -¿ ~¿ §¿ ™¿ ˘¿ Ò¿ Ò9¿ Ò:¿ Ò}¿ ÒÉ¿ Ò—¿ Ú¿ ÚW¿ Ú°¿ ÚÀ¿ Ú—¿ Û"¿ Ûs¿ Û¡¿ Û«¿ Û◊¿ Û›¿ Ù-¿ ÙV¿ Ù®¿ Ù€¿ Ù‹¿ ı¿ ı%¿ ım¿ ı≠¿ ı˘¿ ˆC¿ ˆm¿ ˆs¿ ˆƒ¿ ˜¿ ˜c¿ ˜i¿ ˜y¿ ˜¿ ˜Ã¿ ˜Í¿ ¯<¿ ¯o¿ ¯p¿ ¯°¿ ¯ß¿ ¯Ê¿ ¯Ï¿ ˘9¿ ˘à¿ ˘¶¿ ˘«¿ ˘»¿ ˙¿ ˙¿ ˙g¿ ˙∂¿ ˚¿ ˚U¿ ˚[¿ ˚k¿ ˚q¿ ˚π¿ ¸¿ ¸¿ ¸¿ ¸U¿ ¸Ä¿ ¸◊¿ ˝*¿ ˝É¿ ˝‹¿ ˛.¿ ˛v¿ ˛‹¿ ˇ$¿ ˇä¿ ˇ€¿ S¿ §¿¿b¿∆¿¿w¿⁄¿O¿S¿T¿`¿‚¿‰¿Â¿*¿B¿h¿ç¿è¿ê¿ø¿√¿¿Z¿ß¿ƒ¿˜¿¿¿l¿~¿ê¿û¿æ¿›¿¿¿N¿T¿ã¿¢¿∞¿–¿Û¿¿)¿<¿@¿A¿B¿à¿ç¿¿	R¿	É¿	 ¿	À¿	Ì¿
¿
a¿
}¿
Å¿
Ç¿
ƒ¿
 ¿¿;¿M¿N¿y¿¿»¿¿F¿L¿î¿‡¿¿/¿:¿;¿`¿a¿o¿p¿ ¿–¿¿h¿w¿ü¿∂¿ÿ¿¿b¿v¿|¿Ä¿Å¿¿¿⁄¿Ù¿¿`¿z¿è¿£¿©¿≠¿Æ¿ˆ¿¸¿M¿a¿g¿∑¿¿W¿•¿‘¿⁄¿!¿]¿c¿ü¿Ó¿ˇ¿ ¿!¿f¿l¿Ω¿—¿◊¿'¿v¿≈¿¿¿P¿V¿†¿Ω¿æ¿¿	¿S¿ù¿Â¿/¿¿å¿í¿ﬂ¿'¿-¿=¿C¿á¿¶¿ß¿Û¿˘¿A¿ê¿‡¿¿(¿)¿N¿T¿£¿Ò¿7¿S¿Y¿¶¿ı¿¿U¿V¿c¿d¿≥¿π¿˝¿2¿z¿û¿ü¿Ì¿Û¿?¿å¿«¿Í¿ &¿ M¿ w¿ ¢¿ ∞¿ ∂¿ ⁄¿ Ï¿ ¿ Ò¿!<¿!B¿!ì¿!√¿!…¿!Ÿ¿!ﬂ¿!˝¿"(¿"Å¿"Ç¿"ﬁ¿#.¿#á¿#à¿#â¿#ó¿#ò¿#‚¿$¿$¿$T¿$£¿$∂¿$È¿$Í¿%%¿%k¿%{¿%º¿%Û¿&¿&@¿&S¿&]¿&^¿&ñ¿&≥¿&È¿'¿'¿'¿'H¿'c¿'i¿'Ö¿'¢¿'ÿ¿'Û¿(¿(^¿(ñ¿(µ¿(¡¿(›¿(Á¿(Ô¿(ı¿)*¿)L¿)p¿)º¿*¿*K¿*ì¿*À¿*ˆ¿+ ¿+!¿+=¿+W¿+_¿+e¿+≤¿+≈¿+’¿,¿,N¿,ë¿,¿¿-¿-<¿-J¿-[¿-î¿-›¿.¿.?¿.O¿.Æ¿/=¿/º¿/ ¿/÷¿/‡¿0	¿0C¿0∫¿16¿1f¿1Ö¿1ì¿1ù¿1•¿1È¿1Í¿2¿2@¿2e¿2m¿2π¿2Ã¿2÷¿2◊¿3¿39¿3X¿3å¿3¡¿3›¿3Ó¿3¯¿4 ¿4¿4#¿48¿4L¿4R¿4V¿4W¿4í¿4Ã¿4‚¿4„¿5¿5O¿5P¿5Ç¿5à¿5Ÿ¿6%¿6:¿6o¿6å¿6¬¿6·¿6Û¿6˝¿7¿7¿7¿7¿7>¿7D¿7ì¿7‹¿8
¿8C¿8`¿8ñ¿8⁄¿8Ú¿8¸¿9¿9
¿9¿9¿9 ¿9T¿9Z¿9Æ¿9’¿9Ô¿9¿:I¿:O¿:Ñ¿:ä¿:¿¿:Á¿:Ë¿;¿;#¿;f¿;é¿;®¿;©¿;›¿;„¿<3¿<{¿<Å¿<Ã¿<Á¿<˘¿<˙¿=&¿=H¿=j¿=ã¿=´¿=±¿=µ¿=∂¿=“¿=˘¿=˝¿=˛¿>=¿>_¿>û¿>ü¿>‡¿>Ó¿>Ù¿>ı¿?/¿?A¿?B¿?s¿?ƒ¿?—¿?˙¿@ ¿@¿@¿@*¿@d¿@h¿@i¿@ì¿@∂¿@∆¿@Á¿A¿A(¿A0¿Ay¿Aå¿Añ¿A∞¿Aƒ¿A·¿AÁ¿B¿B.¿B2¿B3¿B\¿B¿Bß¿B¡¿B’¿BÎ¿BÒ¿Bı¿Bˆ¿C+¿C@¿Cf¿CÇ¿Cñ¿C¡¿D¿DV¿Dt¿Dz¿Dó¿Dæ¿D–¿DÊ¿D˙¿E ¿E¿ES¿Ep¿Ex¿E~¿EÇ¿EÉ¿E¥¿E…¿E€¿E˜¿F"¿FU¿Fs¿Fò¿F´¿FÁ¿G¿G:¿Gá¿G∑¿G€¿Gı¿Gˇ¿H¿H¿HQ¿Hí¿H¥¿H∆¿H ¿HÀ¿H·¿H‚¿H˘¿I¿I!¿I/¿I5¿IH¿I\¿Ië¿Iµ¿Iª¿Iø¿I¿¿J¿JH¿J|¿J¶¿J–¿K¿KN¿Kñ¿Kº¿Kﬂ¿L¿L8¿Lk¿L†¿L◊¿M¿MA¿Mr¿M•¿M⁄¿N¿Nm¿N∞¿N¥¿Nµ¿N–¿N—¿O#¿Oè¿Oê¿P¿P=¿P>¿Pr¿Px¿P»¿PÈ¿Q¿Q¿Q3¿Q}¿Q~¿Q£¿Q§¿Q„¿R#¿R$¿Rd¿Rå¿RΩ¿Ræ¿RË¿RÓ¿S'¿S-¿Sg¿Sñ¿Só¿Sﬁ¿S‰¿T¿T#¿T\¿Tò¿T›¿Tﬁ¿U¿U#¿U\¿Ub¿Uú¿UÀ¿UÃ¿V¿V.¿V4¿Vm¿Vs¿V¨¿VË¿W-¿W.¿W¿Wô¿Wü¿WÌ¿X¿X¿XJ¿XP¿Xì¿X‘¿X’¿Y$¿Yr¿Yx¿Y∆¿Y‰¿YÍ¿Z#¿Z)¿Zk¿Zπ¿[¿[¿[b¿[|¿[Ç¿[–¿[Ó¿[Ù¿\-¿\3¿\v¿\∑¿\∏¿]¿]U¿][¿]©¿]«¿]Õ¿^¿^¿^N¿^ú¿^Û¿^Ù¿_B¿_H¿_Å¿_á¿_¿¿_Ì¿_Ó¿`;¿`_¿`e¿`û¿`§¿`‹¿a¿aY¿aZ¿aè¿aï¿aŒ¿a¿b¿b¿bm¿bê¿bñ¿bﬁ¿c.¿cW¿c]¿cm¿cs¿cº¿c¸¿dI¿do¿dû¿dü¿dÌ¿dÛ¿e=¿eä¿eŸ¿f"¿fr¿fª¿f¡¿f◊¿g#¿gK¿gQ¿g°¿gÊ¿h¿h¿hb¿h„¿hÈ¿i9¿iÜ¿i”¿i˜¿j¿j¿j<¿jV¿jz¿j•¿j∆¿j‚¿k	¿k+¿kJ¿kn¿k}¿kä¿kï¿kù¿kß¿kπ¿kø¿kœ¿k’¿l¿lo¿lï¿lƒ¿l≈¿m¿m¿m^¿mà¿mâ¿mŸ¿mÒ¿n'¿nf¿ng¿n∂¿n»¿nŒ¿o¿oj¿oë¿oæ¿o‹¿o›¿p.¿pZ¿pê¿p±¿p≤¿q¿q¿qH¿q^¿q_¿q´¿q±¿q˛¿r
¿r<¿rV¿rW¿rù¿r≈¿r⁄¿r€¿s+¿s=¿sC¿sì¿sﬂ¿t%¿t+¿t;¿tA¿tã¿tº¿t◊¿tÿ¿u'¿u9¿u?¿uz¿uÄ¿uê¿uñ¿uÈ¿v¿v8¿v9¿và¿vö¿v†¿v€¿v·¿vÒ¿v˜¿wI¿w|¿wò¿wô¿w„¿x ¿x¿xT¿xû¿x≥¿xπ¿x…¿xœ¿y¿yI¿yw¿yè¿yê¿y‹¿yÓ¿yÙ¿zA¿zU¿z[¿z´¿zÌ¿{¿{3¿{4¿{É¿{ï¿{õ¿{Ë¿{¸¿|¿|Q¿|y¿|Ø¿|À¿|Ã¿}¿}¿}o¿}p¿}ø¿~¿~4¿~:¿~á¿~µ¿~ª¿¿Z¿n¿õ¿—¿ÿ¿ˆ¿Ä3¿ÄG¿ÄM¿ÄN¿ÄZ¿ÄÕ¿Å¿Å¿Å¿Åß¿Å®¿ÅÕ¿Å¸¿Ç+¿Çl¿Ç≠¿Ç⁄¿Ç˘¿É$¿ÉG¿Éj¿ÉÜ¿É±¿É–¿Ñ!¿Ñå¿Ñ∏¿Ñ‰¿Ö¿Ö9¿Öi¿Öô¿ÖË¿Ü¿Ü@¿Üj¿Üò¿Ü∆¿Ü¸¿á7¿áÖ¿áÜ¿áΩ¿á‡¿áÊ¿áÁ¿áÛ¿àR¿à—¿àÿ¿à‰¿âC¿â¬¿â…¿âÕ¿âŒ¿âœ¿ä¿ä¿ä^¿ä™¿ä›¿ã¿ã¿ãf¿ã°¿ã√¿ãË¿å!¿åZ¿å•¿å¿ç'¿çF¿çy¿ç–¿é¿é2¿éW¿éÖ¿éµ¿éÂ¿è¿è;¿èn¿èó¿è∫¿èÒ¿ê@¿êë¿êó¿ê∏¿êÊ¿ë;¿ëf¿ëç¿ëò¿ëÎ¿ëÛ¿í'¿í|¿í≠¿í⁄¿íÂ¿ì8¿ì@¿ìF¿ìG¿ìr¿ì°¿ì ¿ìË¿î¿î¿îI¿îx¿î≠¿îÿ¿ï	¿ï<¿ïo¿ï†¿ï—¿ñ
¿ñ*¿ñS¿ñ]¿ñâ¿ñº¿ñ∆¿ñ˚¿ó@¿óJ¿ó¿óƒ¿óŒ¿óÎ¿ò¿ò¿ò9¿òd¿òé¿òò¿òÎ¿ô@¿ôJ¿ôt¿ô´¿ö¿ö8¿öc¿ör¿ö…¿ö’¿õ¿õk¿õ•¿õ÷¿õÂ¿ú<¿úH¿úR¿úÖ¿ú∂¿ú‚¿ù¿ùM¿ùX¿ùä¿ù∫¿ùÊ¿û¿ûP¿û[¿û\¿û®¿û©¿ûæ¿û»¿ûŒ¿ûœ¿ûÈ¿û˝¿üQ¿üo¿üó¿üø¿ü˘¿†3¿†Y¿†q¿†ï¿†ß¿†√¿†ﬂ¿†˚¿°¿°7¿°a¿°Å¿°ß¿°œ¿°˜¿¢¿¢C¿¢q¿¢º¿¢√¿¢«¿¢»¿¢¯¿£¿£#¿£$¿£^¿£©¿£Ù¿£ı¿§T¿§h¿§õ¿§…¿§ı¿•0¿•c¿•î¿•°¿•—¿¶¿¶W¿¶á¿¶√¿¶À¿ß¿ß,¿ßb¿ßó¿ßﬁ¿ßÊ¿ßÏ¿®¿®S¿®¶¿®Ó¿©7¿©Ü¿©é¿©î¿©¨¿©∫¿©”¿©¿™¿™*¿™T¿™å¿™∂¿™Ó¿´*¿´t¿´∞¿´˙¿¨"¿¨X¿¨u¿¨û¿¨˘¿≠X¿≠â¿≠∫¿≠Û¿Æ%¿ÆP¿Æâ¿Æƒ¿Æˇ¿Ø@¿Øa¿ØÇ¿Øº¿ØÚ¿∞J¿∞Q¿∞e¿∞i¿∞j¿∞∫¿∞Ó¿±)¿±O¿±ê¿±«¿±È¿±Ô¿±¿≤!¿≤K¿≤ß¿≤¥¿≤ˆ¿≥ ¿≥&¿≥'¿≥v¿≥≈¿¥¿¥Y¿¥ß¿¥Ó¿µ¿µh¿µ¨¿µ„¿∂¿∂=¿∂O¿∂ì¿∂œ¿∑¿∑W¿∑ß¿∑«¿∑Í¿∏¿∏¿∏<¿∏W¿∏_¿∏`¿∏à¿∏ù¿∏∑¿∏”¿∏›¿∏„¿∏‰¿π0¿πL¿πk¿πÉ¿πâ¿π±¿π≤¿πŒ¿∫¿∫)¿∫-¿∫.¿∫s¿∫y¿∫¬¿ª¿ª<¿ªQ¿ª_¿ªe¿ª•¿ª©¿ª™¿ª·¿ª˙¿º	¿ºG¿ºZ¿ºd¿ºw¿º{¿º|¿ºà¿º◊¿ºÿ¿º‰¿Ω)¿ΩT¿Ωo¿ΩÅ¿Ω’¿æA¿æa¿æg¿æÚ¿ø]¿øÁ¿¿G¿¿a¿¿ø¿¿Ã¿¡'¿¡B¿¡]¿¡£¿¡¿¬s¿¬´¿¬≥¿√¿√#¿√ò¿ƒ@¿ƒé¿ƒ“¿ƒ„¿≈4¿≈õ¿∆-¿∆z¿∆‘¿«<¿«ç¿«÷¿»¿»z¿»’¿…¿…g¿…Õ¿ 0¿ \¿ À¿ —¿À(¿À¿Àﬁ¿Ã7¿Ãà¿Ã‰¿Õ>¿Õö¿ÕÈ¿Œ8¿Œ<¿Œ=¿ŒÖ¿Œã¿Œ€¿œ¿œ¿œ/¿œN¿œl¿œ¢¿œÛ¿œ˙¿–ì¿–ó¿–ò¿–§¿– ¿–‹¿—¿—l¿—s¿—ú¿—Æ¿—¡¿—’¿—Û¿—˙¿—˛¿—ˇ¿“¿“å¿“º¿” ¿”1¿”5¿”6¿”Ö¿”⁄¿”˜¿‘¿‘#¿‘$¿‘>¿‘q¿‘å¿‘ø¿‘Î¿‘Ò¿‘ı¿‘˜¿‘¯¿’B¿’Ä¿’Ñ¿’‘¿÷!¿÷z¿÷ ¿◊¿◊F¿◊S¿◊t¿◊é¿◊¶¿◊∆¿◊«¿ÿ¿ÿ6¿ÿ<¿ÿ\¿ÿb¿ÿ∂¿Ÿ¿ŸX¿Ÿl¿Ÿà¿Ÿâ¿Ÿ”¿Ÿı¿⁄¿⁄¿⁄4¿⁄P¿⁄Q¿⁄]¿⁄¿⁄™¿⁄Æ¿⁄∞¿⁄±¿€ ¿€6¿€:¿€É¿€ ¿€‚¿‹¿‹"¿‹(¿‹)¿‹s¿‹ï¿‹õ¿‹Á¿›¿›(¿›)¿›N¿›O¿›Å¿›∏¿›π¿›≈¿›Ú¿ﬁ'¿ﬁ+¿ﬁ,¿ﬁ|¿ﬁÇ¿ﬁ–¿ﬂ ¿ﬂ4¿ﬂc¿ﬂí¿ﬂ‡¿‡¿‡0¿‡M¿‡ï¿‡™¿‡¥¿‡Œ¿‡Ï¿·8¿·M¿·W¿·]¿·o¿·p¿·∫¿·⁄¿·Ì¿‚¿‚6¿‚J¿‚q¿‚ï¿‚Ω¿‚»¿‚Ï¿‚˚¿„¿„¿„/¿„U¿„k¿„s¿„y¿„ñ¿„ó¿„≈¿‰¿‰¿‰	¿‰%¿‰l¿‰}¿‰Å¿‰Ç¿‰Œ¿‰‘¿Â#¿ÂD¿ÂJ¿Âò¿ÂÂ¿Ê5¿Ê\¿Êb¿Ê≠¿Ê˝¿ÁK¿Áö¿Á∆¿ÁÒ¿Ë¿Ë4¿ËH¿ËN¿Ëí¿Ë¿¿ËÓ¿È¿È\¿Èê¿È⁄¿Í&¿ÍK¿Í_¿Íi¿Íj¿Í«¿Íˇ¿Î3¿Îk¿Î∂¿Î˚¿ÏF¿Ïë¿Ï√¿ÏÎ¿Ïı¿Ï˝¿Ì¿Ì¿Ì-¿ÌV¿Ìª¿Ó¿ÓS¿Óñ¿Óµ¿Ó”¿Ó€¿Ô¿Ô¿Ô¿Ô0¿ÔU¿Ôe¿Ôm¿Ôá¿Ô™¿Ô∆¿ÔŒ¿ÔÁ¿ÔÌ¿ÔÓ¿8¿ñ¿ö¿ú¿ù¿ﬁ¿Ò#¿ÒC¿ÒU¿ÒY¿Òî¿Ò∫¿Òﬂ¿Ò·¿Ò‚¿Ú2¿Ú@¿ÚD¿Úí¿Ú„¿Û¿Û!¿ÛS¿Ûà¿Ûå¿Û‚¿ÙK¿Ùx¿Ù®¿Ù…¿ı¿ıI¿ıa¿ı|¿ı¬¿ı’¿ı›¿ıı¿ˆ¿ˆ[¿ˆn¿ˆv¿ˆz¿ˆä¿ˆã¿ˆ◊¿ˆı¿˜¿˜-¿˜K¿˜]¿˜Ç¿˜§¿˜ ¿˜”¿˜ı¿¯¿¯¿¯¿¯0¿¯R¿¯f¿¯l¿¯p¿¯â¿¯ä¿¯¢¿¯¿¯ˇ¿˘¿˘¿˘I¿˘~¿˘Ç¿˘Ã¿˘–¿˙¿˙g¿˙¨¿˙√¿˙€¿˙Ì¿˚	¿˚¿˚¿˚I¿˚e¿˚f¿˚•¿˚´¿˚Í¿˚¸¿¸¿¸ ¿¸m¿¸z¿¸ê¿¸ë¿¸ù¿¸…¿¸˝¿˝%¿˝+¿˝Z¿˝^¿˝`¿˝a¿˝´¿˝∆¿˝ ¿˛¿˛f¿˛í¿˛¿¿ˇ¿ˇ'¿ˇL¿ˇR¿ˇí¿ˇ ¿ˇˆ¿ 5¿ h¿ é¿ §¿ ≠¿ ≥¿ ∑¿ ∏¿
¿Y¿q¿w¿«¿¿?¿r¿Æ¿Ô¿.¿/¿b¿h¿ú¿—¿“¿ﬁ¿Ò¿¿k¿q¿ä¿û¿∫¿œ¿”¿‘¿
¿)¿p¿Ä¿ƒ¿¿^¿Ñ¿∏¿Ÿ¿˝¿9¿k¿u¿ä¿í¿ì¿⁄¿¿N¿£¿‘¿	¿	\¿	f¿	n¿	o¿	ì¿	®¿	∞¿	±¿	˙¿
6¿
W¿
≠¿e¿p¿x¿y¿Ø¿¿^¿è¿¢¿¿Z¿e¿x¿Œ¿!¿M¿X¿k¿»¿$¿t¿¿â¿ì¿î¿≥¿¡¿«¿˛¿>¿c¿È¿¿"¿w¿£¿›¿˙¿_¿á¿÷¿4¿}¿œ¿¿+¿5¿=¿C¿ì¿¯¿-¿ä¿Ã¿¿W¿ò¿º¿˝¿@¿Ü¿ ¿ﬂ¿	¿G¿O¿U¿n¿©¿ ¿Ä¿Ü¿Æ¿≈¿…¿ ¿&¿N¿´¿·¿¿(¿Z¿d¿ä¿î¿ö¿⁄¿Ì¿Û¿¿¿¿k¿q¿¿¿‚¿Ë¿5¿Q¿ö¿Û¿¿#¿1¿7¿8¿m¿ƒ¿Ë¿Ó¿Ú¿Û¿r¿î¿∆¿ˇ¿ ¿ ¿ \¿ b¿ ã¿ û¿ §¿ ‘¿ Ò¿!&¿!U¿!o¿!á¿!ë¿!¶¿!∞¿!◊¿!›¿!˘¿"=¿"≠¿"Ã¿"Ê¿"¿"¯¿"˛¿# ¿#$¿#%¿#w¿#}¿#Ã¿#Ó¿#Ù¿$A¿$]¿$±¿$‰¿$¸¿%
¿%¿%{¿%ñ¿%´¿%±¿%µ¿%∂¿%¬¿%Ò¿%Û¿%Ù¿&6¿&J¿&N¿&ò¿&¨¿&À¿&Ã¿&Ï¿&Ì¿';¿'V¿'\¿'´¿'˙¿(F¿(_¿(e¿(≥¿(˝¿)*¿)0¿)}¿)≥¿)◊¿)˛¿*5¿*V¿*Z¿*[¿*™¿*∞¿*¯¿+E¿+ë¿+ó¿+‰¿,$¿,p¿,¿,Ö¿,”¿-"¿-L¿-r¿-s¿-ƒ¿.¿.F¿.L¿.ô¿.Á¿/¿/i¿/∑¿/Ë¿/Ó¿0;¿0ä¿0≠¿0Æ¿0˝¿1K¿1[¿1a¿1∞¿1¸¿2K¿2v¿2|¿2Ã¿3¿3a¿3g¿3∑¿3Ú¿4.¿4/¿4I¿4É¿4£¿4§¿4œ¿4’¿5#¿5T¿5Ü¿5®¿5©¿5ı¿6+¿61¿6A¿6G¿6n¿6€¿6‹¿7S¿7m¿7n¿7ú¿7¢¿7Í¿7˙¿8F¿8f¿8ä¿8®¿8¨¿8≠¿8˚¿9¿9¿9^¿9n¿9º¿9‰¿: ¿:¿:¿:¿:¿:K¿:Q¿:°¿:Ò¿:ˇ¿;¿;Q¿;ò¿;û¿;È¿<7¿<à¿<÷¿=&¿=w¿=¬¿>¿>X¿>©¿>È¿?¿?&¿?I¿?Ç¿?ñ¿?ö¿?õ¿?Œ¿?‘¿@$¿@_¿@e¿@±¿A ¿A¿AC¿Aa¿Aä¿A…¿A„¿AÁ¿AË¿B¿B"¿Bq¿Bø¿Bﬁ¿B‰¿C4¿CÄ¿CÀ¿D¿D-¿D`¿D¿D©¿DÈ¿E¿E¿E	¿E:¿E@¿E¿EÖ¿E“¿F!¿F?¿Fl¿Fà¿FØ¿FÏ¿G¿G¿G	¿G>¿GD¿Gì¿G·¿H ¿H¿HW¿H£¿H¿I@¿IS¿Ià¿I®¿I”¿J¿J0¿J4¿J5¿Jg¿Jm¿Jº¿K
¿K'¿K-¿K{¿K«¿L¿La¿Lt¿L£¿L¿¿LË¿M&¿M?¿MC¿MD¿Mx¿M~¿MÕ¿N¿N8¿N>¿Né¿N⁄¿O'¿Ow¿Oä¿OΩ¿O‹¿P¿PF¿Pa¿Pe¿Pf¿Pò¿Pû¿PÎ¿Q/¿Q5¿Q~¿Qæ¿Q÷¿Q‹¿R(¿Rx¿Rê¿Rø¿R‹¿S¿SB¿S[¿S_¿S`¿Sí¿Sò¿SÂ¿T)¿T/¿Tx¿T∏¿T–¿T÷¿U$¿Ut¿Ué¿UΩ¿U⁄¿V¿V@¿VY¿V]¿V^¿Vå¿Ví¿V⁄¿V‡¿W/¿WX¿W¿Wò¿Wº¿Wˆ¿X¿X¿X¿X=¿XC¿Xå¿Xù¿X£¿XÚ¿Y¿Y@¿YX¿Y{¿Y¥¿Y»¿YÃ¿YÕ¿Y¸¿Z¿ZI¿ZO¿Zû¿Z«¿Z¿[
¿[/¿[j¿[Ä¿[Ñ¿[Ö¿[ª¿[¡¿\¿\_¿\É¿\â¿\“¿]¿]<¿]s¿]î¿]¿¿^¿^¿^#¿^$¿^j¿^p¿^∫¿^Â¿^Î¿_9¿__¿_ª¿_Ò¿`2¿`M¿`õ¿`Õ¿`Ï¿`Ù¿a!¿a%¿a&¿am¿as¿aΩ¿aÈ¿aÔ¿b?¿be¿b√¿b˙¿c<¿cW¿c¶¿cÿ¿c˜¿cˇ¿d-¿d1¿d2¿ds¿dy¿d√¿dÍ¿d¿e@¿ef¿e∏¿eÈ¿f%¿f@¿fâ¿fª¿f⁄¿f‚¿g¿g¿g¿gV¿g\¿g¶¿gÕ¿g”¿h#¿hI¿hù¿hœ¿i¿i'¿iq¿i£¿i¬¿i ¿i¯¿i¸¿i˝¿j3¿j9¿jä¿j‘¿j⁄¿k%¿kg¿k•¿kÕ¿l ¿l¿lY¿lÑ¿l„¿m+¿mG¿mo¿mõ¿m•¿m≠¿m ¿mŒ¿mœ¿n ¿n¿nW¿n}¿nÉ¿n“¿nÔ¿o¿o<¿oe¿oÄ¿oπ¿oÁ¿p¿p&¿p.¿pF¿pJ¿pK¿pé¿pî¿p‚¿q ¿qh¿q≤¿q‹¿q‚¿r3¿rÑ¿r“¿rÿ¿rË¿rÓ¿s>¿sg¿sπ¿t
¿t8¿tq¿t¿¿tÍ¿tÓ¿tÔ¿u2¿u8¿uÄ¿u¿¿v¿vV¿vÄ¿vÜ¿v◊¿w(¿wv¿w|¿wå¿wí¿wﬂ¿w˝¿xO¿x†¿xŒ¿y¿yV¿yÄ¿yÑ¿yÖ¿y‘¿yÒ¿y˜¿zD¿zë¿z„¿{/¿{5¿{Ö¿{‘¿|¿|o¿|µ¿}¿}!¿}K¿}î¿}¿¿}ƒ¿}≈¿~¿~$¿~|¿~}¿~Ã¿~ﬁ¿~‰¿2¿Ä¿ß¿≠¿¸¿ÄG¿Äç¿Äµ¿Ä‚¿Å ¿Å)¿ÅD¿ÅZ¿Åx¿Å|¿Å}¿Å…¿Åœ¿Ç¿Çf¿Ç∂¿ÇË¿É¿É+¿ÉM¿Éi¿Éá¿Éã¿Éå¿Éÿ¿Éﬁ¿Ñ+¿Ñ7¿Ñi¿ÑÉ¿Ñ®¿ÑÕ¿Ñ€¿Ñ·¿Ö ¿Ö¿Ö"¿Ö#¿Öm¿Ö~¿Ö¶¿Öª¿Ö€¿Ö˚¿Ü	¿Ü¿Ü)¿ÜG¿ÜK¿ÜL¿Üñ¿Ü≥¿Ü·¿Ü˘¿á¿á?¿áM¿áS¿áp¿áé¿áí¿áì¿áﬂ¿áÒ¿á˜¿àD¿àX¿à^¿à™¿à„¿â¿â)¿âL¿âo¿â}¿âÉ¿â†¿âæ¿â¬¿â√¿ä¿ä$¿ä*¿äw¿äã¿äë¿ä‹¿ä˚¿ã1¿ãM¿ãt¿ãõ¿ã©¿ãØ¿ã–¿ãÓ¿ãÚ¿ãÛ¿åD¿åä¿åê¿å’¿ç¿çX¿ç^¿ç™¿ç˙¿é+¿é_¿é¿é≠¿éÀ¿éœ¿é–¿è¿è¿èa¿è´¿èÙ¿ê+¿êç¿ê˚¿ëJ¿ëh¿ë¢¿ë«¿í¿í¿í¿íC¿íú¿í∂¿íƒ¿í ¿ì¿ì*¿ì<¿ìB¿ìF¿ìG¿ìá¿ìØ¿ì ¿ì¿î¿î,¿î0¿î1¿îk¿îq¿î≥¿îπ¿îÚ¿î¯¿ï¿ï¿ï\¿ïã¿ïß¿ï◊¿ïı¿ï˘¿ï˙¿ñI¿ñW¿ñ]¿ñß¿ñˆ¿óB¿óã¿óÃ¿ó“¿ò¿ò¿ò!¿ò'¿òa¿òù¿òŸ¿ô¿ô;¿ôY¿ô]¿ô^¿ôÆ¿ô¥¿ôˆ¿ô¸¿ö5¿ö;¿öK¿öQ¿öü¿öÌ¿õ3¿õÅ¿õ«¿õˆ¿ú¿úB¿ú`¿úd¿úe¿ú¥¿úÿ¿úﬁ¿ù(¿ùw¿ù√¿û¿ûM¿ûS¿ûå¿ûí¿û¢¿û®¿û‚¿ü2¿üb¿ü≤¿ü‚¿†¿†Z¿†î¿†º¿†⁄¿†ﬁ¿†ﬂ¿°¿°B¿°H¿°ì¿°ô¿°Ë¿¢2¿¢]¿¢c¿¢ú¿¢¢¿¢≤¿¢∏¿£¿£P¿£~¿£¿¿£ﬁ¿£‚¿£„¿§¿§c¿§i¿§∏¿•¿•-¿•3¿•l¿•r¿•Ç¿•à¿•À¿¶¿¶^¿¶™¿¶‰¿ß¿ß¿ß¿ßA¿ßj¿ßp¿ßª¿ß¡¿®¿®Z¿®Ö¿®ã¿®ƒ¿® ¿©!¿©b¿©ê¿©“¿©¿©Ù¿©ı¿™/¿™u¿™{¿™ ¿´¿´?¿´E¿´~¿´Ñ¿´î¿´ö¿´›¿¨+¿¨p¿¨º¿¨ˆ¿≠¿≠¿≠¿≠g¿≠m¿≠Æ¿≠¥¿≠Ì¿≠Û¿Æ¿Æ	¿ÆV¿ÆÉ¿Æù¿ÆÀ¿ÆÈ¿ÆÌ¿ÆÓ¿Ø>¿Ø_¿Øe¿ØÆ¿Ø˝¿∞J¿∞ì¿∞‘¿∞⁄¿±¿±¿±)¿±/¿±h¿±¢¿±›¿≤¿≤;¿≤Y¿≤]¿≤^¿≤ì¿≤ô¿≤“¿≤Ù¿≥¿≥,¿≥D¿≥b¿≥f¿≥g¿≥∞¿≥¡¿¥ ¿¥*¿¥_¿¥x¿¥Ü¿¥å¿¥®¿¥∆¿¥ ¿¥À¿µ¿µ:¿µ`¿µ{¿µõ¿µµ¿µ‘¿µ‚¿µË¿∂ ¿∂¿∂"¿∂#¿∂t¿∂ä¿∂ê¿∂‡¿∑/¿∑C¿∑i¿∑Ñ¿∑§¿∑æ¿∑›¿∑Î¿∑Ò¿∏	¿∏'¿∏+¿∏,¿∏w¿∏í¿∏ò¿∏®¿∏Æ¿∏˝¿π<¿π\¿πå¿πê¿πë¿π—¿π◊¿πÁ¿πÌ¿∫:¿∫w¿∫ñ¿∫≈¿∫…¿∫ ¿ª ¿ª7¿ªS¿ª¿ªÉ¿ªÑ¿ª∑¿ªΩ¿º	¿ºV¿ºâ¿ºè¿º›¿Ω+¿Ωy¿Ωæ¿æ¿æ7¿æ=¿æM¿æS¿æ©¿æË¿ø¿ø8¿ø<¿ø=¿øÉ¿ø±¿øÁ¿¿¿¿<¿¿`¿¿~¿¿Ç¿¿É¿¿Œ¿¿‘¿¡!¿¡t¿¡∆¿¡˛¿¬;¿¬Z¿¬â¿¬ç¿¬é¿¬ﬂ¿√9¿√?¿√ê¿√ÿ¿√ﬁ¿ƒ'¿ƒG¿ƒ∑¿ƒ◊¿≈¿≈;¿≈?¿≈@¿≈~¿≈Ñ¿≈’¿∆$¿∆Y¿∆_¿∆Ø¿∆”¿∆Ÿ¿«(¿«U¿«[¿«Æ¿»¿»¿»¿»û¿»—¿… ¿…¿…¿…V¿…°¿…µ¿…ª¿ ¿ S¿ Y¿ ¢¿ ¡¿À.¿ÀM¿ÀÖ¿À∏¿ÀÁ¿ÀÎ¿ÀÏ¿Ã8¿Ã`¿Ãf¿Ã∑¿Ã˛¿Õ¿ÕM¿Õh¿ÕÂ¿Œ¿Œ<¿Œo¿Œ¶¿Œ™¿Œ´¿Œ¸¿œJ¿œP¿œ°¿œ›¿œ„¿–,¿–@¿–≠¿–Ã¿–ˇ¿—.¿—2¿—3¿—É¿—π¿—ø¿“¿“T¿“±¿“‡¿”¿”#¿”$¿”f¿”•¿”≈¿”ı¿”˘¿”˙¿‘C¿‘~¿‘ú¿‘ ¿‘Œ¿‘œ¿’¿’S¿’p¿’ù¿’°¿’¢¿’Î¿÷ ¿÷;¿÷f¿÷j¿÷k¿÷∂¿÷Ô¿◊¿◊9¿◊=¿◊>¿◊â¿◊¬¿◊ﬂ¿ÿ¿ÿ¿ÿ¿ÿY¿ÿf¿ÿ©¿ÿÀ¿ÿ˝¿Ÿ¿Ÿ¿Ÿ@¿ŸF¿Ÿï¿ŸÊ¿ŸÏ¿⁄<¿⁄â¿⁄õ¿⁄°¿⁄Ò¿€¿€¿€g¿€µ¿‹¿‹:¿‹s¿‹ê¿‹Ω¿‹¡¿‹¬¿‹˚¿›:¿›Z¿›ä¿›é¿›è¿›≈¿›À¿›˝¿ﬁ:¿ﬁY¿ﬁà¿ﬁå¿ﬁç¿ﬁº¿ﬁ¬¿ﬂ¿ﬂa¿ﬂß¿ﬂ‰¿‡¿‡2¿‡6¿‡7¿‡b¿‡h¿‡∑¿‡¿·/¿·O¿·¿·É¿·Ñ¿·‘¿·ˇ¿‚¿‚U¿‚£¿‚Ó¿„¿„p¿„ô¿„“¿„÷¿„◊¿‰ ¿‰Y¿‰è¿‰∞¿‰‹¿‰˜¿Â¿Â1¿Â5¿Â6¿ÂÜ¿Âò¿Âû¿ÂÓ¿Ê:¿ÊÄ¿ÊÜ¿Êñ¿Êú¿ÊÊ¿Á¿Á2¿ÁX¿Ás¿Áê¿ÁÆ¿Á≤¿Á≥¿Ë¿Ë¿Ë¿ËU¿Ë[¿Ëk¿Ëq¿Ëƒ¿Ë˜¿È¿È:¿ÈU¿Ès¿Èë¿Èï¿Èñ¿ÈÂ¿È˜¿È˝¿Í8¿Í>¿ÍN¿ÍT¿Íß¿Í⁄¿Íˆ¿Î¿Î8¿ÎV¿Ît¿Îx¿Îy¿ÎÉ¿ÎÑ¿ÎÃ¿Î‰¿ÎÍ¿Î˙¿Ï ¿ÏO¿Ï_¿Ï¢¿Ï£¿ÏÓ¿Ì
¿Ìa¿Ìb¿Ìâ¿Ìä¿ÌŸ¿Ì˜¿Ì˝¿ÓA¿Óí¿Ó∞¿Ó∂¿Ô¿ÔS¿Ô†¿Ô¶¿Ô∂¿Ôº¿Ô˝¿¿F¿q¿ë¿ï¿ñ¿¥¿µ¿«¿˘¿Ò
¿Ò&¿Ò3¿ÒP¿ÒV¿Òt¿Òx¿Òy¿Òº¿ÒΩ¿Ò‚¿Ò„¿Ú,¿ÚA¿ÚG¿Úñ¿Ú€¿Û¿Û]¿Ûp¿Ûv¿Û¨¿Û¿¿Û∆¿ÛÓ¿Ù¿Ù¿ÙL¿Ù`¿Ùf¿Ù™¿Ùæ¿Ùƒ¿ı¿ı$¿ı*¿ıÑ¿ıò¿ıû¿ıØ¿ı≥¿ı¥¿ˆ ¿ˆ¿ˆT¿ˆx¿ˆ~¿ˆÕ¿˜¿˜¿˜W¿˜©¿˜„¿¯¿¯2¿¯3¿¯V¿¯d¿¯j¿¯ë¿¯‰¿˘¿˘;¿˘E¿˘O¿˘\¿˘É¿˘â¿˘æ¿˙¿˙¿˙J¿˙y¿˙™¿˙€¿˚¿˚4¿˚]¿˚ê¿˚ø¿˚Ó¿¸%¿¸&¿¸Q¿¸r¿¸è¿¸∂¿¸º¿¸Ï¿˝¿˝B¿˝w¿˝¶¿˝≠¿˝÷¿˛¿˛¿˛?¿˛Ç¿˛à¿˛∫¿˛˝¿ˇ¿ˇ2¿ˇ_¿ˇá¿ˇª¿ˇÍ¿ˇÒ¿ ¿ ,¿ 2¿ 3¿ ¿ Ä¿ ∆¿  ¿ À¿ ˛¿ ¿D¿v¿¶¿¿6¿Ç¿™¿∆¿Ë¿¿R¿~¿º¿Ê¿¿*¿J¿j¿Ç¿Æ¿÷¿ ¿,¿X¿Ä¿ß¿À¿˘¿#¿M¿¿°¿·¿¿¿¿¿n¿¿û¿À¿—¿¿l¿†¿≤¿≥¿‚¿Ë¿	7¿	V¿	h¿	j¿	k¿	ñ¿	»¿	˚¿
(¿
V¿
[¿
â¿
™¿
Æ¿
˝¿¿=¿¥¿“¿I¿O¿S¿Ä¿¢¿¶¿ß¿˜¿˘¿˙¿K¿h¿l¿π¿	¿C¿G¿ì¿¿¿ƒ¿¿A¿E¿S¿W¿õ¿˘¿J¿í¿π¿∫¿¿¿$¿d¿j¿∏¿Á¿˝¿˛¿
¿4¿j¿È¿Í¿9¿Z¿x¿ó¿ù¿û¿¿ˇ¿-¿>¿s¿É¿â¿ä¿≥¿∑¿∏¿·¿Á¿7¿N¿T¿•¿ı¿C¿P¿]¿ê¿ë¿ù¿‚¿¿S¿W¿Y¿Z¿†¿´¿Ø¿ı¿!¿%¿u¿ƒ¿¿¿ ¿l¿ô¿ù¿È¿2¿t¿™¿⁄¿*¿0¿[¿s¿Ö¿ï¿≈¿Ì¿Ó¿<¿å¿ú¿¢¿¿=¿S¿T¿`¿à¿®¿∏¿æ¿Á¿Î¿Ï¿¯¿=¿h¿∞¿¥¿∂    _kUnblockedUserActionsSemanticsTag"ChildSemanticsConfigurationsResult)ChildSemanticsConfigurationsResultBuilderCustomSemanticsActionAttributedStringAttributedStringPropertySemanticsData_SemanticsDiagnosticableNodeSemanticsHintOverridesSemanticsPropertiesdebugResetSemanticsIdCounterSemanticsNode_BoxEdge_SemanticsSortGroup_pointInParentCoordinates_childrenInDefaultOrder_TraversalSortNodeSemanticsOwnerSemanticsConfigurationDebugSemanticsDumpOrder_concatAttributedStringSemanticsSortKeyOrdinalSortKey ≠