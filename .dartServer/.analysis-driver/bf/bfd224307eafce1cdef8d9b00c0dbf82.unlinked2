Äáindex==hashCodeoffset_offsetspandetachtoStringsetupParentData_layoutChildlayoutInlineChildrenpositionInlineChildrendefaultApplyPaintTransformpaintInlineChildrenhitTestInlineChildren_placeholderCharacter_textPainter_cachedAttributedLabels_cachedCombinedSemanticsInfostext
selections_lastSelectableFragments	registrar
_registrar%_updateSelectionRegistrarSubscription%_removeSelectionRegistrarSubscription_getSelectableFragments_disposeSelectableFragmentsalwaysNeedsCompositingmarkNeedsLayoutdispose	textAligntextDirectionsoftWrap	_softWrapoverflow	_overflowtextScaleFactor
textScalermaxLineslocale
strutStyletextWidthBasistextHeightBehaviorselectionColor_selectionColor_getOffsetForPosition_computeLineMetricscomputeMinIntrinsicWidthcomputeMaxIntrinsicWidth_computeIntrinsicHeightcomputeMinIntrinsicHeightcomputeMaxIntrinsicHeightcomputeDistanceToActualBaseline$_canComputeDryLayoutForInlineWidgets_canComputeIntrinsicsCached_canComputeIntrinsicshitTestSelfhitTestChildren_needsClipping_overflowShaderdebugHasOverflowShader_layoutTextsystemFontsDidChange_placeholderDimensions_layoutTextWithConstraintscomputeDryLayoutperformLayoutapplyPaintTransformpaintgetOffsetForCaretgetFullHeightForCaretgetBoxesForSelectiongetPositionForOffsetgetWordBoundary_getLineAtOffset_getTextPositionAbove_getTextPositionBelow_getTextPositionVerticaltextSizedidExceedMaxLines_semanticsInfodescribeSemanticsConfiguration%_childSemanticsConfigurationsDelegate!_createSemanticsConfigForTextInfo_cachedChildNodesassembleSemanticsNode_createShowOnScreenForclearSemanticsdebugDescribeChildrendebugFillPropertiesrange	paragraphfullText_textSelectionStart_textSelectionEnd_selectableContainsOriginWord_startHandleLayerLink_endHandleLayerLinkvalue_selectionGeometry_updateSelectionGeometry_getSelectionGeometrydispatchSelectionEventgetSelectedContent_didChangeSelection_updateSelectionEdge_closestWordBoundary_updateSelectionStartEdgeByWord_updateSelectionEndEdgeByWord_updateSelectionEdgeByWord_clampTextPosition_setSelectionPosition_handleClearSelection_handleSelectAll_handleSelectWord_getWordBoundaryAtPosition#_handleDirectionallyExtendSelection _handleGranularlyExtendSelection"_moveBeyondTextBoundaryAtDirection_moveToTextBoundaryAtDirection_handleVerticalMovement!_positionIsWithinCurrentSelection_compareTextPositionsgetTransformTopushHandleLayers_cachedBoundingBoxesboundingBoxes_cachedRect_rectdidChangeParagraphLayoutsizegetLineAtOffsetgetTextPositionAbovegetTextPositionBelow_WordBoundaryRecord
_kEllipsis PlaceholderSpanIndexSemanticsTagTextParentData%RenderInlineChildrenContainerDefaultsRenderParagraph_SelectableFragmentÅ®BoxHeightStyleBoxWidthStyleGradientLineMetricsPlaceholderAlignmentShaderTextBoxTextHeightBehaviorTextPositionStringRichText	immutableSemanticsTagintoverrideboolObjectindexhashRenderEditable
WidgetSpan
ParentDataContainerParentDataMixin	RenderBoxOffsetPlaceholderSpanParentDataWidgetvoiddetachContainerRenderObjectMixinlayoutInlineChildrenTextPainterpositionInlineChildrenapplyPaintTransformdefaultApplyPaintTransformpaintInlineChildrenpainthitTestInlineChildrenhitTestChildrenextractFromInlineSpan
InlineSpan
parentDataPlaceholderDimensionsdoubleChildLayouterspanemptysizeBoxConstraintsmaxWidth	alignmentbaselinebaselineOffsetaboveBaselinebelowBaselinebottommiddletopgetDistanceToBaselinesetPlaceholderDimensions	protectedList
firstChildchild
childAfter_layoutChild
childCountinlinePlaceholderBoxeslength_offsetboxleftoffsetMatrix4setZero	translatedxdyPaintingContext
paintChildBoxHitTestResultaddWithPaintOffsetpositionhitTesttransformed"RelayoutWhenSystemFontsChangeMixin	TextAlignstartTextDirectionTextOverflowclip
Deprecated
TextScaler	noScalingLocale
StrutStyleTextWidthBasisparentColorSelectionRegistrardebugAssertIsValid	identicaltext	textAligntextDirection
textScalerlinearmaxLinesellipsislocale
strutStyletextWidthBasistextHeightBehavioraddAllchildren	registrarfromCharCodeplaceholderCodeUnitAttributedStringInlineSpanSemanticsInformation	compareToRenderComparisonmetadatamarkNeedsSemanticsUpdatemarkNeedsPaintlayoutvisibleForTestingTextSelectionfragment_textSelectionStart_textSelectionEndadd
baseOffsetextentOffsetforEach
isNotEmptymarkNeedsCompositingBitsUpdateremovetoPlainTextincludeSemanticsLabelsindexOf	paragraphrange	TextRangeendfullTextdisposeelementdidChangeParagraphLayoutmarkNeedsLayoutjustifyltrrtltextScaleFactoranyvaluehasSelectionRectzerocomputeLineMetricsinfinitySizegetMinIntrinsicWidthminIntrinsicWidthgetMaxIntrinsicWidthmaxIntrinsicWidthChildLayoutHelperdryLayoutChildminWidthheightTextBaselinedebugNeedsLayoutconstraintscomputeDistanceToActualBaseline
alphabeticvisitChildrenRenderObjectdebugCheckingIntrinsics	GlyphInfogetClosestGlyphForOffsetgraphemeClusterLayoutBoundscontainsgetSpanForPositiongraphemeClusterCodeUnitRangeHitTestTargetHitTestEntrysystemFontsDidChangedebugCannotComputeDryLayoutreason	constrainlayoutChilddidExceedMaxLineswidthvisiblefadeTextSpanstylefadeSizePainterdebugRepaintTextRainbowEnabledPaintcolordebugCurrentRepaintColortoColorcanvasdrawRect	saveLayersaveclipRect	blendMode	BlendModemodulateshaderrestoregetOffsetForCaretgetFullHeightForCaretboxHeightStyleboxWidthStyletightgetBoxesForSelectiongetPositionForOffsetgetWordBoundarygetLineBoundarypreferredLineHeight_combineSemanticsInfoSemanticsConfigurationdescribeSemanticsConfigurationgetSemanticsInformationinfo
recognizerisPlaceholderexplicitChildNodesisSemanticBoundarychildConfigurationsDelegateStringBufferStringAttributesemanticsLabelstringAttributesinfoAttributecopywritetoString
attributesattributedLabel"ChildSemanticsConfigurationsResult)ChildSemanticsConfigurationsResultBuildercombineSemanticsInfomarkAsMergeUptagsChildrenWithbuildrequiresOwnNodeLinkedHashMapKeySemanticsNodeIterable	elementAtisTaggedisEmptyfirsttoRect	directionskipexpandToIncludetextBoxfromLTWHmaxmin	maxHeightfromLTRBfloorToDoublerightceilToDoublesortKeyOrdinalSortKeyGestureRecognizerTapGestureRecognizeronTapisLinkDoubleTapGestureRecognizeronDoubleTapLongPressGestureRecognizeronLongPressruntimeTypeparentPaintClipRect	intersectisHiddenkeys	UniqueKeykeyshowOnScreen
updateWithconfigrectchildrenInInversePaintOrderVoidCallback
descendantclearSemanticsDiagnosticsNodetoDiagnosticsNodenameDiagnosticsTreeStyle
transitionDiagnosticPropertiesBuilderdebugFillPropertiesEnumPropertyFlagPropertyifTrueifFalseshowNameDiagnosticsPropertydefaultValueIntPropertyifNull
SelectableDiagnosticableChangeNotifierTextLayoutMetricsisValidisCollapsedisNormalized kFlutterMemoryAllocationsEnabledmaybeDispatchObjectCreation	LayerLinkSelectionGeometrynotifyListenersstatusSelectionStatusnone
hasContent_getOffsetForPositionstartSelectionPointSelectionPointlocalPosition
lineHeight_textPainter
handleTypeTextSelectionHandleTypeendSelectionPointselectionRects	collapseduncollapsedSelectionResultSelectionEventtypeSelectionEventTypestartEdgeUpdateendEdgeUpdateSelectionEdgeUpdateEventTextGranularitygranularity	character
edgeUpdateglobalPositionisEndworddocumentlineclear	selectAll
selectWordSelectWordSelectionEventgranularlyExtendSelectionGranularlyExtendSelectionEventforwarddirectionallyExtendSelection!DirectionallyExtendSelectionEventSelectedContent	plainText	substringgetTransformToinvertMatrixUtilstransformPointSelectionUtilsgetResultBasedOnRectadjustDragOffsetnextprevious	wordStartabswordEndaffinityTextAffinity
downstreamupstreamglobalToLocalSelectionExtendDirectionpreviousLinebackwardnextLineisNaNMapEntrytargetedEdge(horizontalBaselineInParagraphCoordinatesbelow
moveResult edgeOffsetInParagraphCoordinates$baselineOffsetInParagraphCoordinates
textInsideCharacterBoundaryTextBoundarywordBoundariesmoveByWordBoundarytextBoundaryLineBoundaryDocumentBoundarygetTrailingTextBoundaryAtgetLeadingTextBoundaryAtcharacterBoundary_computeLineMetricslineMetrics
lineNumberattached
fromPointsselectionColorPaintingStylefillshift	pushLayerLeaderLayerlink_getLineAtOffsetclamp_getTextPositionAbove_getTextPositionBelowSemanticsTag
ParentDataContainerParentDataMixin	RenderBoxContainerRenderObjectMixin%RenderInlineChildrenContainerDefaults"RelayoutWhenSystemFontsChangeMixin
SelectableDiagnosticableChangeNotifierTextLayoutMetricsMÿn^‘;ÅEŸ≤5UiD    Ä¶  dart:collection  Ä¿  Ä“mathÄ’	dart:mathÄÚÅfBoxHeightStyleBoxWidthStyleGradientLineMetricsPlaceholderAlignmentShaderTextBoxTextHeightBehavior Ä‹  ÄÏuiÄÔdart:ui  Åj  package:flutter/foundation.dart  Åî  package:flutter/gestures.dart  Åº  package:flutter/semantics.dart  ÅÂ  package:flutter/services.dart  Ç  box.dart  Ç!  
debug.dart  Ç6  
layer.dart  ÇK  layout_helper.dart  Çh  object.dart  Ç~  selection.dart    	dart:core¿ T= ¿K´àX <ÄÜÄ§Ä•ÄøÄ€ÅhÅiÅìÅªÅ‰ÇÇÇ Ç5ÇJÇgÇ}ÇñÇóÇ√ÉÉÉ8É9ÉÇÉ•É©É¯ÑÑ"Ñ`ÑñÑúÑÍÖÖmÖnÖãÖûÖüÖ´ÖŒÜÜ$Ü(Ü)Ü5ÜÅÜÉÜÑÜœááTá§á™á˚àIà`àÅàîàïà‘à⁄â(âSâlâmâyâãâúâ∞âƒâ»â…â’ä5ä7ä8äÇäœãããbã≤ååå åNåRå£åÚçCçîçÃç–éé4é8ézéüé£é˜é˚èNèeèièwè{è«è˜êiêuêüêŒê˘êˇëëëoë∫ëÌíííCíbí™íœíÚì&ì[ìêìæìÏîîzîáîíîñîóîÊïïïkï≥ïπññRñXñhñnñΩñ¯óófóäóﬁòòòòòmòÅòáò÷ô#ôtô∏ôæôŒô‘ö"öBöOöáö™ö‘öÔõ_õoõwõ»úú#ú)úEúñúªú‹ú‚úÊúÁù7ùRùXù¢ùÓù˚ûCûìû∆û‡û˚üü9ü?üCüDüdüjüπüÃüŸ††A†]†Ø†È°
°°"°Y°z°Ä°Ñ°Ö°µ°ª¢
¢¢*¢s¢ñ¢≤££>£_£u£}£±£Œ£Í§[§d§w§å§î§µ§ª§Õ§—§”§‘••ª•‰•Í¶:¶n¶ì¶æ¶Ëßß1ßBßcß“®®®6®h®{®è®´®Ê©©4©O©r©ú©Õ©‹™,™å™ñ™≥™–™˘´´1´P´w´‚´ˇ¨I¨b¨É¨¨¨›¨Ë¨˛≠≠"≠#≠ã≠å≠Æ≠Ø≠‚≠„Æ*Æ+ÆFÆsÆíÆ≈ÆÏÆ¸Ø"ØEØsØóØ∫Ø›∞∞1∞_∞y∞ù∞¡∞‰±±,±Z±Ü±°±“±˘≤*≤0≤4≤5≤e≤k≤π≤»≤›≥≥0≥V≥\≥ó≥„¥¥E¥Z¥s¥±¥Ó¥˙µµµµ'µ+µ,µyµ…µÂ∂∂∂j∂ù∂ø∂Ï∑∑∑∑L∑o∑á∑¥∑∏∑π∑Í∏∏∏∏X∏ê∏¿∏Ë∏Ó∏Ú∏Ûπ$πfπtπzπµπππ∫πÚ∫@∫Ü∫ô∫¿ªªª4ªVª`ªtªìª∞ªÊºººº4º<ºNºTºgºkºlºìºøºÕº”ΩΩ9Ω?ΩdΩhΩiΩuΩ…Ω Ω÷ΩÒæ]æzæ~ææãæûæÀæÓø
øø#ø$øWøåøØø⁄øËøÓ¿ @¿ @(¿ @,¿ @-¿ @S¿ @Y¿ @ú¿ @›¿ @„¿ A1¿ AÄ¿ AŒ¿ B¿ Bg¿ Bw¿ Bπ¿ B‰¿ C¿ C!¿ C'¿ CO¿ Cf¿ Cj¿ Ck¿ C§¿ C™¿ CÙ¿ D¿ D¿ Di¿ Dx¿ Dö¿ D¨¿ D…¿ DÁ¿ Dı¿ D˚¿ E¿ E)¿ E-¿ E.¿ E[¿ EÖ¿ Eü¿ Eƒ¿ E‚¿ E¿ Eˆ¿ F¿ F]¿ Ft¿ Fx¿ Fy¿ Fø¿ F€¿ F·¿ G¿ G¿ Gp¿ Gè¿ Gû¿ GΩ¿ H*¿ Hd¿ Hh¿ H¶¿ Hµ¿ H‘¿ IA¿ I{¿ I¿ I•¿ I–¿ I‘¿ I’¿ J¿ JD¿ Ji¿ Jï¿ J£¿ J©¿ JŒ¿ JÍ¿ K¿ K¿ K¿ KR¿ Kù¿ K’¿ L¿ LP¿ L\¿ Ly¿ L°¿ LÀ¿ LŸ¿ Lﬂ¿ M¿ M¿ M5¿ M9¿ M:¿ M|¿ Mò¿ Mû¿ MÍ¿ N4¿ N¿ Nº¿ NÈ¿ O¿ O$¿ OL¿ OZ¿ O`¿ OÅ¿ Où¿ O¥¿ O∏¿ Oπ¿ O¿ P)¿ PF¿ Pl¿ Pò¿ P¶¿ P¨¿ P—¿ PÌ¿ Q¿ Q¿ Q	¿ QD¿ Qà¿ Qµ¿ QÂ¿ QÛ¿ Q˘¿ R"¿ R>¿ RU¿ RY¿ RZ¿ RÑ¿ Rÿ¿ S¿ SE¿ SS¿ SY¿ SÜ¿ S¢¿ Sπ¿ SΩ¿ Sæ¿ SÚ¿ S¯¿ TC¿ Ts¿ Tç¿ T≤¿ T÷¿ T‰¿ TÍ¿ U¿ Ux¿ Uê¿ Uñ¿ Uö¿ Uõ¿ U”¿ V:¿ V>¿ V?¿ Vn¿ Vú¿ V†¿ V°¿ V≠¿ V‡¿ W¿ W¿ W¿ W\¿ Ws¿ W‚¿ WÍ¿ X¿ XG¿ XK¿ XL¿ XX¿ Xã¿ XØ¿ X¡¿ X«¿ Y¿ Y¿ Yb¿ Y±¿ Z ¿ Z(¿ ZZ¿ ZÖ¿ Zâ¿ Zä¿ Zª¿ Zﬂ¿ ZÒ¿ Z˜¿ [a¿ [î¿ [¥¿ [∏¿ [π¿ [≈¿ [¯¿ \#¿ \'¿ \(¿ \4¿ \g¿ \í¿ \ñ¿ \ó¿ \£¿ \Â¿ ]¿ ]2¿ ]_¿ ]™¿ ]Ú¿ ^?¿ ^å¿ ^“¿ _¿ _^¿ _b¿ _c¿ _≥¿ _∆¿ _ˆ¿ `7¿ `}¿ `î¿ `∆¿ a¿ a7¿ ah¿ a†¿ a«¿ aÒ¿ b!¿ b*¿ b2¿ b6¿ b7¿ b\¿ bõ¿ bﬂ¿ bÙ¿ c¿ cz¿ cÜ¿ c√¿ d¿ dd¿ dm¿ dÖ¿ dâ¿ dä¿ dñ¿ d√¿ dƒ¿ d–¿ d›¿ e-¿ e{¿ e«¿ f¿ fg¿ f´¿ f’¿ g;¿ g©¿ g∑¿ gŒ¿ gÛ¿ h¿ h0¿ h>¿ hv¿ h|¿ hÄ¿ hÅ¿ h†¿ hæ¿ hø¿ i¿ i¿ i"¿ i]¿ ir¿ i∞¿ i±¿ j¿ jQ¿ jj¿ jÑ¿ jø¿ j∆¿ j ¿ jÀ¿ j◊¿ j˜¿ k¿ k=¿ kA¿ kB¿ ké¿ kì¿ k‚¿ l2¿ ly¿ l∞¿ l±¿ lÒ¿ m4¿ mÖ¿ mâ¿ mä¿ mñ¿ m£¿ m„¿ n¿ n1¿ nÉ¿ nç¿ n•¿ n´¿ o$¿ ou¿ o™¿ oÆ¿ oØ¿ oª¿ o‘¿ p¿ pu¿ p¢¿ p‰¿ pÂ¿ q6¿ qÇ¿ qÃ¿ r¿ r[¿ rà¿ rœ¿ r˚¿ r¸¿ sW¿ sñ¿ sÂ¿ t4¿ tÉ¿ t–¿ u¿ u]¿ uz¿ uï¿ u∏¿ u⁄¿ u¸¿ v¿ v@¿ va¿ vÉ¿ v£¿ vƒ¿ vˇ¿ wL¿ wv¿ wö¿ w∂¿ wÕ¿ wÔ¿ x¿ x;¿ xa¿ xÄ¿ x≥¿ xŸ¿ xˇ¿ y<¿ yJ¿ y|¿ y¢¿ y∆¿ z¿ z¿ z1¿ za¿ zÆ¿ z‡¿ {¿ {*¿ {s¿ {Ç¿ {é¿ {≥¿ {ª¿ {»¿ {Ê¿ |¿ |
¿ |¿ |¿ |¿ |\¿ |é¿ |í¿ |ì¿ |ü¿ |÷¿ } ¿ }m¿ }ª¿ }Û¿ }˙¿ ~C¿ ~f¿ ~m¿ ~π¿ ~–¿ ~˝¿ ~˛¿ ¿ :¿ ^¿ ñ¿ Õ¿ ’¿ Ë¿ Ú¿ Û¿ Ä¿ Ä6¿ Ä[¿ Ä©¿ ÄÊ¿ Å¿ Å(¿ ÅG¿ ÅO¿ Åv¿ Å|¿ Å}¿ Å©¿ Å˜¿ Ç ¿ Ç(¿ Ç.¿ Ç/¿ Ç_¿ Ç`¿ Çä¿ Çã¿ Ç•¿ Ç ¿ É¿ É&¿ ÉQ¿ Éw¿ É≥¿ Éª¿ É€¿ É·¿ ÉÂ¿ ÉÊ¿ Ñ¿ Ñ"¿ ÑC¿ Ñå¿ Ñ´¿ Ñÿ¿ Ö¿ Ö!¿ Ö"¿ Öd¿ Öj¿ Öã¿ Öƒ¿ Ö„¿ Ü¿ ÜT¿ ÜX¿ ÜY¿ Üó¿ Üù¿ ÜÏ¿ á,¿ áw¿ á}¿ áÃ¿ à¿ àS¿ àY¿ àz¿ àÄ¿ àê¿ àñ¿ à‰¿ â¿ â,¿ âK¿ âã¿ â»¿ âœ¿ âÓ¿ ä¿ äI¿ äZ¿ äÄ¿ ä§¿ ä´¿ äØ¿ ä∞¿ ä˜¿ ä˝¿ ã¿ ãS¿ ãr¿ ãü¿ ã’¿ ãŸ¿ ã⁄¿ å'¿ åx¿ å∆¿ åÓ¿ åÙ¿ çC¿ çÅ¿ çá¿ ç®¿ ç›¿ ç¸¿ é)¿ é\¿ é`¿ éa¿ é¿¿ é¡¿ éˇ¿ èJ¿ èì¿ è—¿ ê¿ ê¿ ê¿ êS¿ êù¿ êÊ¿ ë#¿ ëb¿ ëf¿ ëg¿ ëø¿ í¿ íh¿ í≠¿ í±¿ í≤¿ í‚¿ íË¿ ì9¿ ìâ¿ ìØ¿ ìµ¿ î ¿ î¿ î'¿ î=¿ î\¿ îz¿ î~¿ î¿ îø¿ î≈¿ ï¿ ï#¿ ïD¿ ïc¿ ïÇ¿ ï≠¿ ï±¿ ï≤¿ ïÛ¿ ñ.¿ ñf¿ ñg¿ ñs¿ ñ∫¿ ñÏ¿ ó!¿ óN¿ óÄ¿ ó…¿ óÓ¿ ò¿ ò(¿ ò0¿ òè¿ òï¿ òñ¿ òº¿ ò‰¿ ô¿ ô>¿ ôê¿ ôù¿ ô ¿ ô˛¿ ö¿ ö\¿ ö©¿ öÍ¿ õ9¿ õz¿ õñ¿ õ∏¿ õ⁄¿ ú¿ úD¿ úW¿ úh¿ úw¿ úÉ¿ ú¢¿ úƒ¿ úŒ¿ ùA¿ ùI¿ ùÖ¿ ù±¿ ù∑¿ ùª¿ ùº¿ û4¿ ûü¿ ûΩ¿ û‹¿ ü¿ ü5¿ üÇ¿ ü⁄¿ ü˙¿ †¿ †ã¿ †µ¿ †ø¿ °¿ °J¿ °æ¿ ¢ ¿ ¢"¿ ¢,¿ ¢K¿ ¢Z¿ ¢w¿ ¢¿ ¢Ö¿ ¢Ü¿ ¢∞¿ ¢–¿ £9¿ £?¿ £[¿ £_¿ £`¿ £÷¿ £˝¿ §`¿ §ê¿ §Õ¿ §Œ¿ §˘¿ •¿ •@¿ •M¿ •¿ •©¿ •€¿ ¶
¿ ¶¿ ¶=¿ ¶C¿ ¶g¿ ¶ç¿ ¶∏¿ ¶º¿ ¶Ω¿ ß	¿ ßX¿ ßó¿ ß¡¿ ß˘¿ ß˙¿ ®¿ ®z¿ ®º¿ ®˚¿ ©/¿ ©E¿ ©_¿ ©r¿ ©ê¿ ©®¿ ©À¿ ™,¿ ™y¿ ™—¿ ´¿ ´!¿ ´Q¿ ´Z¿ ´{¿ ´|¿ ´ú¿ ´Í¿ ¨1¿ ¨`¿ ¨Œ¿ ≠¿ ≠j¿ ≠∑¿ ≠‚¿ Æ
¿ Æ¿ Æ1¿ Æ;¿ Æ_¿ Æ~¿ Æç¿ ÆŒ¿ Ø¿ Ø3¿ ØG¿ ØQ¿ Ø{¿ Ø≠¿ ØÁ¿ ∞ ¿ ∞P¿ ∞Z¿ ∞ù¿ ∞·¿ ∞ˇ¿ ±#¿ ±F¿ ±|¿ ±¥¿ ±ø¿ ≤¿ ≤^¿ ≤É¿ ≤Æ¿ ≤ÿ¿ ≥¿ ≥/¿ ≥:¿ ≥à¿ ≥∏¿ ≥Â¿ ¥Z¿ ¥ô¿ ¥ª¿ ¥Ô¿ µ¿ µQ¿ µ|¿ µä¿ µÀ¿ µ˝¿ ∂9¿ ∂d¿ ∂r¿ ∂≥¿ ∂Â¿ ∑'¿ ∑5¿ ∑H¿ ∑í¿ ∑û¿ ∑®¿ ∑ÿ¿ ∏+¿ ∏y¿ ∏É¿ ∏©¿ ∏ﬂ¿ π/¿ π@¿ πm¿ πë¿ πß¿ πﬁ¿ πÎ¿ πı¿ ∫¿ ∫4¿ ∫T¿ ∫Ö¿ ∫®¿ ∫∞¿ ∫∂¿ ∫Ù¿ ª¿ ª:¿ ª;¿ ªb¿ ª±¿ ªµ¿ ª∂¿ ªË¿ ª¯¿ º3¿ ºj¿ ºq¿ ºu¿ ºv¿ ºÇ¿ ºú¿ º∏¿ º÷¿ º⁄¿ º€¿ ºÁ¿ Ω¿ Ω7¿ ΩU¿ Ωk¿ Ωõ¿ Ω§¿ Ω´¿ ΩØ¿ Ω∞¿ Ωº¿ æ¿ æ,¿ æq¿ æ¬¿ æ÷¿ æÍ¿ æ˛¿ ø¿ ø@¿ øÄ¿ øò¿ ø°¿ ø®¿ øÓ¿ ¿¿ ¿g¿ ¿n¿ ¿Ç¿ ¿•¿ ¿∑¿ ¿«¿ ¿„¿ ¿Ï¿ ¿Û¿ ¡?¿ ¡C¿ ¡E¿ ¡F¿ ¡w¿ ¡{¿ ¡ ¿ ¬¿ ¬`¿ ¬´¿ ¬ª¿ √$¿ √<¿ √Y¿ √u¿ √é¿ √Ÿ¿ ƒ¿ ƒ=¿ ƒC¿ ƒu¿ ƒy¿ ƒz¿ ƒì¿ ƒ∂¿ ƒœ¿ ƒ–¿ ƒı¿ ≈¿ ≈¿ ≈G¿ ≈H¿ ≈l¿ ≈é¿ ≈è¿ ≈õ¿ ≈–¿ ≈˝¿ ∆!¿ ∆a¿ ∆ã¿ ∆ô¿ ∆ü¿ ∆¬¿ ∆Ÿ¿ ∆›¿ ∆ﬁ¿ «¿ «P¿ «v¿ «ú¿ «∂¿ «ø¿ «≈¿ «∆¿ »¿ »:¿ »u¿ »Ò¿ …C¿ …m¿ …∫¿  ¿  H¿  j¿  å¿  ì¿  √¿ À¿ À>¿ ÀD¿ Àb¿ Àç¿ À«¿ Ã¿ Ãf¿ Ão¿ Ãò¿ Ã–¿ Õ¿ Õp¿ Õy¿ Õü¿ ÕÊ¿ Œ
¿ Œ1¿ ŒI¿ ŒP¿ ŒT¿ ŒU¿ Œa¿ Œ¢¿ Œ…¿ œ¿ œQ¿ œk¿ œö¿ œ«¿ –¿ –]¿ –^¿ –}¿ –ß¿ —)¿ —N¿ —÷¿ —ˇ¿ “$¿ “Ç¿ “å¿ “±¿ “€¿ ”¿ ”)¿ ”S¿ ”™¿ ”È¿ ‘"¿ ‘î¿ ‘«¿ ‘Ù¿ ’¿ ’P¿ ’[¿ ’ó¿ ÷¿ ÷H¿ ÷s¿ ÷°¿ ÷”¿ ÷ﬁ¿ ÷‰¿ ÷Â¿ ◊¿ ◊S¿ ◊p¿ ◊v¿ ◊â¿ ◊ç¿ ◊é¿ ◊ö¿ ◊ƒ¿ ÿ¿ ÿ¿ ÿ!¿ ÿy¿ ÿœ¿ ÿÎ¿ Ÿ¿ Ÿ#¿ Ÿ'¿ Ÿ(¿ ŸG¿ Ÿg¿ Ÿá¿ Ÿã¿ Ÿå¿ Ÿ„¿ ⁄¿ ⁄P¿ ⁄h¿ ⁄¿¿ ⁄Ÿ¿ €!¿ €'¿ €j¿ €w¿ €å¿ €∂¿ €Ω¿ €æ¿ ‹$¿ ‹W¿ ‹¿ ‹¢¿ ‹®¿ ‹“¿ ‹˘¿ ‹ˇ¿ ›O¿ ›ü¿ ›Ò¿ ﬁ¿ ﬁQ¿ ﬁU¿ ﬁV¿ ﬁ{¿ ﬁ°¿ ﬁº¿ ﬁ¬¿ ﬂ¿ ﬂj¿ ﬂ¿¿ ﬂƒ¿ ﬂ≈¿ ﬂı¿ ‡¿ ‡7¿ ‡a¿ ‡â¿ ‡è¿ ‡±¿ ‡—¿ ·9¿ ·¶¿ ·˙¿ ‚`¿ ‚‚¿ „¿ „@¿ „u¿ „à¿ „ª¿ „«¿ ‰¿ ‰l¿ ‰®¿ Â¿ Âà¿ Ê3¿ ÊD¿ ÊÉ¿ Ê∏¿ Ê˛¿ Á1¿ ÁD¿ Áó¿ ÁÃ¿ Áÿ¿ Á‚¿ ÁÒ¿ Ë¿ Ëm¿ Ë¿¿ Ëˇ¿ È4¿ ÈG¿ Èz¿ ÈÜ¿ Èó¿ È÷¿ Í¿ Í)¿ Í1¿ Í>¿ Íë¿ Í¸¿ Î9¿ Î¶¿ Î˜¿ ÏG¿ ÏÅ¿ Ï’¿ Ì;¿ ÌΩ¿ Ìæ¿ Ì›¿ ÓG¿ ÓΩ¿ Ô:¿ ÔD¿ ÔL¿ ÔR¿ Ôy¿ Ô}¿ Ô~¿ Ô¨¿ Ô”¿ ÔÓ¿ ¿ @¿ F¿ h¿ à¿ ¿ Ò]¿ Ò≥¿ Ú¿ Úù¿ Úº¿ Ú˝¿ Û2¿ ÛE¿ Ûx¿ ÛÑ¿ Û◊¿ Ù)¿ Ùe¿ Ù—¿ ıG¿ ıı¿ ˆ¿ ˆG¿ ˆ|¿ ˆƒ¿ ˆ˜¿ ˜
¿ ˜]¿ ˜ê¿ ˜ú¿ ˜¶¿ ˜µ¿ ˜„¿ ¯3¿ ¯Ñ¿ ¯≈¿ ¯˙¿ ˘¿ ˘@¿ ˘L¿ ˘]¿ ˘ö¿ ˘„¿ ˘Ì¿ ˘ı¿ ˙¿ ˙U¿ ˙¿¿ ˙˝¿ ˚j¿ ˚ª¿ ¸¿ ¸E¿ ¸õ¿ ˝¿ ˝Ç¿ ˝°¿ ˛¿ ˛É¿ ˇ¿ ˇ¿ ˇ¿ ˇ¿ ˇ@¿ ˇD¿ ˇE¿ ˇ¢¿ ˇÙ¿ L¿ ¨¿ Ú¿4¿5¿d¿¢¿∫¿¿+¿s¿y¿º¿…¿ﬁ¿¿¿¿b¿¥¿¿W¿{¿¿¿s¿ÿ¿7¿ñ¿¿¿3¿9¿J¿K¿Ñ¿≤¿’¿€¿‹¿	¿	3¿	9¿	â¿	Ÿ¿
+¿
E¿
ã¿
è¿
ê¿
À¿
ı¿¿v¿≈¿À¿Ù¿$¿*¿?¿C¿D¿í¿£¿«¿‘¿˙¿ ¿¿¿1¿Q¿o¿ö¿ª¿ø¿¿¿Á¿$¿~¿ü¿£¿§¿·¿L¿Ø¿—¿◊¿*¿z¿»¿¿9¿û¿≈¿-¿P¿V¿¶¿∆¿,¿^¿å¿∂¿÷¿⁄¿€¿%¿e¿Ñ¿°¿º¿‚¿¿*¿Z¿ß¿≠¿⁄¿ﬁ¿ﬂ¿d¿¢¿«¿·¿¿E¿p¿†¿œ¿ˆ¿˛¿¿¿≤¿÷¿¯¿¿B¿p¿∫¿¿v¿é¿‚¿"¿-¿S¿v¿£¿—¿¿J¿ò¿À¿+¿í¿÷¿ ¿I¿©¿¥¿¿6¿<¿P¿w¿Ñ¿≠¿≥¿∆¿ ¿À¿ :¿ \¿ à¿ ‘¿!¿!_¿!ò¿!ª¿!¡¿!˝¿"$¿"*¿"L¿"p¿"ã¿"±¿"È¿#S¿#y¿#ö¿#˛¿$]¿$É¿$§¿%¿%+¿%P¿%à¿%Ò¿&+¿&T¿&ò¿&≈¿&÷¿&˛¿'¿'¿'¿'#¿'J¿'W¿'Ä¿'Ü¿'ô¿'ù¿'û¿'Ô¿(:¿(ã¿(•¿)¿)6¿)~¿)Ã¿)¯¿)¸¿)˝¿*L¿*ú¿*À¿+6¿+S¿+n¿+ä¿+¨¿+÷¿+˙¿,*¿,4¿,Ö¿,•¿,≤¿-¿- ¿-D¿-f¿-l¿-ã¿-‘¿.¿.H¿.L¿.M¿.˘¿/A¿/ç¿/µ¿/Î¿0¿0G¿0V¿0^¿0d¿0à¿0º¿1¿1?¿1v¿1É¿1»¿1¿2b¿2k¿2q¿2ì¿2¿¿2È¿3¿3@¿3M¿3q¿3w¿3¨¿3Ê¿4/¿43¿44¿4|¿4â¿4è¿4«¿5	¿5M¿5a¿5g¿5ã¿5Ø¿5—¿6 ¿6K¿6r¿6¿6®¿6—¿6◊¿7J¿7N¿7O¿7r¿7x¿7Õ¿7Î¿8C¿8u¿8Ö¿8æ¿8œ¿9¿9¿9)¿9k¿9q¿9u¿9v¿9Ç¿9µ¿9‰¿9Ë¿9È¿9ı¿:=¿:\¿:¥¿:¬¿:»¿:¯¿;#¿;E¿;K¿;w¿;û¿;¿¿;∆¿; ¿;À¿;Ô¿;˚¿<¿<D¿<Ü¿<œ¿<ÿ¿<ˆ¿=¿=N¿=Ö¿=è¿=û¿> ¿>v¿>£¿>´¿>±¿>”¿>◊¿>ÿ¿>Ì¿? ¿?¿?a¿?™¿?≥¿?—¿?˝¿@=¿@¿@â¿@ß¿@∂¿A¿Aä¿Aí¿Aò¿A±¿Aµ¿A∂¿A⁄¿AÚ¿Aˆ¿A˜¿B¿B¿B,¿B0¿B1¿Bh¿B¨¿B∫¿B¿¿BÏ¿C!¿CR¿CÉ¿Cå¿C∑¿C‹¿D	¿DZ¿D{¿D∏¿D¿¿D∆¿E¿E-¿EB¿Ej¿EØ¿E∫¿E¿F¿F¿F¿F^¿Fw¿Få¿F≤¿Fı¿G ¿G6¿GK¿GT¿GZ¿G^¿G_¿Gk¿G§¿GÂ¿H%¿Ha¿H°¿H•¿H¶¿H≤¿HÔ¿I9¿I=¿I>¿IJ¿Iá¿I—¿I’¿I÷¿I‚¿J=¿J>¿JJ¿Jè¿J∫¿K¿K^¿K•¿K©¿K´    Ä•  ÄøÄ÷ Ä€ÄÄÚÅfÅi  Åì  Åª  Å‰  Ç  Ç   Ç5  ÇJ  Çg  Ç}    É9ÉIÑ(Ä›/// Used by the [RenderParagraph] to map its rendering children to their
/// corresponding semantics nodes.
///
/// The [RichText] uses this to tag the relation between its placeholder spans
/// and their semantics nodes. ÑbÅ
 ÖÖ+Äö/// Creates a semantics tag with the input `index`.
///
/// Different [PlaceholderSpanIndexSemanticsTag]s with the same `index` are
/// consider the same.Ö,
Ö2  Ö:Ö?ÖjÖ@ÖbÖcÖhÖp,Öó/// The index of this tag. Ü+UÜ?   Ü+Ü,Ö°ÄÜÖª  ÖæÖ∆  Ö°Ö¢ÑÑÜÑÉ≤á|/// Parent data used by [RenderParagraph] and [RenderEditable] to annotate
/// inline contents (such as [WidgetSpan]s) with.  àÉàã  àóÄ”âfÄµ/// The [PlaceholderSpan] associated with this render child.
///
/// This field is usually set by a [ParentDataWidget], and is typically not
/// null when `performLayout` is called. áVÅ*ànÅ/// The offset at which to paint the child in the parent's coordinate system.
///
/// A `null` value indicates this inline widget is not laid out. For instance,
/// when the inline widget has never been laid out, or the inline widget is
/// ellipsized away.   âoXâÄ   âoâpâÀiâﬁ   âÀâÃ §‘¿ úp•6/// A render object that displays a paragraph of text. •Ωád ¶p¶Ä™/// Creates a paragraph render object.
///
/// The [maxLines] property may be null (and indeed defaults to null), but if
/// it is not null, it must be greater than zero.¶Ä¶å  ¶ó%¶¢  ¶¬$¶⁄  ¶Ï¶Ú  ß)ß  ß5Äˇ®   ®:,®F  ®l®r  ®®à  ®ì®†  ®Ø5®ø  ®Í)©  ©©+  ©8©@  ©S©h  x¶≠¶∂¶∑¶¸ßß*ß+ß5ß6ß@®ßHßißÿ®1®R®\®]®œ®›®ﬁ©y©©ô©Ä©Ñ©Ö©ó©ò©£©©© ©ª©≥©™©∂©«©æ©…©‘©⁄™*™ì™©Â©Ó™©Ô©˚™™™$™™'™5™ß™ù™©™ƒ™∫™∆™Á™◊™È´´ ´´¨‰´)´%´+´C´:´E´f´Y´h´ä´Ä´Ø´‘´ó´å´ö´§´•´±´ª´º´¬´“´√´÷´Û´Î´ı¨¨¨4¨A¨¨¨¨*¨+¨6¨C¨X¨R¨Z¨u¨k¨w¨ö¨å¨ú¨«¨µ¨…≠%d≠9 ≠Q≠W≠X≠d≠à≠e≠t≠u≠é≠†  ≠±/≠…  ≠ÂCÆ  µÁ3∂  ∂ü∂≥  ¿ Dú¿ D°  ¿ Eá¿ Eî  ¿ Tu¿ T|  ¿ b9!¿ b?  ¿ hÉ¿ hà ¿ hô¿ h¢¿ h≠  ¿ l{3¿ lò  ¿ ï¥Ä∞¿ ñVw/// Collected during [describeSemanticsConfiguration], used by
/// [assembleSemanticsNode] and [_combineSemanticsInfo]. ¿ ß√4¿ ßÊ  !Æ-EÆW/// The text to display.   ÆuÉæÆy  Æ~Æä   ≤7ÇÛ≤˜Ää/// The ongoing selections in this paragraph.
///
/// The selection does not include selections in [PlaceholderSpan] if there
/// are any.  ≤ ≤À∂}∂ÑJ/// The [SelectionRegistrar] this paragraph will be, or is, registered to.   ∂¡Äˆ∂≈  ∂œ∂‰   Ωk]ΩÄ   ΩkΩlø&eøg0/// How the text should be aligned horizontally.   øéÄùøí  øúøß   ¿ @/Çâ¿ BãÇ3/// The directionality of the text.
///
/// This decides how the [TextAlign.start], [TextAlign.end], and
/// [TextAlign.justify] values of [textAlign] are interpreted.
///
/// This is also used to disambiguate how to render bidirectional text. For
/// example, if the [text] is an English phrase followed by a Hebrew phrase,
/// in a [TextDirection.ltr] context the English phrase will be on the left
/// and the Hebrew phrase to its right, while in a [TextDirection.rtl]
/// context, the English phrase will be on the right and the Hebrew phrase on
/// its left.   ¿ BªÄÆ¿ Bø  ¿ BÕ¿ B‹   ¿ CmÅ,¿ DÉÄ˛/// Whether the text should break at soft line breaks.
///
/// If false, the glyphs in the text will be positioned as if there was
/// unlimited horizontal space.
///
/// If [softWrap] is false, [overflow] and [textAlign] may have unexpected
/// effects.   ¿ DÆ~¿ D≤  ¿ Dª
¿ D¡   ¿ E0T¿ En*/// How visual overflow should be handled.   ¿ E°Ä÷¿ E•  ¿ EÆ¿ Eº   ¿ F{Ç*¿ HuÅ/// Deprecated. Will be removed in a future version of Flutter. Use
/// [textScaler] instead.
///
/// The number of font pixels for each logical pixel.
///
/// For example, if the text scale factor is 1.5, text will be 50% larger than
/// the specified font size.  ¿ Gë¿ Gí¿ Gú¿ Hf¿ G¢¿ G¡¿ H.¿ H®Å+¿ IÖ  ¿ Iï¿ Iù  ¿ H®¿ H©¿ H≥¿ I}¿ Hπ¿ Hÿ¿ IE¿ I◊l¿ J4/// {@macro flutter.painting.textPainter.textScaler}   ¿ JFÄæ¿ JJ  ¿ JU¿ Ja   ¿ KÄ˙¿ K‡Ä»/// An optional maximum number of lines for the text to span, wrapping if
/// necessary. If the text exceeds the given number of lines, it will be
/// truncated according to [overflow] and [softWrap].   ¿ LÅ3¿ LbT/// The value may be null. If it is not null, then it must be greater than
/// zero. ¿ Lk
¿ Lq   ¿ M<Å¨¿ N Åu/// Used by this paragraph's internal [TextPainter] to select a
/// locale-specific font.
///
/// In some cases, the same Unicode character may be rendered differently
/// depending on the locale. For example, the 'È™®' character is rendered
/// differently in the Chinese and Japanese locales. In these cases, the
/// [locale] may be used to select a locale-specific font.   ¿ NÎÄÃ¿ O/// The value may be null. ¿ O¿ O   ¿ Oªm¿ P4/// {@macro flutter.painting.textPainter.strutStyle}   ¿ P+Ä‹¿ PL/// The value may be null. ¿ PW¿ Pd   ¿ Q|¿ QY8/// {@macro flutter.painting.textPainter.textWidthBasis}   ¿ QäÄŒ¿ Qé  ¿ Qù¿ Q≠   ¿ R\{¿ R°'/// {@macro dart.ui.textHeightBehavior}   ¿ R⁄Ä‚¿ Rﬁ  ¿ RÒ¿ S	   ¿ S¿Ä≤¿ TP~/// The color to use when painting the selection.
///
/// Ignored if the text is not selectable (e.g. if [registrar] is null).   ¿ TèÅ
¿ Tì  ¿ T¢¿ T™   ¿ h¡ÄÓ¿ i}Äï/// Whether this paragraph currently has a [dart:ui.Shader] for its overflow
/// effect.
///
/// Used to test this object. Not for use in production.  ¿ i_¿ i`¿ í¥Å…¿ î2Åb/// Returns the size of the text as laid out.
///
/// This can differ from [size] if the text overflowed or if the [constraints]
/// provided by the parent [RenderObject] forced the layout to be bigger than
/// necessary for the given [text].
///
/// This returns the [TextPainter.size] of the underlying [TextPainter].
///
/// Valid only after [layout].   ¿ îÅÅ/¿ ïOÄ∫/// Whether the text was truncated or ellipsized as laid out.
///
/// This returns the [TextPainter.didExceedMaxLines] of the underlying [TextPainter].
///
/// Valid only after [layout].   *∑ªÅ6∑¿    ∏ıÄ√∏˙    πºÇÆπ÷    ºnÄ˘ºs    ΩÃÄ±Ω›   ΩÃΩÕæÅÄ°æí   æÅæÇ¿ UùÄ†¿ U§  ¿ U∫¿ U»   ¿ VA^¿ VV    ¿ V£Åß¿ V∂  ¿ Vœ¿ V◊  ¿ V£¿ V§¿ XNÇ:¿ Xa  ¿ Xz¿ XÇ  ¿ XN¿ XO¿ ZåÅ+¿ Zì  ¿ Z´¿ Z≥   ¿ [ªk¿ [Œ  ¿ [Ë¿ [  ¿ [ª¿ [º¿ \*k¿ \=  ¿ \W¿ \_  ¿ \*¿ \+¿ \ôÇ»¿ \¨  ¿ \Ã¿ \⁄  ¿ \ô¿ \ö¿ _eÇ–¿ _Õ^/// Whether all inline widget children of this [RenderBox] support dry layout
/// calculation.   ¿ bˆÅí¿ b˚    ¿ då6¿ dù  ¿ d©¿ d±  ¿ då¿ dç¿ d∆Éπ¿ d‰  ¿ dÙ¿ e  ¿ e¿ e   ¿ d∆¿ d«¿ d“¿ d”¿ i≥Å¿ i∏  ¿ i∆¿ iŒ  ¿ i›!¿ iÂ  ¿ iÿ¿ iÔ¿ iı¿ iˆ¿ jÕs¿ jﬁ   ¿ jÕ¿ jŒ¿ l≥Ä’¿ l∏  ¿ l”¿ l„   ¿ måÇ!¿ m™  ¿ mª$¿ m’  ¿ må¿ mç¿ mò¿ mô¿ o±å\¿ o¬   ¿ o±¿ o≤¿ |ÄÄ¿ |"  ¿ |6¿ |A  ¿ |G¿ |P  ¿ |¿ |¿ |ïáO¿ |¶  ¿ |¨¿ |Ω  ¿ |≈¿ |Õ  ¿ |ï¿ |ñ¿ ÉËÅ8¿ ÑLV/// Returns the offset at which to paint the caret.
///
/// Valid only after [layout]. ¿ Ñ^¿ Ñl  ¿ Ñu¿ Ñ{   ¿ Ö$Å3¿ Öïb/// {@macro flutter.painting.textPainter.getFullHeightForCaret}
///
/// Valid only after [layout]. ¿ Ö´¿ Öπ   ¿ Ü[ÑS¿ âÇâ/// Returns a list of rects that bound the given selection.
///
/// The [boxHeightStyle] and [boxWidthStyle] arguments may be used to select
/// the shape of the [TextBox]es. These properties default to
/// [ui.BoxHeightStyle.tight] and [ui.BoxWidthStyle.tight] respectively.
///
/// A given selection might have more than one rect if the [RenderParagraph]
/// contains multiple [InlineSpan]s or bidirectional text, because logically
/// contiguous text might not be visually contiguous.
///
/// Valid only after [layout].
///
/// See also:
///
///  * [TextPainter.getBoxesForSelection], the method in TextPainter to get
///    the equivalent boxes. ¿ â0¿ â?  ¿ âO:¿ âb  ¿ âè7¿ â°  
¿ âr¿ ât¿ âu¿ âÉ¿ âÑ¿ â∞¿ â≤¿ â≥¿ â¿¿ â¡¿ ä≤Å&¿ ã-g/// Returns the position within the text for the given pixel offset.
///
/// Valid only after [layout]. ¿ ãB¿ ãJ   ¿ ã‹ÇÉ¿ ç¥Åª/// Returns the text range of the word at the given offset. Characters not
/// part of a word, such as spaces, symbols, and punctuation, have word breaks
/// on both sides. In such cases, this method will return a text range that
/// contains the given text position.
///
/// Word boundaries are defined more precisely in Unicode Standard Annex #29
/// <http://www.unicode.org/reports/tr29/#Word_Boundaries>.
///
/// Valid only after [layout]. ¿ çƒ¿ ç“   ¿ éc\¿ ém  ¿ é~¿ éå   ¿ é√ÅP¿ é–  ¿ éÊ¿ éÙ   ¿ êÅN¿ ê$  ¿ ê:¿ êH   ¿ ëiÅG¿ ëv  ¿ ëè¿ ëù  ¿ ë¶¿ ëÆ   ¿ ñiáQ¿ ñz  ¿ ñô¿ ñ±  ¿ ñi¿ ñj¿ ùæÖ†¿ ù·  ¿ û)¿ û%   ¿ £bÉY¿ £y  ¿ £õ'¿ £ª  ¿ £ƒ¿ £…   ¿ ß¸ì∏¿ ®  ¿ ®#¿ ®2  ¿ ®7¿ ®O  ¿ ®V ¿ ®o  ¿ ß¸¿ ß˝¿ ª∏Äº¿ ª∆  ¿ ª›¿ ª‚   ¿ ºxa¿ ºâ   ¿ ºx¿ ºy¿ º›Ä—¿ ºˇ   ¿ º›¿ ºﬁ¿ Ω≤Éê¿ Ω√  ¿ Ω◊&¿ ΩÙ  ¿ Ω≤¿ Ω≥ ¿ ¡F¿ äd¿ ¬¡Åt/// A continuous, selectable piece of paragraph.
///
/// Since the selections in [PlaceholderSpan] are handled independently in its
/// subtree, a selection in [RenderParagraph] can't continue across a
/// [PlaceholderSpan]. The [RenderParagraph] splits itself on [PlaceholderSpan]
/// to create multiple `_SelectableFragment`s so that they can be selected
/// separately. ¿ √&ÅR ¿ √&¿ √9 ¿ √@¿ √O  ¿ √]¿ √l  ¿ √y¿ √à  ¿ √ï¿ √õ¿ √’¿ √¿¿ √™¿ √ú¿ √°¿ √¢¿ √≠¿ √Æ¿ √≥¿ √¥¿ √√¿ √»¿ √…¿ ƒ|¿ ƒå  ¿ ƒï¿ ƒ´  ¿ ƒ∏¿ ƒ≈  ¿ ƒ“!¿ ƒ‡  ¿ ƒ˜¿ ≈  ¿ ≈*¿ ≈  ¿ ≈@¿ ≈J ¿ ≈U  ¿ ≈n¿ ≈y  ¿ ≈“)¿ ≈È  ¿;Õ ¿;Ÿ  ¿>⁄¿>‡  ¿ ≈ë>¿ ≈≥   ¿ ≈ë¿ ≈í¿;ÒÇÂ¿<   ¿;Ò¿;Ú¿>ÔÇ≈¿>¯    ¿A˘6¿B   ¿A˘¿A˙ ¿ ≈ˇÄ›¿ ∆    ¿ ∆‡ás¿ ∆Ú    ¿ ŒWâ5¿ Œs  ¿ Œä¿ Œö  ¿ ŒW¿ ŒX¿ ◊êÅñ¿ ◊≠   ¿ ◊ê¿ ◊ë¿ Ÿ*`¿ Ÿ/    ¿ ŸéÑ∆¿ Ÿû  ¿ Ÿ≥¿ Ÿª  ¿ ŸÀ¿ Ÿ⁄   ¿ ﬁXÅk¿ ﬁe  ¿ ﬁ ¿ ﬁî  ¿ ﬁ•¿ ﬁ≥   ¿ ﬂ«èµ¿ ﬂ‘  ¿ ﬂ˘!¿ ‡  ¿ ‡ ¿ ‡.  ¿ ‡;$¿ ‡J  ¿ ‡e"¿ ‡t   ¿ ÔÄè√¿ Ôç  ¿ Ô∞!¿ Ô∆  ¿ Ô◊¿ ÔÂ  ¿ ÔÚ$¿   ¿ "¿ +   ¿ ˇGãG¿ ˇW  ¿ ˇr¿ ˇz  ¿ ˇä¿ ˇô   ¿
íÅ∞¿
ü  ¿
≤¿
¿   ¿FÄΩ¿K  ¿a¿p  ¿z¿â   ¿Ä∑¿    ¿¬Ä‡¿“    ¿¶Ö3¿∂  ¿»¿–   ¿›Ç ¿Ò  ¿¿   ¿·âË¿Ò  ¿¿  ¿0¿6  ¿?!¿Y   ¿Õáœ¿›  ¿˛¿   ¿ ¿   ¿ ¿ ,   ¿(ßÅT¿(¥  ¿(◊¿(Â  ¿(È¿(Ô  ¿(˜¿)   ¿*ÕÉ~¿*⁄  ¿*˘¿+  ¿+¿+  ¿+¿+'   ¿.OÖ„¿.w  ¿.è¿.ù  ¿.ß8¿.∏  ¿.·¿.   ¿46É¿4ŒÄä/// Whether the given text position is contained in current selection
/// range.
///
/// The parameter `start` must be smaller than `end`. ¿4¿4˛   ¿7QÇ#¿7¯Äì/// Compares two text positions.
///
/// Returns 1 if `position` < `otherPosition`, -1 if `position` > `otherPosition`,
/// or 0 if they are equal. ¿8¿8  ¿8%¿83   ¿9xo¿9å  ¿9õ¿9™  ¿9x¿9y¿9ÎÅﬁ¿9¸  ¿:¿:  ¿:%¿:1  ¿9Î¿9Ï¿A∏=¿AΩ    ¿B3Ö*¿B8  ¿B>¿BO  ¿BW¿B_   ¿GaÅC¿G{  ¿Gã¿Gô  ¿Ga¿Gb¿H®Äî¿H¡  ¿H÷¿H‰  ¿H®¿H©¿I@Äî¿IY  ¿In¿I|  ¿I@¿IA¿Iÿd¿IÓ  ¿I˛¿J  ¿Iÿ¿IŸ¿J@Åh¿JQ  ¿Je&¿JÇ  ¿J@¿JA        Çó{ÇÀ+/// The start and end positions for a word.    ä8ööè˝Öæ/// A mixin that provides useful default behaviors for text [RenderBox]es
/// ([RenderParagraph] and [RenderEditable] for example) with inline content
/// children managed by the [ContainerRenderObjectMixin] mixin.
///
/// This mixin assumes every child managed by the [ContainerRenderObjectMixin]
/// mixin corresponds to a [PlaceholderSpan], and they are organized in logical
/// order of the text (the order each [PlaceholderSpan] is encountered when the
/// user reads the text).
///
/// To use this mixin in a [RenderBox] class:
///
///  * Call [layoutInlineChildren] in the `performLayout` and `computeDryLayout`
///    implementation, and during intrinsic size calculations, to get the size
///    information of the inline widgets as a `List` of `PlaceholderDimensions`.
///    Determine the positioning of the inline widgets (which is usually done by
///    a [TextPainter] using its line break algorithm).
///
///  * Call [positionInlineChildren] with the positioning information of the
///    inline widgets.
///
///  * Implement [RenderBox.applyPaintTransform], optionally with
///    [defaultApplyPaintTransform].
///
///  * Call [paintInlineChildren] in [RenderBox.paint] to paint the inline widgets.
///
///  * Call [hitTestInlineChildren] in [RenderBox.hitTestChildren] to hit test the
///    inline widgets.
///
/// See also:
///
///  * [WidgetSpan.extractFromInlineSpan], a helper function for extracting
///    [WidgetSpan]s from an [InlineSpan] tree.    êkÄóê|  êåêó  êkêlëÉèë#  ë0ë;  ëAëI  ëRëa   îôÉÉó#ÇF/// Computes the layout for every inline child using the given `layoutChild`
/// function and the `maxWidth` constraint.
///
/// Returns a list of [PlaceholderDimensions], representing the layout results
/// for each child managed by the [ContainerRenderObjectMixin] mixin.
///
/// Since this method does not impose a maximum height constraint on the
/// inline children, some children may become taller than this [RenderBox].
///
/// See also:
///
///  * [TextPainter.setPlaceholderDimensions], the method that usually takes
///    the layout results from this method as the input. ó8ó@  óIóX  ñ˙ñ˚ò Ñ≈öVÇ/// Positions each inline child according to the coordinates provided in the
/// `boxes` list.
///
/// The `boxes` list must be in logical order, which is the order each child
/// is encountered when the user reads the text. Usually the length of the
/// list equals [childCount], but it can be less than that, when some children
/// are ommitted due to ellipsing. It never exceeds [childCount].
///
/// See also:
///
///  * [TextPainter.inlinePlaceholderBoxes], the method that can be used to
///    get the input `boxes`. ömö  öDöEúÈÇYûÄ¸/// Applies the transform that would be applied when painting the given child
/// to the given matrix.
///
/// Render children whose [TextParentData.offset] is null zeros out the
/// `transform` to indicate they're invisible thus should not be painted. ûû(  û.û7  ùùÒüFÇ=ü‡/// Paints each inline child.
///
/// Render children whose [TextParentData.offset] is null will be skipped by
/// this method. üÙ†  ††  üŒüœ°áÉI¢1Äè/// Performs a hit test on each inline child.
///
/// Render children whose [TextParentData.offset] is null will be skipped by
/// this method. ¢G¢Y  ¢`¢h  ¢¢  É"É! É.  àX <ÄÜÄ§Ä•ÄøÄ€ÅhÅiÅìÅªÅ‰ÇÇÇ Ç5ÇJÇgÇ}ÇñÇóÇ√ÉÉÉ8É9ÉÇÉ•É©É¯ÑÑ"Ñ`ÑñÑúÑÍÖÖmÖnÖãÖûÖüÖ´ÖŒÜÜ$Ü(Ü)Ü5ÜÅÜÉÜÑÜœááTá§á™á˚àIà`àÅàîàïà‘à⁄â(âSâlâmâyâãâúâ∞âƒâ»â…â’ä5ä7ä8äÇäœãããbã≤ååå åNåRå£åÚçCçîçÃç–éé4é8ézéüé£é˜é˚èNèeèièwè{è«è˜êiêuêüêŒê˘êˇëëëoë∫ëÌíííCíbí™íœíÚì&ì[ìêìæìÏîîzîáîíîñîóîÊïïïkï≥ïπññRñXñhñnñΩñ¯óófóäóﬁòòòòòmòÅòáò÷ô#ôtô∏ôæôŒô‘ö"öBöOöáö™ö‘öÔõ_õoõwõ»úú#ú)úEúñúªú‹ú‚úÊúÁù7ùRùXù¢ùÓù˚ûCûìû∆û‡û˚üü9ü?üCüDüdüjüπüÃüŸ††A†]†Ø†È°
°°"°Y°z°Ä°Ñ°Ö°µ°ª¢
¢¢*¢s¢ñ¢≤££>£_£u£}£±£Œ£Í§[§d§w§å§î§µ§ª§Õ§—§”§‘••ª•‰•Í¶:¶n¶ì¶æ¶Ëßß1ßBßcß“®®®6®h®{®è®´®Ê©©4©O©r©ú©Õ©‹™,™å™ñ™≥™–™˘´´1´P´w´‚´ˇ¨I¨b¨É¨¨¨›¨Ë¨˛≠≠"≠#≠ã≠å≠Æ≠Ø≠‚≠„Æ*Æ+ÆFÆsÆíÆ≈ÆÏÆ¸Ø"ØEØsØóØ∫Ø›∞∞1∞_∞y∞ù∞¡∞‰±±,±Z±Ü±°±“±˘≤*≤0≤4≤5≤e≤k≤π≤»≤›≥≥0≥V≥\≥ó≥„¥¥E¥Z¥s¥±¥Ó¥˙µµµµ'µ+µ,µyµ…µÂ∂∂∂j∂ù∂ø∂Ï∑∑∑∑L∑o∑á∑¥∑∏∑π∑Í∏∏∏∏X∏ê∏¿∏Ë∏Ó∏Ú∏Ûπ$πfπtπzπµπππ∫πÚ∫@∫Ü∫ô∫¿ªªª4ªVª`ªtªìª∞ªÊºººº4º<ºNºTºgºkºlºìºøºÕº”ΩΩ9Ω?ΩdΩhΩiΩuΩ…Ω Ω÷ΩÒæ]æzæ~ææãæûæÀæÓø
øø#ø$øWøåøØø⁄øËøÓ¿ @¿ @(¿ @,¿ @-¿ @S¿ @Y¿ @ú¿ @›¿ @„¿ A1¿ AÄ¿ AŒ¿ B¿ Bg¿ Bw¿ Bπ¿ B‰¿ C¿ C!¿ C'¿ CO¿ Cf¿ Cj¿ Ck¿ C§¿ C™¿ CÙ¿ D¿ D¿ Di¿ Dx¿ Dö¿ D¨¿ D…¿ DÁ¿ Dı¿ D˚¿ E¿ E)¿ E-¿ E.¿ E[¿ EÖ¿ Eü¿ Eƒ¿ E‚¿ E¿ Eˆ¿ F¿ F]¿ Ft¿ Fx¿ Fy¿ Fø¿ F€¿ F·¿ G¿ G¿ Gp¿ Gè¿ Gû¿ GΩ¿ H*¿ Hd¿ Hh¿ H¶¿ Hµ¿ H‘¿ IA¿ I{¿ I¿ I•¿ I–¿ I‘¿ I’¿ J¿ JD¿ Ji¿ Jï¿ J£¿ J©¿ JŒ¿ JÍ¿ K¿ K¿ K¿ KR¿ Kù¿ K’¿ L¿ LP¿ L\¿ Ly¿ L°¿ LÀ¿ LŸ¿ Lﬂ¿ M¿ M¿ M5¿ M9¿ M:¿ M|¿ Mò¿ Mû¿ MÍ¿ N4¿ N¿ Nº¿ NÈ¿ O¿ O$¿ OL¿ OZ¿ O`¿ OÅ¿ Où¿ O¥¿ O∏¿ Oπ¿ O¿ P)¿ PF¿ Pl¿ Pò¿ P¶¿ P¨¿ P—¿ PÌ¿ Q¿ Q¿ Q	¿ QD¿ Qà¿ Qµ¿ QÂ¿ QÛ¿ Q˘¿ R"¿ R>¿ RU¿ RY¿ RZ¿ RÑ¿ Rÿ¿ S¿ SE¿ SS¿ SY¿ SÜ¿ S¢¿ Sπ¿ SΩ¿ Sæ¿ SÚ¿ S¯¿ TC¿ Ts¿ Tç¿ T≤¿ T÷¿ T‰¿ TÍ¿ U¿ Ux¿ Uê¿ Uñ¿ Uö¿ Uõ¿ U”¿ V:¿ V>¿ V?¿ Vn¿ Vú¿ V†¿ V°¿ V≠¿ V‡¿ W¿ W¿ W¿ W\¿ Ws¿ W‚¿ WÍ¿ X¿ XG¿ XK¿ XL¿ XX¿ Xã¿ XØ¿ X¡¿ X«¿ Y¿ Y¿ Yb¿ Y±¿ Z ¿ Z(¿ ZZ¿ ZÖ¿ Zâ¿ Zä¿ Zª¿ Zﬂ¿ ZÒ¿ Z˜¿ [a¿ [î¿ [¥¿ [∏¿ [π¿ [≈¿ [¯¿ \#¿ \'¿ \(¿ \4¿ \g¿ \í¿ \ñ¿ \ó¿ \£¿ \Â¿ ]¿ ]2¿ ]_¿ ]™¿ ]Ú¿ ^?¿ ^å¿ ^“¿ _¿ _^¿ _b¿ _c¿ _≥¿ _∆¿ _ˆ¿ `7¿ `}¿ `î¿ `∆¿ a¿ a7¿ ah¿ a†¿ a«¿ aÒ¿ b!¿ b*¿ b2¿ b6¿ b7¿ b\¿ bõ¿ bﬂ¿ bÙ¿ c¿ cz¿ cÜ¿ c√¿ d¿ dd¿ dm¿ dÖ¿ dâ¿ dä¿ dñ¿ d√¿ dƒ¿ d–¿ d›¿ e-¿ e{¿ e«¿ f¿ fg¿ f´¿ f’¿ g;¿ g©¿ g∑¿ gŒ¿ gÛ¿ h¿ h0¿ h>¿ hv¿ h|¿ hÄ¿ hÅ¿ h†¿ hæ¿ hø¿ i¿ i¿ i"¿ i]¿ ir¿ i∞¿ i±¿ j¿ jQ¿ jj¿ jÑ¿ jø¿ j∆¿ j ¿ jÀ¿ j◊¿ j˜¿ k¿ k=¿ kA¿ kB¿ ké¿ kì¿ k‚¿ l2¿ ly¿ l∞¿ l±¿ lÒ¿ m4¿ mÖ¿ mâ¿ mä¿ mñ¿ m£¿ m„¿ n¿ n1¿ nÉ¿ nç¿ n•¿ n´¿ o$¿ ou¿ o™¿ oÆ¿ oØ¿ oª¿ o‘¿ p¿ pu¿ p¢¿ p‰¿ pÂ¿ q6¿ qÇ¿ qÃ¿ r¿ r[¿ rà¿ rœ¿ r˚¿ r¸¿ sW¿ sñ¿ sÂ¿ t4¿ tÉ¿ t–¿ u¿ u]¿ uz¿ uï¿ u∏¿ u⁄¿ u¸¿ v¿ v@¿ va¿ vÉ¿ v£¿ vƒ¿ vˇ¿ wL¿ wv¿ wö¿ w∂¿ wÕ¿ wÔ¿ x¿ x;¿ xa¿ xÄ¿ x≥¿ xŸ¿ xˇ¿ y<¿ yJ¿ y|¿ y¢¿ y∆¿ z¿ z¿ z1¿ za¿ zÆ¿ z‡¿ {¿ {*¿ {s¿ {Ç¿ {é¿ {≥¿ {ª¿ {»¿ {Ê¿ |¿ |
¿ |¿ |¿ |¿ |\¿ |é¿ |í¿ |ì¿ |ü¿ |÷¿ } ¿ }m¿ }ª¿ }Û¿ }˙¿ ~C¿ ~f¿ ~m¿ ~π¿ ~–¿ ~˝¿ ~˛¿ ¿ :¿ ^¿ ñ¿ Õ¿ ’¿ Ë¿ Ú¿ Û¿ Ä¿ Ä6¿ Ä[¿ Ä©¿ ÄÊ¿ Å¿ Å(¿ ÅG¿ ÅO¿ Åv¿ Å|¿ Å}¿ Å©¿ Å˜¿ Ç ¿ Ç(¿ Ç.¿ Ç/¿ Ç_¿ Ç`¿ Çä¿ Çã¿ Ç•¿ Ç ¿ É¿ É&¿ ÉQ¿ Éw¿ É≥¿ Éª¿ É€¿ É·¿ ÉÂ¿ ÉÊ¿ Ñ¿ Ñ"¿ ÑC¿ Ñå¿ Ñ´¿ Ñÿ¿ Ö¿ Ö!¿ Ö"¿ Öd¿ Öj¿ Öã¿ Öƒ¿ Ö„¿ Ü¿ ÜT¿ ÜX¿ ÜY¿ Üó¿ Üù¿ ÜÏ¿ á,¿ áw¿ á}¿ áÃ¿ à¿ àS¿ àY¿ àz¿ àÄ¿ àê¿ àñ¿ à‰¿ â¿ â,¿ âK¿ âã¿ â»¿ âœ¿ âÓ¿ ä¿ äI¿ äZ¿ äÄ¿ ä§¿ ä´¿ äØ¿ ä∞¿ ä˜¿ ä˝¿ ã¿ ãS¿ ãr¿ ãü¿ ã’¿ ãŸ¿ ã⁄¿ å'¿ åx¿ å∆¿ åÓ¿ åÙ¿ çC¿ çÅ¿ çá¿ ç®¿ ç›¿ ç¸¿ é)¿ é\¿ é`¿ éa¿ é¿¿ é¡¿ éˇ¿ èJ¿ èì¿ è—¿ ê¿ ê¿ ê¿ êS¿ êù¿ êÊ¿ ë#¿ ëb¿ ëf¿ ëg¿ ëø¿ í¿ íh¿ í≠¿ í±¿ í≤¿ í‚¿ íË¿ ì9¿ ìâ¿ ìØ¿ ìµ¿ î ¿ î¿ î'¿ î=¿ î\¿ îz¿ î~¿ î¿ îø¿ î≈¿ ï¿ ï#¿ ïD¿ ïc¿ ïÇ¿ ï≠¿ ï±¿ ï≤¿ ïÛ¿ ñ.¿ ñf¿ ñg¿ ñs¿ ñ∫¿ ñÏ¿ ó!¿ óN¿ óÄ¿ ó…¿ óÓ¿ ò¿ ò(¿ ò0¿ òè¿ òï¿ òñ¿ òº¿ ò‰¿ ô¿ ô>¿ ôê¿ ôù¿ ô ¿ ô˛¿ ö¿ ö\¿ ö©¿ öÍ¿ õ9¿ õz¿ õñ¿ õ∏¿ õ⁄¿ ú¿ úD¿ úW¿ úh¿ úw¿ úÉ¿ ú¢¿ úƒ¿ úŒ¿ ùA¿ ùI¿ ùÖ¿ ù±¿ ù∑¿ ùª¿ ùº¿ û4¿ ûü¿ ûΩ¿ û‹¿ ü¿ ü5¿ üÇ¿ ü⁄¿ ü˙¿ †¿ †ã¿ †µ¿ †ø¿ °¿ °J¿ °æ¿ ¢ ¿ ¢"¿ ¢,¿ ¢K¿ ¢Z¿ ¢w¿ ¢¿ ¢Ö¿ ¢Ü¿ ¢∞¿ ¢–¿ £9¿ £?¿ £[¿ £_¿ £`¿ £÷¿ £˝¿ §`¿ §ê¿ §Õ¿ §Œ¿ §˘¿ •¿ •@¿ •M¿ •¿ •©¿ •€¿ ¶
¿ ¶¿ ¶=¿ ¶C¿ ¶g¿ ¶ç¿ ¶∏¿ ¶º¿ ¶Ω¿ ß	¿ ßX¿ ßó¿ ß¡¿ ß˘¿ ß˙¿ ®¿ ®z¿ ®º¿ ®˚¿ ©/¿ ©E¿ ©_¿ ©r¿ ©ê¿ ©®¿ ©À¿ ™,¿ ™y¿ ™—¿ ´¿ ´!¿ ´Q¿ ´Z¿ ´{¿ ´|¿ ´ú¿ ´Í¿ ¨1¿ ¨`¿ ¨Œ¿ ≠¿ ≠j¿ ≠∑¿ ≠‚¿ Æ
¿ Æ¿ Æ1¿ Æ;¿ Æ_¿ Æ~¿ Æç¿ ÆŒ¿ Ø¿ Ø3¿ ØG¿ ØQ¿ Ø{¿ Ø≠¿ ØÁ¿ ∞ ¿ ∞P¿ ∞Z¿ ∞ù¿ ∞·¿ ∞ˇ¿ ±#¿ ±F¿ ±|¿ ±¥¿ ±ø¿ ≤¿ ≤^¿ ≤É¿ ≤Æ¿ ≤ÿ¿ ≥¿ ≥/¿ ≥:¿ ≥à¿ ≥∏¿ ≥Â¿ ¥Z¿ ¥ô¿ ¥ª¿ ¥Ô¿ µ¿ µQ¿ µ|¿ µä¿ µÀ¿ µ˝¿ ∂9¿ ∂d¿ ∂r¿ ∂≥¿ ∂Â¿ ∑'¿ ∑5¿ ∑H¿ ∑í¿ ∑û¿ ∑®¿ ∑ÿ¿ ∏+¿ ∏y¿ ∏É¿ ∏©¿ ∏ﬂ¿ π/¿ π@¿ πm¿ πë¿ πß¿ πﬁ¿ πÎ¿ πı¿ ∫¿ ∫4¿ ∫T¿ ∫Ö¿ ∫®¿ ∫∞¿ ∫∂¿ ∫Ù¿ ª¿ ª:¿ ª;¿ ªb¿ ª±¿ ªµ¿ ª∂¿ ªË¿ ª¯¿ º3¿ ºj¿ ºq¿ ºu¿ ºv¿ ºÇ¿ ºú¿ º∏¿ º÷¿ º⁄¿ º€¿ ºÁ¿ Ω¿ Ω7¿ ΩU¿ Ωk¿ Ωõ¿ Ω§¿ Ω´¿ ΩØ¿ Ω∞¿ Ωº¿ æ¿ æ,¿ æq¿ æ¬¿ æ÷¿ æÍ¿ æ˛¿ ø¿ ø@¿ øÄ¿ øò¿ ø°¿ ø®¿ øÓ¿ ¿¿ ¿g¿ ¿n¿ ¿Ç¿ ¿•¿ ¿∑¿ ¿«¿ ¿„¿ ¿Ï¿ ¿Û¿ ¡?¿ ¡C¿ ¡E¿ ¡F¿ ¡w¿ ¡{¿ ¡ ¿ ¬¿ ¬`¿ ¬´¿ ¬ª¿ √$¿ √<¿ √Y¿ √u¿ √é¿ √Ÿ¿ ƒ¿ ƒ=¿ ƒC¿ ƒu¿ ƒy¿ ƒz¿ ƒì¿ ƒ∂¿ ƒœ¿ ƒ–¿ ƒı¿ ≈¿ ≈¿ ≈G¿ ≈H¿ ≈l¿ ≈é¿ ≈è¿ ≈õ¿ ≈–¿ ≈˝¿ ∆!¿ ∆a¿ ∆ã¿ ∆ô¿ ∆ü¿ ∆¬¿ ∆Ÿ¿ ∆›¿ ∆ﬁ¿ «¿ «P¿ «v¿ «ú¿ «∂¿ «ø¿ «≈¿ «∆¿ »¿ »:¿ »u¿ »Ò¿ …C¿ …m¿ …∫¿  ¿  H¿  j¿  å¿  ì¿  √¿ À¿ À>¿ ÀD¿ Àb¿ Àç¿ À«¿ Ã¿ Ãf¿ Ão¿ Ãò¿ Ã–¿ Õ¿ Õp¿ Õy¿ Õü¿ ÕÊ¿ Œ
¿ Œ1¿ ŒI¿ ŒP¿ ŒT¿ ŒU¿ Œa¿ Œ¢¿ Œ…¿ œ¿ œQ¿ œk¿ œö¿ œ«¿ –¿ –]¿ –^¿ –}¿ –ß¿ —)¿ —N¿ —÷¿ —ˇ¿ “$¿ “Ç¿ “å¿ “±¿ “€¿ ”¿ ”)¿ ”S¿ ”™¿ ”È¿ ‘"¿ ‘î¿ ‘«¿ ‘Ù¿ ’¿ ’P¿ ’[¿ ’ó¿ ÷¿ ÷H¿ ÷s¿ ÷°¿ ÷”¿ ÷ﬁ¿ ÷‰¿ ÷Â¿ ◊¿ ◊S¿ ◊p¿ ◊v¿ ◊â¿ ◊ç¿ ◊é¿ ◊ö¿ ◊ƒ¿ ÿ¿ ÿ¿ ÿ!¿ ÿy¿ ÿœ¿ ÿÎ¿ Ÿ¿ Ÿ#¿ Ÿ'¿ Ÿ(¿ ŸG¿ Ÿg¿ Ÿá¿ Ÿã¿ Ÿå¿ Ÿ„¿ ⁄¿ ⁄P¿ ⁄h¿ ⁄¿¿ ⁄Ÿ¿ €!¿ €'¿ €j¿ €w¿ €å¿ €∂¿ €Ω¿ €æ¿ ‹$¿ ‹W¿ ‹¿ ‹¢¿ ‹®¿ ‹“¿ ‹˘¿ ‹ˇ¿ ›O¿ ›ü¿ ›Ò¿ ﬁ¿ ﬁQ¿ ﬁU¿ ﬁV¿ ﬁ{¿ ﬁ°¿ ﬁº¿ ﬁ¬¿ ﬂ¿ ﬂj¿ ﬂ¿¿ ﬂƒ¿ ﬂ≈¿ ﬂı¿ ‡¿ ‡7¿ ‡a¿ ‡â¿ ‡è¿ ‡±¿ ‡—¿ ·9¿ ·¶¿ ·˙¿ ‚`¿ ‚‚¿ „¿ „@¿ „u¿ „à¿ „ª¿ „«¿ ‰¿ ‰l¿ ‰®¿ Â¿ Âà¿ Ê3¿ ÊD¿ ÊÉ¿ Ê∏¿ Ê˛¿ Á1¿ ÁD¿ Áó¿ ÁÃ¿ Áÿ¿ Á‚¿ ÁÒ¿ Ë¿ Ëm¿ Ë¿¿ Ëˇ¿ È4¿ ÈG¿ Èz¿ ÈÜ¿ Èó¿ È÷¿ Í¿ Í)¿ Í1¿ Í>¿ Íë¿ Í¸¿ Î9¿ Î¶¿ Î˜¿ ÏG¿ ÏÅ¿ Ï’¿ Ì;¿ ÌΩ¿ Ìæ¿ Ì›¿ ÓG¿ ÓΩ¿ Ô:¿ ÔD¿ ÔL¿ ÔR¿ Ôy¿ Ô}¿ Ô~¿ Ô¨¿ Ô”¿ ÔÓ¿ ¿ @¿ F¿ h¿ à¿ ¿ Ò]¿ Ò≥¿ Ú¿ Úù¿ Úº¿ Ú˝¿ Û2¿ ÛE¿ Ûx¿ ÛÑ¿ Û◊¿ Ù)¿ Ùe¿ Ù—¿ ıG¿ ıı¿ ˆ¿ ˆG¿ ˆ|¿ ˆƒ¿ ˆ˜¿ ˜
¿ ˜]¿ ˜ê¿ ˜ú¿ ˜¶¿ ˜µ¿ ˜„¿ ¯3¿ ¯Ñ¿ ¯≈¿ ¯˙¿ ˘¿ ˘@¿ ˘L¿ ˘]¿ ˘ö¿ ˘„¿ ˘Ì¿ ˘ı¿ ˙¿ ˙U¿ ˙¿¿ ˙˝¿ ˚j¿ ˚ª¿ ¸¿ ¸E¿ ¸õ¿ ˝¿ ˝Ç¿ ˝°¿ ˛¿ ˛É¿ ˇ¿ ˇ¿ ˇ¿ ˇ¿ ˇ@¿ ˇD¿ ˇE¿ ˇ¢¿ ˇÙ¿ L¿ ¨¿ Ú¿4¿5¿d¿¢¿∫¿¿+¿s¿y¿º¿…¿ﬁ¿¿¿¿b¿¥¿¿W¿{¿¿¿s¿ÿ¿7¿ñ¿¿¿3¿9¿J¿K¿Ñ¿≤¿’¿€¿‹¿	¿	3¿	9¿	â¿	Ÿ¿
+¿
E¿
ã¿
è¿
ê¿
À¿
ı¿¿v¿≈¿À¿Ù¿$¿*¿?¿C¿D¿í¿£¿«¿‘¿˙¿ ¿¿¿1¿Q¿o¿ö¿ª¿ø¿¿¿Á¿$¿~¿ü¿£¿§¿·¿L¿Ø¿—¿◊¿*¿z¿»¿¿9¿û¿≈¿-¿P¿V¿¶¿∆¿,¿^¿å¿∂¿÷¿⁄¿€¿%¿e¿Ñ¿°¿º¿‚¿¿*¿Z¿ß¿≠¿⁄¿ﬁ¿ﬂ¿d¿¢¿«¿·¿¿E¿p¿†¿œ¿ˆ¿˛¿¿¿≤¿÷¿¯¿¿B¿p¿∫¿¿v¿é¿‚¿"¿-¿S¿v¿£¿—¿¿J¿ò¿À¿+¿í¿÷¿ ¿I¿©¿¥¿¿6¿<¿P¿w¿Ñ¿≠¿≥¿∆¿ ¿À¿ :¿ \¿ à¿ ‘¿!¿!_¿!ò¿!ª¿!¡¿!˝¿"$¿"*¿"L¿"p¿"ã¿"±¿"È¿#S¿#y¿#ö¿#˛¿$]¿$É¿$§¿%¿%+¿%P¿%à¿%Ò¿&+¿&T¿&ò¿&≈¿&÷¿&˛¿'¿'¿'¿'#¿'J¿'W¿'Ä¿'Ü¿'ô¿'ù¿'û¿'Ô¿(:¿(ã¿(•¿)¿)6¿)~¿)Ã¿)¯¿)¸¿)˝¿*L¿*ú¿*À¿+6¿+S¿+n¿+ä¿+¨¿+÷¿+˙¿,*¿,4¿,Ö¿,•¿,≤¿-¿- ¿-D¿-f¿-l¿-ã¿-‘¿.¿.H¿.L¿.M¿.˘¿/A¿/ç¿/µ¿/Î¿0¿0G¿0V¿0^¿0d¿0à¿0º¿1¿1?¿1v¿1É¿1»¿1¿2b¿2k¿2q¿2ì¿2¿¿2È¿3¿3@¿3M¿3q¿3w¿3¨¿3Ê¿4/¿43¿44¿4|¿4â¿4è¿4«¿5	¿5M¿5a¿5g¿5ã¿5Ø¿5—¿6 ¿6K¿6r¿6¿6®¿6—¿6◊¿7J¿7N¿7O¿7r¿7x¿7Õ¿7Î¿8C¿8u¿8Ö¿8æ¿8œ¿9¿9¿9)¿9k¿9q¿9u¿9v¿9Ç¿9µ¿9‰¿9Ë¿9È¿9ı¿:=¿:\¿:¥¿:¬¿:»¿:¯¿;#¿;E¿;K¿;w¿;û¿;¿¿;∆¿; ¿;À¿;Ô¿;˚¿<¿<D¿<Ü¿<œ¿<ÿ¿<ˆ¿=¿=N¿=Ö¿=è¿=û¿> ¿>v¿>£¿>´¿>±¿>”¿>◊¿>ÿ¿>Ì¿? ¿?¿?a¿?™¿?≥¿?—¿?˝¿@=¿@¿@â¿@ß¿@∂¿A¿Aä¿Aí¿Aò¿A±¿Aµ¿A∂¿A⁄¿AÚ¿Aˆ¿A˜¿B¿B¿B,¿B0¿B1¿Bh¿B¨¿B∫¿B¿¿BÏ¿C!¿CR¿CÉ¿Cå¿C∑¿C‹¿D	¿DZ¿D{¿D∏¿D¿¿D∆¿E¿E-¿EB¿Ej¿EØ¿E∫¿E¿F¿F¿F¿F^¿Fw¿Få¿F≤¿Fı¿G ¿G6¿GK¿GT¿GZ¿G^¿G_¿Gk¿G§¿GÂ¿H%¿Ha¿H°¿H•¿H¶¿H≤¿HÔ¿I9¿I=¿I>¿IJ¿Iá¿I—¿I’¿I÷¿I‚¿J=¿J>¿JJ¿Jè¿J∫¿K¿K^¿K•¿K©¿K´    
_kEllipsis PlaceholderSpanIndexSemanticsTagTextParentData%RenderInlineChildrenContainerDefaultsRenderParagraph_SelectableFragment å