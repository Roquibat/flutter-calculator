Ä“value==hashCodetoString_currentElementcurrentContextcurrentWidgetcurrentState_debugLabelkeycreateElementtoStringShortdebugFillProperties	canUpdate_debugConcreteSubtypebuildcreateStatecreatedinitializedreadydefunctwidget_widget_debugLifecycleState_debugTypesAreRightcontext_elementmounted	initStatedidUpdateWidget
reassemblesetState
deactivateactivatedisposedidChangeDependencieschilddebugIsValidRenderObjectdebugTypicalAncestorWidgetClass%debugTypicalAncestorWidgetDescription%_debugDescribeIncorrectParentDataTypeapplyParentDatadebugCanApplyOutOfTurnupdateShouldNotifycreateRenderObjectupdateRenderObjectdidUnmountRenderObjectchildreninitialactiveinactive_locked	_elements_unmount_unmountAll_deactivateRecursivelyaddremovedebugContainsownerdebugDoingBuildfindRenderObjectsizedependOnInheritedElement"dependOnInheritedWidgetOfExactTypegetInheritedWidgetOfExactType'getElementForInheritedWidgetOfExactTypefindAncestorWidgetOfExactTypefindAncestorStateOfTypefindRootAncestorStateOfTypefindAncestorRenderObjectOfTypevisitAncestorElementsvisitChildElementsdispatchNotificationdescribeElementdescribeWidgetdescribeMissingAncestordescribeOwnershipChainonBuildScheduled_inactiveElements_dirtyElements_scheduledFlushDirtyElements_dirtyElementsNeedsResorting_debugIsInBuildScopefocusManagerscheduleBuildFor_debugStateLockLevel_debugStateLockeddebugBuilding_debugBuilding_debugCurrentBuildTarget	lockState
buildScope>_debugElementsThatWillNeedToBeRebuiltDueToGlobalKeyShenanigansB_debugTrackElementThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans_debugElementWasRebuilt_globalKeyRegistry_debugIllFatedElements_debugGlobalKeyReservationsglobalKeyCount#_debugRemoveGlobalKeyReservationFor_registerGlobalKey_unregisterGlobalKey_debugReserveGlobalKeyFor _debugVerifyGlobalKeyReservation_debugVerifyIllFatedPopulationfinalizeTreeonNotificationattachNotificationTreecurrentparent_parent_notificationTreeslot_slotdepth_depth_sortdebugIsDefunctdebugIsActive_owner_debugIsInScoperenderObjectrenderObjectAttachingChilddescribeElements_lifecycleStatevisitChildrendebugVisitOnstageChildrenupdateChildupdateChildrenmount _debugRemoveGlobalKeyReservationupdateupdateSlotForChild
updateSlot_updateDepthdetachRenderObjectattachRenderObject_retakeInactiveElementinflateWidget_debugCheckForCyclesdeactivateChild$_debugForgottenChildrenWithGlobalKeyforgetChild_activateWithParent_activateRecursivelydebugDeactivatedunmountdebugExpectsRenderObjectForSlot_inheritedElements_dependencies_hadUnsatisfiedDependencies)_debugCheckStateIsActiveForAncestorLookupdoesDependOnInheritedElement_updateInheritance!_debugCheckOwnerBuildTargetExistsdebugGetCreatorChaindebugGetDiagnosticChaintoDiagnosticsNodedebugDescribeChildrendirty_dirty_inDirtyList_debugBuiltOncemarkNeedsBuildrebuildperformRebuildstateful	toJsonMapbuilder_defaultErrorWidgetBuilder
_stringifymessage_flutterError_child_debugDoingBuild_firstBuildstate_state_didChangeDependenciesupdatednotifyClientsdebugParentDataType_applyParentDataapplyWidgetOutOfTurn_dependentsgetDependenciessetDependenciesupdateDependenciesnotifyDependentremoveDependent_renderObject_ancestorRenderObjectElement _findAncestorRenderObjectElement_debugCheckCompetingAncestors_findAncestorParentDataElements_debugUpdateRenderObjectOwner_performRebuild_updateParentDatainsertRenderObjectChildmoveRenderObjectChildremoveRenderObjectChildassignOwner	_children_forgottenChildren$_debugCheckHasAssociatedRenderObject._debugCheckMustNotAttachRenderObjectToAncestorelementindexinstance7
_DebugOnly
_debugOnly	ObjectKey	GlobalKeyLabeledGlobalKeyGlobalObjectKeyWidgetStatelessWidgetStatefulWidget_StateLifecycleStateSetter_flutterWidgetsLibraryStateProxyWidgetParentDataWidgetInheritedWidgetRenderObjectWidgetLeafRenderObjectWidgetSingleChildRenderObjectWidgetMultiChildRenderObjectWidget_ElementLifecycle_InactiveElementsElementVisitorConditionalElementVisitorBuildContext
BuildOwnerNotifiableElementMixin_NotificationNode_isProfileBuildsEnabledForElement_ElementDiagnosticableTreeNodeErrorWidgetBuilderErrorWidgetWidgetBuilderIndexedWidgetBuilderNullableIndexedWidgetBuilderTransitionBuilderComponentElementStatelessElementStatefulElementProxyElementParentDataElementInheritedElementRenderObjectElementRootRenderObjectElementRootElementMixinLeafRenderObjectElementSingleChildRenderObjectElementMultiChildRenderObjectElementRenderTreeRootElementDebugCreator_reportExceptionIndexedSlot_NullElement_NullWidgetÅófactory	immutablemustCallSuperoptionalTypeArgs	protectedrequiredvisibleForTestingErrorDescription	ErrorHintErrorSummaryFlutterError
debugPrintdebugPrintStackValueChangedValueGetterValueSetterVoidCallbackDiagnosticLevelDiagnosticsNodeKeyLocalKeyValueKey	RenderBoxRenderObjectdebugDumpLayerTreedebugDumpRenderTreekey	identicalObjectoverrideboolruntimeTypevalueinthashidentityHashCodeStringdescribeIdentityobjectRuntimeType
deactivate	UniqueKeyGestureDetector	initState
debugLabelemptyWidgetsBindinginstance
buildOwner_globalKeyRegistrywidgetstateconstructor	shortHashendsWith	substringlengthcreateStateupdateDiagnosticableTreevoidDiagnosticPropertiesBuilderdebugFillPropertiesdefaultDiagnosticsTreeStyleDiagnosticsTreeStyledense
nonVirtualhashCoderebuildRowColumnPaddingSizedBoxAlignCustomSingleChildLayout	Container
DecorationCustomPaintThemesetState	canUpdate"dependOnInheritedWidgetOfExactTypeStreamChangeNotifierdisposedidChangeDependenciesIgnorePointerignoringKeyedSubtreeDiagnosticablecreated kFlutterMemoryAllocationsEnabledFlutterMemoryAllocationsdispatchObjectCreatedlibrary	classNameobject
reassembleBindingBasereassembleApplicationImage
ListenableAnimationControllermarkNeedsLayoutmarkNeedsPaintmarkNeedsBuilddefunct	fromPartsdynamicFutureactivaterunAppshrinkAppLifecycleListenerreadydispatchObjectDisposedAnimatedWidgetaddEnumPropertydefaultValueObjectFlagPropertyifNull
parentDataStack
ParentData
PositionedSizeTypeIterableparentDataCreatorownershipChainchildapplyWidgetOutOfTurnColorof	ThemeDataBuilderInheritedNotifierInheritedModel#SlottedMultiChildRenderObjectWidgetmountcreateRenderObjectupdateRenderObjectRenderObjectWithChildMixinContainerRenderObjectMixinRenderBoxContainerDefaultsMixinRenderStackListSetHashSet_lifecycleStateinactive$debugPrintGlobalKeyedWidgetLifecyclevisitChildren_parentunmounttoListsort_sortclearreversedforEachisEmptyactivedebugDeactivatedcontainsremovevisitChildElementsvisitAncestorElementsbuildcontext
showDialogbuilderScaffoldStateshowBottomSheetScaffoldmounted	drawFrame
RenderViewaspectMaterialInkWellNotificationListenerNotificationdescribeElementserrorPropertydebugCheckHasMaterialassignOwnerOffstageFocusManagerregisterGlobalHandlers
FocusScopeFocusScopeNodenewowner debugPrintScheduleBuildForStackslabeldirtydescribeElement_inDirtyListdebugPrintBuildScopepragmacallbackkReleaseModeMap"debugEnhanceBuildTimelineArgumentsFlutterTimeline	startSync	arguments_debugIsInScopeDiagnosticsPropertystyle
kDebugModetoDiagnosticsNodetoTimelineArgumentsestackinformationCollectorDiagnosticsDebugCreator
finishSyncanyelementHashMapputIfAbsentcontainsKeyparentrenderObjectattached
childToKeytoStringcurrentChildforgetChildkeys_unmountAll
isNotEmptyaddAllmapcountjoin_notificationTreeonNotificationdispatchNotificationdebugProfileBuildsEnabled$debugProfileBuildsEnabledUserWidgetsdebugIsWidgetLocalCreationcreateElementinitialdepthTimer	AnimationViewrenderObjectAttachingChildexpectedAncestorTypeDiagnosticsBlocknamechildrenallowTruncateStringPropertyOverlayFindervisitChildrenForSemantics_debugStateLocked_debugConcreteSubtypeslot_debugElementWasRebuilt_debugReserveGlobalKeyForindexslotsforgottenChildrenfilledvaluesoldChildeveryinsertRenderObjectChildmoveRenderObjectChildremoveRenderObjectChild_registerGlobalKey#_debugRemoveGlobalKeyReservationFor
updateSlot_updateDepthdetachRenderObjectattachRenderObject_currentElementB_debugTrackElementThatWillNeedToBeRebuiltDueToGlobalKeyShenanigansdeactivateChild_inactiveElements_activateWithParentscheduleBuildFor
dependencyremoveDependent_unregisterGlobalKey
ViewAnchorviewViewCollection_debugBuildingErrorSpacerRenderSliverdescribeForErrorhasSizedebugNeedsLayoutsizePersistentHashMapupdateDependencies_inheritedElementsupdateShouldNotify_debugCurrentBuildTargettoStringShortshowNamelevelhiddenFlagPropertyifTruea	compareTobsparsedescriptiondescribeWidget
ColoredBoxcolorupdateChildrendidUpdateWidgetAnimatedBuilderforcedebugOnRebuildDirtyWidgetcalldebugPrintRebuildDirtyWidgetsDiagnosticableTreeNode DiagnosticsSerializationDelegate	toJsonMapdebugIsDefunctreportErrorFlutterErrorDetailsonErrorerrorRenderErrorBox	exceptionwithDetailsmessagequoted
whitespaceOverlayEntryValueWidgetBuilderListViewSliverChildBuilderDelegate
childCountListenableBuilder
WidgetsAppMaterialAppdebugWidgetBuilderValueperformRebuildupdateChild_debugTypesAreRight_element_widget_debugLifecycleStateinitialized_firstBuilddependOnInheritedElementstatefulUnsupportedError_updateParentDataapplyParentDatadebugCanApplyOutOfTurnAutomaticKeepAlive	KeepAliveputupdated!_debugCheckOwnerBuildTargetExists	dependent_dependenciesupdateSlotForChildPageStorageperformLayoutinvokeLayoutCallback
buildScopedebugDumpAppdebugExpectsRenderObjectForSlotwhereancestordebugParentDataTypedebugTypicalAncestorWidgetClassdebugGetCreatorChain
stackTracedebugDisposeddebugCreatordidUnmountRenderObjectdebugIsValidRenderObject%_debugDescribeIncorrectParentDataType_slotparentDataElement
Deprecated_ownerdebugDescribeChildrendebugValidateChilddebugChildrenHaveDuplicateKeysContainerParentDataMixininsertaftermoveinflateWidgetiPipelineOwnerrootNode _findAncestorRenderObjectElement
StackTraceInformationCollectorUnimplementedErrorLocalKeyKey	GlobalKeyDiagnosticableTreeWidgetDiagnosticableProxyWidgetRenderObjectWidgetElementBuildContextDiagnosticableTreeNodeLeafRenderObjectWidgetComponentElementProxyElementRenderObjectElementRootElementMixinPKX¢¬7X¥Ÿ(Gh) Ç Çnfactory	immutablemustCallSuperoptionalTypeArgs	protectedrequiredvisibleForTesting Å◊package:flutter/foundation.dartÇôÇÚErrorDescription	ErrorHintErrorSummaryFlutterError
debugPrintdebugPrintStack Çppackage:flutter/foundation.dartÉÉVValueChangedValueGetterValueSetterVoidCallback ÇÙpackage:flutter/foundation.dartÉÅÉ¶DiagnosticLevelDiagnosticsNode ÉXpackage:flutter/foundation.dartÉ—ÉÌKeyLocalKeyValueKey É®package:flutter/foundation.dartÑÑ\	RenderBoxRenderObjectdebugDumpLayerTreedebugDumpRenderTree ÉÔpackage:flutter/rendering.dart  Ä¶  
dart:async  Äª  dart:collection  Ä÷  package:flutter/foundation.dart  Å   package:flutter/rendering.dart  Å*  binding.dart  ÅA  
debug.dart  ÅV  focus_manager.dart  Ås  inherited_model.dart  Åí  notification_listener.dart  Å∑  widget_inspector.dart    	dart:core¿≈ ¿Üoõ† <ÄÜÄ§Ä•Ä∫Ä‘Ä’ÄˇÅ(Å)Å@ÅUÅrÅëÅ∂Å÷Å◊ÇÇÇÇ.ÇBÇOÇ[ÇpÇÙÉXÉ®ÉÔÑ^Ñ_ÑwÑïÑªÑÙÖIÖîÖÎÜÜÅÜ∂ááçàEàià~àŒàıàˆâEâêâ„ääää)äXä]ädäwäçäèäêäºäΩä≈ä∆ããã]ãwã{ãâãçã∏å	åå9åÑå£å§åËåˇç çç/ç[çoçuçìçΩç¡ç¬çŒééé$é:é^éãéëé‰éËéÍéÎèèèoèºêêêUê§êÛëDëRëVë¢ëÒí=íeíiíπíÓíÚì>ìzì~ìéìíì·î î$îqî¿ï	ïYï©ïºï¿ññXñ\ñjñnñøñÃñﬁó&ówóàóéóﬁóò@òAòmòsò¡ò‘ôôôfôgô©ôØö ööNöOöêöñöÊö˝õ5õ6õáõçõÿú)úbúzú®úŒùù6ùNùdùlùrùÉùáùâùäù≥ù∑ûû,û>ûçû¿û∆û˙üPüåüçü™ü´ü∑üÕ††=†r†x†®†¨†Æ†Ø†˚†ˇ°M°g°k°≠°±¢¢D¢ï¢·¢ˆ¢˙££1£R£X£`£d£Æ£˚§§§f§∏§Û§Ù•8•N•O•[•~•™•æ•ƒ•Î¶¶¶¶&¶U¶V¶b¶x¶∫ß ß}ßößœßÙ®=®C®x®|®~®®±®µ©©P©ï©ô©Ë™3™m™ª™€™ﬂ´0´Ä´À¨¨-¨1¨¨ ≠≠i≠∑ÆÆÆÆ$Æ(ÆtÆûÆÍØØ]ØêØõØŒØˆ∞∞∞X∞^∞•∞ˆ±H±ò±Î±˜±˝≤M≤û≤Ï≥7≥à≥©≥Ø¥ ¥¥¥-¥3¥f¥x¥y¥≥¥πµµ^µ´µ˚∂∂∂)∂D∂E∂x∂Ñ∂ü∂⁄∑∑∑∑∑^∑â∑“∑÷∑◊∑„∑Ò∏%∏&∏2∏@∏f∏g∏∑∏Á∏Ìπ>πçπ“πÿ∫)∫w∫à∫∆ª ª+ª/ª0ªzªœº#º|º∞º⁄ΩΩΩΩΩΩLΩPΩ†ΩÔæ9æÅæ“æ÷øøøiø±¿ @¿ @L¿ @ö¿ @ø¿ @√¿ @Â¿ @È¿ A8¿ AÑ¿ A‘¿ B¿ B¿ BY¿ B™¿ BÙ¿ C¿ C¿ CZ¿ C}¿ CÅ¿ C“¿ D"¿ Dq¿ D¬¿ E¿ E]¿ Eî¿ Eò¿ EÈ¿ F'¿ F+¿ F{¿ FÀ¿ G¿ G3¿ G7¿ GÇ¿ GÃ¿ H¿ Hm¿ Hª¿ I¿ I[¿ Iq¿ Iº¿ J¿ JX¿ J©¿ Jˆ¿ KB¿ Kì¿ K–¿ K„¿ KÁ¿ L8¿ Lo¿ Ls¿ L∂¿ L∫¿ LŒ¿ L“¿ M%¿ M)¿ Mz¿ Mï¿ Mô¿ M•¿ M”¿ M˘¿ M˝¿ N¿ N8¿ Nr¿ Nz¿ NÄ¿ Nà¿ Nò¿ Nú¿ N∞¿ N¥¿ O¿ O¿ O¿ O+¿ OT¿ Og¿ Oz¿ O®¿ Oº¿ O∆¿ O ¿ O„¿ O˛¿ P¿ P¿ P=¿ Pt¿ P|¿ PÇ¿ Pä¿ Pö¿ Pû¿ PÁ¿ Q6¿ QY¿ Q]¿ Qk¿ Qo¿ Qª¿ QÂ¿ R1¿ RW¿ Rá¿ RØ¿ R◊¿ Rÿ¿ S)¿ S/¿ Sl¿ Sx¿ S∂¿ S∑¿ T¿ T¿ TY¿ T©¿ TÙ¿ UG¿ Uo¿ Uu¿ U¿¿ V¿ V^¿ Vß¿ V„¿ VÈ¿ W9¿ Wá¿ W¨¿ W≤¿ X ¿ XI¿ Xñ¿ Xﬂ¿ Y*¿ Ym¿ Ys¿ Y∞¿ Y∂¿ Z¿ Z¿ ZL¿ Zá¿ Zç¿ Z’¿ Zı¿ Z˚¿ [¿ [¿ [j¿ [w¿ [ù¿ [ü¿ [†¿ [≈¿ […¿ \¿ \d¿ \Ø¿ \ˆ¿ \˙¿ ]I¿ ]ò¿ ]‚¿ ^*¿ ^{¿ ^¿ ^À¿ _¿ _b¿ _∞¿ _Û¿ `
¿ `¿ `Q¿ `U¿ `•¿ `Í¿ a8¿ aâ¿ aΩ¿ a¡¿ a˛¿ bG¿ bñ¿ b‡¿ c1¿ cÅ¿ cß¿ c´¿ cı¿ dC¿ dç¿ dÿ¿ e$¿ es¿ e¡¿ f¿ f`¿ f±¿ fˇ¿ gO¿ gõ¿ gü¿ g¡¿ g≈¿ h ¿ h¿ hU¿ h•¿ hÙ¿ iD¿ iî¿ i‡¿ j1¿ jM¿ jQ¿ jõ¿ jÊ¿ k7¿ kÄ¿ k—¿ kÏ¿ k¿ l7¿ lY¿ l]¿ l™¿ lÒ¿ mA¿ mo¿ ms¿ mƒ¿ n¿ nY¿ n®¿ n€¿ nﬂ¿ o*¿ ot¿ o∆¿ p¿ pf¿ pª¿ p„¿ pÁ¿ q3¿ qS¿ qW¿ qß¿ q¯¿ rG¿ rî¿ r‡¿ s-¿ sx¿ s∆¿ sÎ¿ sÔ¿ t:¿ tÜ¿ t ¿ u¿ uG¿ uK¿ uì¿ uó¿ uË¿ v¿ v#¿ vf¿ vj¿ v¨¿ v’¿ vŸ¿ vÌ¿ vÒ¿ w;¿ w?¿ wá¿ w“¿ x¿ x"¿ x.¿ x\¿ xÉ¿ xá¿ xó¿ x‘¿ x⁄¿ xﬁ¿ y¿ y%¿ yP¿ yä¿ yí¿ yò¿ y†¿ y∞¿ yƒ¿ y»¿ z¿ z_¿ z¿ zÉ¿ zè¿ z∑¿ z ¿ z›¿ {¿ {¿ {)¿ {-¿ {F¿ {a¿ {e¿ {u¿ {¶¿ {¨¿ {∞¿ {€¿ {ı¿ {˘¿ |¿ |5¿ |=¿ |A¿ |Q¿ ||¿ |ñ¿ |µ¿ |ˆ¿ }¿ } ¿ }(¿ }.¿ }6¿ }F¿ }J¿ }ì¿ }‚¿ ~¿ ~	¿ ~¿ ~¿ ~`¿ ~≠¿ ~‡¿ ,¿ R¿ Å¿ ©¿ –¿ —¿ Ä!¿ Ä'¿ Äd¿ Äp¿ Ä¨¿ Ä≠¿ Ä˛¿ Å¿ ÅK¿ ÅÄ¿ ÅÜ¿ Åî¿ Å§¿ Å·¿ ÅÎ¿ ÅÒ¿ Ç>¿ Çç¿ Çﬁ¿ É-¿ É}¿ É»¿ Éﬂ¿ ÉÏ¿ É˜¿ Ñ¿ Ñ¿ Ñ¿ ÑW¿ Ñn¿ ÑΩ¿ Ñ…¿ Ñ‘¿ Ñ’¿ Ö"¿ Öv¿ ÖÖ¿ ÖÜ¿ Ö÷¿ Ö‰¿ ÖÌ¿ ÖÓ¿ Ü9¿ ÜX¿ Üc¿ Üe¿ Üf¿ Üó¿ ÜÕ¿ ÜŒ¿ á¿ á¿ áN¿ áR¿ á°¿ áÌ¿ à8¿ à¿ àÉ¿ à√¿ â¿ â^¿ â≠¿ â˜¿ ä>¿ äé¿ äﬁ¿ ã(¿ ã,¿ ã^¿ ãb¿ ãõ¿ ã¿¿ å¿ å\¿ å™¿ å˜¿ ç¿ çb¿ ç¨¿ ç˙¿ éC¿ éR¿ é£¿ éÔ¿ èB¿ èê¿ è·¿ ê1¿ êv¿ ê≈¿ ë¿ ëX¿ ë°¿ ë±¿ ë˛¿ íG¿ íî¿ íÂ¿ ì6¿ ìÜ¿ ì”¿ î ¿ îm¿ îñ¿ î‰¿ ï-¿ ïs¿ ïΩ¿ ñ
¿ ñY¿ ñ™¿ ñ˜¿ óD¿ ó}¿ ó ¿ ò¿ òc¿ ò∞¿ ô¿ ôJ¿ ôî¿ ô£¿ ôÙ¿ öD¿ öí¿ ö›¿ õ¿ õN¿ õõ¿ õÎ¿ ú0¿ ú4¿ úB¿ úF¿ úó¿ ú”¿ ù ¿ ùS¿ ùü¿ ù≈¿ ù˝¿ û¿ ûT¿ ûu¿ û{¿ û»¿ ü¿ üa¿ ü™¿ ü˚¿ †J¿ †]¿ †y¿ †á¿ †à¿ †»¿ †Œ¿ °¿ °j¿ °¨¿ °≠¿ °¯¿ ¢$¿ ¢^¿ ¢_¿ ¢ò¿ ¢û¿ ¢È¿ £2¿ £Å¿ £“¿ £È¿ £Ô¿ §8¿ §b¿ §¿ §è¿ §≠¿ §…¿ •A¿ •À¿ •÷¿ •ﬁ¿ •Ò¿ •˚¿ ¶¿ ¶¿ ¶2¿ ¶3¿ ¶m¿ ¶s¿ ¶Ω¿ ß¿ ßO¿ ß†¿ ßø¿ ß≈¿ ®¿ ®/¿ ®0¿ ®i¿ ®o¿ ®æ¿ ®–¿ ®÷¿ ©¿ ©p¿ ©∑¿ ©Ω¿ ©Ô¿ ™8¿ ™Ä¿ ™Õ¿ ´¿ ´9¿ ´?¿ ´q¿ ´Ω¿ ¨¿ ¨!¿ ¨U¿ ¨[¿ ¨p¿ ¨v¿ ¨À¿ ≠¿ ≠l¿ ≠Å¿ ≠á¿ ≠÷¿ ≠ˇ¿ Æ¿ Æ¿ Æ2¿ Æo¿ Æõ¿ Æ⁄¿ Ø¿ Ø ¿ Ø6¿ Ø?¿ ØE¿ ØI¿ ØJ¿ ØÇ¿ Øà¿ Øÿ¿ ∞¿ ∞i¿ ∞≥¿ ∞‚¿ ∞Ë¿ ±8¿ ±T¿ ±Z¿ ±™¿ ±Ú¿ ±¯¿ ≤'¿ ≤-¿ ≤|¿ ≤¥¿ ≤∫¿ ≥¿ ≥$¿ ≥5¿ ≥B¿ ≥t¿ ≥u¿ ≥ß¿ ≥≠¿ ≥˜¿ ¥@¿ ¥è¿ ¥ï¿ ¥•¿ ¥´¿ ¥…¿ ¥ˆ¿ µ*¿ µ7¿ µH¿ µ`¿ µa¿ µ∞¿ µ∂¿ ∂¿ ∂9¿ ∂?¿ ∂M¿ ∂z¿ ∂Ñ¿ ∂ä¿ ∂◊¿ ∑&¿ ∑[¿ ∑a¿ ∑±¿ ∏ ¿ ∏Q¿ ∏_¿ ∏e¿ ∏±¿ ∏˛¿ π;¿ πA¿ πé¿ π‹¿ ∫,¿ ∫|¿ ∫Æ¿ ∫¥¿ ∫¬¿ ∫Ò¿ ª¿ ª¿ ª)¿ ªè¿ ªæ¿ º¿ º¿ º¿ º¿ ºi¿ º∫¿ Ω¿ Ω#¿ Ω)¿ Ωu¿ Ω≤¿ Ω∏¿ Ω∆¿ Ω›¿ æ¿ æ¿ æ(¿ æN¿ æX¿ æ^¿ æ¨¿ æ¯¿ øG¿ øï¿ øÂ¿ ø˚¿ ¿¿ ¿¿ ¿"¿ ¿s¿ ¿™¿ ¿ÿ¿ ¿ﬁ¿ ¡.¿ ¡¿ ¡œ¿ ¬
¿ ¬¿ ¬Q¿ ¬W¿ ¬§¿ ¬Û¿ √D¿ √ñ¿ √…¿ √œ¿ ƒ¿ ƒn¿ ƒt¿ ƒò¿ ƒû¿ ƒÓ¿ ≈=¿ ≈é¿ ≈ﬁ¿ ∆.¿ ∆P¿ ∆V¿ ∆¶¿ ∆˜¿ «E¿ «|¿ «Ç¿ «”¿ »$¿ »8¿ »>¿ »N¿ »T¿ »†¿ »‹¿ »È¿ …¿ …¿ …Y¿ …ë¿ …’¿ …Ò¿  N¿  ß¿  ˛¿ À?¿ ÀL¿ Àa¿ Àä¿ À·¿ Ã6¿ Ãã¿ Ã†¿ Ã≠¿ Ã¬¿ Õ¿ Õk¿ Õ∫¿ Œ
¿ Œ¿ Œ#¿ Œ+¿ Œt¿ Œ¨¿ ŒÔ¿ œ¿ œ]¿ œ∑¿ –¿ –A¿ –N¿ –Z¿ –b¿ –u¿ –¿ –´¿ –ª¿ –Ÿ¿ —¿ —\¿ —x¿ —œ¿ “¿ “¿ “2¿ “å¿ “Ë¿ ”%¿ ”2¿ ”>¿ ”F¿ ”ñ¿ ”∏¿ ”À¿ ”’¿ ”ı¿ ”˘¿ ”˙¿ ‘2¿ ‘8¿ ‘Ü¿ ‘“¿ ’#¿ ’s¿ ’Ω¿ ÷¿ ÷\¿ ÷´¿ ÷˚¿ ◊I¿ ◊ô¿ ◊«¿ ◊Õ¿ ÿ¿ ÿg¿ ÿ®¿ ÿÆ¿ ÿ˚¿ Ÿ%¿ Ÿ+¿ Ÿ;¿ ŸA¿ Ÿë¿ Ÿµ¿ Ÿ¬¿ Ÿ”¿ ŸÎ¿ ŸÏ¿ ⁄8¿ ⁄X¿ ⁄^¿ ⁄¨¿ ⁄˜¿ €.¿ €4¿ €É¿ €–¿ ‹¿ ‹j¿ ‹∫¿ ›¿ ›O¿ ›õ¿ ›Î¿ ﬁ3¿ ﬁÑ¿ ﬁä¿ ﬁÿ¿ ﬂ%¿ ﬂ;¿ ﬂA¿ ﬂê¿ ﬂ∏¿ ﬂæ¿ ﬂŒ¿ ﬂ‘¿ ‡¿ ‡d¿ ‡q¿ ‡Ç¿ ‡ò¿ ‡ô¿ ‡›¿ ‡„¿ ·-¿ ·{¿ · ¿ ‚¿ ‚e¿ ‚k¿ ‚∫¿ ‚Û¿ ‚˘¿ „(¿ „.¿ „{¿ „¢¿ „®¿ „π¿ „ø¿ ‰¿ ‰U¿ ‰k¿ ‰q¿ ‰ê¿ ‰ñ¿ ‰‚¿ Â/¿ Â}¿ ÂΩ¿ Â√¿ Ê¿ ÊI¿ ÊO¿ Êõ¿ Ê€¿ Ê·¿ Á/¿ Á^¿ Ád¿ Á†¿ Á¶¿ Á÷¿ Á‹¿ ÁÏ¿ ÁÚ¿ Ë-¿ Ë:¿ ËK¿ Ë^¿ Ëô¿ Ë©¿ Ëﬂ¿ ËÚ¿ Ë¸¿ È(¿ Èv¿ È|¿ ÈÄ¿ ÈÅ¿ ÈÃ¿ È“¿ Í!¿ Í0¿ Í6¿ ÍZ¿ ÍÑ¿ Í≥¿ Í¯¿ Î@¿ Îë¿ Î∏¿ Îæ¿ Ï¿ Ï>¿ ÏD¿ Ïè¿ Ï‹¿ Ì-¿ Ìv¿ Ì≤¿ Ì∏¿ Ó¿ ÓW¿ Ó¢¿ Ó®¿ Óˆ¿ Ô?¿ Ôé¿ Ô‹¿ (¿ w¿ ∂¿ º¿ ◊¿ ›¿ Ò'¿ Ò-¿ Ò{¿ Ò…¿ Ú¿ Ú.¿ Ú4¿ Ú¿ Ú–¿ Û ¿ Ûp¿ Ûº¿ Ûˆ¿ Û¸¿ ÙM¿ Ùó¿ ÙÁ¿ ÙÌ¿ ı=¿ ıã¿ ıÕ¿ ˆ¿ ˆm¿ ˆÜ¿ ˆå¿ ˆö¿ ˆƒ¿ ˆÛ¿ ˜'¿ ˜-¿ ˜H¿ ˜N¿ ˜`¿ ˜ö¿ ˜∫¿ ˜Ô¿ ˜¸¿ ¯¿ ¯¿ ¯¿ ¯¿ ¯o¿ ¯∫¿ ˘
¿ ˘W¿ ˘§¿ ˘Ò¿ ˙¿ ˙
¿ ˙W¿ ˙ß¿ ˙¬¿ ˙»¿ ˙÷¿ ˚¿ ˚C¿ ˚I¿ ˚d¿ ˚s¿ ˚{¿ ˚Å¿ ˚µ¿ ˚ƒ¿ ˚÷¿ ¸¿ ¸#¿ ¸a¿ ¸n¿ ¸x¿ ¸Ä¿ ¸ä¿ ¸ê¿ ¸·¿ ˝1¿ ˝~¿ ˝À¿ ˝Ï¿ ˝Ú¿ ˛¿ ˛¿ ˛`¿ ˛m¿ ˛ì¿ ˛î¿ ˛”¿ ˛Ÿ¿ ˇ¿ ˇd¿ ˇô¿ ˇü¿ ˇÌ¿ <¿ B¿ å¿ ÿ¿%¿o¿ñ¿£¿¥¿◊¿ÿ¿‰¿)¿T¿d¿Á¿˙¿¿X¿æ¿¬¿ƒ¿≈¿¿ ¿$¿p¿à¿å¿ö¿û¿Í¿¿I¿í¿ø¿¿5¿Ç¿µ¿Ì¿¿S¿å¿ç¿Ω¿√¿˜¿I¿ú¿Â¿˙¿	¿	¿	¿	`¿	{¿	¿	ª¿
	¿
I¿
M¿
ù¿
œ¿
”¿
Á¿
Î¿:¿¿É¿è¿–¿Á¿˙¿¿4¿>¿B¿Y¿]¿m¿•¿¿(¿J¿û¿»¿“¿⁄¿ﬁ¿Ó¿)¿/¿7¿G¿K¿Y¿]¿ö¿·¿(¿k¿ò¿Ê¿2¿\¿®¿˘¿A¿Ä¿Å¿ç¿”¿‘¿¿0¿6¿|¿Ã¿¯¿˛¿J¿x¿µ¿œ¿Ï¿¿¿¿h¿°¿ß¿ı¿!¿P¿V¿o¿u¿ƒ¿Ô¿;¿}¿É¿ë¿£¿‡¿Í¿¿@¿ç¿ﬁ¿
¿¿Y¿í¿ò¿Ê¿¿¿b¿¶¿ ¿¿E¿j¿ï¿∫¿¡¿€¿¯¿˘¿m¿ã¿©¿√¿¿¿(¿B¿∏¿√¿‘¿;¿±¿∫¿ﬂ¿Ú¿`¿k¿ç¿ß¿ ¿+¿2¿6¿7¿â¿è¿‘¿ ¿ b¿ ±¿ ÷¿ ‹¿!,¿!v¿!«¿"¿"g¿"m¿"π¿"Ú¿#?¿#]¿#j¿#ù¿#û¿#Î¿$¿$	¿$U¿$†¿$¶¿$∂¿$º¿%¿%¿%(¿%R¿%T¿%U¿%¶¿%™¿%Ì¿%Ò¿&B¿&é¿&í¿&·¿'¿'!¿'d¿'h¿'|¿'Ä¿'À¿'œ¿'€¿(	¿(!¿(4¿(Q¿(o¿(y¿(}¿(ñ¿(ö¿(“¿)¿)"¿)&¿)X¿)å¿)Õ¿)Â¿)Ì¿)Ò¿*¿*Q¿*W¿*_¿*o¿*s¿*¶¿*™¿*˙¿+¿+k¿+¥¿+∏¿,	¿,X¿,¶¿,Î¿,Ô¿->¿-é¿-Ω¿-¡¿.¿.`¿.∞¿.˙¿/?¿/ä¿/•¿/©¿/÷¿/⁄¿0+¿0z¿0ã¿0è¿0£¿0ß¿0˜¿1-¿11¿1=¿1h¿1ì¿1¥¿1∏¿1»¿1Û¿2¿2'¿2H¿2d¿2ô¿2∂¿2÷¿3#¿36¿3G¿3V¿3c¿3n¿3v¿3|¿3Ñ¿3î¿3ò¿3¨¿3∞¿3˙¿4J¿4}¿4Å¿4ç¿4∏¿4º¿4Ï¿5¿5¿5&¿5Q¿5j¿5Ö¿5¶¿5ø¿5€¿6¿6.¿6;¿6F¿6N¿6T¿6\¿6´¿6Ø¿6Ω¿6¡¿7¿75¿7Å¿7≥¿7Í¿8.¿8|¿8ë¿8·¿9
¿9?¿9ê¿9ÿ¿:¿:¿:#¿:a¿:b¿:≥¿:π¿;
¿;[¿;™¿;Û¿<¿<¿<\¿<¨¿<¯¿=¿=¿=S¿=U¿=V¿=¶¿=¿>¿>¿>P¿>t¿>x¿>∏¿?¿?U¿?ü¿?…¿?Õ¿@¿@M¿@û¿@Ê¿A¿A¿A`¿Al¿Aw¿Aû¿Aü¿Aﬂ¿B0¿BL¿BR¿B£¿BÂ¿C/¿C_¿Cç¿Cö¿C•¿Cﬁ¿Cﬂ¿D,¿D{¿D†¿D¶¿DÙ¿E>¿Eâ¿Eπ¿EË¿Eı¿FN¿FO¿Fù¿FÁ¿G¿G*¿Gq¿Gs¿Gt¿G»¿G„¿GÁ¿H4¿Hw¿H»¿I¿I?¿I@¿IL¿Iò¿Iö¿Iõ¿IÔ¿J¿J¿JW¿J•¿Jˆ¿K-¿K1¿K~¿K»¿L¿La¿L£¿L§¿L‘¿L⁄¿M¿M"¿M#¿M/¿Mâ¿Mã¿Må¿M‡¿N,¿Nv¿NÇ¿NÜ¿NΩ¿O¿OV¿O°¿OÂ¿P¿P¿P]¿Pa¿Po¿Ps¿PÆ¿P˚¿Q
¿QK¿Qú¿Q¿¿R	¿R2¿Râ¿Rä¿Rª¿R¡¿S¿SV¿S§¿S≥¿Sπ¿T¿TT¿T•¿TÏ¿TÚ¿U ¿U!¿UY¿Uå¿Uí¿UØ¿U«¿U˜¿V¿V¿V¿V'¿VT¿Vó¿V¬¿VÃ¿V‘¿Vﬁ¿V‰¿W#¿W)¿W7¿Wo¿W¢¿W®¿W≈¿W›¿X'¿Xf¿X†¿XÆ¿X∏¿Xæ¿X–¿X˝¿YI¿Y}¿Yá¿Yè¿Yô¿Y∏¿Yπ¿Y≈¿Z¿Z¿Z ¿Z!¿Z-¿Z.¿ZG¿ZR¿Z\¿Zh¿Zs¿Zu¿Zv¿Zê¿Z®¿Z›¿Zﬁ¿[¿[D¿[T¿[Ü¿[µ¿[ˇ¿\	¿\¿\$¿\.¿\Z¿\Ç¿\ô¿\°¿\∏¿\˙¿\˛¿\ˇ¿]¿]*¿]v¿]ç¿]ó¿]¬¿]“¿]Û¿^
¿^¿^¿^¿^M¿^é¿^®¿^Î¿_¿_.¿_P¿_c¿_m¿_q¿_r¿_ê¿_¶¿_–¿_ı¿`4¿`[¿`a¿`}¿`Å¿`Ç¿`£¿`π¿`‚¿a¿a&¿ag¿ak¿al¿aî¿a™¿a∫¿aÊ¿a˘¿b¿b¿b¿b¿b¿bb¿bf¿bì¿bó¿bﬁ¿bÒ¿c*¿c+¿cs¿cw¿cß¿c´¿cŒ¿d¿d¿dP¿dT¿dì¿d‹¿d‡¿e,¿e}¿e ¿f¿fO¿fS¿fü¿fÌ¿g8¿g<¿gã¿g⁄¿h)¿hy¿h ¿i¿ih¿i∑¿j¿jM¿jÄ¿jÑ¿j”¿k¿kg¿k∑¿l ¿l¿l¿l¿lG¿lx¿lè¿l¬¿lŸ¿m¿m$¿mO¿mm¿m£¿mŒ¿mÙ¿n'¿nJ¿nu¿nö¿n¡¿n˚¿o)¿o`¿oå¿o“¿p ¿p8¿pY¿pw¿pî¿pØ¿p»¿pﬂ¿pÙ¿q¿q¿q'¿q4¿q>¿qG¿qM¿qU¿qY¿q©¿q¯¿rE¿rf¿rj¿r≠¿r±¿s ¿sN¿så¿sﬁ¿t/¿tj¿tn¿tz¿tä¿tµ¿t‘¿tÙ¿u8¿u[¿uÜ¿uî¿u°¿uÕ¿uÿ¿u‡¿uË¿u˚¿uˇ¿vM¿võ¿vπ¿w¿w¿w¿wg¿wü¿w∏¿wπ¿x¿x#¿x)¿xx¿x∆¿x⁄¿x‡¿y.¿y4¿yq¿yÖ¿yÜ¿y“¿yÿ¿z#¿zW¿z®¿z ¿{¿{4¿{:¿{ã¿{Ã¿{¯¿{˛¿|6¿|R¿|S¿|ó¿|Â¿}2¿}N¿}T¿}ü¿}Î¿~0¿~¿~¨¿~≤¿¿R¿°¿Ë¿˙¿Ä ¿ÄL¿Än¿Ät¿Ä¡¿Å¿Å]¿ÅÉ¿Åß¿Å®¿ÅÍ¿Å¿Ç<¿Çà¿Ç—¿Ç˙¿É ¿ÉL¿Én¿Ét¿É≈¿Ñ¿Ñb¿ÑØ¿Ñµ¿Ö¿ÖN¿Öû¿Öƒ¿Ö÷¿Ö◊¿Ü¿ÜZ¿Ü`¿ÜÅ¿Üá¿Ü—¿á#¿áV¿á\¿á∞¿áﬁ¿à9¿à:¿àä¿à¬¿à»¿â¿âb¿âØ¿â˛¿ä?¿äE¿äó¿ä‚¿äÙ¿ä˙¿ãB¿ãé¿ã€¿å+¿åz¿å…¿å„¿åÈ¿ç9¿çà¿çŸ¿é&¿éZ¿é`¿éÆ¿é˚¿è/¿è5¿èÜ¿è±¿è∑¿ê¿êS¿ê§¿êÔ¿ë¿ë¿ëS¿ëö¿ëﬁ¿í¿í¿íq¿ír¿í¬¿íˆ¿í¸¿ìL¿ìô¿ìÍ¿î&¿î,¿î|¿îÀ¿ï¿ïi¿ïù¿ï£¿ïÒ¿ñ>¿ñr¿ñx¿ñ∏¿ñ˘¿ñ˙¿óO¿óñ¿óú¿óÃ¿ó“¿ò)¿òi¿òo¿òæ¿òÙ¿ò˙¿ôJ¿ôô¿ô”¿ö&¿öv¿ö°¿ö∂¿õ¿õ¿õd¿õê¿õñ¿õ„¿ú0¿úÅ¿úÀ¿ù¿ùh¿ùµ¿û¿ûV¿û¢¿û®¿ûÙ¿ü?¿üx¿ü~¿ü–¿†¿†j¿†Ω¿†√¿°¿°0¿°E¿°}¿°~¿°œ¿¢ ¿¢¿¢M¿¢û¿¢Ô¿£C¿£ñ¿£‚¿§.¿§R¿§X¿§•¿§Ù¿•E¿•w¿•}¿•…¿¶¿¶M¿¶S¿¶•¿¶Ò¿ß?¿ßå¿ß°¿ßß¿ßΩ¿ß√¿ß—¿®)¿®3¿®E¿®v¿®w¿®…¿®˙¿© ¿©K¿©£¿©Ô¿™¿™¿™p¿™Å¿™ñ¿™À¿™Ã¿´(¿´Y¿´_¿´≠¿´˛¿¨O¿¨£¿¨Ú¿≠B¿≠è¿≠∆¿≠Ã¿Æ¿Æc¿Æú¿Æ¢¿ÆÙ¿Ø@¿Øé¿Ø‚¿Ø˜¿∞6¿∞7¿∞à¿∞ø¿∞≈¿±
¿±Y¿±®¿±Ì¿±Û¿≤(¿≤.¿≤Å¿≤á¿≤Ÿ¿≥&¿≥t¿≥ø¿≥‘¿¥¿¥¿¥?¿¥E¿¥á¿¥“¿µ"¿µp¿µ†¿µ¶¿µÙ¿∂@¿∂N¿∂T¿∂ü¿∂Î¿∂Ò¿∑B¿∑å¿∑›¿∏.¿∏G¿∏\¿∏è¿∏ê¿∏”¿∏Ÿ¿π(¿πs¿πâ¿π¡¿π¬¿∫¿∫ ¿∫n¿∫t¿∫Ñ¿∫ä¿∫·¿ªT¿ªU¿ª¨¿ª≤¿ªˇ¿ºq¿ºr¿º¡¿ºÊ¿ºÏ¿Ω;¿Ωî¿Ωï¿Ωﬂ¿Ω˙¿æ ¿æL¿æÉ¿æÖ¿æÜ¿æ≥¿æ∑¿ø¿øU¿ø¢¿ø»¿øÃ¿¿¿¿X¿¿y¿¿}¿¿…¿¿Õ¿¿¸¿¡A¿¡R¿¡V¿¡j¿¡∏¿¬¿¬F¿¬J¿¬ñ¿¬¶¿¬π¿¬Á¿¬Ì¿√9¿√Ö¿√œ¿ƒ¿ƒ9¿ƒ¿ƒ–¿ƒ—¿≈¿≈)¿≈K¿≈L¿≈è¿≈ê¿≈ƒ¿≈Ò¿≈Ú¿∆=¿∆m¿∆s¿∆¬¿∆»¿«¿«,¿«R¿«S¿«ñ¿«ú¿«‰¿»-¿».¿»\¿»b¿»∞¿»Á¿»Ì¿…¿…¿…h¿…∑¿ ¿ W¿ j¿ á¿ à¿ ‘¿À¿À9¿À\¿Àl¿Àö¿Ã#¿Ã+¿ÃG¿Ã¿Ãﬁ¿Õ4¿ÕP¿Õ≥¿Õﬁ¿ÕÎ¿Œ ¿Œ^¿Œ™¿Œ¸¿œ	¿œ¿œ¿œ0¿œ:¿œZ¿œl¿œú¿–Q¿–[¿–Ä¿–∫¿—¿—$¿—~¿—À¿—⁄¿—Ë¿—Ú¿“¿“¿“>¿“L¿“R¿“ó¿“¬¿“›¿“„¿”¿”%¿”5¿”c¿”†¿”®¿”ª¿”≈¿”…¿” ¿”Í¿‘$¿‘%¿‘[¿‘a¿‘å¿‘∏¿‘◊¿‘¸¿‘˝¿’M¿’o¿’u¿’≈¿’Ê¿÷¿÷7¿÷G¿÷h¿÷{¿÷Ö¿÷è¿÷°¿÷±¿÷√¿÷Ê¿÷˚¿◊¿◊¿◊4¿◊8¿◊9¿◊Ö¿◊—¿ÿ¿ÿ¿ÿ[¿ÿõ¿ÿ°¿ÿÓ¿Ÿ:¿Ÿä¿ŸÃ¿Ÿˆ¿Ÿ¸¿⁄J¿⁄ô¿⁄ ¿⁄–¿€¿€¿€E¿€K¿€í¿€ﬂ¿‹-¿‹:¿‹g¿‹®¿‹ﬁ¿‹Ï¿‹Ú¿›¿›6¿›F¿›h¿›«¿›œ¿›¿ﬁ¿ﬁ ¿ﬁ*¿ﬁC¿ﬁv¿ﬁà¿ﬁ∫¿ﬁÔ¿ﬂ&¿ﬂS¿ﬂÜ¿ﬂØ¿ﬂº¿ﬂ∆¿ﬂ€¿ﬂÁ¿‡¿‡¿‡C¿‡L¿‡R¿‡\¿‡á¿‡•¿‡»¿‡Û¿·¿·F¿·t¿·ã¿·ô¿·«¿·’¿·Î¿·ˇ¿‚¿‚N¿‚è¿‚Ω¿‚÷¿‚Ê¿‚¿‚¯¿„"¿„N¿„|¿„ë¿„¥¿„Î¿‰¿‰%¿‰è¿‰À¿Â ¿Â@¿Â•¿Âˇ¿Ê¿Ê)¿Êê¿Ê˜¿Á\¿Á∞¿Á¡¿ÁÌ¿Ë ¿Ë9¿Ët¿ËÖ¿Ë±¿È(¿ÈA¿È|¿Èç¿Èù¿È©¿È¿¿ÈŒ¿Í2¿ÍS¿Íä¿Í†¿Í‰¿ÎE¿ÎS¿Îl¿Î|¿Î°¿ÎŒ¿Î˝¿Ï
¿Ï¿Ï"¿Ï?¿Ï\¿Ïx¿Ïπ¿Ï»¿Ï€¿Ì¿ÌU¿Ìï¿Ì∆¿Ó7¿ÓJ¿Ô&¿Ô5¿ÔB¿ÔL¿Ôm¿Ôï¿Ôü¿Ô≥¿¿4¿d¿í¿”¿Ò6¿Òè¿ÒÚ¿ÚU¿Úµ¿Û¿ÛL¿Ûd¿Ûp¿Ûz¿ÛÇ¿Ûî¿Ù¿ÙK¿Ùè¿Ù¸¿ıv¿ıÑ¿ıé¿ı£¿ıØ¿ıø¿ıı¿ˆ¿ˆA¿ˆI¿ˆg¿ˆì¿ˆæ¿ˆŸ¿ˆˇ¿˜¿˜%¿˜7¿˜W¿˜z¿˜û¿˜À¿˜’¿˜Í¿˜ˆ¿˜¸¿¯#¿¯'¿¯(¿¯à¿¯â¿¯Ú¿˘]¿˘Ω¿˘Û¿˙¿˙
¿˙¿˙:¿˙å¿˙ê¿˙ë¿˙ﬁ¿˙ﬂ¿˚7¿˚q¿˚¿˚÷¿˚◊¿¸&¿¸H¿¸ò¿¸µ¿¸∫¿˝¿˝L¿˝Z¿˝·¿˝‚¿˛/¿˛j¿˛°¿˛¢¿˛Ó¿˛˛¿ˇ9¿ˇL¿ˇV¿ˇZ¿ˇ[¿ˇó¿ˇß¿ˇÿ¿ ¿ b¿ ì¿ õ¿ Æ¿ ∏¿ ﬂ¿ „¿ ‰¿"¿2¿â¿∆¿¿¿.¿8¿f¿å¿í¿ñ¿ó¿Ë¿¯¿?¿y¿å¿ñ¿ö¿õ¿«¿◊¿!¿É¿ø¿,¿>¿H¿Ñ¿–¿¿1¿X¿l¿x¿ƒ¿¿Q¿Ä¿Õ¿¿b¿ó¿¡¿Á¿	¿	_¿	™¿	Ã¿
0¿
O¿
n¿
—¿
‰¿
ˆ¿¿K¿ñ¿∏¿¿k¿ã¿Ó¿¿¿!¿n¿º¿
¿0¿Z¿ï¿¬¿Ó¿ ¿¿ ¿J¿Ö¿≤¿ﬁ¿¿¿¿)¿<¿c¿o¿{¿Ö¿±¿ƒ¿Œ¿“¿”¿˝¿¿=¿ê¿‘¿¿D¿{¿±¿Ù¿L¿m¿ü¿©¿±¿ÿ¿¯¿?¿ì¿ ¿¿S¿£¿Ú¿C¿|¿Ú¿¸¿x¿´¿≥¿∆¿–¿‘¿’¿"¿7¿=¿q¿w¿»¿Â¿Î¿;¿h¿ï¿≠¿∆¿¯¿˛¿¿[¿m¿{¿©¿’¿-¿â¿«¿9¿É¿Î¿˚¿	¿,¿z¿ÿ¿¿W¿p¿õ¿≠¿Ω¿ˆ¿5¿W¿}¿ñ¿ ¿ ¿ %¿ ú¿ Ó¿!Z¿!ô¿!È¿"¿"5¿"G¿"W¿"î¿"€¿"˝¿#+¿#D¿#ª¿#Õ¿#ﬂ¿$¿$L¿$à¿$Õ¿%¿%l¿%¥¿%˙¿&L¿&ô¿&Ï¿'7¿'£¿'·¿(1¿(É¿(™¿(Ã¿)@¿)≥¿*¿*@¿*µ¿+;¿+≥¿,#¿,ñ¿,œ¿-¿-h¿-{¿-ç¿-õ¿-ß¿-ª¿.¿.¿.-¿.9¿.R¿.†¿.Î¿/¿/_¿/o¿/ä¿/∞¿/∏¿/æ¿/¬¿/√¿0¿0^¿0Ø¿0Œ¿0‘¿1 ¿1B¿1[¿1û¿1§¿1Æ¿1“¿1Ù¿2¿2¿28¿2^¿2f¿2l¿2p¿2r¿2s¿2¿¿2‘¿2ÿ¿2Ê¿38¿3b¿3´¿3«¿3Õ¿4¿4d¿4ñ¿4ó¿4£¿4≈¿5¿5¿5¿5¿53¿5c¿5d¿5á¿5§¿5•¿5ﬁ¿6¿6%¿6+¿6[¿6_¿6a¿6b¿6ì¿6π¿6Ë¿7¿7¿7¿7c¿7g¿7∑¿8¿8Y¿8§¿8Ù¿9¿9¿9]¿9©¿9≠¿9ÿ¿9‹¿:-¿:u¿:≈¿;¿;\¿;©¿;ˆ¿<¿<P¿<ü¿<Ó¿=?¿=ç¿=›¿>¿>h¿>∏¿?¿?U¿?¶¿?”¿@"¿@k¿@∂¿@¸¿AM¿Aö¿AÁ¿B5¿BÜ¿B™¿B¯¿CE¿CU¿Cü¿C–¿D¿Df¿Dl¿D≠¿D∆¿Dﬂ¿E¿EJ¿Es¿Eí¿E®¿E±¿E∑¿Eª¿Eº¿E–¿E¯¿E˘¿F!¿F'¿Fq¿Fº¿Fı¿F˚¿GJ¿Gò¿GÊ¿H5¿H;¿Hà¿H◊¿I%¿Im¿Is¿IΩ¿Iˇ¿J¿J¿Je¿J°¿J¢¿JÚ¿K¿K
¿K[¿K´¿K√¿K‡¿KÒ¿KÚ¿L?¿Lã¿Lù¿L≠¿LÁ¿M=¿ME¿MX¿Mb¿Mu¿My¿Må¿Mç¿Mﬁ¿MÙ¿N¿NG¿N~¿Nì¿N¶¿N¨¿N˚¿O¿O?¿O^¿O~¿OÑ¿O∑¿O≈¿O…¿O ¿P¿Pj¿Pø¿Q¿QL¿Qx¿Q•¿Q≥¿Q∑¿Q∏¿Q‚¿QË¿R2¿R~¿RŒ¿S¿Sj¿S†¿S¨¿SÕ¿S‡¿S·¿SÌ¿T¿T¿TC¿TI¿Tè¿Tﬂ¿T˚¿U¿U'¿Ug¿Uz¿UÑ¿Uö¿Uû¿Uü¿UÃ¿U“¿V¿Vh¿VÉ¿Vû¿VÆ¿VÏ¿Vˇ¿W	¿W¿W"¿W#¿W`¿Wl¿Wè¿W•¿W¶¿W€¿X&¿XG¿XM¿Xú¿XË¿Y¿Y¿Y]¿Y≠¿Y¬¿Y»¿Z¿Zj¿Zµ¿[¿[N¿[õ¿[Ï¿\'¿\<¿\B¿\R¿\X¿\t¿\°¿\’¿\Ê¿\Û¿]	¿]¿]C¿]]¿]e¿]i¿]j¿]ì¿]∞¿]Œ¿]Ì¿^¿^
¿^+¿^1¿^C¿^G¿^H¿^â¿^è¿^‡¿_0¿_^¿_d¿_±¿_˚¿`H¿`y¿`ú¿`π¿`◊¿a¿a(¿a[¿aÄ¿aè¿a≈¿aÕ¿a”¿a‰¿aË¿aÈ¿b:¿bz¿bÄ¿b–¿c!¿cd¿c∞¿c›¿c„¿d/¿dy¿dÜ¿d≤¿d≈¿dÈ¿e4¿eH¿eP¿ea¿ee¿ef¿er¿eÃ¿f¿f@¿fn¿få¿fü¿fß¿f®¿f⁄¿g0¿g<¿gm¿gu¿gv¿gñ¿gÔ¿g¸¿h$¿ha¿h•¿hØ¿hµ¿hÕ¿h—¿h“¿i)¿i~¿iõ¿i≠¿j%¿j@¿jG¿jK¿jL¿jX¿jÃ¿k¿k¿k¿k ¿kì¿k÷¿k⁄¿k€¿kÁ¿l¿lj¿lµ¿l»¿m¿m¿m¿mQ¿mg¿m®¿m©¿m¯¿n¿n¿nn¿nó¿nù¿nÈ¿o:¿oã¿o”¿p¿p¿pA¿pG¿pñ¿p¶¿p¨¿p˙¿qG¿qî¿q…¿qœ¿r¿r=¿rC¿rS¿rY¿rç¿r«¿s¿sf¿su¿s…¿s ¿t¿t¿tC¿tS¿tã¿t†¿t®¿tﬁ¿u!¿u;¿uå¿u‹¿v0¿v\¿vg¿vq¿v{¿vó¿võ¿vú¿v€¿v·¿w0¿w¿wÖ¿w’¿w€¿x-¿xÄ¿xÜ¿x’¿y¿y¿yf¿y∑¿z¿zS¿z|¿zÇ¿z”¿zÂ¿zÎ¿{:¿{à¿{ƒ¿{ ¿{˙¿| ¿|Q¿|¢¿|Û¿}y¿}¿}–¿~¿~a¿~´¿~˘¿>¿D¿ï¿¢¿¿¿Ä¿Ä*¿ÄE¿Äe¿Äm¿ÄÄ¿ÄÜ¿Äá¿Ä£¿Äº¿Ä·¿Å2¿ÅÇ¿Å’¿Ç-¿Çz¿ÇÉ¿Ç÷¿É3¿Éá¿Éù¿É¶¿Éı¿ÑA¿Ñí¿Ñ€¿ÑÌ¿Ö7¿ÖÉ¿Ö¬¿Ö◊¿Ö„¿Ü¿Üh¿Ü≥¿ÜÂ¿á
¿á8¿áB¿á\¿áØ¿á‘¿à¿à¿àk¿àå¿à√¿àŸ¿â¿ây¿âá¿â†¿â∞¿â’¿â˝¿ä,¿ä9¿äC¿äd¿äÖ¿ä≠¿ä∑¿ä‚¿äˆ¿ã-¿ãD¿ãR¿ãl¿ã{¿ãõ¿ã¬¿å¿å\¿åè¿å≈¿åÕ¿å⁄¿ç"¿çp¿ç°¿ç’¿ç€¿ç‹¿çÏ¿é¿é8¿é@¿éf¿éÑ¿é£¿é‚¿éÍ¿é˝¿è¿è¿è¿è!¿è"¿èa¿èg¿è∞¿ê¿ê,¿ê2¿êÅ¿êÕ¿ë¿ëi¿ë¥¿í¿í:¿í@¿íë¿í‚¿ì3¿ìÅ¿ì—¿î"¿îq¿îµ¿ï¿ï5¿ï;¿ït¿ï¡¿ñ¿ñ[¿ñ¢¿ñ¿ó ¿ó&¿ór¿óΩ¿ò	¿òX¿òö¿ò„¿ô6¿ôÅ¿ô“¿ö¿ö[¿ö©¿ö˙¿õ¿õ¿õØ¿õÔ¿õ¿ú)¿úÖ¿úã¿úå¿úÕ¿úË¿ù	¿ùJ¿ùP¿ùQ¿ùì¿ù‚¿û/¿ûs¿ût¿û£¿û√¿ûÂ¿ü*¿üO¿üí¿üŸ¿ü⁄¿†,¿†{¿†ï¿†„¿°/¿°|¿°ù¿°·¿¢	¿¢M¿¢Ä¿¢ª¿¢Á¿£3¿£s¿£π¿£Ã¿£Õ¿£È¿§¿§8¿§l¿§m¿§”¿§‘¿§¿§Ò¿•¿•q¿• ¿¶¿¶]¿¶¨¿¶ª¿¶√¿ß-¿ßq¿ßü¿ßø¿ß⁄¿ßı¿ß˚¿ß¸¿® ¿®}¿®Ÿ¿©¿©o¿©æ¿©Õ¿©’¿©Û¿™¿™¿™¿™P¿™ñ¿™ø¿™⁄¿´¿´9¿´î¿´Ó¿¨¿¨;¿¨z¿¨ç¿¨¥¿¨¿¿¨ ¿¨Á¿¨Ô¿¨ı¿¨ˆ¿≠¿≠N¿≠g¿≠¢¿≠ø¿≠Á¿Æ¿Æ/¿ÆQ¿Æë¿Æ¥¿Ø¿Ø-¿ØB¿Øà¿Øß¿Øµ¿Ø¡¿ØÀ¿Ø”¿∞#¿∞ç¿∞—¿±A¿±o¿±è¿±™¿±∞¿±±¿±÷¿≤¿≤@¿≤ó¿≤∆¿≤ˆ¿≤˜¿≥¿≥z¿≥∂¿≥Ú¿¥6¿¥q¿¥≠¿µ¿µ[¿µ∑¿µÂ¿∂¿∂ ¿∂;¿∂A¿∂B¿∂á¿∂¬¿∑¿∑T¿∑y¿∑É¿∑ã¿∑ë¿∑ﬂ¿∑˜¿∑˚¿∑¸¿∏F¿∏L¿∏ù¿∏È¿π7¿πl¿πr¿π¬¿πÊ¿πÏ¿∫;¿∫ã¿∫¬¿∫˜¿∫˝¿ªL¿ªÄ¿ªë¿ª¬¿ª¸¿º¿ºk¿ºÖ¿ºõ¿º∞¿º‡¿Ω¿Ω1¿Ω}¿Ωƒ¿Ω¯¿æ¿æ¿æ6¿æW¿æs¿æü¿æ•¿æø¿æ›¿æ·¿æ‚¿ø¿ø6¿øs¿øw¿øx¿ø∞¿ø∂¿ø˛¿¿M¿¿Ö¿¿ã¿¿”¿¿‰¿¡¿¡I¿¡É¿¡è¿¡¡¿¡‡¿¬¿¬¿¬h¿¬π¿√
¿√U¿√~¿√é¿√Â¿ƒ¿ƒ-¿ƒ7¿ƒP¿ƒT¿ƒU¿ƒò¿ƒû¿ƒÔ¿≈@¿≈o¿≈|¿≈∏¿≈Ò¿∆¿∆6¿∆Y¿∆ü¿∆ø¿∆⁄¿∆‚¿∆Ë¿∆˙¿∆˛¿∆ˇ¿«P¿«Ñ¿«ë¿«¢¿««¿» ¿»¿»_¿»t¿»x¿»y¿»†¿»œ¿»Ò¿…¿…5¿…`¿…j¿…p¿…t¿…u¿…ß¿…≠¿…Â¿ ¿ o¿ £¿ ©¿ ‘¿ Ú¿À¿À8¿À@¿ÀR¿ÀV¿ÀW¿À´¿À±¿ÀÈ¿Ã#¿Ãs¿Ã£¿Ã©¿Ã˘¿Õ&¿Õ@¿Õd¿Õç¿Õï¿Õ™¿ÕÆ¿ÕØ¿ÕÙ¿ŒI¿Œù¿ŒÎ¿œ<¿œâ¿œﬂ¿–¿–,¿–?¿–E¿–}¿–ê¿–ñ¿–¶¿–ÿ¿—P¿—X¿—k¿—u¿—¢¿—º¿—Œ¿—Ï¿“&¿“á¿“◊¿”*¿”ã¿‘)¿‘ò¿‘¶¿‘∞¿’
¿’¿’+¿’6¿’K¿’W¿’z¿’°¿’ß¿’Ã¿’˙¿÷¿÷¿÷¿÷^¿÷¿÷Ö¿÷Œ¿◊¿◊)¿◊/¿◊}¿◊Ã¿ÿ¿ÿn¿ÿt¿ÿƒ¿ÿ ¿Ÿ¿ŸH¿ŸU¿Ÿs¿Ÿ∞¿⁄¿⁄(¿⁄[¿⁄m¿⁄≠¿€¿€¿€$¿€0¿€Q¿€u¿€†¿€©¿€Ø¿€∞¿€∫¿€‡¿€˛¿‹H¿‹h¿‹î¿‹™¿‹÷¿‹Ô¿‹ˇ¿›¿›H¿›`¿›ƒ¿›÷¿›ˇ¿ﬁ¿ﬁ\¿ﬁj¿ﬁ¿ﬁã¿ﬁﬁ¿ﬂ
¿ﬂ*¿ﬂ4¿ﬂ<¿ﬂv¿ﬂà¿ﬂ∞¿ﬂ≈¿ﬂ—¿ﬂˆ¿‡:¿‡;¿‡R¿‡b¿‡Å¿‡ß¿‡Ø¿‡µ¿‡π¿‡∫¿‡Í¿·¿· ¿·;¿·`¿·~¿·Ü¿·“¿·Â¿·Ô¿·Û¿·Ù¿‚A¿‚k¿‚q¿‚¡¿„¿„7¿„=¿„}¿„É¿„–¿‰¿‰o¿‰æ¿Â¿Â¿Â:¿Â]¿Âw¿Âó¿ÂÏ¿Â¸¿Ê.¿Ê[¿Êû¿Ê®¿Ê∞¿Ê√¿ÊÕ¿Ê—¿Ê“¿Á"¿Ám¿Ár¿Á ¿Ë¿Ë¿Ëw¿Ëx¿Ë«¿È¿È	¿ÈV¿Èu¿È{¿È…¿Í¿Íf¿Íy¿Í¿ÍÕ¿ÍÓ¿Í˚¿Î¿Î0¿Î|¿Î∆¿Ï¿Ï_¿ÏÆ¿Ï‹¿ÏÏ¿Ì¿ÌQ¿ÌY¿Ìl¿Ìv¿Ìz¿Ì{¿Ìπ¿ÌÙ¿Ó
¿Ó¿ÓL¿Óè¿Óó¿Ó™¿Ó¥¿Ó÷¿Óˆ¿Ô¿ÔP¿ÔT¿ÔU¿Ôã¿ÔŒ¿ÔÊ¿'¿X¿\¿]¿£¿©¿˘¿ÒJ¿Òì¿Ò„¿ÒÈ¿Ú9¿Ú?¿Úé¿Ú∂¿Ú«¿Ú€¿Û¿Û1¿Ûß¿Û◊¿Ù*¿Ùk¿Ùá¿Ù∞¿Ù ¿ÙË¿Ù˙¿ı¿ı%¿ı@¿ı_¿ıe¿ıi¿ıj¿ı∞¿ı∂¿ˆ¿ˆW¿ˆ•¿ˆ¿˜A¿˜\¿˜b¿˜ö¿˜†¿˜¿˜ˆ¿¯C¿¯m¿¯~¿¯î¿¯Õ¿˘.¿˘l¿˘Æ¿˘ÿ¿˘‡¿˙1¿˙¿˙œ¿˚¿˚l¿˚à¿˚é¿˚≠¿˚ﬂ¿˚„¿˚‰¿¸:¿¸@¿¸s¿¸Ñ¿¸†¿¸€¿¸ﬂ¿¸‡¿˝'¿˝-¿˝|¿˝ ¿˛¿˛c¿˛i¿˛∏¿˛Œ¿˛‘¿ˇ!¿ˇo¿ˇ£¿ˇ©¿ˇ˘¿ˇˇ¿ L¿ s¿ Ñ¿ ó¿ “¿3¿N¿z¿»¿Œ¿¿9¿U¿É¿â¿”¿¿¿5¿f¿j¿k¿ª¿¿G¿M¿û¿Ô¿ı¿C¿ì¿ﬁ¿/¿}¿»¿¿c¿s¿y¿∆¿¿`¿±¿Ú¿¯¿	D¿	d¿	¢¿	£¿	Ø¿	‘¿	‰¿
¿
U¿
ù¿
π¿	¿E¿ç¿›¿¿¿q¿}¿Ö¿ò¿¢¿ª¿ø¿¿¿Ã¿ﬂ¿Ô¿(¿x¿ß¿ﬂ¿¿;¿å¿»¿¿¿o¿{¿É¿¶¿ﬁ¿¿3¿Ö¿’¿&¿s¿∑¿ƒ¿›¿Ú¿B¿î¿Ë¿:¿[¿h¿Å¿‘¿‡¿Ë¿˚¿¿@¿P¿r¿™¿Ó¿¿V¿´¿ˇ¿R¿à¿ï¿Ë¿Ù¿¸¿&¿^¿û¿≥¿ˆ¿F¿ì¿Ÿ¿%¿F¿S¿¶¿Û¿ˇ¿¿/¿g¿¿¿’¿*¿}¿Œ¿ˇ¿¿_¿¨¿∏¿¿¿Í¿¿<¿û¿≥¿¿X¿ß¿˘¿C¿P¿£¿ ¿ ¿ ¿ 9¿ q¿ ÿ¿ Ì¿!G¿!§¿!˛¿"U¿"{¿"à¿"€¿#;¿#P¿#™¿#Ú¿#ˇ¿$¿$¿$&¿$0¿$U¿$u¿${¿$å¿$ê¿$ë¿$“¿$˙¿%&¿%'¿%\¿%l¿%•¿%›¿&.¿&J¿&õ¿&≤¿&ø¿&‘¿'#¿'É¿'¬¿'œ¿'€¿'„¿'ˆ¿( ¿(¿(¿(¿(p¿(}¿(ø¿)¿)¿)¿)j¿)ù¿)ø¿)Ó¿*¿*!¿*"¿*.¿*Ö¿*æ¿+!¿+=¿+É¿+â¿+±¿+¬¿+∆¿+«¿+”¿,¿,\¿,`¿,a¿,m¿,»¿-¿-d¿-y¿-}¿-~¿-—¿-Ó¿-Ù¿.K¿.ü¿.±¿.∑¿.«¿/¿/'¿/I¿/}¿/Å¿/Ç¿/†¿/Ÿ¿0¿0¿0¿0 ¿0Y¿0í¿0≥¿0ˆ¿1¿1¿1B¿1F¿1G¿1S¿1ï¿1Œ¿1Ô¿2¿2N¿2]¿2e¿2à¿2é¿2⁄¿3¿3¿3	¿3¿3[¿3î¿3µ¿3‹¿3˚¿4;¿4`¿4h¿4ã¿4ë¿4ª¿4ø¿4¿¿4Ã¿5¿5E¿5f¿5Ö¿5–¿5˚¿6¿6&¿6,¿6=¿6A¿6B¿6N¿6ê¿6…¿6Í¿7¿7A¿7G¿7K¿7L¿7Ñ¿7ä¿7‡¿81¿8Ç¿8Ø¿8˛¿98¿9I¿9j¿9 ¿:¿:(¿:,¿:-¿:k¿:{¿:∞¿:Ë¿; ¿;F¿;i¿;v¿;Œ¿;„¿<6¿<N¿<s¿<ï¿<Æ¿=¿=¿=¿=#¿=6¿=@¿=Q¿=U¿=V¿=ù¿=£¿=ÿ¿>¿>.¿>H¿>{¿>¢¿>Ω¿>√¿>€¿>ˆ¿>¸¿?¿?#¿?$¿?s¿?y¿? ¿?¯¿@$¿@U¿@r¿@ç¿@§¿@ø¿@≈¿@◊¿@€¿@‹¿@Ë¿A!¿A\¿A`¿Aa¿Aï¿A°¿Aˇ¿B ¿B¿Ba¿Bå¿Bû¿B±¿B≈¿BÃ¿B–¿B—¿B›¿C"¿CM¿Cï¿CÕ¿D ¿D&¿D~¿E¿E3¿E}¿E¥¿Eﬂ¿F%¿F`¿Fù¿FÏ¿G]¿Gp¿G˘¿Gˇ¿H¿H¿H¿HB¿HÇ¿H¶¿H’¿H›¿HÚ¿Hˆ¿H˜¿I@¿IF¿Iâ¿I”¿I˙¿J¿J,¿J-¿J{¿J«¿J‰¿JÂ¿K ¿K@¿KA¿Kè¿K∞¿K∂¿K¸¿LC¿Lë¿L©¿L√¿L˝¿M4¿MB¿MH¿Mc¿Mú¿M¨¿Mœ¿N¿N2¿Ns¿Nä¿Nî¿NŸ¿O(¿OD¿O∞¿P¿P_¿Pµ¿Q
¿Q]¿Qå¿Qô¿Q˘¿R¿R;¿R⁄¿R‰¿S¿SD¿S|¿S⁄¿Sˆ¿TL¿T|¿Tâ¿TÈ¿Tı¿T˝¿U¿U¿U+¿U9¿U?¿UR¿Uu¿Uy¿Uz¿U»¿U⁄¿U‡¿V-¿V{¿Vµ¿Vª¿W¿WX¿Wå¿Wí¿W∞¿W∂¿WÃ¿W“¿X"¿Xo¿X≠¿X≥¿Y¿YP¿Y†¿Y„¿YÈ¿Z9¿Zä¿Z€¿[¿[¿[+¿[1¿[Ñ¿[¨¿[≤¿\¿\7¿\=¿\â¿\∏¿\æ¿]¿]¿]2¿]8¿]Ü¿]“¿^¿^d¿^©¿^Ø¿^˙¿_F¿_L¿_ñ¿_Ê¿`5¿`Ö¿`Ω¿`Í¿`¿a:¿aà¿aÆ¿a¥¿a˙¿bJ¿bô¿b¶¿b¨¿b¸¿cH¿cî¿cƒ¿c ¿c„¿cÈ¿d9¿dq¿dw¿d«¿e¿eg¿e≥¿e¯¿e˛¿fI¿fì¿fﬂ¿g/¿gz¿g ¿h¿h[¿h´¿h˙¿iF¿iL¿iñ¿iÊ¿j6¿jÖ¿j”¿k$¿k*¿kz¿kæ¿l¿l%¿lL¿lÜ¿l‘¿l‚¿lË¿l¯¿m6¿ma¿mÅ¿m©¿mÀ¿m‹¿n¿n¿n¿n+¿n5¿nn¿nî¿nª¿nÀ¿o¿o;¿oN¿oX¿ob¿oz¿oä¿oú¿o ¿p¿pG¿p\¿ph¿pn¿pÉ¿pá¿pà¿p±¿p∑¿p˛¿q¿q@¿qM¿q^¿qx¿qå¿qê¿qí¿qì¿qŸ¿q¸¿r¿r.¿rH¿rc¿ri¿rj¿rÅ¿rÇ¿ré¿r‹¿s¿sK¿sn¿s∑¿sΩ¿sﬁ¿sÔ¿sÛ¿sı¿sˆ¿tB¿tY¿t]¿t•¿t©¿t∑¿tª¿u¿u ¿uk¿u∫¿uœ¿v¿v¿vM¿vQ¿vù¿vÓ¿w:¿wu¿wy¿w•¿w©¿wΩ¿x¿xC¿xG¿xÖ¿xâ¿x÷¿xÊ¿xÍ¿x¯¿x¸¿yG¿yç¿y‹¿y¯¿z+¿ze¿zk¿z∏¿{¿{"¿{(¿{x¿{«¿{¿|¿|7¿|{¿|ö¿|õ¿|Ÿ¿|ﬂ¿}-¿}Y¿}ü¿}º¿}€¿}‹¿~¿~¿~]¿~§¿~≈¿~À¿¿i¿µ¿Ä¿ÄR¿ÄX¿Ä¶¿ÄÁ¿Å.¿Å}¿Åƒ¿Å ¿Ç¿ÇZ¿Ç`¿Çp¿Çv¿Çø¿É¿É[¿Én¿Éø¿É›¿Ñ¿Ñ ¿Ñj¿ÑÉ¿Ñì¿Ñ˙¿Ö¿Ö¿ÖG¿Ö≤¿Ö∂¿Ö∑¿ÖÁ¿ÖÒ¿Ü¿Ü*¿ÜÑ¿Ü‹¿á*¿á0¿áD¿áH¿áI¿ág¿á¿á§¿á•¿á±¿à¿à¿à¿àT¿à¿à†¿àÈ¿àˆ¿âU¿â[¿â_¿âa¿âb¿â≥¿â…¿âÕ¿ä	¿ä¿ä¿ä¿äh¿ä≠¿ä˙¿ã9¿ã:¿ãã¿ãï¿ãô¿ãÍ¿ãÓ¿ã¸¿å ¿åJ¿åè¿å‹¿ç-¿ç.¿ç¿çû¿ç¢¿çÁ¿é+¿é>¿éB¿éê¿é›¿è+¿èv¿èø¿ê¿ê¿ê¿ê!¿êk¿ê∞¿êÚ¿ëL¿ëM¿ë¿ëÉ¿ë«¿ëÀ¿í¿íD¿íH¿íV¿íZ¿í£¿íÎ¿ì7¿ìâ¿ìä¿ìª¿ìø¿î¿îM¿îQ¿îz¿î¨¿îˆ¿ï¿ï¿ï,¿ï-¿ïN¿ïZ¿ïä¿ïã¿ïó¿ïÃ¿ïÕ¿ïŸ¿ñ
¿ñ,¿ñH¿ñÅ¿ñî¿ñ∞¿ñ¥¿ñµ¿ñÃ¿ó¿óT¿óX¿óY¿ó®¿ó¯¿ò7¿ò=¿òã¿òº¿ò»¿òı¿ô¿ô"¿ô,¿ô>¿ô_¿ôt¿ôÄ¿ôó¿ô©¿ôÀ¿ô‡¿ôÏ¿ö¿ö3¿öS¿öv¿öê¿öæ¿öÀ¿ö‹¿õ¿õ1¿õl¿õy¿õÑ¿õç¿õù¿õÎ¿ú6¿úo¿úu¿ú¿ú∞¿úŒ¿úÁ¿ù
¿ù$¿ùR¿ù_¿ùp¿ù©¿ù≈¿û ¿û¿û¿û!¿ûP¿ûV¿ûZ¿û[¿û´¿û˜¿ü¿ü¿ü*¿ü+¿ü7¿üf¿üÄ¿üò¿üû¿ü¢¿ü£¿üØ¿ü”¿ü¿†¿†!¿†%¿†'¿†(¿†m¿†ü¿†È¿°¿°¿°(¿°e¿°f¿°r¿°ù¿°∫¿°€¿°ı¿°˘¿°˚¿°¸¿¢@¿¢q¿¢ª¿¢‰¿£¿£#¿£3¿£c¿£õ¿§¿§#¿§v¿§Ω¿•¿•¿•+¿•3¿•F¿•P¿•t¿•è¿•õ¿•∏¿¶¿¶V¿¶p¿¶w¿¶ì¿¶÷¿¶⁄¿¶€¿¶Á¿ß¿ß¿ßU¿ß[¿ß§¿ßÙ¿®¿®I¿®j¿®k¿®w¿®ç¿®•¿®Ω¿®¡¿®¬¿®Œ¿®Â¿©(¿©v¿©Ü¿©π¿©Ò¿™@¿™£¿™∏¿´¿´Z¿´g¿´s¿´{¿´é¿´ò¿´®¿´Ë¿´˚¿¨¿¨(¿¨8¿¨r¿¨Ö¿¨è¿¨®¿¨¨¿¨≠¿¨π¿¨”¿¨ı¿≠¿≠@¿≠F¿≠b¿≠f¿≠g¿≠s¿≠ù¿≠∫¿≠€¿Æ¿Æ>¿Æõ¿Æ´¿Æﬁ¿Ø¿Øk¿Ø’¿ØÍ¿∞G¿∞í¿∞ü¿∞´¿∞≥¿∞∆¿∞–¿∞Í¿∞Ó¿∞Ô¿∞˚¿±¿±%¿±;¿±å¿±⁄¿≤¿≤q¿≤á¿≤ã¿≤å¿≤ò¿≤Æ¿≤∆¿≤ﬁ¿≤‚¿≤„¿≤Ô¿≥¿≥¿≥,¿≥<¿≥¿≥î¿≥ú¿≥“¿¥&¿¥@¿¥•¿¥¿¥˚¿µ¿µ¿µ*¿µt¿µ®¿µª¿µø¿µ¿¿µÃ¿∂¿∂/¿∂j¿∂≠¿∂Â¿∑é¿∑™¿∏¿∏d¿∏∂¿π¿π,¿π9¿πN¿πæ¿∫0¿∫ä¿∫ó¿∫£¿∫´¿∫Ó¿ª&¿ª≥¿ªœ¿º)¿º|¿ºÀ¿Ω¿Ωb¿Ωo¿ΩÑ¿Ω⁄¿æ/¿æo¿æ»¿æ›¿æÍ¿æˇ¿ø9¿øî¿ø„¿¿6¿¿p¿¿}¿¿â¿¿ë¿¿§¿¿Æ¿¡¿¡¿¡¿¡Z¿¡™¿¡˘¿¬2¿¬8¿¬á¿¬¿¿√¿√A¿√h¿√i¿√u¿√ñ¿√π¿√‹¿√‡¿√·¿√Ì¿ƒB¿ƒm¿ƒ¿ƒí¿ƒ¶¿ƒº¿ƒ√¿ƒ«¿ƒ»¿ƒ‘¿≈¿≈D¿≈©¿≈≠¿≈Ø¿≈∞¿≈Ò¿∆(¿∆Q¿∆{¿∆|¿∆à¿∆ª¿∆º¿∆»¿∆Ô¿«(¿«I¿«f¿«á¿«ü¿«π¿«Ω¿«æ¿«˜¿«˝¿»M¿»ò¿»∑¿»ƒ¿»ˆ¿…¿…¿…¿…e¿…t¿…z¿…¡¿ ¿ ¿ L¿ N¿ O¿ ï¿ ⁄¿À$¿À[¿À\¿À´¿À∂¿Àº¿Ã¿Ã¿Ã;¿ÃK¿Ã[¿Ãk¿Ã~¿Ãà¿Ã†¿Ã¥¿Ã∫¿Õ¿Õ¿Õ¿ÕJ¿Õ{¿Õ•¿ÕŒ¿Õ›¿Œ¿Œ¿Œ ¿ŒK¿ŒO¿ŒP¿Œü¿ŒÂ¿Œ¸¿œ¿œO¿œ†¿œÀ¿œ—¿–%¿–o¿–ø¿–’¿–€¿—,¿—v¿—√¿—…¿“¿“e¿“k¿“ü¿“Ë¿“Ó¿”3¿”9¿”â¿”Ÿ¿‘)¿‘x¿‘»¿’¿’F¿’É¿’≥¿’˘¿÷¿÷¿÷¿÷+¿÷a¿÷ñ¿÷ö¿÷ú¿÷ù¿÷„¿◊¿◊[¿◊ç¿◊é¿◊◊¿◊ÿ¿◊‰¿ÿ¿ÿ;¿ÿÅ¿ÿ·¿Ÿ)¿Ÿ-¿Ÿ.¿Ÿ:¿ŸV¿Ÿf¿Ÿâ¿Ÿú¿Ÿ¶¿Ÿƒ¿Ÿ»¿Ÿ…¿⁄¿⁄%¿⁄+¿⁄k¿⁄¢¿⁄È¿€¿€%¿€h¿€°¿€∫¿€¿¿‹¿‹¿‹'¿‹-¿‹v¿‹≤¿‹¸¿›¿›W¿›£¿›Û¿ﬁ¿ﬁ&¿ﬁU¿ﬁx¿ﬁ|¿ﬁ}¿ﬁ«¿ﬁÕ¿ﬂ¿ﬂD¿ﬂë¿ﬂﬂ¿ﬂÂ¿‡(¿‡t¿‡z¿‡À¿‡—¿‡·¿‡Á¿·0¿·l¿·∏¿· ¿‚¿‚d¿‚¥¿‚⁄¿‚Á¿„"¿„F¿„J¿„K¿„°¿„ß¿„¿‰?¿‰X¿‰^¿‰´¿‰Ù¿Â¿Â¿ÂT¿Âì¿Âô¿Â©¿ÂØ¿Â˚¿Ê¿ÊW¿Ê†¿ÊÏ¿Á<¿Áb¿Áo¿ÁÆ¿Á‘¿Áÿ¿ÁŸ¿Ë¿Ë¿ËO¿ËU¿Ëì¿Ë⁄¿Ë‡¿Ë¿Ëˆ¿È?¿È{¿È«¿ÈŸ¿Í#¿Ís¿Íô¿Í¶¿Í˜¿Î¿Î"¿Î#¿Îì¿Îô¿ÎÁ¿Ï:¿Ï@¿Ïê¿Ï´¿Ï∏¿Ï…¿Ïı¿Ì¿Ì¿Ì¿Ìg¿Ì†¿Ì¶¿Ìﬁ¿Ì‰¿Ó'¿Ó3¿Ó_¿Ó§¿Óƒ¿Ó ¿ÓŒ¿Óœ¿Ô ¿ÔO¿ÔU¿Ô†¿ÔÔ¿9¿?¿O¿U¿£¿‰¿¿Ò"¿Òb¿Òö¿Ò¨¿Òﬁ¿Ú¿ÚD¿Úk¿Úu¿Úñ¿Ú¢¿ÚŒ¿Û¿Û2¿Û8¿Û<¿Û>¿Û?¿Ûá¿Ûã¿ÛŸ¿Ù!¿Ù@¿ÙD¿Ùj¿Ùn¿Ùø¿Ù√¿ÙÒ¿Ùı¿ı;¿ı?¿ıê¿ı©¿ı≠¿ı˚¿ˆ¿ˆ¿ˆV¿ˆo¿ˆs¿ˆƒ¿˜¿˜Z¿˜´¿˜‡¿˜‰¿¯/¿¯}¿¯ü¿¯£¿¯ƒ¿¯»¿˘¿˘W¿˘û¿˘Â¿˙¿˙¿˙$¿˙W¿˙w¿˙{¿˙π¿˙„¿˙Û¿˚8¿˚<¿˚P¿˚î¿˚⁄¿˚˚¿¸"¿¸1¿¸9¿¸=¿¸J¿¸P¿¸X¿¸\¿¸j¿¸n¿¸∑¿¸¿¸Ù¿˝@¿˝é¿˝’¿˛#¿˛[¿˛_¿˛≤¿ˇ¿ˇL¿ˇú¿ˇÍ¿ "¿ &¿ p¿ ª¿ ’¿ Ÿ¿ Û¿ ˜¿A¿é¿€¿˘¿˝¿L¿ú¿Ï¿<¿¿É¿”¿ ¿p¿¡¿	¿Y¿Ç¿Ü¿“¿ ¿q¿º¿¿¿¿	¿T¿§¿≈¿…¿¿	¿X¿©¿˜¿	)¿	k¿	ª¿	¯¿	¸¿
B¿
ê¿
Ÿ¿
›¿*¿w¿∑¿ª¿‚¿Ê¿5¿É¿“¿ ¿2¿6¿Q¿U¿†¿Â¿0¿z¿«¿¿#¿'¿x¿¬¿ı¿˘¿G¿ó¿Ê¿#¿H¿L¿w¿{¿∏¿¿T¿s¿w¿≈¿¿5¿9¿V¿Z¿•¿ˆ¿C¿á¿º¿¿>¿?¿u¿{¿ø¿À¿Ì¿*¿E¿I¿h¿i¿u¿®¿©¿ ¿÷¿¿¿<¿=¿y¿ö¿›¿+¿{¿±¿ˇ¿¿&¿f¿Å¿ã¿†¿¨¿–¿÷¿Ê¿,¿E¿M¿`¿j¿ó¿õ¿ú¿¬¿Ú¿¿8¿^¿d¿t¿Ø¿⁄¿B¿î¿√¿-¿;¿ä¿◊¿¿A¿Å¿ü¿Ì¿¿¿ò¿„¿Û¿ ¿ \¿ ´¿ «¿!/¿!I¿!Z¿!x¿!æ¿"¿"@¿"O¿"f¿"±¿#¿#P¿#É¿#í¿#©¿#Ò¿$@¿$Ö¿$Ø¿$æ¿$‹¿%(¿%h¿%w¿%Ö¿%Ø¿%À¿&¿&¿&8¿&E¿&O¿&W¿&j¿&t¿&x¿&y¿&√¿&‰¿'>¿'q¿'¶¿'›¿'ﬁ¿(-¿(F¿(ë¿(ﬂ¿)¿)M¿)à¿)’¿*#¿*k¿*π¿*“¿+¿+[¿+¢¿+‰¿,2¿,S¿,T¿,ó¿,Œ¿-¿-Ç¿-ø¿-À¿-‚¿-¯¿.¿.¿.A¿.G¿.W¿.á¿.ú¿.§¿.—¿.ˆ¿/¿/"¿/@¿/_¿/h¿/{¿/Ö¿/ò¿/ú¿/ù¿/©¿/⁄¿/¸¿0¿0+¿0>¿0H¿0ï¿0¡¿0—¿0Ò¿1¿1¿1¿1E¿1X¿1b¿1¿1†¿1◊¿1€¿1‹¿1Ë¿2 ¿2=¿2^¿2n¿2ï¿2®¿2≤¿2Ó¿2Ú¿2Û¿3¿3,¿3b¿3u¿3¿3É¿3Ñ¿3ê¿3„¿4¿4#¿4$¿4B¿4]¿4m¿4å¿4ü¿4©¿4Ù¿5¿5$¿57¿5A¿5x¿5|¿5}¿5â¿5ü¿5∑¿5√¿5·¿6.¿6Z¿6a¿6e¿6f¿6r¿6Ö¿6ë¿6µ¿7¿7¿7%¿7l¿7Å¿7ç¿7´¿7ı¿8!¿8(¿8\¿8z¿8î¿8ò¿8ô¿8„¿9¿9¿9 ¿9h¿9ã¿9≈¿:¿:L¿:¿:‹¿;&¿;5¿;C¿;M¿;q¿;¡¿<¿<a¿<®¿= ¿=¿=¿=%¿=@¿=v¿=|¿=Ä¿=Å¿=ç¿=≤¿=‘¿=Ù¿>¿>0¿>Ä¿>÷¿>⁄¿>€¿>Á¿?¿?F¿?[¿?¢¿?≤¿?‰¿@<¿@W¿@o¿@ÿ¿@Â¿A¿Ai¿Av¿Aã¿AÍ¿B;¿BH¿BR¿B_¿Bg¿Bz¿BÑ¿B÷¿C<¿Cî¿CÁ¿CÌ¿CÒ¿CÚ¿C˛¿D¿DL¿Dù¿D»¿DŒ¿D‡¿D‰¿DÂ¿E)¿E/¿E}¿EÀ¿F¿Fk¿F£¿F∏¿F≈¿G¿G¿Gf¿Gl¿G∂¿Gº¿H¿H¿H\¿H´¿Hˇ¿IQ¿I£¿Iˆ¿JG¿J¿Jå¿J˛¿Jˇ¿K1¿K7¿KÖ¿K≤¿Kø¿L¿L¿L"¿Lg¿Lí¿L¸¿M ¿M¿M¿MS¿Mc¿Mg¿Mµ¿M’¿M‚¿N¿N<¿N>¿Nô¿N¬¿N—¿Nˆ¿O/¿O3¿O\¿O^¿O_¿Oí¿Oñ¿O‹¿P¿P4¿PÄ¿P£¿P©¿P⁄¿P‡¿Q¿Qj¿Q∫¿Q˛¿R ¿Rq¿Rò¿R¨¿R∞¿R±¿RΩ¿RÓ¿S¿S:¿SW¿Sy¿S}¿S¿SÄ¿SÃ¿T¿TR¿Tí¿Tì¿Tü¿T√¿T÷¿TÙ¿T¯¿T˘¿U¿UH¿U[¿U_¿U`¿Ul¿U¡¿U‘¿Uÿ¿UŸ¿UÂ¿V(¿V;¿V?¿V@¿VL¿V~¿V©¿V≠¿VØ¿V∞¿W¿W¿W"¿W&¿Wl¿WΩ¿W˚¿X>¿Xà¿X÷¿X◊¿XÍ¿XÎ¿X˜¿Y&¿Y@¿YX¿Y^¿Yb¿Yc¿Yo¿Yì¿Y∞¿Y√¿Y·¿YÂ¿YÊ¿YÚ¿Z#¿ZE¿Zû¿Z¢¿Z£¿ZØ¿ZË¿[¿[&¿[¿[É¿[Ñ¿[ê¿[”¿\T¿\n¿\¢¿\¬¿\Ò¿\ı¿\ˆ¿]¿]W¿]j¿]n¿]o¿]{¿]æ¿^?¿^Y¿^Ç¿^°¿^–¿^‘¿^÷¿^◊¿_)¿_-¿_s¿_≈¿`¿`V¿`Z¿`h¿`l¿`∏¿`ﬂ¿a-¿aZ¿aú¿aÊ¿b1¿by¿bz¿bÜ¿bÏ¿c_¿cc¿cd¿cò¿cû¿cÎ¿d¿d¿d#¿dê¿dë¿d±¿e¿e%¿ec¿ed¿ep¿e¡¿f>¿fr¿f≥¿f‚¿fÊ¿fÁ¿fÛ¿gd¿g·¿h¿hM¿h|¿hÄ¿hÅ¿hç¿h–¿iM¿iw¿ió¿i∆¿i ¿iÀ¿i◊¿j¿j3¿jd¿j|¿jÑ¿jä¿jé¿jè¿jõ¿jø¿jÊ¿k¿k:¿kX¿k\¿k]¿kù¿k≠¿kÿ¿k˙¿l¿lZ¿l‘¿lÌ¿mD¿mÇ¿mì¿m˛¿n=¿nM¿nZ¿ne¿nm¿nÄ¿nä¿nõ¿nü¿n†¿n¨¿nÈ¿o/¿ok¿oÄ¿oÑ¿oÖ¿oë¿o¬¿o‰¿pR¿p–¿pÏ¿q¿q†¿qæ¿qﬁ¿q‰¿q˛¿r¿r¿r¿rG¿rd¿r“¿rÛ¿sO¿s»¿sË¿sÏ¿sÓ¿sÔ¿t5¿t9¿tÖ¿t“¿u¿uZ¿uò¿u∑¿u˙¿vD¿vk¿vl¿vx¿vâ¿v∂¿vÀ¿w	¿w¿w¿w¿w+¿wI¿w[¿w_¿w`¿wl¿wë¿w∞¿wÓ¿wÚ¿wÛ¿x-¿xD¿xW¿x]¿xì¿x∑¿x“¿xÍ¿ye¿yr¿yé¿yˆ¿z¿z¿zx¿z‘¿{¿{ ¿{5¿{ê¿{Ì¿|7¿|D¿|O¿|X¿|^¿|o¿|s¿|u¿|v¿|≈¿|…¿}¿}-¿}B¿}¿}ù¿}û¿}«¿}‡¿}·¿}Ì¿~&¿~(¿~)¿~O¿~j¿~~¿~ï¿~√¿~»¿¿¿/¿O¿e¿ï¿ö¿ø¿—¿”¿‘¿Ä¿Ä.¿Ä2¿Äz¿Ä¿¿Å¿ÅV¿Åo¿Ås¿ÅÅ¿ÅÖ¿Å‘¿Ç&¿Ç1¿ÇY¿Ç§¿Ç—¿Ç“¿É¿É9¿ÉJ¿ÉK¿ÉÑ¿Éó¿Éò¿É§¿É«¿ÉÛ¿Ñ¿Ñ¿Ñ-¿ÑM¿Ñn¿Ñr¿Ñs¿Ñ¿Ñ∞¿Ñ≤¿Ñ≥¿Ñ¯¿Ö¿ÖB¿Öq¿Ör¿Ö£¿Ö§¿Ö∞¿ÖÍ¿ÖÏ¿ÖÌ¿Ü¿Ü'¿Ü(¿Ü4¿Üm¿Üo    
Ä•  Ä∫  Ä’  Äˇ  Å)  Å@  ÅU  År  Åë  Å∂  Å◊Ç ÇnÇpÇôÇÚÇÙÉÉVÉXÉÅÉ¶É®É—ÉÌÉÔÑÑ\ 'äd*äj  äy ääâ       ä∆Ñ#åÅO/// A key that takes its identity from the object used as its value.
///
/// Used to tie the identity of a widget to the identity of an object used to
/// generate that widget.
///
/// See also:
///
///  * [Key], the base class for all keys.
///  * The discussion at [Widget.key] for more information about how widgets use
///    keys. å;g åååïH/// Creates a key that uses [identical] on [value] for its [operator==].åñ
åú   å¶Wå¯A/// The object whose identity is used by this key's [operator==]. çƒRçÿ   çƒç≈çÄæç  çç'  ççéÄÕé-   éé éÎéùñÌá‡/// A key that is unique across the entire app.
///
/// Global keys uniquely identify elements. Global keys provide access to other
/// objects that are associated with those elements, such as [BuildContext].
/// For [StatefulWidget]s, global keys also provide access to [State].
///
/// Widgets that have global keys reparent their subtrees when they are moved
/// from one location in the tree to another location in the tree. In order to
/// reparent its subtree, a widget must arrive at its new location in the tree
/// in the same animation frame in which it was removed from its old location in
/// the tree.
///
/// Reparenting an [Element] using a global key is relatively expensive, as
/// this operation will trigger a call to [State.deactivate] on the associated
/// [State] and all of its descendants; then force all widgets that depends
/// on an [InheritedWidget] to rebuild.
///
/// If you don't need any of the features listed above, consider using a [Key],
/// [ValueKey], [ObjectKey], or [UniqueKey] instead.
///
/// You cannot simultaneously include two widgets in the tree with the same
/// global key. Attempting to do so will assert at runtime.
///
/// ## Pitfalls
///
/// GlobalKeys should not be re-created on every build. They should usually be
/// long-lived objects owned by a [State] object, for example.
///
/// Creating a new GlobalKey on every build will throw away the state of the
/// subtree associated with the old key and create a new fresh subtree for the
/// new key. Besides harming performance, this can also cause unexpected
/// behavior in widgets in the subtree. For example, a [GestureDetector] in the
/// subtree will be unable to track ongoing gestures since it will be recreated
/// on each build.
///
/// Instead, a good practice is to let a State object own the GlobalKey, and
/// instantiate it outside the build method, such as in [State.initState].
///
/// See also:
///
///  * The discussion at [Widget.key] for more information about how widgets use
///    keys.ñ˜ñ˜ó(Å ó˙òÄø/// Creates a [LabeledGlobalKey], which is a [GlobalKey] with a label used for
/// debugging.
///
/// The label is purely for debugging and not used for comparing the identity
/// of the key.òò   òCÄ¡òÂòÊòÒÄä/// Creates a global key without a label.
///
/// Used by subclasses because the factory constructor shadows the implicit
/// constructor. òˆò˚ò¸ôô ô]ô    ôiÄ‰ö+Äß/// The build context in which the widget with this key builds.
///
/// The current context is null if there is no widget in the tree that matches
/// this global key.   öQÄ„õÄ•/// The widget in the tree that currently has this global key.
///
/// The current widget is null if there is no widget in the tree that matches
/// this global key.   õ8ÇNúkÅ!/// The [State] for the widget in the tree that currently has this global key.
///
/// The current state is null if (1) there is no widget in the tree that
/// matches this global key, (2) that widget is not a [StatefulWidget], or the
/// associated [State] object is not a subtype of `T`.    ñÃñÕùäÉ#ûDÄ°/// A global key with a debugging label.
///
/// The debug label is useful for documentation and for debugging. The label
/// does not affect the key's identity.ûUûUûèÄ¸ üRübf/// Creates a global key with a debugging label.
///
/// The label does not affect the key's identity.ücüi  üwü|ü}üàüâüèüù   ü≠Ä˛ü¿   ü≠üÆû,û-†ØáŒ§ÉV/// A global key that takes its identity from the object used as its value.
///
/// Used to tie the identity of a widget to the identity of an object used to
/// generate that widget.
///
/// Any [GlobalObjectKey] created for the same object will match.
///
/// If the object is not private, then it is possible that collisions will occur
/// where independent widgets will reuse the same object as their
/// [GlobalObjectKey] value in a different part of the tree, leading to a global
/// key conflict. To avoid this problem, create a private [GlobalObjectKey]
/// subclass, as in:
///
/// ```dart
/// class _MyKey extends GlobalObjectKey {
///   const _MyKey(super.value);
/// }
/// ```
///
/// Since the [runtimeType] of the key is part of its identity, this will
/// prevent clashes with other [GlobalObjectKey]s even if they have the same
/// value.§.§.§hÄä §¿§œO/// Creates a global key that uses [identical] on [value] for its [operator==].§–
§÷  §ﬁ§„§‰§Ô§§ˆV•GA/// The object whose identity is used by this key's [operator==]. ¶8¶0   ¶¶•QÄ«•k  •n•v  •Q•R¶XÇ#¶k   ¶X¶Y§§®îôØ™á/// Describes the configuration for an [Element].
///
/// Widgets are the central class hierarchy in the Flutter framework. A widget
/// is an immutable description of part of a user interface. Widgets can be
/// inflated into elements, which manage the underlying render tree.
///
/// Widgets themselves have no mutable state (all their fields must be final).
/// If you wish to associate mutable state with a widget, consider using a
/// [StatefulWidget], which creates a [State] object (via
/// [StatefulWidget.createState]) whenever it is inflated into an element and
/// incorporated into the tree.
///
/// A given widget can be included in the tree zero or more times. In particular
/// a given widget can be placed in the tree multiple times. Each time a widget
/// is placed in the tree, it is inflated into an [Element], which means a
/// widget that is incorporated into the tree multiple times will be inflated
/// multiple times.
///
/// The [key] property controls how one widget replaces another widget in the
/// tree. If the [runtimeType] and [key] properties of the two widgets are
/// [operator==], respectively, then the new widget replaces the old widget by
/// updating the underlying element (i.e., by calling [Element.update] with the
/// new widget). Otherwise, the old element is removed from the tree, the new
/// widget is inflated into an element, and the new element is inserted into the
/// tree.
///
/// See also:
///
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets.
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state. Ø–C Ø˛∞%/// Initializes [key] for subclasses.∞∞   ∞Ñ_¥sÑ$/// Controls how one widget replaces another widget in the tree.
///
/// If the [runtimeType] and [key] properties of the two widgets are
/// [operator==], respectively, then the new widget replaces the old widget by
/// updating the underlying element (i.e., by calling [Element.update] with the
/// new widget). Otherwise, the old element is removed from the tree, the new
/// widget is inflated into an element, and the new element is inserted into the
/// tree.
///
/// In addition, using a [GlobalKey] as the widget's [key] allows the element
/// to be moved around the tree (changing parent) without losing state. When a
/// new widget is found (its key and type do not match a previous widget in
/// the same location), but there was a widget with that same global key
/// elsewhere in the tree in the previous frame, then that widget's element is
/// moved to the new location.
///
/// Generally, a widget that is the only child of another widget does not need
/// an explicit key.
///
/// See also:
///
///  * The discussions at [Key] and [GlobalKey]. ∏(=∏J   ∏(∏)∏4∏5¥{Å»∂3Åâ/// Inflates this configuration to a concrete instance.
///
/// A given widget can be included in the tree zero or more times. In particular
/// a given widget can be placed in the tree multiple times. Each time a widget
/// is placed in the tree, it is inflated into an [Element], which means a
/// widget that is incorporated into the tree multiple times will be inflated
/// multiple times.  ∂∂∂ ∂!∂GÄƒ∂ç0/// A short, textual description of this widget.  ∂z∂{∑Ä∆∑   ∑4&∑Q  ∑∑∑ŸK∏  ∏∏  ∑Ÿ∑⁄∑Â∑Ê∏iÇ≈∫ñÇ/// Whether the `newWidget` can be used to update an [Element] that currently
/// has the `oldWidget` as its configuration.
///
/// An element that uses a given widget as its configuration can be updated to
/// use another widget as its configuration if, and only if, the two widgets
/// have [runtimeType] and [key] properties that are [operator==].
///
/// If the widgets have no key (their key is null), then they are considered a
/// match if they have the same type, even if their children are completely
/// different. ∫†∫®  ∫≤∫∫   º~Äòºâ  ºüºß   ØêØëΩûÑ¿ Rfï</// A widget that does not require mutable state.
///
/// A stateless widget is a widget that describes part of the user interface by
/// building a constellation of other widgets that describe the user interface
/// more concretely. The building process continues recursively until the
/// description of the user interface is fully concrete (e.g., consists
/// entirely of [RenderObjectWidget]s, which describe concrete [RenderObject]s).
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=wE7khGHVkYY}
///
/// Stateless widget are useful when the part of the user interface you are
/// describing does not depend on anything other than the configuration
/// information in the object itself and the [BuildContext] in which the widget
/// is inflated. For compositions that can change dynamically, e.g. due to
/// having an internal clock-driven state, or depending on some system state,
/// consider using [StatefulWidget].
///
/// ## Performance considerations
///
/// The [build] method of a stateless widget is typically only called in three
/// situations: the first time the widget is inserted in the tree, when the
/// widget's parent changes its configuration (see [Element.rebuild]), and when
/// an [InheritedWidget] it depends on changes.
///
/// If a widget's parent will regularly change the widget's configuration, or if
/// it depends on inherited widgets that frequently change, then it is important
/// to optimize the performance of the [build] method to maintain a fluid
/// rendering performance.
///
/// There are several techniques one can use to minimize the impact of
/// rebuilding a stateless widget:
///
///  * Minimize the number of nodes transitively created by the build method and
///    any widgets it creates. For example, instead of an elaborate arrangement
///    of [Row]s, [Column]s, [Padding]s, and [SizedBox]es to position a single
///    child in a particularly fancy manner, consider using just an [Align] or a
///    [CustomSingleChildLayout]. Instead of an intricate layering of multiple
///    [Container]s and with [Decoration]s to draw just the right graphical
///    effect, consider a single [CustomPaint] widget.
///
///  * Use `const` widgets where possible, and provide a `const` constructor for
///    the widget so that users of the widget can also do so.
///
///  * Consider refactoring the stateless widget into a stateful widget so that
///    it can use some of the techniques described at [StatefulWidget], such as
///    caching common parts of subtrees and using [GlobalKey]s when changing the
///    tree structure.
///
///  * If the widget is likely to get rebuilt frequently due to the use of
///    [InheritedWidget]s, consider refactoring the stateless widget into
///    multiple widgets, with the parts of the tree that change being pushed to
///    the leaves. For example instead of building a tree with four widgets, the
///    inner-most widget depending on the [Theme], consider factoring out the
///    part of the build function that builds the inner-most widget into its own
///    widget, so that only the inner-most widget needs to be rebuilt when the
///    theme changes.
/// {@template flutter.flutter.widgets.framework.prefer_const_over_helper}
///  * When trying to create a reusable piece of UI, prefer using a widget
///    rather than a helper method. For example, if there was a function used to
///    build a widget, a [State.setState] call would require Flutter to entirely
///    rebuild the returned wrapping widget. If a [Widget] was used instead,
///    Flutter would be able to efficiently re-render only those parts that
///    really need to be updated. Even better, if the created widget is `const`,
///    Flutter would short-circuit most of the rebuild work.
/// {@endtemplate}
///
/// This video gives more explanations on why `const` constructors are important
/// and why a [Widget] is better than a helper method.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=IOyq-eTRhvo}
///
/// {@tool snippet}
///
/// The following is a skeleton of a stateless widget subclass called `GreenFrog`.
///
/// Normally, widgets have more constructor arguments, each of which corresponds
/// to a `final` property.
///
/// ```dart
/// class GreenFrog extends StatelessWidget {
///   const GreenFrog({ super.key });
///
///   @override
///   Widget build(BuildContext context) {
///     return Container(color: const Color(0xFF2DBD3A));
///   }
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// This next example shows the more generic widget `Frog` which can be given
/// a color and a child:
///
/// ```dart
/// class Frog extends StatelessWidget {
///   const Frog({
///     super.key,
///     this.color = const Color(0xFF2DBD3A),
///     this.child,
///   });
///
///   final Color color;
///   final Widget? child;
///
///   @override
///   Widget build(BuildContext context) {
///     return ColoredBox(color: color, child: child);
///   }
/// }
/// ```
/// {@end-tool}
///
/// By convention, widget constructors only use named arguments. Also by
/// convention, the first argument is [key], and the last argument is `child`,
/// `children`, or the equivalent.
///
/// See also:
///
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets. ¿ RâM ¿ R∑¿ R∆%/// Initializes [key] for subclasses.¿ R…	¿ R–     ¿ R⁄Ä€¿ SãÄç/// Creates a [StatelessElement] to manage this widget's location in the tree.
///
/// It is uncommon for subclasses to override this method.  ¿ Sn¿ So¿ Sπá„¿ [Äáf/// Describes the part of the user interface represented by this widget.
///
/// The framework calls this method when this widget is inserted into the tree
/// in a given [BuildContext] and when the dependencies of this widget change
/// (e.g., an [InheritedWidget] referenced by this widget changes). This
/// method can potentially be called in every frame and should not have any side
/// effects beyond building a widget.
///
/// The framework replaces the subtree below this widget with the widget
/// returned by this method, either by updating the existing subtree or by
/// removing the subtree and inflating a new subtree, depending on whether the
/// widget returned by this method can update the root of the existing
/// subtree, as determined by calling [Widget.canUpdate].
///
/// Typically implementations return a newly created constellation of widgets
/// that are configured with information from this widget's constructor and
/// from the given [BuildContext].
///
/// The given [BuildContext] contains information about the location in the
/// tree at which this widget is being built. For example, the context
/// provides the set of inherited widgets for this location in the tree. A
/// given widget might be built with multiple different [BuildContext]
/// arguments over time if the widget is moved around the tree or if the
/// widget is inserted into the tree in multiple places at once.
///
/// The implementation of this method must only depend on:
///
/// * the fields of the widget, which themselves must not change over time,
///   and
/// * any ambient state obtained from the `context` using
///   [BuildContext.dependOnInheritedWidgetOfExactType].
///
/// If a widget's [build] method is to depend on anything else, use a
/// [StatefulWidget] instead.
///
/// See also:
///
///  * [StatelessWidget], which contains the discussion on performance considerations. ¿ [Ü¿ [î  ¿ [l¿ [m ¿ [†®o¿ a£±/// A widget that has mutable state.
///
/// State is information that (1) can be read synchronously when the widget is
/// built and (2) might change during the lifetime of the widget. It is the
/// responsibility of the widget implementer to ensure that the [State] is
/// promptly notified when such state changes, using [State.setState].
///
/// A stateful widget is a widget that describes part of the user interface by
/// building a constellation of other widgets that describe the user interface
/// more concretely. The building process continues recursively until the
/// description of the user interface is fully concrete (e.g., consists
/// entirely of [RenderObjectWidget]s, which describe concrete [RenderObject]s).
///
/// Stateful widgets are useful when the part of the user interface you are
/// describing can change dynamically, e.g. due to having an internal
/// clock-driven state, or depending on some system state. For compositions that
/// depend only on the configuration information in the object itself and the
/// [BuildContext] in which the widget is inflated, consider using
/// [StatelessWidget].
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=AqCMFXEmf3w}
///
/// [StatefulWidget] instances themselves are immutable and store their mutable
/// state either in separate [State] objects that are created by the
/// [createState] method, or in objects to which that [State] subscribes, for
/// example [Stream] or [ChangeNotifier] objects, to which references are stored
/// in final fields on the [StatefulWidget] itself.
///
/// The framework calls [createState] whenever it inflates a
/// [StatefulWidget], which means that multiple [State] objects might be
/// associated with the same [StatefulWidget] if that widget has been inserted
/// into the tree in multiple places. Similarly, if a [StatefulWidget] is
/// removed from the tree and later inserted in to the tree again, the framework
/// will call [createState] again to create a fresh [State] object, simplifying
/// the lifecycle of [State] objects.
///
/// A [StatefulWidget] keeps the same [State] object when moving from one
/// location in the tree to another if its creator used a [GlobalKey] for its
/// [key]. Because a widget with a [GlobalKey] can be used in at most one
/// location in the tree, a widget that uses a [GlobalKey] has at most one
/// associated element. The framework takes advantage of this property when
/// moving a widget with a global key from one location in the tree to another
/// by grafting the (unique) subtree associated with that widget from the old
/// location to the new location (instead of recreating the subtree at the new
/// location). The [State] objects associated with [StatefulWidget] are grafted
/// along with the rest of the subtree, which means the [State] object is reused
/// (instead of being recreated) in the new location. However, in order to be
/// eligible for grafting, the widget must be inserted into the new location in
/// the same animation frame in which it was removed from the old location.
///
/// ## Performance considerations
///
/// There are two primary categories of [StatefulWidget]s.
///
/// The first is one which allocates resources in [State.initState] and disposes
/// of them in [State.dispose], but which does not depend on [InheritedWidget]s
/// or call [State.setState]. Such widgets are commonly used at the root of an
/// application or page, and communicate with subwidgets via [ChangeNotifier]s,
/// [Stream]s, or other such objects. Stateful widgets following such a pattern
/// are relatively cheap (in terms of CPU and GPU cycles), because they are
/// built once then never update. They can, therefore, have somewhat complicated
/// and deep build methods.
///
/// The second category is widgets that use [State.setState] or depend on
/// [InheritedWidget]s. These will typically rebuild many times during the
/// application's lifetime, and it is therefore important to minimize the impact
/// of rebuilding such a widget. (They may also use [State.initState] or
/// [State.didChangeDependencies] and allocate resources, but the important part
/// is that they rebuild.)
///
/// There are several techniques one can use to minimize the impact of
/// rebuilding a stateful widget:
///
///  * Push the state to the leaves. For example, if your page has a ticking
///    clock, rather than putting the state at the top of the page and
///    rebuilding the entire page each time the clock ticks, create a dedicated
///    clock widget that only updates itself.
///
///  * Minimize the number of nodes transitively created by the build method and
///    any widgets it creates. Ideally, a stateful widget would only create a
///    single widget, and that widget would be a [RenderObjectWidget].
///    (Obviously this isn't always practical, but the closer a widget gets to
///    this ideal, the more efficient it will be.)
///
///  * If a subtree does not change, cache the widget that represents that
///    subtree and re-use it each time it can be used. To do this, assign
///    a widget to a `final` state variable and re-use it in the build method. It
///    is massively more efficient for a widget to be re-used than for a new (but
///    identically-configured) widget to be created. Another caching strategy
///    consists in extracting the mutable part of the widget into a [StatefulWidget]
///    which accepts a child parameter.
///
///  * Use `const` widgets where possible. (This is equivalent to caching a
///    widget and re-using it.)
///
///  * Avoid changing the depth of any created subtrees or changing the type of
///    any widgets in the subtree. For example, rather than returning either the
///    child or the child wrapped in an [IgnorePointer], always wrap the child
///    widget in an [IgnorePointer] and control the [IgnorePointer.ignoring]
///    property. This is because changing the depth of the subtree requires
///    rebuilding, laying out, and painting the entire subtree, whereas just
///    changing the property will require the least possible change to the
///    render tree (in the case of [IgnorePointer], for example, no layout or
///    repaint is necessary at all).
///
///  * If the depth must be changed for some reason, consider wrapping the
///    common parts of the subtrees in widgets that have a [GlobalKey] that
///    remains consistent for the life of the stateful widget. (The
///    [KeyedSubtree] widget may be useful for this purpose if no other widget
///    can conveniently be assigned the key.)
///
/// {@macro flutter.flutter.widgets.framework.prefer_const_over_helper}
///
/// This video gives more explanations on why `const` constructors are important
/// and why a [Widget] is better than a helper method.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=IOyq-eTRhvo}
///
/// For more details on the mechanics of rebuilding a widget, see
/// the discussion at [Element.rebuild].
///
/// {@tool snippet}
///
/// This is a skeleton of a stateful widget subclass called `YellowBird`.
///
/// In this example, the [State] has no actual state. State is normally
/// represented as private member fields. Also, normally widgets have more
/// constructor arguments, each of which corresponds to a `final` property.
///
/// ```dart
/// class YellowBird extends StatefulWidget {
///   const YellowBird({ super.key });
///
///   @override
///   State<YellowBird> createState() => _YellowBirdState();
/// }
///
/// class _YellowBirdState extends State<YellowBird> {
///   @override
///   Widget build(BuildContext context) {
///     return Container(color: const Color(0xFFFFE306));
///   }
/// }
/// ```
/// {@end-tool}
/// {@tool snippet}
///
/// This example shows the more generic widget `Bird` which can be given a
/// color and a child, and which has some internal state with a method that
/// can be called to mutate it:
///
/// ```dart
/// class Bird extends StatefulWidget {
///   const Bird({
///     super.key,
///     this.color = const Color(0xFFFFE306),
///     this.child,
///   });
///
///   final Color color;
///   final Widget? child;
///
///   @override
///   State<Bird> createState() => _BirdState();
/// }
///
/// class _BirdState extends State<Bird> {
///   double _size = 1.0;
///
///   void grow() {
///     setState(() { _size += 0.1; });
///   }
///
///   @override
///   Widget build(BuildContext context) {
///     return Container(
///       color: widget.color,
///       transform: Matrix4.diagonal3Values(_size, _size, 1.0),
///       child: widget.child,
///     );
///   }
/// }
/// ```
/// {@end-tool}
///
/// By convention, widget constructors only use named arguments. Also by
/// convention, the first argument is [key], and the last argument is `child`,
/// `children`, or the equivalent.
///
/// See also:
///
///  * [State], where the logic behind a [StatefulWidget] is hosted.
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets. ¿ ÉL ¿ ±¿ ø%/// Initializes [key] for subclasses.¿ ¬	¿ …     ¿ ”Äÿ¿ ÄÇÄå/// Creates a [StatefulElement] to manage this widget's location in the tree.
///
/// It is uncommon for subclasses to override this method.  ¿ Äf¿ Äg¿ ÄØÉ^¿ ÉˇÉ/// Creates the mutable state for this widget at a given location in the tree.
///
/// Subclasses should override this method to return a newly created
/// instance of their associated [State] subclass:
///
/// ```dart
/// @override
/// State<SomeWidget> createState() => _SomeWidgetState();
/// ```
///
/// The framework can call this method multiple times over the lifetime of
/// a [StatefulWidget]. For example, if the widget is inserted into the tree
/// in multiple locations, the framework will create a separate [State] object
/// for each location. Similarly, if the widget is removed from the tree and
/// later inserted into the tree again, the framework will call [createState]
/// again to create a fresh [State] object, simplifying the lifecycle of
/// [State] objects.  ¿ É·¿ É‚¿ ÉÓ¿ ÉÔ ¿ á¿ |Æ¿ ûñÁ/// The logic and internal state for a [StatefulWidget].
///
/// State is information that (1) can be read synchronously when the widget is
/// built and (2) might change during the lifetime of the widget. It is the
/// responsibility of the widget implementer to ensure that the [State] is
/// promptly notified when such state changes, using [State.setState].
///
/// [State] objects are created by the framework by calling the
/// [StatefulWidget.createState] method when inflating a [StatefulWidget] to
/// insert it into the tree. Because a given [StatefulWidget] instance can be
/// inflated multiple times (e.g., the widget is incorporated into the tree in
/// multiple places at once), there might be more than one [State] object
/// associated with a given [StatefulWidget] instance. Similarly, if a
/// [StatefulWidget] is removed from the tree and later inserted in to the tree
/// again, the framework will call [StatefulWidget.createState] again to create
/// a fresh [State] object, simplifying the lifecycle of [State] objects.
///
/// [State] objects have the following lifecycle:
///
///  * The framework creates a [State] object by calling
///    [StatefulWidget.createState].
///  * The newly created [State] object is associated with a [BuildContext].
///    This association is permanent: the [State] object will never change its
///    [BuildContext]. However, the [BuildContext] itself can be moved around
///    the tree along with its subtree. At this point, the [State] object is
///    considered [mounted].
///  * The framework calls [initState]. Subclasses of [State] should override
///    [initState] to perform one-time initialization that depends on the
///    [BuildContext] or the widget, which are available as the [context] and
///    [widget] properties, respectively, when the [initState] method is
///    called.
///  * The framework calls [didChangeDependencies]. Subclasses of [State] should
///    override [didChangeDependencies] to perform initialization involving
///    [InheritedWidget]s. If [BuildContext.dependOnInheritedWidgetOfExactType] is
///    called, the [didChangeDependencies] method will be called again if the
///    inherited widgets subsequently change or if the widget moves in the tree.
///  * At this point, the [State] object is fully initialized and the framework
///    might call its [build] method any number of times to obtain a
///    description of the user interface for this subtree. [State] objects can
///    spontaneously request to rebuild their subtree by calling their
///    [setState] method, which indicates that some of their internal state
///    has changed in a way that might impact the user interface in this
///    subtree.
///  * During this time, a parent widget might rebuild and request that this
///    location in the tree update to display a new widget with the same
///    [runtimeType] and [Widget.key]. When this happens, the framework will
///    update the [widget] property to refer to the new widget and then call the
///    [didUpdateWidget] method with the previous widget as an argument. [State]
///    objects should override [didUpdateWidget] to respond to changes in their
///    associated widget (e.g., to start implicit animations). The framework
///    always calls [build] after calling [didUpdateWidget], which means any
///    calls to [setState] in [didUpdateWidget] are redundant. (See also the
///    discussion at [Element.rebuild].)
///  * During development, if a hot reload occurs (whether initiated from the
///    command line `flutter` tool by pressing `r`, or from an IDE), the
///    [reassemble] method is called. This provides an opportunity to
///    reinitialize any data that was prepared in the [initState] method.
///  * If the subtree containing the [State] object is removed from the tree
///    (e.g., because the parent built a widget with a different [runtimeType]
///    or [Widget.key]), the framework calls the [deactivate] method. Subclasses
///    should override this method to clean up any links between this object
///    and other elements in the tree (e.g. if you have provided an ancestor
///    with a pointer to a descendant's [RenderObject]).
///  * At this point, the framework might reinsert this subtree into another
///    part of the tree. If that happens, the framework will ensure that it
///    calls [build] to give the [State] object a chance to adapt to its new
///    location in the tree. If the framework does reinsert this subtree, it
///    will do so before the end of the animation frame in which the subtree was
///    removed from the tree. For this reason, [State] objects can defer
///    releasing most resources until the framework calls their [dispose]
///    method.
///  * If the framework does not reinsert this subtree by the end of the current
///    animation frame, the framework will call [dispose], which indicates that
///    this [State] object will never build again. Subclasses should override
///    this method to release any resources retained by this object (e.g.,
///    stop any active animations).
///  * After the framework calls [dispose], the [State] object is considered
///    unmounted and the [mounted] property is false. It is an error to call
///    [setState] at this point. This stage of the lifecycle is terminal: there
///    is no way to remount a [State] object that has been disposed.
///
/// See also:
///
///  * [StatefulWidget], where the current configuration of a [State] is hosted,
///    and whose documentation has sample code for [State].
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets.
///  * [Widget], for an overview of widgets in general.¿ û$¿ û$ ¿ †{
¿ †~  ¿ †äÅ ¿ °|ÄŸ/// The current stage in the lifecycle for this state object.
///
/// This field is used by the framework when asserts are enabled to verify
/// that [State] objects move through their lifecycle in an orderly fashion.¿ °ì¿ °¢¿ °£¿ ¶¿ ¶(  ¿ ûVÇ"¿ †eÅˆ/// The current configuration.
///
/// A [State] object's configuration is the corresponding [StatefulWidget]
/// instance. This property is initialized by the framework before calling
/// [initState]. If the parent updates this location in the tree to a new
/// widget with the same [runtimeType] and [Widget.key] as the current
/// configuration, the framework will update this property to refer to the new
/// widget and then call [didUpdateWidget], passing the old configuration as
/// an argument.   ¿ ¢aÉ≥¿ §uÅÓ/// The location in the tree where this widget builds.
///
/// The framework associates [State] objects with a [BuildContext] after
/// creating them with [StatefulWidget.createState] and before calling
/// [initState]. The association is permanent: the [State] object will never
/// change its [BuildContext]. However, the [BuildContext] itself can be moved
/// around the tree.
///
/// After calling [dispose], the framework severs the [State] object's
/// connection with the [BuildContext].   ¿ ¶5Å˘¿ ®Å¡/// Whether this [State] object is currently in a tree.
///
/// After creating a [State] object and before calling [initState], the
/// framework "mounts" the [State] object by associating it with a
/// [BuildContext]. The [State] object remains mounted until the framework
/// calls [dispose], after which time the framework will never ask the [State]
/// object to [build] again.
///
/// It is an error to call [setState] unless [mounted] is true.   ¿ °ØÄÆ¿ ¢+r/// Verifies that the [State] that was created is one that expects to be
/// created for that particular [Widget]. ¿ ¢?¿ ¢G   ¿ ®2á¿ Æ$Öê/// Called when this object is inserted into the tree.
///
/// The framework will call this method exactly once for each [State] object
/// it creates.
///
/// Override this method to perform initialization that depends on the
/// location at which this object was inserted into the tree (i.e., [context])
/// or on the widget used to configure this object (i.e., [widget]).
///
/// {@template flutter.widgets.State.initState}
/// If a [State]'s [build] method depends on an object that can itself
/// change state, for example a [ChangeNotifier] or [Stream], or some
/// other object to which one can subscribe to receive notifications, then
/// be sure to subscribe and unsubscribe properly in [initState],
/// [didUpdateWidget], and [dispose]:
///
///  * In [initState], subscribe to the object.
///  * In [didUpdateWidget] unsubscribe from the old object and subscribe
///    to the new one if the updated widget configuration requires
///    replacing the object.
///  * In [dispose], unsubscribe from the object.
///
/// {@endtemplate}
///
/// You should not use [BuildContext.dependOnInheritedWidgetOfExactType] from this
/// method. However, [didChangeDependencies] will be called immediately
/// following this method, and [BuildContext.dependOnInheritedWidgetOfExactType] can
/// be used there.
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.initState()`.  ¿ Æ¿ Æ¿ Æ¿ Æ¿ ØLÑ'¿ ≥IÉØ/// Called whenever the widget configuration changes.
///
/// If the parent widget rebuilds and requests that this location in the tree
/// update to display a new widget with the same [runtimeType] and
/// [Widget.key], the framework will update the [widget] property of this
/// [State] object to refer to the new widget and then call this method
/// with the previous widget as an argument.
///
/// Override this method to respond when the [widget] changes (e.g., to start
/// implicit animations).
///
/// The framework always calls [build] after calling [didUpdateWidget], which
/// means any calls to [setState] in [didUpdateWidget] are redundant.
///
/// {@macro flutter.widgets.State.initState}
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.didUpdateWidget(oldWidget)`.
///
/// _See the discussion at [Element.rebuild] for more information on when this
/// method is called._ ¿ ≥Y¿ ≥f  ¿ ≥&¿ ≥'¿ ≥7¿ ≥8¿ ≥wÅË¿ µOÅû/// {@macro flutter.widgets.Element.reassemble}
///
/// In addition to this method being invoked, it is guaranteed that the
/// [build] method will be invoked when a reassemble is signaled. Most
/// widgets therefore do not need to do anything in the [reassemble] method.
///
/// See also:
///
///  * [Element.reassemble]
///  * [BindingBase.reassembleApplication]
///  * [Image], which uses this to reload images.  ¿ µ,¿ µ-¿ µ9¿ µ:¿ µcûï¿ »í¶/// Notify the framework that the internal state of this object has changed.
///
/// Whenever you change the internal state of a [State] object, make the
/// change in a function that you pass to [setState]:
///
/// ```dart
/// setState(() { _myState = newValue; });
/// ```
///
/// The provided callback is immediately called synchronously. It must not
/// return a future (the callback cannot be `async`), since then it would be
/// unclear when the state was actually being set.
///
/// Calling [setState] notifies the framework that the internal state of this
/// object has changed in a way that might impact the user interface in this
/// subtree, which causes the framework to schedule a [build] for this [State]
/// object.
///
/// If you just change the state directly without calling [setState], the
/// framework might not schedule a [build] and the user interface for this
/// subtree might not be updated to reflect the new state.
///
/// Generally it is recommended that the [setState] method only be used to
/// wrap the actual changes to the state, not any computation that might be
/// associated with the change. For example, here a value used by the [build]
/// function is incremented, and then the change is written to disk, but only
/// the increment is wrapped in the [setState]:
///
/// ```dart
/// Future<void> _incrementCounter() async {
///   setState(() {
///     _counter++;
///   });
///   Directory directory = await getApplicationDocumentsDirectory(); // from path_provider package
///   final String dirName = directory.path;
///   await File('$dirName/counter.txt').writeAsString('$_counter');
/// }
/// ```
///
/// Sometimes, the changed state is in some other object not owned by the
/// widget [State], but the widget nonetheless needs to be updated to react to
/// the new state. This is especially common with [Listenable]s, such as
/// [AnimationController]s.
///
/// In such cases, it is good practice to leave a comment in the callback
/// passed to [setState] that explains what state changed:
///
/// ```dart
/// void _update() {
///   setState(() { /* The animation changed. */ });
/// }
/// //...
/// animation.addListener(_update);
/// ```
///
/// It is an error to call this method after the framework calls [dispose].
/// You can determine whether it is legal to call this method by checking
/// whether the [mounted] property is true. That said, it is better practice
/// to cancel whatever work might trigger the [setState] rather than merely
/// checking for [mounted] before calling [setState], as otherwise CPU cycles
/// will be wasted.
///
/// ## Design discussion
///
/// The original version of this API was a method called `markNeedsBuild`, for
/// consistency with [RenderObject.markNeedsLayout],
/// [RenderObject.markNeedsPaint], _et al_.
///
/// However, early user testing of the Flutter framework revealed that people
/// would call `markNeedsBuild()` much more often than necessary. Essentially,
/// people used it like a good luck charm, any time they weren't sure if they
/// needed to call it, they would call it, just in case.
///
/// Naturally, this led to performance issues in applications.
///
/// When the API was changed to take a callback instead, this practice was
/// greatly reduced. One hypothesis is that prompting developers to actually
/// update their state in a callback caused developers to think more carefully
/// about what exactly was being updated, and thus improved their understanding
/// of the appropriate times to call the method.
///
/// In practice, the [setState] method's implementation is trivial: it calls
/// the provided callback synchronously, then calls [Element.markNeedsBuild].
///
/// ## Performance considerations
///
/// There is minimal _direct_ overhead to calling this function, and as it is
/// expected to be called at most once per frame, the overhead is irrelevant
/// anyway. Nonetheless, it is best to avoid calling this function redundantly
/// (e.g. in a tight loop), as it does involve creating a closure and calling
/// it. The method is idempotent, there is no benefit to calling it more than
/// once per [State] per frame.
///
/// The _indirect_ cost of causing this function, however, is high: it causes
/// the widget to rebuild, possibly triggering rebuilds for the entire subtree
/// rooted at this widget, and further triggering a relayout and repaint of
/// the entire corresponding [RenderObject] subtree.
///
/// For this reason, this method should only be called when the [build] method
/// will, as a result of whatever state change was detected, change its result
/// meaningfully.
///
/// See also:
///
///  * [StatefulWidget], the API documentation for which has a section on
///    performance considerations that are relevant here. ¿ »˘¿ …  ¿ »ﬁ¿ »ﬂ¿ ”¸ÖÓ¿ Ÿ⁄ÖÜ/// Called when this object is removed from the tree.
///
/// The framework calls this method whenever it removes this [State] object
/// from the tree. In some cases, the framework will reinsert the [State]
/// object into another part of the tree (e.g., if the subtree containing this
/// [State] object is grafted from one location in the tree to another due to
/// the use of a [GlobalKey]). If that happens, the framework will call
/// [activate] to give the [State] object a chance to reacquire any resources
/// that it released in [deactivate]. It will then also call [build] to give
/// the [State] object a chance to adapt to its new location in the tree. If
/// the framework does reinsert this subtree, it will do so before the end of
/// the animation frame in which the subtree was removed from the tree. For
/// this reason, [State] objects can defer releasing most resources until the
/// framework calls their [dispose] method.
///
/// Subclasses should override this method to clean up any links between
/// this object and other elements in the tree (e.g. if you have provided an
/// ancestor with a pointer to a descendant's [RenderObject]).
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.deactivate()`.
///
/// See also:
///
///  * [dispose], which is called after [deactivate] if the widget is removed
///    from the tree permanently.  ¿ Ÿ∑¿ Ÿ∏¿ Ÿƒ¿ Ÿ≈¿ ŸÓÜ©¿ ‡âÜ;/// Called when this object is reinserted into the tree after having been
/// removed via [deactivate].
///
/// In most cases, after a [State] object has been deactivated, it is _not_
/// reinserted into the tree, and its [dispose] method will be called to
/// signal that it is ready to be garbage collected.
///
/// In some cases, however, after a [State] object has been deactivated, the
/// framework will reinsert it into another part of the tree (e.g., if the
/// subtree containing this [State] object is grafted from one location in
/// the tree to another due to the use of a [GlobalKey]). If that happens,
/// the framework will call [activate] to give the [State] object a chance to
/// reacquire any resources that it released in [deactivate]. It will then
/// also call [build] to give the object a chance to adapt to its new
/// location in the tree. If the framework does reinsert this subtree, it
/// will do so before the end of the animation frame in which the subtree was
/// removed from the tree. For this reason, [State] objects can defer
/// releasing most resources until the framework calls their [dispose] method.
///
/// The framework does not call this method the first time a [State] object
/// is inserted into the tree. Instead, the framework calls [initState] in
/// that situation.
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.activate()`.
///
/// See also:
///
///  * [Element.activate], the corresponding method when an element
///    transitions from the "inactive" to the "active" lifecycle state.  ¿ ‡f¿ ‡g¿ ‡s¿ ‡t¿ ‡õà‰¿ ËRá9/// Called when this object is removed from the tree permanently.
///
/// The framework calls this method when this [State] object will never
/// build again. After the framework calls [dispose], the [State] object is
/// considered unmounted and the [mounted] property is false. It is an error
/// to call [setState] at this point. This stage of the lifecycle is terminal:
/// there is no way to remount a [State] object that has been disposed.
///
/// Subclasses should override this method to release any resources retained
/// by this object (e.g., stop any active animations).
///
/// {@macro flutter.widgets.State.initState}
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.dispose()`.
///
/// ## Caveats
///
/// This method is _not_ invoked at times where a developer might otherwise
/// expect it, such as application shutdown or dismissal via platform
/// native methods.
///
/// ### Application shutdown
///
/// There is no way to predict when application shutdown will happen. For
/// example, a user's battery could catch fire, or the user could drop the
/// device into a swimming pool, or the operating system could unilaterally
/// terminate the application process due to memory pressure.
///
/// Applications are responsible for ensuring that they are well-behaved
/// even in the face of a rapid unscheduled termination.
///
/// To artificially cause the entire widget tree to be disposed, consider
/// calling [runApp] with a widget such as [SizedBox.shrink].
///
/// To listen for platform shutdown messages (and other lifecycle changes),
/// consider the [AppLifecycleListener] API.
///
/// ### Dismissing Flutter UI via platform native methods
///
/// {@macro flutter.widgets.runApp.dismissal}
///
/// See also:
///
///  * [deactivate], which is called prior to [dispose].  ¿ Ë/¿ Ë0¿ Ë<¿ Ë=¿ ÈÉï¿ ˛vìÙ/// Describes the part of the user interface represented by this widget.
///
/// The framework calls this method in a number of different situations. For
/// example:
///
///  * After calling [initState].
///  * After calling [didUpdateWidget].
///  * After receiving a call to [setState].
///  * After a dependency of this [State] object changes (e.g., an
///    [InheritedWidget] referenced by the previous [build] changes).
///  * After calling [deactivate] and then reinserting the [State] object into
///    the tree at another location.
///
/// This method can potentially be called in every frame and should not have
/// any side effects beyond building a widget.
///
/// The framework replaces the subtree below this widget with the widget
/// returned by this method, either by updating the existing subtree or by
/// removing the subtree and inflating a new subtree, depending on whether the
/// widget returned by this method can update the root of the existing
/// subtree, as determined by calling [Widget.canUpdate].
///
/// Typically implementations return a newly created constellation of widgets
/// that are configured with information from this widget's constructor, the
/// given [BuildContext], and the internal state of this [State] object.
///
/// The given [BuildContext] contains information about the location in the
/// tree at which this widget is being built. For example, the context
/// provides the set of inherited widgets for this location in the tree. The
/// [BuildContext] argument is always the same as the [context] property of
/// this [State] object and will remain the same for the lifetime of this
/// object. The [BuildContext] argument is provided redundantly here so that
/// this method matches the signature for a [WidgetBuilder].
///
/// ## Design discussion
///
/// ### Why is the [build] method on [State], and not [StatefulWidget]?
///
/// Putting a `Widget build(BuildContext context)` method on [State] rather
/// than putting a `Widget build(BuildContext context, State state)` method
/// on [StatefulWidget] gives developers more flexibility when subclassing
/// [StatefulWidget].
///
/// For example, [AnimatedWidget] is a subclass of [StatefulWidget] that
/// introduces an abstract `Widget build(BuildContext context)` method for its
/// subclasses to implement. If [StatefulWidget] already had a [build] method
/// that took a [State] argument, [AnimatedWidget] would be forced to provide
/// its [State] object to subclasses even though its [State] object is an
/// internal implementation detail of [AnimatedWidget].
///
/// Conceptually, [StatelessWidget] could also be implemented as a subclass of
/// [StatefulWidget] in a similar manner. If the [build] method were on
/// [StatefulWidget] rather than [State], that would not be possible anymore.
///
/// Putting the [build] function on [State] rather than [StatefulWidget] also
/// helps avoid a category of bugs related to closures implicitly capturing
/// `this`. If you defined a closure in a [build] function on a
/// [StatefulWidget], that closure would implicitly capture `this`, which is
/// the current widget instance, and would have the (immutable) fields of that
/// instance in scope:
///
/// ```dart
/// // (this is not valid Flutter code)
/// class MyButton extends StatefulWidgetX {
///   MyButton({super.key, required this.color});
///
///   final Color color;
///
///   @override
///   Widget build(BuildContext context, State state) {
///     return SpecialWidget(
///       handler: () { print('color: $color'); },
///     );
///   }
/// }
/// ```
///
/// For example, suppose the parent builds `MyButton` with `color` being blue,
/// the `$color` in the print function refers to blue, as expected. Now,
/// suppose the parent rebuilds `MyButton` with green. The closure created by
/// the first build still implicitly refers to the original widget and the
/// `$color` still prints blue even through the widget has been updated to
/// green; should that closure outlive its widget, it would print outdated
/// information.
///
/// In contrast, with the [build] function on the [State] object, closures
/// created during [build] implicitly capture the [State] instance instead of
/// the widget instance:
///
/// ```dart
/// class MyButton extends StatefulWidget {
///   const MyButton({super.key, this.color = Colors.teal});
///
///   final Color color;
///   // ...
/// }
///
/// class MyButtonState extends State<MyButton> {
///   // ...
///   @override
///   Widget build(BuildContext context) {
///     return SpecialWidget(
///       handler: () { print('color: ${widget.color}'); },
///     );
///   }
/// }
/// ```
///
/// Now when the parent rebuilds `MyButton` with green, the closure created by
/// the first build still refers to [State] object, which is preserved across
/// rebuilds, but the framework has updated that [State] object's [widget]
/// property to refer to the new `MyButton` instance and `${widget.color}`
/// prints green, as expected.
///
/// See also:
///
///  * [StatefulWidget], which contains the discussion on performance considerations. ¿ ˛|¿ ˛ä  ¿ ˛b¿ ˛c¿ ˛ñÉ@¿ªÇÂ/// Called when a dependency of this [State] object changes.
///
/// For example, if the previous call to [build] referenced an
/// [InheritedWidget] that later changed, the framework would call this
/// method to notify this object about the change.
///
/// This method is also called immediately after [initState]. It is safe to
/// call [BuildContext.dependOnInheritedWidgetOfExactType] from this method.
///
/// Subclasses rarely override this method because the framework always
/// calls [build] after a dependency changes. Some subclasses do override
/// this method because they need to do some expensive work (e.g., network
/// fetches) when their dependencies change, and that work would be too
/// expensive to do for every build.  ¿ò¿ô¿•¿¶¿⁄ÅÁ¿Î  ¿ˇ&¿  ¿⁄¿€¿ ù˝¿ ù˛¿≈ÖL¿¸É'/// A widget that has a child widget provided to it, instead of building a new
/// widget.
///
/// Useful as a base class for other widgets, such as [InheritedWidget] and
/// [ParentDataWidget].
///
/// See also:
///
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets.
///  * [ParentDataWidget], for widgets that populate the
///    [RenderObject.parentData] slot of their child's [RenderObject] to
///    configure the parent widget's layout.
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state.
///  * [Widget], for an overview of widgets in general. ¿p ¿[¿f7/// Creates a widget that has exactly one child widget.¿i	¿p  ¿t¿É   ¿èÅ¿		Å^/// The widget below this widget in the tree.
///
/// {@template flutter.widgets.ProxyWidget.child}
/// This widget can only have one child. To lay out multiple children, let this
/// widget's child be a widget such as [Row], [Column], or [Stack], which have a
/// `children` property, and then provide the children to that widget.
/// {@endtemplate}    ¿	ú@¿káH/// Base class for widgets that hook [ParentData] information to children of
/// [RenderObjectWidget]s.
///
/// This can be used to provide per-child configuration for
/// [RenderObjectWidget]s with more than one child. For example, [Stack] uses
/// the [Positioned] parent data widget to position each child.
///
/// A [ParentDataWidget] is specific to a particular kind of [ParentData]. That
/// class is `T`, the [ParentData] type argument.
///
/// {@tool snippet}
///
/// This example shows how you would build a [ParentDataWidget] to configure a
/// `FrogJar` widget's children by specifying a [Size] for each one.
///
/// ```dart
/// class FrogSize extends ParentDataWidget<FrogJarParentData> {
///   const FrogSize({
///     super.key,
///     required this.size,
///     required super.child,
///   });
///
///   final Size size;
///
///   @override
///   void applyParentData(RenderObject renderObject) {
///     final FrogJarParentData parentData = renderObject.parentData! as FrogJarParentData;
///     if (parentData.size != size) {
///       parentData.size = size;
///       final RenderFrogJar targetParent = renderObject.parent! as RenderFrogJar;
///       targetParent.markNeedsLayout();
///     }
///   }
///
///   @override
///   Type get debugTypicalAncestorWidgetClass => FrogJar;
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [RenderObject], the superclass for layout algorithms.
///  * [RenderObject.parentData], the slot that this class configures.
///  * [ParentData], the superclass of the data that will be placed in
///    [RenderObject.parentData] slots. The `T` type parameter for
///    [ParentDataWidget] is a [ParentData].
///  * [RenderObjectWidget], the class for widgets that wrap [RenderObject]s.
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.¿|¿|¿™Ä’ ¿I¿YÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿\	¿c  ¿g¿w    ¿ÉÌ¿ÈÉó/// Describes the [RenderObjectWidget] that is typically used to set up the
/// [ParentData] that [applyParentData] will write to.
///
/// This is only used in error messages to tell users what widget typically
/// wraps this [ParentDataWidget] through
/// [debugTypicalAncestorWidgetDescription].
///
/// ## Implementations
///
/// The returned Type should describe a subclass of `RenderObjectWidget`. If
/// more than one Type is supported, use
/// [debugTypicalAncestorWidgetDescription], which typically inserts this
/// value but can be overridden to describe more than one Type.
///
/// ```dart
///   @override
///   Type get debugTypicalAncestorWidgetClass => FrogJar;
/// ```
///
/// If the "typical" parent is generic (`Foo<T>`), consider specifying either
/// a typical type argument (e.g. `Foo<int>` if `int` is typically how the
/// type is specialized), or specifying the upper bound (e.g. `Foo<Object?>`).   ¿ÅÚ¿≥Åä/// Describes the [RenderObjectWidget] that is typically used to set up the
/// [ParentData] that [applyParentData] will write to.
///
/// This is only used in error messages to tell users what widget typically
/// wraps this [ParentDataWidget].
///
/// Returns [debugTypicalAncestorWidgetClass] by default as a String. This can
/// be overridden to describe more than one Type of valid parent.   ¿ÉO¿§   ¿É¿Ñ¿÷ÇB¿Åë/// Checks if this widget can apply its parent data to the provided
/// `renderObject`.
///
/// The [RenderObject.parentData] of the provided `renderObject` is
/// typically set up by an ancestor [RenderObjectWidget] of the type returned
/// by [debugTypicalAncestorWidgetClass].
///
/// This is called just before [applyParentData] is invoked with the same
/// [RenderObject] provided to that method. ¿ò¿¶   ¿Ö2¿  ¿I¿_  ¿n%¿É  ¿ô¿´   ¿9Ñc¿#qÑ/// Write the data from this widget into the given render object's parent data.
///
/// The framework calls this function whenever it detects that the
/// [RenderObject] associated with the [child] has outdated
/// [RenderObject.parentData]. For example, if the render object was recently
/// inserted into the render tree, the render object's parent data might not
/// match the data in this widget.
///
/// Subclasses are expected to override this function to copy data from their
/// fields into the [RenderObject.parentData] field of the given render
/// object. The render object's parent is guaranteed to have been created by a
/// widget of type `T`, which usually means that this function can assume that
/// the render object's parent data object inherits from a particular class.
///
/// If this function modifies data that can change the parent's layout or
/// painting, this function is responsible for calling
/// [RenderObject.markNeedsLayout] or [RenderObject.markNeedsPaint] on the
/// parent, as appropriate. ¿#Å¿#è  ¿#_¿#`¿#†Å±¿%/Åh/// Whether the [ParentDataElement.applyWidgetOutOfTurn] method is allowed
/// with this widget.
///
/// This should only return true if this widget represents a [ParentData]
/// configuration that will have no impact on the layout or paint phase.
///
/// See also:
///
///  * [ParentDataElement.applyWidgetOutOfTurn], which verifies this in debug
///    mode.  ¿%¿% ¿%Uóˇ¿9ì¥/// Base class for widgets that efficiently propagate information down the tree.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=og-vJqLzg2c}
///
/// To obtain the nearest instance of a particular type of inherited widget from
/// a build context, use [BuildContext.dependOnInheritedWidgetOfExactType].
///
/// Inherited widgets, when referenced in this way, will cause the consumer to
/// rebuild when the inherited widget itself changes state.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=Zbm3hjPjQMk}
///
/// {@tool snippet}
///
/// The following is a skeleton of an inherited widget called `FrogColor`:
///
/// ```dart
/// class FrogColor extends InheritedWidget {
///   const FrogColor({
///     super.key,
///     required this.color,
///     required super.child,
///   });
///
///   final Color color;
///
///   static FrogColor? maybeOf(BuildContext context) {
///     return context.dependOnInheritedWidgetOfExactType<FrogColor>();
///   }
///
///   static FrogColor of(BuildContext context) {
///     final FrogColor? result = maybeOf(context);
///     assert(result != null, 'No FrogColor found in context');
///     return result!;
///   }
///
///   @override
///   bool updateShouldNotify(FrogColor oldWidget) => color != oldWidget.color;
/// }
/// ```
/// {@end-tool}
///
/// ## Implementing the `of` and `maybeOf` methods
///
/// The convention is to provide two static methods, `of` and `maybeOf`, on the
/// [InheritedWidget] which call
/// [BuildContext.dependOnInheritedWidgetOfExactType]. This allows the class to
/// define its own fallback logic in case there isn't a widget in scope.
///
/// The `of` method typically returns a non-nullable instance and asserts if the
/// [InheritedWidget] isn't found, and the `maybeOf` method returns a nullable
/// instance, and returns null if the [InheritedWidget] isn't found. The `of`
/// method is typically implemented by calling `maybeOf` internally.
///
/// Sometimes, the `of` and `maybeOf` methods return some data rather than the
/// inherited widget itself; for example, in this case it could have returned a
/// [Color] instead of the `FrogColor` widget.
///
/// Occasionally, the inherited widget is an implementation detail of another
/// class, and is therefore private. The `of` and `maybeOf` methods in that case
/// are typically implemented on the public class instead. For example, [Theme]
/// is implemented as a [StatelessWidget] that builds a private inherited
/// widget; [Theme.of] looks for that private inherited widget using
/// [BuildContext.dependOnInheritedWidgetOfExactType] and then returns the
/// [ThemeData] inside it.
///
/// ## Calling the `of` or `maybeOf` methods
///
/// When using the `of` or `maybeOf` methods, the `context` must be a descendant
/// of the [InheritedWidget], meaning it must be "below" the [InheritedWidget]
/// in the tree.
///
/// {@tool snippet}
///
/// In this example, the `context` used is the one from the [Builder], which is
/// a child of the `FrogColor` widget, so this works.
///
/// ```dart
/// // continuing from previous example...
/// class MyPage extends StatelessWidget {
///   const MyPage({super.key});
///
///   @override
///   Widget build(BuildContext context) {
///     return Scaffold(
///       body: FrogColor(
///         color: Colors.green,
///         child: Builder(
///           builder: (BuildContext innerContext) {
///             return Text(
///               'Hello Frog',
///               style: TextStyle(color: FrogColor.of(innerContext).color),
///             );
///           },
///         ),
///       ),
///     );
///   }
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// In this example, the `context` used is the one from the `MyOtherPage`
/// widget, which is a parent of the `FrogColor` widget, so this does not work,
/// and will assert when `FrogColor.of` is called.
///
/// ```dart
/// // continuing from previous example...
///
/// class MyOtherPage extends StatelessWidget {
///   const MyOtherPage({super.key});
///
///   @override
///   Widget build(BuildContext context) {
///     return Scaffold(
///       body: FrogColor(
///         color: Colors.green,
///         child: Text(
///           'Hello Frog',
///           style: TextStyle(color: FrogColor.of(context).color),
///         ),
///       ),
///     );
///   }
/// }
/// ```
/// {@end-tool} {@youtube 560 315 https://www.youtube.com/watch?v=1t-8rBCGBYw}
///
/// See also:
///
/// * [StatefulWidget] and [State], for widgets that can build differently
///   several times over their lifetime.
/// * [StatelessWidget], for widgets that always build the same way given a
///   particular configuration and ambient state.
/// * [Widget], for an overview of widgets in general.
/// * [InheritedNotifier], an inherited widget whose value can be a
///   [Listenable], and which will notify dependents whenever the value sends
///   notifications.
/// * [InheritedModel], an inherited widget that allows clients to subscribe to
///   changes for subparts of the value. ¿9AÄ‘ ¿9‡¿9ÔÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿9Ú	¿9˘  ¿9˝¿:     ¿:G¿:6   ¿:¿:¿:dÇÓ¿=Çã/// Whether the framework should notify widgets that inherit from this widget.
///
/// When this widget is rebuilt, sometimes we need to rebuild the widgets that
/// inherit from this widget but sometimes we do not. For example, if the data
/// held by this widget is the same as the data held by `oldWidget`, then we
/// do not need to rebuild the widgets that inherited the data held by
/// `oldWidget`.
///
/// The framework distinguishes these cases by calling this function with the
/// widget that previously occupied this location in the tree as an argument.
/// The given widget is guaranteed to have the same [runtimeType] as this
/// object. ¿=-#¿=H  ¿=¿=	 ¿=Vä¿@)Ç√/// [RenderObjectWidget]s provide the configuration for [RenderObjectElement]s,
/// which wrap [RenderObject]s, which provide the actual rendering of the
/// application.
///
/// Usually, rather than subclassing [RenderObjectWidget] directly, render
/// object widgets subclass one of:
///
///  * [LeafRenderObjectWidget], if the widget has no children.
///  * [SingleChildRenderObjectElement], if the widget has exactly one child.
///  * [MultiChildRenderObjectWidget], if the widget takes a list of children.
///  * [SlottedMultiChildRenderObjectWidget], if the widget organizes its
///    children in different named slots.
///
/// Subclasses must implement [createRenderObject] and [updateRenderObject]. ¿@OÄ¡ ¿@Ó¿A Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿A	¿A
     ¿AÄâ¿AçK/// RenderObjectWidgets always inflate to a [RenderObjectElement] subclass.  ¿Ab¿Ac¿An¿Ao¿A°Ç<¿C¥Å€/// Creates an instance of the [RenderObject] class that this
/// [RenderObjectWidget] represents, using the configuration described by this
/// [RenderObjectWidget].
///
/// This method should not do anything with the children of the render object.
/// That should instead be handled by the method that overrides
/// [RenderObjectElement.mount] in the object rendered by this object's
/// [createElement] method. See, for example,
/// [SingleChildRenderObjectElement.mount]. ¿C«¿C’  ¿Cè¿Cê¿Cú¿Cù¿C·Çl¿E¸Åˆ/// Copies the configuration described by this [RenderObjectWidget] to the
/// given [RenderObject], which will be of the same type as returned by this
/// object's [createRenderObject].
///
/// This method should not do anything to update the children of the render
/// object. That should instead be handled by the method that overrides
/// [RenderObjectElement.update] in the object rendered by this object's
/// [createElement] method. See, for example,
/// [SingleChildRenderObjectElement.update]. ¿F¿F  ¿F%#¿F=  ¿EÍ¿EÎ¿FQÅ¿G1Ä«/// A render object previously associated with this widget has been removed
/// from the tree. The given [RenderObject] will be of the same type as
/// returned by this object's [createRenderObject]. ¿GH#¿G`  ¿G¿G  ¿GtÇ%¿HCÄø/// A superclass for [RenderObjectWidget]s that configure [RenderObject] subclasses
/// that have no children.
///
/// Subclasses must implement [createRenderObject] and [updateRenderObject]. ¿HyÄ≈ ¿I¿I.Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿I1	¿I8     ¿IBU¿If   ¿IB¿IC ¿IõÉÔ¿KçÅ‚/// A superclass for [RenderObjectWidget]s that configure [RenderObject] subclasses
/// that have a single child slot.
///
/// The render object assigned to this widget should make use of
/// [RenderObjectWithChildMixin] to implement a single-child model. The mixin
/// exposes a [RenderObjectWithChildMixin.child] property that allows retrieving
/// the render object belonging to the [child] widget.
///
/// Subclasses must implement [createRenderObject] and [updateRenderObject]. ¿K Äÿ ¿Li¿LÜÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿Lâ	¿Lê  ¿Lî
¿Lö   ¿L¶z¿M`/// The widget below this widget in the tree.
///
/// {@macro flutter.widgets.ProxyWidget.child}  ¿M%c¿MP   ¿M%¿M& ¿Mååí¿QœÑ3/// A superclass for [RenderObjectWidget]s that configure [RenderObject] subclasses
/// that have a single list of children. (This superclass only provides the
/// storage for that child list, it doesn't actually provide the updating
/// logic.)
///
/// Subclasses must use a [RenderObject] that mixes in
/// [ContainerRenderObjectMixin], which provides the necessary functionality to
/// visit the children of the container render object (the render object
/// belonging to the [children] widgets). Typically, subclasses will use a
/// [RenderBox] that mixes in both [ContainerRenderObjectMixin] and
/// [RenderBoxContainerDefaultsMixin].
///
/// Subclasses must implement [createRenderObject] and [updateRenderObject].
///
/// See also:
///
///  * [Stack], which uses [MultiChildRenderObjectWidget].
///  * [RenderStack], for an example implementation of the associated render
///    object.
///  * [SlottedMultiChildRenderObjectWidget], which configures a
///    [RenderObject] that instead of having a single list of children organizes
///    its children in named slots. ¿R} ¿R:¿RV&/// Initializes fields for subclasses.¿RY	¿R`  ¿Rd ¿Rj  ¿Rt¿RÇ¿RÉ¿Rz¿RÅ¿R{¿Råá*¿YÆÜ¶/// The widgets below this widget in the tree.
///
/// If this list is going to be mutated, it is usually wise to put a [Key] on
/// each of the child widgets, so that the framework can match old
/// configurations to new configurations and maintain the underlying render
/// objects.
///
/// Also, a [Widget] in Flutter is immutable, so directly modifying the
/// [children] such as `someMultiChildRenderObjectWidget.children.add(...)` or
/// as the example code below will result in incorrect behaviors. Whenever the
/// children list is modified, a new list object should be provided.
///
/// ```dart
/// // This code is incorrect.
/// class SomeWidgetState extends State<SomeWidget> {
///   final List<Widget> _children = <Widget>[];
///
///   void someHandler() {
///     setState(() {
///       _children.add(const ChildWidget());
///     });
///   }
///
///   @override
///   Widget build(BuildContext context) {
///     // Reusing `List<Widget> _children` here is problematic.
///     return Row(children: _children);
///   }
/// }
/// ```
///
/// The following code corrects the problem mentioned above.
///
/// ```dart
/// class SomeWidgetState extends State<SomeWidget> {
///   final List<Widget> _children = <Widget>[];
///
///   void someHandler() {
///     setState(() {
///       // The key here allows Flutter to reuse the underlying render
///       // objects even if the children list is recreated.
///       _children.add(ChildWidget(key: UniqueKey()));
///     });
///   }
///
///   @override
///   Widget build(BuildContext context) {
///     // Always create a new list of children as a Widget is immutable.
///     return Row(children: _children.toList());
///   }
/// }
/// ```  ¿Yªa¿YÂ   ¿Yª¿Yº ¿Zvá•¿Z|   ¿Zí¿Zó ¿Z°¿Z™1¿ZΩ ¿Z…¿Z–¿Zÿ¿Z—¿ZŸ¿Z⁄ ¿Z‡Ç¿ZÂ  ¿ZÓ¿Z˜   ¿]Å¿]    ¿^ÅY¿^#  ¿^:¿^C   ¿_tÅ¿_y  ¿_}¿_Ü   ¿`ÑÄÊ¿`â  ¿`ê¿`ô   ¿anÄ´¿as  ¿aÅ¿aä    ¿d¿ Zq¿v™íá/// A handle to the location of a widget in the widget tree.
///
/// This class presents a set of methods that can be used from
/// [StatelessWidget.build] methods and from methods on [State] objects.
///
/// [BuildContext] objects are passed to [WidgetBuilder] functions (such as
/// [StatelessWidget.build]), and are available from the [State.context] member.
/// Some static functions (e.g. [showDialog], [Theme.of], and so forth) also
/// take build contexts so that they can act on behalf of the calling widget, or
/// obtain data specifically for the given context.
///
/// Each widget has its own [BuildContext], which becomes the parent of the
/// widget returned by the [StatelessWidget.build] or [State.build] function.
/// (And similarly, the parent of any children for [RenderObjectWidget]s.)
///
/// In particular, this means that within a build method, the build context of
/// the widget of the build method is not the same as the build context of the
/// widgets returned by that build method. This can lead to some tricky cases.
/// For example, [Theme.of(context)] looks for the nearest enclosing [Theme] of
/// the given build context. If a build method for a widget Q includes a [Theme]
/// within its returned widget tree, and attempts to use [Theme.of] passing its
/// own context, the build method for Q will not find that [Theme] object. It
/// will instead find whatever [Theme] was an ancestor to the widget Q. If the
/// build context for a subpart of the returned tree is needed, a [Builder]
/// widget can be used: the build context passed to the [Builder.builder]
/// callback will be that of the [Builder] itself.
///
/// For example, in the following snippet, the [ScaffoldState.showBottomSheet]
/// method is called on the [Scaffold] widget that the build method itself
/// creates. If a [Builder] had not been used, and instead the `context`
/// argument of the build method itself had been used, no [Scaffold] would have
/// been found, and the [Scaffold.of] function would have returned null.
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   // here, Scaffold.of(context) returns null
///   return Scaffold(
///     appBar: AppBar(title: const Text('Demo')),
///     body: Builder(
///       builder: (BuildContext context) {
///         return TextButton(
///           child: const Text('BUTTON'),
///           onPressed: () {
///             Scaffold.of(context).showBottomSheet(
///               (BuildContext context) {
///                 return Container(
///                   alignment: Alignment.center,
///                   height: 200,
///                   color: Colors.amber,
///                   child: Center(
///                     child: Column(
///                       mainAxisSize: MainAxisSize.min,
///                       children: <Widget>[
///                         const Text('BottomSheet'),
///                         ElevatedButton(
///                           child: const Text('Close BottomSheet'),
///                           onPressed: () {
///                             Navigator.pop(context);
///                           },
///                         )
///                       ],
///                     ),
///                   ),
///                 );
///               },
///             );
///           },
///         );
///       },
///     )
///   );
/// }
/// ```
///
/// The [BuildContext] for a particular widget can change location over time as
/// the widget is moved around the tree. Because of this, values returned from
/// the methods on this class should not be cached beyond the execution of a
/// single synchronous function.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=rIaaH87z1-g}
///
/// Avoid storing instances of [BuildContext]s because they may become invalid
/// if the widget they are associated with is unmounted from the widget tree.
/// {@template flutter.widgets.BuildContext.asynchronous_gap}
/// If a [BuildContext] is used across an asynchronous gap (i.e. after performing
/// an asynchronous operation), consider checking [mounted] to determine whether
/// the context is still valid before interacting with it:
///
/// ```dart
///   @override
///   Widget build(BuildContext context) {
///     return OutlinedButton(
///       onPressed: () async {
///         await Future<void>.delayed(const Duration(seconds: 1));
///         if (context.mounted) {
///           Navigator.of(context).pop();
///         }
///       },
///       child: const Text('Delayed pop'),
///     );
///   }
/// ```
/// {@endtemplate}
///
/// [BuildContext] objects are actually [Element] objects. The [BuildContext]
/// interface is used to discourage direct manipulation of [Element] objects.   ¿vª`¿wK/// The current configuration of the [Element] that is this [BuildContext].   ¿wÄò¿w±}/// The [BuildOwner] for this context. The [BuildOwner] is in charge of
/// managing the rendering pipeline for this context.   ¿wªÅ…¿y|Å£/// Whether the [Widget] this context is associated with is currently
/// mounted in the widget tree.
///
/// Accessing the properties of the [BuildContext] or calling any methods on
/// it is only valid while mounted is true. If mounted is false, assertions
/// will trigger.
///
/// Once unmounted, a given [BuildContext] will never become mounted again.
///
/// {@macro flutter.widgets.BuildContext.asynchronous_gap}   ¿yàÇ…¿|AÇì/// Whether the [widget] is currently updating the widget or render tree.
///
/// For [StatefulWidget]s and [StatelessWidget]s this flag is true while
/// their respective build methods are executing.
/// [RenderObjectWidget]s set this to true while creating or configuring their
/// associated [RenderObject]s.
/// Other [Widget] types may set this to true for conceptually similar phases
/// of their lifecycle.
///
/// When this is true, it is safe for [widget] to establish a dependency to an
/// [InheritedWidget] by calling [dependOnInheritedElement] or
/// [dependOnInheritedWidgetOfExactType].
///
/// Accessing this flag in release mode is not valid.   ¿Å™Ñ+¿Ö–Éı/// The size of the [RenderBox] returned by [findRenderObject].
///
/// This getter will only return a valid result after the layout phase is
/// complete. It is therefore not valid to call this from a build method.
/// It should only be called from paint callbacks or interaction event
/// handlers (e.g. gesture callbacks).
///
/// For details on the different phases of a frame, see the discussion at
/// [WidgetsBinding.drawFrame].
///
/// This getter will only return a valid result if [findRenderObject] actually
/// returns a [RenderBox]. If [findRenderObject] returns a render object that
/// is not a subtype of [RenderBox] (e.g., [RenderView]), this getter will
/// throw an exception in debug mode and will return null in release mode.
///
/// Calling this getter is theoretically relatively expensive (O(N) in the
/// depth of the tree), but in practice is usually cheap because the tree
/// usually has many render objects and therefore the distance to the nearest
/// render object is usually short.   ¿|UÖQ¿ÅìÑˇ/// The current [RenderObject] for the widget. If the widget is a
/// [RenderObjectWidget], this is the render object that the widget created
/// for itself. Otherwise, it is the render object of the first descendant
/// [RenderObjectWidget].
///
/// This method will only return a valid result after the build phase is
/// complete. It is therefore not valid to call this from a build method.
/// It should only be called from interaction event handlers (e.g.
/// gesture callbacks) or layout or paint callbacks. It is also not valid to
/// call if [State.mounted] returns false.
///
/// If the render object is a [RenderBox], which is the common case, then the
/// size of the render object can be obtained from the [size] getter. This is
/// only valid after the layout phase, and should therefore only be examined
/// from paint callbacks or interaction event handlers (e.g. gesture
/// callbacks).
///
/// For details on the different phases of a frame, see the discussion at
/// [WidgetsBinding.drawFrame].
///
/// Calling this method is theoretically relatively expensive (O(N) in the
/// depth of the tree), but in practice is usually cheap because the tree
/// usually has many render objects and therefore the distance to the nearest
/// render object is usually short.   ¿ÖŸÇ_¿áÅ/// Registers this build context with [ancestor] such that when
/// [ancestor]'s widget changes this build context is rebuilt.
///
/// Returns `ancestor.widget`.
///
/// This method is rarely called directly. Most applications should use
/// [dependOnInheritedWidgetOfExactType], which calls this method after finding
/// the appropriate [InheritedElement] ancestor.
///
/// All of the qualifications about when [dependOnInheritedWidgetOfExactType] can
/// be called apply to this method as well. ¿à	¿à  ¿à&¿à/   ¿à<ä4¿íâÑ/// Returns the nearest widget of the given type `T` and creates a dependency
/// on it, or null if no appropriate widget is found.
///
/// The widget found will be a concrete [InheritedWidget] subclass, and
/// calling [dependOnInheritedWidgetOfExactType] registers this build context
/// with the returned widget. When that widget changes (or a new widget of
/// that type is introduced, or the widget goes away), this build context is
/// rebuilt so that it can obtain new values from that widget.
///
/// {@template flutter.widgets.BuildContext.dependOnInheritedWidgetOfExactType}
/// This is typically called implicitly from `of()` static methods, e.g.
/// [Theme.of].
///
/// This method should not be called from widget constructors or from
/// [State.initState] methods, because those methods would not get called
/// again if the inherited value were to change. To ensure that the widget
/// correctly updates itself when the inherited value changes, only call this
/// (directly or indirectly) from build methods, layout and paint callbacks,
/// or from [State.didChangeDependencies] (which is called immediately after
/// [State.initState]).
///
/// This method should not be called from [State.dispose] because the element
/// tree is no longer stable at that time. To refer to an ancestor from that
/// method, save a reference to the ancestor in [State.didChangeDependencies].
/// It is safe to use this method from [State.deactivate], which is called
/// whenever the widget is removed from the tree.
///
/// It is also possible to call this method from interaction event handlers
/// (e.g. gesture callbacks) or timers, to obtain a value once, as long as
/// that value is not cached and/or reused later.
///
/// Calling this method is O(1) with a small constant factor, but will lead to
/// the widget being rebuilt more often.
///
/// Once a widget registers a dependency on a particular type by calling this
/// method, it will be rebuilt, and [State.didChangeDependencies] will be
/// called, whenever changes occur relating to that widget until the next time
/// the widget or one of its ancestors is moved (for example, because an
/// ancestor is added or removed).
///
/// The [aspect] parameter is only used when `T` is an
/// [InheritedWidget] subclasses that supports partial updates, like
/// [InheritedModel]. It specifies what "aspect" of the inherited
/// widget this context depends on.
/// {@endtemplate}¿íA¿íA¿í^¿íg   ¿ítÑÑ¿ñΩÑ/// Returns the nearest widget of the given [InheritedWidget] subclass `T` or
/// null if an appropriate ancestor is not found.
///
/// This method does not introduce a dependency the way that the more typical
/// [dependOnInheritedWidgetOfExactType] does, so this context will not be
/// rebuilt if the [InheritedWidget] changes. This function is meant for those
/// uncommon use cases where a dependency is undesirable.
///
/// This method should not be called from [State.dispose] because the element
/// tree is no longer stable at that time. To refer to an ancestor from that
/// method, save a reference to the ancestor in [State.didChangeDependencies].
/// It is safe to use this method from [State.deactivate], which is called
/// whenever the widget is removed from the tree.
///
/// It is also possible to call this method from interaction event handlers
/// (e.g. gesture callbacks) or timers, to obtain a value once, as long as
/// that value is not cached and/or reused later.
///
/// Calling this method is O(1) with a small constant factor.¿ñ€¿ñ€  ¿ñ¸Ñ¿ö Éó/// Obtains the element corresponding to the nearest widget of the given type `T`,
/// which must be the type of a concrete [InheritedWidget] subclass.
///
/// Returns null if no such element is found.
///
/// {@template flutter.widgets.BuildContext.getElementForInheritedWidgetOfExactType}
/// Calling this method is O(1) with a small constant factor.
///
/// This method does not establish a relationship with the target in the way
/// that [dependOnInheritedWidgetOfExactType] does.
///
/// This method should not be called from [State.dispose] because the element
/// tree is no longer stable at that time. To refer to an ancestor from that
/// method, save a reference to the ancestor by calling
/// [dependOnInheritedWidgetOfExactType] in [State.didChangeDependencies]. It is
/// safe to use this method from [State.deactivate], which is called whenever
/// the widget is removed from the tree.
/// {@endtemplate}¿öÚ¿öÚ  ¿õÜi¿°JÖˇ/// Returns the nearest ancestor widget of the given type `T`, which must be the
/// type of a concrete [Widget] subclass.
///
/// {@template flutter.widgets.BuildContext.findAncestorWidgetOfExactType}
/// In general, [dependOnInheritedWidgetOfExactType] is more useful, since
/// inherited widgets will trigger consumers to rebuild when they change. This
/// method is appropriate when used in interaction event handlers (e.g.
/// gesture callbacks) or for performing one-off tasks such as asserting that
/// you have or don't have a widget of a specific type as an ancestor. The
/// return value of a Widget's build method should not depend on the value
/// returned by this method, because the build context will not rebuild if the
/// return value of this method changes. This could lead to a situation where
/// data used in the build method changes, but the widget is not rebuilt.
///
/// Calling this method is relatively expensive (O(N) in the depth of the
/// tree). Only call this method if the distance from this widget to the
/// desired ancestor is known to be small and bounded.
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the widget tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [findAncestorWidgetOfExactType] in [State.didChangeDependencies].
///
/// Returns null if a widget of the requested type does not appear in the
/// ancestors of this context.
/// {@endtemplate}¿°h¿°h  ¿°ÄÜı¿®JÜÑ/// Returns the [State] object of the nearest ancestor [StatefulWidget] widget
/// that is an instance of the given type `T`.
///
/// {@template flutter.widgets.BuildContext.findAncestorStateOfType}
/// This should not be used from build methods, because the build context will
/// not be rebuilt if the value that would be returned by this method changes.
/// In general, [dependOnInheritedWidgetOfExactType] is more appropriate for such
/// cases. This method is useful for changing the state of an ancestor widget in
/// a one-off manner, for example, to cause an ancestor scrolling list to
/// scroll this build context's widget into view, or to move the focus in
/// response to user interaction.
///
/// In general, though, consider using a callback that triggers a stateful
/// change in the ancestor rather than using the imperative style implied by
/// this method. This will usually lead to more maintainable and reusable code
/// since it decouples widgets from each other.
///
/// Calling this method is relatively expensive (O(N) in the depth of the
/// tree). Only call this method if the distance from this widget to the
/// desired ancestor is known to be small and bounded.
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the widget tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [findAncestorStateOfType] in [State.didChangeDependencies].
/// {@endtemplate}
///
/// {@tool snippet}
///
/// ```dart
/// ScrollableState? scrollable = context.findAncestorStateOfType<ScrollableState>();
/// ```
/// {@end-tool}¿®b¿®b  ¿®yÇQ¿™õÇ/// Returns the [State] object of the furthest ancestor [StatefulWidget] widget
/// that is an instance of the given type `T`.
///
/// {@template flutter.widgets.BuildContext.findRootAncestorStateOfType}
/// Functions the same way as [findAncestorStateOfType] but keeps visiting subsequent
/// ancestors until there are none of the type instance of `T` remaining.
/// Then returns the last one found.
///
/// This operation is O(N) as well though N is the entire widget tree rather than
/// a subtree.
/// {@endtemplate}¿™∑¿™∑  ¿™ŒÖg¿Ø¸Ö /// Returns the [RenderObject] object of the nearest ancestor [RenderObjectWidget] widget
/// that is an instance of the given type `T`.
///
/// {@template flutter.widgets.BuildContext.findAncestorRenderObjectOfType}
/// This should not be used from build methods, because the build context will
/// not be rebuilt if the value that would be returned by this method changes.
/// In general, [dependOnInheritedWidgetOfExactType] is more appropriate for such
/// cases. This method is useful only in esoteric cases where a widget needs
/// to cause an ancestor to change its layout or paint behavior. For example,
/// it is used by [Material] so that [InkWell] widgets can trigger the ink
/// splash on the [Material]'s actual render object.
///
/// Calling this method is relatively expensive (O(N) in the depth of the
/// tree). Only call this method if the distance from this widget to the
/// desired ancestor is known to be small and bounded.
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the widget tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [findAncestorRenderObjectOfType] in [State.didChangeDependencies].
/// {@endtemplate}¿∞¿∞  ¿∞9É€¿≥€Éz/// Walks the ancestor chain, starting with the parent of this build context's
/// widget, invoking the argument for each ancestor.
///
/// {@template flutter.widgets.BuildContext.visitAncestorElements}
/// The callback is given a reference to the ancestor widget's corresponding
/// [Element] object. The walk stops when it reaches the root widget or when
/// the callback returns false. The callback must not return null.
///
/// This is useful for inspecting the widget tree.
///
/// Calling this method is relatively expensive (O(N) in the depth of the tree).
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the element tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [visitAncestorElements] in [State.didChangeDependencies].
/// {@endtemplate} ¿≥Ò!¿¥   ¿¥Ñv¿∏cÑ/// Walks the children of this widget.
///
/// {@template flutter.widgets.BuildContext.visitChildElements}
/// This is useful for applying changes to children after they are built
/// without waiting for the next frame, especially if the children are known,
/// and especially if there is exactly one child (as is always the case for
/// [StatefulWidget]s or [StatelessWidget]s).
///
/// Calling this method is very cheap for build contexts that correspond to
/// [StatefulWidget]s or [StatelessWidget]s (O(1), since there's only one
/// child).
///
/// Calling this method is potentially expensive for build contexts that
/// correspond to [RenderObjectWidget]s (O(N) in the number of children).
///
/// Calling this method recursively is extremely expensive (O(N) in the number
/// of descendants), and should be avoided if possible. Generally it is
/// significantly cheaper to use an [InheritedWidget] and have the descendants
/// pull data down, than it is to use [visitChildElements] recursively to push
/// data down to them.
/// {@endtemplate} ¿∏v¿∏Ü   ¿∏íÅ.¿πêÄÓ/// Start bubbling this notification at the given build context.
///
/// The notification will be delivered to any [NotificationListener] widgets
/// with the appropriate type parameters that are ancestors of the given
/// [BuildContext]. ¿π•¿π≥   ¿πƒÅè¿∫ÛÅ/// Returns a description of the [Element] associated with the current build context.
///
/// The `name` is typically something like "The element being rebuilt was".
///
/// See also:
///
///  * [Element.describeElements], which can be used to describe a list of elements. ¿ª¿ª  ¿ª?¿ª'  ¿ª.¿ªB¿ªC¿ªWÅ¿ºÄ£/// Returns a description of the [Widget] associated with the current build context.
///
/// The `name` is typically something like "The widget being rebuilt was". ¿º ¿º(  ¿º.?¿ºD  ¿ºK¿º_¿º`¿ºtÅ¿ΩSÄ¿/// Adds a description of a specific type of widget missing from the current
/// build context's ancestry tree.
///
/// You can find an example of using this method in [debugCheckHasMaterial]. ¿Ωm"¿Ω|   ¿ΩóÄÎ¿æ^ÄÆ/// Adds a description of the ownership chain from a specific [Element]
/// to the error report.
///
/// The ownership chain is useful for debugging the source of an element. ¿æu¿æ}    ¿æÜ¿ sÎ¿¬¨Ñ/// Manager class for the widgets framework.
///
/// This class tracks which widgets need rebuilding, and handles other tasks
/// that apply to widget trees as a whole, such as managing the inactive element
/// list for the tree and triggering the "reassemble" command when necessary
/// during hot reload when debugging.
///
/// The main build owner is typically owned by the [WidgetsBinding], and is
/// driven from the operating system along with the rest of the
/// build/layout/paint pipeline.
///
/// Additional build owners can be built to manage off-screen widget trees.
///
/// To assign a build owner to a tree, use the
/// [RootElementMixin.assignOwner] method on the root element of the
/// widget tree.
///
/// {@tool dartpad}
/// This example shows how to build an off-screen widget tree used to measure
/// the layout size of the rendered tree. For some use cases, the simpler
/// [Offstage] widget may be a better alternative to this approach.
///
/// ** See code in examples/api/lib/widgets/framework/build_owner.0.dart **
/// {@end-tool} ¿¬ªÇ ¿ƒ;¿ƒEÅq/// Creates an object that manages widgets.
///
/// If the `focusManager` argument is not specified or is null, this will
/// construct a new [FocusManager] and register its global input handlers
/// via [FocusManager.registerGlobalHandlers], which will modify static
/// state. Callers wishing to avoid altering this state can explicitly pass
/// a focus manager here.¿ƒH¿ƒN  ¿ƒ_¿ƒn  ¿ƒí¿ƒÖ¿ƒ°¿ƒî¿ƒ§¿ƒÕ¿ƒ•¿ƒ±¿ƒ≤¿ƒ≥¿ƒµ¿ƒÀ¿ƒÃ¿ƒ”v¿≈9S/// Called on each build pass when the first buildable element is marked
/// dirty. ¿≈N?¿≈f ¿≈z¿≈ã¿≈å¿≈í0¿≈¶ ¿≈¿¿≈¡¿≈∑¿≈ø¿≈∏¿≈∆)¿≈À ¿≈Í¿≈ÙÅ\¿«4Å+/// Whether [_dirtyElements] need to be sorted again as a result of more
/// elements becoming dirty during the build.
///
/// This is necessary to preserve the sort order defined by [Element._sort].
///
/// This field is set to null when [buildScope] is not actively rebuilding
/// the widget tree. ¿»0ÇU¿ yÇ#/// The object in charge of the focus tree.
///
/// Rarely used directly. Instead, consider using [FocusScope.of] to obtain
/// the [FocusScopeNode] for a given [BuildContext].
///
/// See [FocusManager] for more details.
///
/// This field will default to a [FocusManager] that has registered its
/// global input handlers via [FocusManager.registerGlobalHandlers]. Callers
/// wishing to avoid registering those handlers (and modifying the associated
/// static state) can explicitly pass a focus manager to the [BuildOwner.new]
/// constructor. ¿”Ã¿”– ¿”Á¿‘∫¿‘ø ¿‘–¿‘Ÿ!¿‘‚  ¿¯*\¿¯H  ¿˙ìI¿˙± ¿˙⁄¿˙€¿˙∆¿˙Ÿ¿˙«¿˙“¿˚sa¿˚ï ¿˚s¿˚t¿˚π¿˚Œ¿˚Æ¿˚ª¿˚¬¿˚ ¿˚√¿˚À¿˚Ã¿˚–¿˝NÄë¿˝â ¿˝N¿˝O¿˝≤¿˝Ÿ¿˝ß¿˝÷¿˝◊¿˝¥¿˝’¿˝µ¿˝æ¿˝¡¿˝‘¿˝¬¿˝À¿˝€¿«UÄ◊¿«ÔÄä/// Whether [buildScope] is actively rebuilding the widget tree.
///
/// [scheduleBuildFor] should only be called when this value is true.   ¿”Ï7¿”ı    ¿‘'Äê¿‘ó`/// Whether this widget tree is in the build phase.
///
/// Only valid when asserts are enabled.   ¿˝‰Äº¿˛tÄÉ/// The number of [GlobalKey] instances that are currently associated with
/// [Element]s that have been built by this build owner.   ¿ äâ>¿ÀÄÅ/// Adds an element to the dirty elements list so that it will be rebuilt
/// when [WidgetsBinding.drawFrame] calls [buildScope]. ¿À&¿À/   ¿‘ˇÇ8¿’ÌÄﬁ/// Establishes a scope in which calls to [State.setState] are forbidden, and
/// calls the given `callback`.
///
/// This mechanism is used to ensure that, for instance, [State.dispose] does
/// not call [State.setState]. ¿’˜¿÷   ¿◊;†Î¿‹nÑŒ/// Establishes a scope for updating the widget tree, and calls the given
/// `callback`, if any. Then, builds all the elements that were marked as
/// dirty using [scheduleBuildFor], in depth order.
///
/// This mechanism prevents build methods from transitively requiring other
/// build methods to run, potentially causing infinite loops.
///
/// The dirty list is processed after `callback` returns, building all the
/// elements that were marked as dirty using [scheduleBuildFor], in depth
/// order. If elements are marked as dirty while this method is running, they
/// must be deeper than the `context` node, and deeper than any
/// previously-built node in this pass.
///
/// To flush the current dirty list without performing any other work, this
/// function can be called with no callback. This is what the framework does
/// each frame, in [WidgetsBinding.drawFrame].
///
/// Only one [buildScope] can be active at a time.
///
/// A [buildScope] implies a [lockState] scope as well.
///
/// To print a console message every time this method is called, set
/// [debugPrintBuildScope] to true. This is useful when debugging problems
/// involving widgets not getting marked dirty, or getting marked dirty too
/// often. ¿‹y¿‹Ç  ¿‹å¿‹õ  ¿‹<¿‹=¿‹C¿‹e¿‹D¿¯ãÅ~¿¯ê  ¿¯”¿¯‹  ¿¯·¿¯Ï   ¿˙ÄÇ¿˙  ¿˙*¿˙3   ¿˛§Äµ¿˛©  ¿˛Õ¿˛÷  ¿˛›¿˛Ê   ¿ˇ]ÅÖ¿ˇb  ¿ˇu¿ˇÄ  ¿ˇÑ¿ˇç   ¿ ÊÅØ¿ Î  ¿ ¿  ¿¿   ¿ôÅ ¿û  ¿∏¿¡  ¿»¿—  ¿◊¿‚   ¿ùç4¿¢    ¿’Ü˛¿⁄    ¿◊óÍ¿úÅ~/// Complete the element build pass by unmounting any elements that are no
/// longer active.
///
/// This is called by [WidgetsBinding.drawFrame].
///
/// In debug mode, this also runs some sanity checks, for example checking for
/// duplicate global keys.
///
/// After the current call stack unwinds, a microtask that notifies listeners
/// about changes to global keys will run.  ¿j¿k¿q¿ì¿r¿/≈Ç™¿1'ÅP/// Cause the entire subtree rooted at the given [Element] to be entirely
/// rebuilt. This is used by development tools when the application code has
/// changed and is being hot-reloaded, to cause the widget tree to pick up any
/// changed implementations.
///
/// This is expensive and should not be called except during development. ¿12¿1;    ¿5ÅG¿5  ¿55- ¿55¿5F ¿5G¿5M  ¿5T¿5Z   ¿5f¿5~  ¿5â¿5ú   ¿5ßÄ∑¿5¨  ¿5¡¿5œ    ¿7¿:w¿Cﬂåµ/// An instantiation of a [Widget] at a particular location in the tree.
///
/// Widgets describe how to configure a subtree but the same widget can be used
/// to configure multiple subtrees simultaneously because widgets are immutable.
/// An [Element] represents the use of a widget to configure a specific location
/// in the tree. Over time, the widget associated with a given element can
/// change, for example, if the parent widget rebuilds and creates a new widget
/// for this location.
///
/// Elements form a tree. Most elements have a unique child, but some widgets
/// (e.g., subclasses of [RenderObjectElement]) can have multiple children.
///
/// Elements have the following lifecycle:
///
///  * The framework creates an element by calling [Widget.createElement] on the
///    widget that will be used as the element's initial configuration.
///  * The framework calls [mount] to add the newly created element to the tree
///    at a given slot in a given parent. The [mount] method is responsible for
///    inflating any child widgets and calling [attachRenderObject] as
///    necessary to attach any associated render objects to the render tree.
///  * At this point, the element is considered "active" and might appear on
///    screen.
///  * At some point, the parent might decide to change the widget used to
///    configure this element, for example because the parent rebuilt with new
///    state. When this happens, the framework will call [update] with the new
///    widget. The new widget will always have the same [runtimeType] and key as
///    old widget. If the parent wishes to change the [runtimeType] or key of
///    the widget at this location in the tree, it can do so by unmounting this
///    element and inflating the new widget at this location.
///  * At some point, an ancestor might decide to remove this element (or an
///    intermediate ancestor) from the tree, which the ancestor does by calling
///    [deactivateChild] on itself. Deactivating the intermediate ancestor will
///    remove that element's render object from the render tree and add this
///    element to the [owner]'s list of inactive elements, causing the framework
///    to call [deactivate] on this element.
///  * At this point, the element is considered "inactive" and will not appear
///    on screen. An element can remain in the inactive state only until
///    the end of the current animation frame. At the end of the animation
///    frame, any elements that are still inactive will be unmounted.
///  * If the element gets reincorporated into the tree (e.g., because it or one
///    of its ancestors has a global key that is reused), the framework will
///    remove the element from the [owner]'s list of inactive elements, call
///    [activate] on the element, and reattach the element's render object to
///    the render tree. (At this point, the element is again considered "active"
///    and might appear on screen.)
///  * If the element does not get reincorporated into the tree by the end of
///    the current animation frame, the framework will call [unmount] on the
///    element.
///  * At this point, the element is considered "defunct" and will not be
///    incorporated into the tree in the future. ¿DÅú ¿DØ¿D∂Ää/// Creates an element that uses the given widget as its configuration.
///
/// Typically called by an override of [Widget.createElement].¿D∑¿Dø  ¿D‘¿DÃ¿D÷¿Eæ¿E«  ¿E“$¿EÂ  ¿K‚¿KÍ  ¿M{¿MÑ  ¿Sœ¿S◊  ¿Wë¿Wù  ¿mi=¿m{ ¿mç¿mû¿mü¿Ëo¿Ë( ¿Ë¿Ë¿ËZ¿Ëo¿ËO¿Ë\¿Ëc¿Ëk¿Ëd¿Ël¿Ëm¿Ëq¿$ì=¿$æ  ¿$‘$¿$Î  ¿$¸(¿% ¿%¿J¿J ¿J&¿J…¿JŒ ¿J›¿K"¿K' ¿K9¿J§Å;¿K—Å/// Information set by parent to define where this child fits in its parent's
/// child list.
///
/// A child widget's slot is determined when the parent's [updateChild] method
/// is called to inflate the child widget. See [RenderObjectElement] for more
/// details on slots.   ¿KÙÅÑ¿LïÄî/// An integer that is guaranteed to be greater than the parent's, if any.
/// The element at the root of the tree must have a depth greater than 0.   ¿Q∫Ç¿SπÅ◊/// The configuration for this element.
///
/// Avoid overriding this field on [Element] subtypes to provide a more
/// specific widget type (i.e. [StatelessElement] and [StatelessWidget]).
/// Instead, cast at any call sites where the more specific type is required.
/// This avoids significant cast overhead on the getter which is accessed
/// throughout the framework internals during the build phase - and for which
/// the more specific type information is not used.  ¿S¢¿S£¿S„0¿S¯   ¿S„¿S‰¿TÅÜ¿TÍÄ¡/// Returns true if the Element is defunct.
///
/// This getter always returns false in profile and release builds.
/// See the lifecycle documentation for [Element] for additional information.   ¿U°ÅÄ¿VsÄ¿/// Returns true if the Element is active.
///
/// This getter always returns false in profile and release builds.
/// See the lifecycle documentation for [Element] for additional information.   ¿W%i¿W~:/// The object that manages the lifecycle of this element.  ¿Wb¿Wc¿^JÉù¿`çÇ/// The render object at (or below) this location in the tree.
///
/// If this object is a [RenderObjectElement], the render object is the one at
/// this location in the tree. Otherwise, this getter will walk down the tree
/// until it finds a [RenderObjectElement].
///
/// Some locations in the tree are not backed by a render object. In those
/// cases, this getter returns null. This can happen, if the element is
/// located outside of a [View] since only the element subtree rooted in a
/// view has a render tree associated with it.   ¿aÎÉy¿dïÇy/// Returns the child of this [Element] that will insert a [RenderObject] into
/// an ancestor of this Element to construct the render tree.
///
/// Returns null if this Element doesn't have any children who need to attach
/// a [RenderObject] to an ancestor of this [Element]. A [RenderObjectElement]
/// will therefore return null because its children insert their
/// [RenderObject]s into the [RenderObjectElement] itself and not into an
/// ancestor of the [RenderObjectElement].
///
/// Furthermore, this may return null for [Element]s that hoist their own
/// independent render tree and do not extend the ancestor render tree.  ¿d{¿d|¿¬óÕ¿ÿ   ¿¬¿√¿H˘Å¿JÄ¯/// Returns true if the element has been marked as needing rebuilding.
///
/// The flag is true when the element is first created and after
/// [markNeedsBuild] has been called. The flag is reset to false in the
/// [performRebuild] implementation.   =¿E˚Ñ•¿JuÉ‚/// Compare two widgets for equality.
///
/// When a widget is rebuilt with another that compares equal according
/// to `operator ==`, it is assumed that the update is redundant and the
/// work to update that branch of the tree is skipped.
///
/// It is generally discouraged to override `operator ==` on any widget that
/// has children, since a correct implementation would have to defer to the
/// children's equality operator also, and that is an O(N¬≤) operation: each
/// child would need to itself walk all its children, each step of the tree.
///
/// It is sometimes reasonable for a leaf widget (one with no children) to
/// implement this method, if rebuilding the widget is known to be much more
/// expensive than checking the widgets' parameters for equality and if the
/// widget is expected to often be rebuilt with identical parameters.
///
/// In general, however, it is more efficient to cache the widgets used
/// in a build method if it is known that they will not change. ¿Jx¿JÄ  ¿J¿J¿J¿J¿MèÇ9¿Nb/// Returns result < 0 when [a] < [b], result == 0 when [a] == [b], result > 0
/// when [a] > [b]. ¿N	¿N  ¿N	¿N   ¿QÄû¿Q#  ¿Q9¿QB   ¿W®Ö¿¿\˙Ñ¯/// {@template flutter.widgets.Element.reassemble}
/// Called whenever the application is reassembled during debugging, for
/// example during hot reload.
///
/// This method should rerun any initialization logic that depends on global
/// state, for example, image loading from asset bundles (since the asset
/// bundle may have changed).
///
/// This function will only be called during development. In release builds,
/// the `ext.flutter.reassemble` hook is not available, and so this code will
/// never execute.
///
/// Implementers should not rely on any ordering for hot reload source update,
/// reassemble, and build methods after a hot reload has been initiated. It is
/// possible that a [Timer] (e.g. an [Animation]) or a debugging session
/// attached to the isolate could trigger a build with reloaded code _before_
/// reassemble is called. Code that expects preconditions to be set by
/// reassemble after a hot reload must be resilient to being called out of
/// order, e.g. by fizzling instead of throwing. That said, once reassemble is
/// called, build will be called after it at least once.
/// {@endtemplate}
///
/// See also:
///
///  * [State.reassemble]
///  * [BindingBase.reassembleApplication]
///  * [Image], which uses this to reload images.  ¿\◊¿\ÿ¿\Ë¿\È¿]lÄ⁄¿]q  ¿]Å¿]ä   ¿ehÉh¿eä  ¿e§"¿e≥  ¿eh¿ei¿h‘Åv¿iBT/// Returns a list of [Element]s from the current build context to the error report. ¿iS¿i[  ¿i`¿is   ¿jNÄƒ¿jj  ¿jz¿jÇ  ¿jà?¿jû  ¿jN¿jO¿j•¿jπ¿j∫¿kÄ√¿k2  ¿kA¿kI  ¿kO?¿ke  ¿k¿k¿kl¿kÄ¿kÅ¿k›Å)¿k˘  ¿l¿l  ¿k›¿kﬁ¿m´ÇX¿o⁄Ç/// Calls the argument for each child. Must be overridden by subclasses that
/// support having children.
///
/// There is no guaranteed order in which the children will be visited, though
/// it should be consistent over time.
///
/// Calling this during build is dangerous: the child list might still be
/// being updated at that point, so the children might not be constructed yet,
/// or might be old children that are going to be replaced. This method should
/// only be called if it is provable that the children are available. ¿oË¿o¯   ¿pÉ¡¿s|ÉG/// Calls the argument for each child considered onstage.
///
/// Classes like [Offstage] and [Overlay] override this method to hide their
/// children.
///
/// Being onstage affects the element's discoverability during testing when
/// you use Flutter's [Finder] objects. For example, when you instruct the
/// test framework to tap on a widget, by default the finder will look for
/// onstage elements and ignore the offstage ones.
///
/// The default implementation defers to [visitChildren] and therefore treats
/// the element as onstage.
///
/// See also:
///
///  * [Offstage] widget that hides its children.
///  * [Finder] that skips offstage widgets by default.
///  * [RenderObject.visitChildrenForSemantics], in contrast to this method,
///    designed specifically for excluding parts of the UI from the semantics
///    tree. ¿sñ¿s¶   ¿sÃÇŒ¿t6/// Wrapper around [visitChildren] for [BuildContext]. ¿t)¿t9  ¿t¿t¿vûòÇ¿Àà¶/// Update the given child with the given new configuration.
///
/// This method is the core of the widgets system. It is called each time we
/// are to add, update, or remove a child based on an updated configuration.
///
/// The `newSlot` argument specifies the new value for this element's [slot].
///
/// If the `child` is null, and the `newWidget` is not null, then we have a new
/// child for which we need to create an [Element], configured with `newWidget`.
///
/// If the `newWidget` is null, and the `child` is not null, then we need to
/// remove it because it no longer has a configuration.
///
/// If neither are null, then we need to update the `child`'s configuration to
/// be the new configuration given by `newWidget`. If `newWidget` can be given
/// to the existing child (as determined by [Widget.canUpdate]), then it is so
/// given. Otherwise, the old child needs to be disposed and a new child
/// created for the new configuration.
///
/// If both are null, then we don't have a child and won't have a child, so we
/// do nothing.
///
/// The [updateChild] method returns the new child, if it had to create one,
/// or the child that was passed in, if it just had to update the child, or
/// null, if it removed the child and did not replace it.
///
/// The following table summarizes the above:
///
/// |                     | **newWidget == null**  | **newWidget != null**   |
/// | :-----------------: | :--------------------- | :---------------------- |
/// |  **child == null**  |  Returns null.         |  Returns new [Element]. |
/// |  **child != null**  |  Old child is removed, returns null. | Old child updated if possible, returns child or new [Element]. |
///
/// The `newSlot` argument is used only if `newWidget` is not null. If `child`
/// is null (or if the old child cannot be updated), then the `newSlot` is
/// given to the new [Element] that is created for the child, via
/// [inflateWidget]. If `child` is not null (and the old child _can_ be
/// updated), then the `newSlot` is given to [updateSlotForChild] to update
/// its slot, in case it has moved around since it was last built.
///
/// See the [RenderObjectElement] documentation for more information on slots. ¿◊¿·  ¿Á¿  ¿˙¿Ä  ¿ó¿ò¿§¿•¿´¿æ¿¨¿è$®÷¿õ/ãë/// Updates the children of this element to use new widgets.
///
/// Attempts to update the given old children list using the given new
/// widgets, removing obsolete elements and introducing new ones as necessary,
/// and then returns the new child list.
///
/// During this function the `oldChildren` list must not be modified. If the
/// caller wishes to remove elements from `oldChildren` reentrantly while
/// this function is on the stack, the caller can supply a `forgottenChildren`
/// argument, which can be modified while this function is on the stack.
/// Whenever this function reads from `oldChildren`, this function first
/// checks whether the child is in `forgottenChildren`. If it is, the function
/// acts as if the child was not in `oldChildren`.
///
/// This function is a convenience wrapper around [updateChild], which updates
/// each individual child. If `slots` is non-null, the value for the `newSlot`
/// argument of [updateChild] is retrieved from that list using the index that
/// the currently processed `child` corresponds to in the `newWidgets` list
/// (`newWidgets` and `slots` must have the same length). If `slots` is null,
/// an [IndexedSlot<Element>] is used as the value for the `newSlot` argument.
/// In that case, [IndexedSlot.index] is set to the index that the currently
/// processed `child` corresponds to in the `newWidgets` list and
/// [IndexedSlot.value] is set to the [Element] of the previous widget in that
/// list (or null if it is the first child).
///
/// When the [slot] value of an [Element] changes, its
/// associated [renderObject] needs to move to a new position in the child
/// list of its parents. If that [RenderObject] organizes its children in a
/// linked list (as is done by the [ContainerRenderObjectMixin]) this can
/// be implemented by re-inserting the child [RenderObject] into the
/// list after the [RenderObject] associated with the [Element] provided as
/// [IndexedSlot.value] in the [slot] object.
///
/// Using the previous sibling as a [slot] is not enough, though, because
/// child [RenderObject]s are only moved around when the [slot] of their
/// associated [RenderObjectElement]s is updated. When the order of child
/// [Element]s is changed, some elements in the list may move to a new index
/// but still have the same previous sibling. For example, when
/// `[e1, e2, e3, e4]` is changed to `[e1, e3, e4, e2]` the element e4
/// continues to have e3 as a previous sibling even though its index in the list
/// has changed and its [RenderObject] needs to move to come before e2's
/// [RenderObject]. In order to trigger this move, a new [slot] value needs to
/// be assigned to its [Element] whenever its index in its
/// parent's child list changes. Using an [IndexedSlot<Element>] achieves
/// exactly that and also ensures that the underlying parent [RenderObject]
/// knows where a child needs to move to in a linked list by providing its new
/// previous sibling. ¿õ>¿õM  ¿õY¿õg  ¿õt¿õÉ  ¿õï¿õ•  ¿õ¿õ¿∑˛Ü‚¿ªòÉa/// Add this element to the tree in the given slot of the given parent.
///
/// The framework calls this function when a newly created element is added to
/// the tree for the first time. Use this method to initialize state that
/// depends on having a parent. State that is independent of the parent can
/// more easily be initialized in the constructor.
///
/// This method transitions the element from the "initial" lifecycle state to
/// the "active" lifecycle state.
///
/// Subclasses that override this method are likely to want to also override
/// [update], [visitChildren], [RenderObjectElement.insertRenderObjectChild],
/// [RenderObjectElement.moveRenderObjectChild], and
/// [RenderObjectElement.removeRenderObjectChild].
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.mount(parent, newSlot)`. ¿ªû¿ª®  ¿ªØ¿ª∏  ¿ªÇ¿ªÉ¿æ‰Äí¿æÈ  ¿ø
¿ø   ¿øzÑŸ¿¿ÎÅL/// Change the widget used to configure this element.
///
/// The framework calls this function when the parent wishes to use a
/// different widget to configure this element. The new widget is guaranteed
/// to have the same [runtimeType] as the old widget.
///
/// This function is called only during the "active" lifecycle state. ¿¿Ú¿¡  ¿¿’¿¿÷¿ƒWÇ¶¿≈ÉÅ/// Change the slot that the given child occupies in its parent.
///
/// Called by [MultiChildRenderObjectElement], and other [RenderObjectElement]
/// subclasses that have multiple children, when child moves from one position
/// to another in this element's child list. ¿≈ñ¿≈ü  ¿≈•¿≈Æ  ¿≈q¿≈r¿«Åv¿«©ÄÄ/// Called by [updateSlotForChild] when the framework needs to change the slot
/// that this [Element] occupies in its ancestor. ¿«¥¿«Ω  ¿«Ü¿«á¿«ì¿«î¿»{Ä¯¿»Ä  ¿»ç¿»í   ¿…wÅﬁ¿ €ÅN/// Remove [renderObject] from the render tree.
///
/// The default implementation of this function calls
/// [detachRenderObject] recursively on each child. The
/// [RenderObjectElement.detachRenderObject] override does the actual work of
/// removing [renderObject] from the render tree.
///
/// This is called by [deactivateChild].   ¿ÀYÇT¿Õ Åë/// Add [renderObject] to the render tree at the location specified by `newSlot`.
///
/// The default implementation of this function calls
/// [attachRenderObject] recursively on each child. The
/// [RenderObjectElement.attachRenderObject] override does the actual work of
/// adding [renderObject] to the render tree.
///
/// The `newSlot` argument specifies the new value for this element's [slot]. ¿Õ¿Õ   ¿Õ±à`¿Õ∫  ¿Õ—¿Õ‹  ¿Õ‡¿ÕË   ¿÷ä£¿Ÿ}É/// Create an element for the given widget and add it as a child of this
/// element in the given slot.
///
/// This method is typically called by [updateChild] but can be called
/// directly by subclasses that need finer-grained control over creating
/// elements.
///
/// If the given widget has a global key and an element already exists that
/// has a widget with that global key, this function will reuse that element
/// (potentially grafting it from another location in the tree or reactivating
/// it from the list of inactive elements) rather than creating a new element.
///
/// The `newSlot` argument specifies the new value for this element's [slot].
///
/// The element returned by this function will already have been mounted and
/// will be in the "active" lifecycle state. ¿Ÿã¿Ÿì  ¿Ÿù¿Ÿ¶  ¿ŸJ¿ŸK¿ŸW¿ŸX¿Ÿ^¿Ÿq¿Ÿ_¿‡ºÅ6¿‡¡  ¿‡÷¿‡ﬂ   ¿·ˆÑ⁄¿ÂÇÙ/// Move the given element to the list of inactive elements and detach its
/// render object from the render tree.
///
/// This method stops the given element from being a child of this element by
/// detaching its render object from the render tree and moving the element to
/// the list of inactive elements.
///
/// This method (indirectly) calls [deactivate] on the child.
///
/// The caller is responsible for removing the child from its child model.
/// Typically [deactivateChild] is called by the element itself while it is
/// updating its child model; however, during [GlobalKey] reparenting, the new
/// parent proactively calls the old parent's [deactivateChild], first using
/// [forgetChild] to cause the old parent to update its child model. ¿Â)¿Â2  ¿Â¿Â¿ËzÑˇ¿ÎÇ[/// Remove the given child from the element's child list, in preparation for
/// the child being reused elsewhere in the element tree.
///
/// This updates the child model such that, e.g., [visitChildren] does not
/// walk that child anymore.
///
/// The element will still have a valid parent when this is called, and the
/// child's [Element.slot] value will be valid in the context of that parent.
/// After this is called, [deactivateChild] is called to sever the link to
/// this object.
///
/// The [update] is responsible for updating or creating the new child that
/// will replace this [child]. ¿Î¿Î(  ¿Í¿ÍÒ¿Í˝¿Í˛¿Ì}Å÷¿ÌÇ  ¿Ìñ¿Ìü  ¿Ì¶¿ÌØ   ¿ÔWÅ¿Ôc  ¿Ôx¿ÔÅ   ¿_Ö	¿ÚŒÇB/// Transition from the "inactive" to the "active" lifecycle state.
///
/// The framework calls this method when a previously deactivated element has
/// been reincorporated into the tree. The framework does not call this method
/// the first time an element becomes active (i.e., from the "initial"
/// lifecycle state). Instead, the framework calls [mount] in that situation.
///
/// See the lifecycle documentation for [Element] for additional information.
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.activate()`.  ¿Ú∏¿Úπ¿ılÜv¿¯ÖÇ‰/// Transition from the "active" to the "inactive" lifecycle state.
///
/// The framework calls this method when a previously active element is moved
/// to the list of inactive elements. While in the inactive state, the element
/// will not appear on screen. The element can remain in the inactive state
/// only until the end of the current animation frame. At the end of the
/// animation frame, if the element has not be reactivated, the framework will
/// unmount the element.
///
/// This is (indirectly) called by [deactivateChild].
///
/// See the lifecycle documentation for [Element] for additional information.
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.deactivate()`.  ¿¯o¿¯p¿˚ÊÄ¯¿¸ãÄà/// Called, in debug mode, after children have been deactivated (see [deactivate]).
///
/// This method is not called in release builds.  ¿¸u¿¸v¿¸‚Üá¿ ãÉn/// Transition from the "inactive" to the "defunct" lifecycle state.
///
/// Called when the framework determines that an inactive element will never
/// be reactivated. At the end of each animation frame, the framework calls
/// [unmount] on any remaining inactive elements, preventing inactive elements
/// from remaining inactive for longer than a single animation frame.
///
/// After this function is called, the element will not be incorporated into
/// the tree again.
///
/// Any resources this element holds should be released at this point. For
/// example, [RenderObjectElement.unmount] calls [RenderObject.dispose] and
/// nulls out its reference to the render object.
///
/// See the lifecycle documentation for [Element] for additional information.
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.unmount()`.  ¿ u¿ v¿mÜ4¿	kÖ∆/// Whether the child in the provided `slot` (or one of its descendants) must
/// insert a [RenderObject] into its ancestor [RenderObjectElement] by calling
/// [RenderObjectElement.insertRenderObjectChild] on it.
///
/// This method is used to define non-rendering zones in the element tree (see
/// [WidgetsBinding] for an explanation of rendering and non-rendering zones):
///
/// Most branches of the [Element] tree are expected to eventually insert a
/// [RenderObject] into their [RenderObjectElement] ancestor to construct the
/// render tree. However, there is a notable exception: an [Element] may
/// expect that the occupant of a certain child slot creates a new independent
/// render tree and therefore is not allowed to insert a render object into
/// the existing render tree. Those elements must return false from this
/// method for the slot in question to signal to the child in that slot that
/// it must not call [RenderObjectElement.insertRenderObjectChild] on its
/// ancestor.
///
/// As an example, the element backing the [ViewAnchor] returns false from
/// this method for the [ViewAnchor.view] slot to enforce that it is occupied
/// by e.g. a [View] widget, which will ultimately bootstrap a separate
/// render tree for that view. Another example is the [ViewCollection] widget,
/// which returns false for all its slots for the same reason.
///
/// Overriding this method is not common, as elements behaving in the way
/// described above are rare. ¿	ã¿	î   ¿	•É¿	ø   ¿	•¿	¶¿%)ÇÎ¿%.    ¿(ÄË¿(ÑW/// Returns `true` if [dependOnInheritedElement] was previously called with [ancestor]. ¿(°¿(≥  ¿(r¿(s¿)Å¿)   ¿)9¿)K  ¿)V¿)_  ¿)¿)¿*$Å°¿*3 ¿*V¿*V¿*r¿*{  ¿*$¿*%¿+…Äñ¿+ÿ ¿+ˆ¿+ˆ ¿+…¿+ ¿,cÅ¿,Å ¿,©¿,© ¿,c¿,d¿-ÄÇ ¿/.Åâ/// Called in [Element.mount] and [Element.activate] to register this element in
/// the notification tree.
///
/// This method is only exposed so that [NotifiableElementMixin] can be implemented.
/// Subclasses of [Element] that wish to respond to notifications should mix that
/// in instead.
///
/// See also:
///   * [NotificationListener], a widget that allows listening to notifications.  ¿/¿/¿/ÑÄé¿/â    ¿0Å/¿0% ¿0C¿0C ¿0¿0¿1IÅæ¿1X ¿1p¿1p ¿1I¿1J¿3Å≥¿3 ¿36¿36 ¿3¿3¿4¬Å~¿4— ¿4¿4 ¿4¬¿4√¿6DÅ¿6U  ¿6k!¿6Ü  ¿6D¿6E¿7NÇ›¿9PÅ€/// Called when a dependency of this element changes.
///
/// The [dependOnInheritedWidgetOfExactType] registers this element as depending on
/// inherited information of the given type. When the information of that type
/// changes at this location in the tree (e.g., because the [InheritedElement]
/// updated to a new [InheritedWidget] and
/// [InheritedWidget.updateShouldNotify] returned true), the framework calls
/// this function to notify this element of the change.  ¿9:¿9;¿:/É%¿:4  ¿:V¿:^   ¿=XÅ ¿=·{/// Returns a description of what caused this element to be created.
///
/// Useful for debugging the source of an element. ¿=ˆ	¿=˚   ¿?&Å¥¿@ÄÀ/// Returns the parent chain from this element back to the root of the tree.
///
/// Useful for debug display of a tree of Elements with only nodes in the path
/// from the root to this Element expanded.   ¿@ﬁÄÅ¿@Ô  ¿A¿A  ¿@ﬁ¿@ﬂ¿AcÄõ¿A™1/// A short, textual description of this element.  ¿Aó¿Aò¿BÄÕ¿B  ¿B2¿B;  ¿B@¿BW  ¿B¿B¿B”Ö/¿B‰  ¿B¯&¿C  ¿B”¿B‘¿HÄÔ¿H(   ¿H¿H¿KCä5¿L∞ÅY/// Marks the element as dirty and adds it to the global list of widgets to
/// rebuild in the next frame.
///
/// Since it is inefficient to build an element twice in one frame,
/// applications and widgets should be structured so as to only mark
/// widgets dirty during event handlers before the frame begins, not during
/// the build itself.   ¿U|õ
¿l,ï∑/// Cause the widget to update itself. In debug builds, also verify various
/// invariants.
///
/// Called by the [BuildOwner] when [BuildOwner.scheduleBuildFor] has been
/// called to mark this element dirty, by [mount] when the element is first
/// built, and by [update] when the widget has changed.
///
/// The method will only rebuild if [dirty] is true. To rebuild regardless
/// of the [dirty] flag, set `force` to true. Forcing a rebuild is convenient
/// from [update], during which [dirty] is false.
///
/// ## When rebuilds happen
///
/// ### Terminology
///
/// [Widget]s represent the configuration of [Element]s. Each [Element] has a
/// widget, specified in [Element.widget]. The term "widget" is often used
/// when strictly speaking "element" would be more correct.
///
/// While an [Element] has a current [Widget], over time, that widget may be
/// replaced by others. For example, the element backing a [ColoredBox] may
/// first have as its widget a [ColoredBox] whose [ColoredBox.color] is blue,
/// then later be given a new [ColoredBox] whose color is green.
///
/// At any particular time, multiple [Element]s in the same tree may have the
/// same [Widget]. For example, the same [ColoredBox] with the green color may
/// be used in multiple places in the widget tree at the same time, each being
/// backed by a different [Element].
///
/// ### Marking an element dirty
///
/// An [Element] can be marked dirty between frames. This can happen for various
/// reasons, including the following:
///
/// * The [State] of a [StatefulWidget] can cause its [Element] to be marked
///   dirty by calling the [State.setState] method.
///
/// * When an [InheritedWidget] changes, descendants that have previously
///   subscribed to it will be marked dirty.
///
/// * During a hot reload, every element is marked dirty (using [Element.reassemble]).
///
/// ### Rebuilding
///
/// Dirty elements are rebuilt during the next frame. Precisely how this is
/// done depends on the kind of element. A [StatelessElement] rebuilds by
/// using its widget's [StatelessWidget.build] method. A [StatefulElement]
/// rebuilds by using its widget's state's [State.build] method. A
/// [RenderObjectElement] rebuilds by updating its [RenderObject].
///
/// In many cases, the end result of rebuilding is a single child widget
/// or (for [MultiChildRenderObjectElement]s) a list of children widgets.
///
/// These child widgets are used to update the [widget] property of the
/// element's child (or children) elements. The new [Widget] is considered to
/// correspond to an existing [Element] if it has the same [Type] and [Key].
/// (In the case of [MultiChildRenderObjectElement]s, some effort is put into
/// tracking widgets even when they change order; see
/// [RenderObjectElement.updateChildren].)
///
/// If there was no corresponding previous child, this results in a new
/// [Element] being created (using [Widget.createElement]); that element is
/// then itself built, recursively.
///
/// If there was a child previously but the build did not provide a
/// corresponding child to update it, then the old child is discarded (or, in
/// cases involving [GlobalKey] reparenting, reused elsewhere in the element
/// tree).
///
/// The most common case, however, is that there was a corresponding previous
/// child. This is handled by asking the child [Element] to update itself
/// using the new child [Widget]. In the case of [StatefulElement]s, this
/// is what triggers [State.didUpdateWidget].
///
/// ### Not rebuilding
///
/// Before an [Element] is told to update itself with a new [Widget], the old
/// and new objects are compared using `operator ==`.
///
/// In general, this is equivalent to doing a comparison using [identical] to
/// see if the two objects are in fact the exact same instance. If they are,
/// and if the element is not already marked dirty for other reasons, then the
/// element skips updating itself as it can determine with certainty that
/// there would be no value in updating itself or its descendants.
///
/// It is strongly advised to avoid overriding `operator ==` on [Widget]
/// objects. While doing so seems like it could improve performance, in
/// practice, for non-leaf widgets, it results in O(N¬≤) behavior. This is
/// because by necessity the comparison would have to include comparing child
/// widgets, and if those child widgets also implement `operator ==`, it
/// ultimately results in a complete walk of the widget tree... which is then
/// repeated at each level of the tree. In practice, just rebuilding is
/// cheaper. (Additionally, if _any_ subclass of [Widget] used in an
/// application implements `operator ==`, then the compiler cannot inline the
/// comparison anywhere, because it has to treat the call as virtual just in
/// case the instance happens to be one that has an overridden operator.)
///
/// Instead, the best way to avoid unnecessary rebuilds is to cache the
/// widgets that are returned from [State.build], so that each frame the same
/// widgets are used until such time as they change. Several mechanisms exist
/// to encourage this: `const` widgets, for example, are a form of automatic
/// caching (if a widget is constructed using the `const` keyword, the same
/// instance is returned each time it is constructed with the same arguments).
///
/// Another example is the [AnimatedBuilder.child] property, which allows the
/// non-animating parts of a subtree to remain static even as the
/// [AnimatedBuilder.builder] callback recreates the other components. ¿l5¿l;  ¿l	¿l
¿l¿l#¿l¿lB¿päÅ¿qeÄ≠/// Cause the widget to update itself.
///
/// Called by [rebuild] after the appropriate checks have been made.
///
/// The base implementation only clears the [dirty] flag.  ¿qB¿qC¿qO¿qP ¿qìÇa¿qô  ¿q€Äç ¿q€¿q˘ ¿r 
¿r  ¿r¿r(  ¿r2¿rB  ¿rL¿rR  ¿r\¿rl¿rw   ¿rÑÅn¿r•  ¿rØ)¿r—  ¿rÑ¿rÖ ¿vìE¿y˛É‹/// A widget that renders an exception's message.
///
/// This widget is used when a build method fails, to help with determining
/// where the problem lies. Exceptions are also logged to the console, which you
/// can read using `flutter logs`. The console will also include additional
/// information such as the stack trace for the exception.
///
/// It is possible to override this widget.
///
/// {@tool dartpad}
/// This example shows how to override the standard error widget builder in release
/// mode, but use the standard one in debug mode.
///
/// The error occurs when you click the "Error Prone" button.
///
/// ** See code in examples/api/lib/widgets/framework/error_widget.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [FlutterError.onError], which can be set to a method that exits the
///    application if that is preferable to showing an error message.
///  * <https://flutter.dev/docs/testing/errors>, more information about error
///    handling in Flutter. ¿z-Çl ¿{Ú¿{˝Å≤/// Creates a widget that displays the given exception.
///
/// The message will be the stringification of the given exception, unless
/// computing that value itself throws an exception, in which case it will
/// be the string "Error".
///
/// If this object is inspected from an IDE or the devtools, and the original
/// exception is a [FlutterError] object, the original exception itself will
/// be shown in the inspection output.¿{˛¿|  ¿|¿|¿| ¿|*¿|4¿|+¿|K¿|=¿|g¿|s¿|W¿|M¿|Z¿|i¿|u¿|Å¿|Ü¿|ó¿|ä¿|á¿|å¿|ï¿|ñ¿|ùÅ=¿}f¿}g¿}rÄµ/// Creates a widget that displays the given error message.
///
/// An explicit [FlutterError] can be provided to be reported to inspection
/// tools. It need not match the message.¿}u¿}{  ¿}à¿}ó  ¿}Ñ¿}≥¿}•¿}µ¿}¬¿}«¿}ÿ¿}À¿}»¿}Õ¿}÷¿}◊¿}ﬁÜ?¿É˘Ö∆/// The configurable factory for [ErrorWidget].
///
/// When an error occurs while building a widget, the broken widget is
/// replaced by the widget returned by this function. By default, an
/// [ErrorWidget] is returned.
///
/// The system is typically in an unstable state when this function is called.
/// An exception has just been thrown in the middle of build (and possibly
/// layout), so surrounding widgets and render objects may be in a rather
/// fragile state. The framework itself (especially the [BuildOwner]) may also
/// be confused, and additional exceptions are quite likely to be thrown.
///
/// Because of this, it is highly recommended that the widget returned from
/// this function perform the least amount of work possible. A
/// [LeafRenderObjectWidget] is the best choice, especially one that
/// corresponds to a [RenderBox] that can handle the most absurd of incoming
/// constraints. The default constructor maps to a [RenderErrorBox].
///
/// The default behavior is to show the exception's message in debug mode,
/// and to show nothing but a gray background in release builds.
///
/// See also:
///
///  * [FlutterError.onError], which is typically called with the same
///    [FlutterErrorDetails] object immediately prior to this callback being
///    invoked, and which can also be configured to control how errors are
///    reported.
///  * <https://flutter.dev/docs/testing/errors>, more information about error
///    handling in Flutter.¿Ñ¿áK2¿áv/// The message to display. ¿áÅ!¿áï   ¿Ñ"Åì¿Ñ0  ¿ÑK¿Ñ`   ¿ÖπÅé¿Ö«  ¿Ö“¿Ö€   ¿áßZ¿áΩ  ¿á–¿áﬁ  ¿áß¿á®¿àÅY¿à  ¿à*&¿àG  ¿à¿à ¿ìäåú¿îâÄÔ/// An [Element] that composes other [Element]s.
///
/// Rather than creating a [RenderObject] directly, a [ComponentElement] creates
/// [RenderObject]s indirectly by creating other [Element]s.
///
/// Contrast with [RenderObjectElement]. ¿îÆi ¿î¯¿ïG/// Creates an element that uses the given widget as its configuration.¿ï	¿ï   ¿ï¿ï$  ¿ï/¿ï4 ¿ïG¿ïP9¿ïe   ¿ïP¿ïQ¿ïç>¿ï¶   ¿ïç¿ïé¿ïœÄ‰¿ï‡  ¿ïÊ¿ï  ¿ï˜¿ñ   ¿ïœ¿ï–¿ñ∑Ä†¿ñº    ¿ó[Ü˛¿ò¸ÅV/// Calls the [StatelessWidget.build] method of the [StatelessWidget] object
/// (for stateless widgets) or the [State.build] method of the [State] object
/// (for stateful widgets) and then updates the widget tree.
///
/// Called automatically during [mount] to generate the first build, and by
/// [rebuild] when the element needs updating.  ¿òæ¿òø¿ò ¿òÀ¿ò—¿òÛ¿ò“¿û]ÄÃ¿ü!Ä©/// Subclasses should override this function to actually call the appropriate
/// `build` function (e.g., [StatelessWidget.build] or [State.build]) for
/// their widget.  ¿ü¿ü¿ü-t¿ü>  ¿üL¿ü\  ¿ü-¿ü.¿ü•¿ü∂  ¿ü¬¿üÀ  ¿ü•¿ü¶ ¿†(Å“¿†sD/// An [Element] that uses a [StatelessWidget] as its configuration. ¿†°y ¿†Î¿†˚G/// Creates an element that uses the given widget as its configuration.¿†¸¿°     ¿°F¿°1   ¿°¿°¿°hÄê¿°y  ¿°Ä¿°ë  ¿°h¿°i ¿°¸£≤¿¢FC/// An [Element] that uses a [StatefulWidget] as its configuration. ¿¢sÑf ¿¢Ω¿¢ÃG/// Creates an element that uses the given widget as its configuration.¿¢Õ¿¢›  ¿¢Û¿¢Ï¿¢ı¿¢˚¿¢¸¿£¿£¿£¿£¿£¿£¿®K¿®b  ¿¡ÇX¿√HÇ"/// This controls whether we should call [State.didChangeDependencies] from
/// the start of [build], to avoid calls when the [State] will not get built.
/// This can happen when the widget has dropped out of the tree, but depends
/// on an [InheritedWidget] that is still in the tree.
///
/// It is set initially to false, since [_firstBuild] makes the initial call
/// on the [state]. When it is true, [build] will call
/// `state.didChangeDependencies` and then sets it to false. Subsequent calls
/// to [didChangeDependencies] set it to true.¿√a¿ßÅ7¿®7Å/// The [State] instance associated with this location in the tree.
///
/// There is a one-to-one relationship between [State] objects and the
/// [StatefulElement] objects that hold them. The [State] objects are created
/// by [StatefulElement] in [mount].   ¿¶›0¿¶   ¿¶›¿¶ﬁ¿®mS¿®~   ¿®m¿®n¿®ƒÉÁ¿®’   ¿®ƒ¿®≈¿¨ØÄ∂¿¨¿   ¿¨Ø¿¨∞¿≠iÉÑ¿≠z  ¿≠Å¿≠ë  ¿≠i¿≠j¿∞ÒÅô¿±   ¿∞Ò¿∞Ú¿≤éS¿≤ü   ¿≤é¿≤è¿≤ÂÇŸ¿≤ˆ   ¿≤Â¿≤Ê¿µ¬ãH¿µﬁ  ¿µ˜¿∂   ¿∂¿∂  ¿µ¬¿µ√¿√kt¿√|   ¿√k¿√l¿√„Ä„¿√ˇ  ¿ƒ¿ƒ  ¿ƒ!¿ƒ8  ¿√„¿√‰¿ƒ Ä‚¿ƒ€  ¿ƒÔ&¿≈  ¿ƒ ¿ƒÀ ¿≈∞Ñù¿∆ @/// An [Element] that uses a [ProxyWidget] as its configuration. ¿∆*P ¿∆S¿∆_&/// Initializes fields for subclasses.¿∆`¿∆s     ¿∆~<¿∆ë   ¿∆~¿∆¿∆æÄ˛¿∆œ  ¿∆÷¿∆„  ¿∆æ¿∆ø¿«¿ÅW¿»ÀÄÓ/// Called during build when the [widget] has changed.
///
/// By default, calls [notifyClients]. Subclasses may override this method to
/// avoid calling [notifyClients] unnecessarily (e.g. if the old and new
/// widgets are equivalent). ¿»”¿»Í  ¿»π¿»∫¿…Å0¿ Ä‰/// Notify other objects that the widget associated with this element has
/// changed.
///
/// Called during [update] (via [updated]) after changing the widget
/// associated with this element but before rebuilding this element. ¿ *¿ A  ¿ 
¿  ¿ OåL¿ õE/// An [Element] that uses a [ParentDataWidget] as its configuration.¿ ≠¿ ≠¿ ‹~ ¿À&¿À7G/// Creates an element that uses the given widget as its configuration.¿À8 ¿ÀS    ¿À^Å¥¿Ã%Ä≥/// Returns the [Type] of [ParentData] that this element has been configured
/// for.
///
/// This is only available in debug mode. It will throw in profile and
/// release modes.   ¿ÕÅ8¿Õ  ¿Õ,¿ÕA   ¿ŒRáÀ¿’MÜµ/// Calls [ParentDataWidget.applyParentData] on the given widget, passing it
/// the [RenderObject] whose parent data this element is ultimately
/// responsible for.
///
/// This allows a render object's [RenderObject.parentData] to be modified
/// without triggering a build. This is generally ill-advised, but makes sense
/// in situations such as the following:
///
///  * Build and layout are currently under way, but the [ParentData] in question
///    does not affect layout, and the value to be applied could not be
///    determined before build and layout (e.g. it depends on the layout of a
///    descendant).
///
///  * Paint is currently under way, but the [ParentData] in question does not
///    affect layout or paint, and the value to be applied could not be
///    determined before paint (e.g. it depends on the compositing phase).
///
/// In either case, the next build is expected to cause this element to be
/// configured with the given new widget (or a widget with equivalent data).
///
/// Only [ParentDataWidget]s that return true for
/// [ParentDataWidget.debugCanApplyOutOfTurn] can be applied this way.
///
/// The new widget must have the same child as the current widget.
///
/// An example of when this is used is the [AutomaticKeepAlive] widget. If it
/// receives a notification during the build of one of its descendants saying
/// that its child must be kept alive, it will apply a [KeepAlive] widget out
/// of turn. This is safe, because by definition the child is already alive,
/// and therefore this will not change the behavior of the parent this frame.
/// It is more efficient than requesting an additional frame just for the
/// purpose of updating the [KeepAlive] widget. ¿’b¿’w   ¿÷!x¿÷2  ¿÷@¿÷U  ¿÷!¿÷" ¿÷ùú†¿÷ÈE/// An [Element] that uses an [InheritedWidget] as its configuration. ¿◊y ¿◊]¿◊mG/// Creates an element that uses the given widget as its configuration.¿◊n¿◊Ö   ¿◊êE¿◊¨ ¿◊∫¿◊¡¿◊“¿◊¬¿◊À¿◊—¿◊”¿◊‘ 	¿◊⁄ÅR¿◊Î   ¿◊⁄¿◊€¿Ÿ0Äó¿ŸA   ¿Ÿ0¿Ÿ1¿ŸÀÑ∞¿ﬁ0Ñ/// Returns the dependencies value recorded for [dependent]
/// with [setDependencies].
///
/// Each dependent element is mapped to a single object value
/// which represents how the element depends on this
/// [InheritedElement]. This value is null by default and by default
/// dependent elements are rebuilt unconditionally.
///
/// Subclasses can manage these values with [updateDependencies]
/// so that they can selectively rebuild dependents in
/// [notifyDependent].
///
/// This method is typically only called in overrides of [updateDependencies].
///
/// See also:
///
///  * [updateDependencies], which is called each time a dependency is
///    created with [dependOnInheritedWidgetOfExactType].
///  * [setDependencies], which sets dependencies value for a dependent
///    element.
///  * [notifyDependent], which can be overridden to use a dependent's
///    dependencies value to decide if the dependent needs to be rebuilt.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿ﬁ@¿ﬁI  ¿ﬁ¿ﬁ¿ﬁÑ ¿‚ÓÑ0/// Sets the value returned by [getDependencies] value for [dependent].
///
/// Each dependent element is mapped to a single object value
/// which represents how the element depends on this
/// [InheritedElement]. The [updateDependencies] method sets this value to
/// null by default so that dependent elements are rebuilt unconditionally.
///
/// Subclasses can manage these values with [updateDependencies]
/// so that they can selectively rebuild dependents in [notifyDependent].
///
/// This method is typically only called in overrides of [updateDependencies].
///
/// See also:
///
///  * [updateDependencies], which is called each time a dependency is
///    created with [dependOnInheritedWidgetOfExactType].
///  * [getDependencies], which returns the current value for a dependent
///    element.
///  * [notifyDependent], which can be overridden to use a dependent's
///    [getDependencies] value to decide if the dependent needs to be rebuilt.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿‚˛¿„  ¿„¿„  ¿‚‹¿‚›¿„MÑä¿ÁvÉÍ/// Called by [dependOnInheritedWidgetOfExactType] when a new [dependent] is added.
///
/// Each dependent element can be mapped to a single object value with
/// [setDependencies]. This method can lookup the existing dependencies with
/// [getDependencies].
///
/// By default this method sets the inherited dependencies for [dependent]
/// to null. This only serves to record an unconditional dependency on
/// [dependent].
///
/// Subclasses can manage their own dependencies values so that they
/// can selectively rebuild dependents in [notifyDependent].
///
/// See also:
///
///  * [getDependencies], which returns the current value for a dependent
///    element.
///  * [setDependencies], which sets the value for a dependent element.
///  * [notifyDependent], which can be overridden to use a dependent's
///    dependencies value to decide if the dependent needs to be rebuilt.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿Áâ¿Áí  ¿Áú¿Á•  ¿Ád¿Áe¿Á€ÉF¿Í≠Çü/// Called by [notifyClients] for each dependent.
///
/// Calls `dependent.didChangeDependencies()` by default.
///
/// Subclasses can override this method to selectively call
/// [didChangeDependencies] based on the value of [getDependencies].
///
/// See also:
///
///  * [updateDependencies], which is called each time a dependency is
///    created with [dependOnInheritedWidgetOfExactType].
///  * [getDependencies], which returns the current value for a dependent
///    element.
///  * [setDependencies], which sets the value for a dependent element.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿ÍΩ#¿Íÿ  ¿Í‚¿ÍÎ  ¿Íõ¿Íú¿Î%Åˆ¿Ï–Åy/// Called by [Element.deactivate] to remove the provided `dependent` [Element] from this [InheritedElement].
///
/// After the dependent is removed, [Element.didChangeDependencies] will no
/// longer be called on it when this [InheritedElement] notifies its dependents.
///
/// Subclasses can override this method to release any resources retained for
/// a given [dependent]. ¿Ï‡¿ÏÈ  ¿Ï≠¿ÏÆ¿Ï∫¿Ïª¿ÌÅÆ¿Ó:Ä˝/// Calls [Element.didChangeDependencies] of all dependent elements, if
/// [InheritedWidget.updateShouldNotify] returns true.
///
/// Called by [update], immediately prior to [build].
///
/// Calls [notifyClients] to actually trigger the notifications. ¿ÓB¿ÓS  ¿Ó)¿Ó*¿Ó—Ñj¿˜Å˛/// Notifies all dependent elements that this inherited widget has changed, by
/// calling [Element.didChangeDependencies].
///
/// This method must only be called during the build phase. Usually this
/// method is called automatically when an inherited widget is rebuilt, e.g.
/// as a result of calling [State.setState] above the inherited widget.
///
/// See also:
///
///  * [InheritedNotifier], a subclass of [InheritedWidget] that also calls
///    this method when its [Listenable] sends a notification. ¿Ò¿Ò  ¿Ê¿Á ¿Û?¿ Y¬¿ñ°G/// An [Element] that uses a [RenderObjectWidget] as its configuration.
///
/// [RenderObjectElement] objects have an associated [RenderObject] widget in
/// the render tree, which handles concrete operations like laying out,
/// painting, and hit testing.
///
/// Contrast with [ComponentElement].
///
/// For details on the lifecycle of an element, see the discussion at [Element].
///
/// ## Writing a RenderObjectElement subclass
///
/// There are three common child models used by most [RenderObject]s:
///
/// * Leaf render objects, with no children: The [LeafRenderObjectElement] class
///   handles this case.
///
/// * A single child: The [SingleChildRenderObjectElement] class handles this
///   case.
///
/// * A linked list of children: The [MultiChildRenderObjectElement] class
///   handles this case.
///
/// Sometimes, however, a render object's child model is more complicated. Maybe
/// it has a two-dimensional array of children. Maybe it constructs children on
/// demand. Maybe it features multiple lists. In such situations, the
/// corresponding [Element] for the [Widget] that configures that [RenderObject]
/// will be a new subclass of [RenderObjectElement].
///
/// Such a subclass is responsible for managing children, specifically the
/// [Element] children of this object, and the [RenderObject] children of its
/// corresponding [RenderObject].
///
/// ### Specializing the getters
///
/// [RenderObjectElement] objects spend much of their time acting as
/// intermediaries between their [widget] and their [renderObject]. It is
/// generally recommended against specializing the [widget] getter and
/// instead casting at the various call sites to avoid adding overhead
/// outside of this particular implementation.
///
/// ```dart
/// class FooElement extends RenderObjectElement {
///   FooElement(super.widget);
///
///   // Specializing the renderObject getter is fine because
///   // it is not performance sensitive.
///   @override
///   RenderFoo get renderObject => super.renderObject as RenderFoo;
///
///   void _foo() {
///     // For the widget getter, though, we prefer to cast locally
///     // since that results in better overall performance where the
///     // casting isn't needed:
///     final Foo foo = widget as Foo;
///     // ...
///   }
///
///   // ...
/// }
/// ```
///
/// ### Slots
///
/// Each child [Element] corresponds to a [RenderObject] which should be
/// attached to this element's render object as a child.
///
/// However, the immediate children of the element may not be the ones that
/// eventually produce the actual [RenderObject] that they correspond to. For
/// example, a [StatelessElement] (the element of a [StatelessWidget])
/// corresponds to whatever [RenderObject] its child (the element returned by
/// its [StatelessWidget.build] method) corresponds to.
///
/// Each child is therefore assigned a _[slot]_ token. This is an identifier whose
/// meaning is private to this [RenderObjectElement] node. When the descendant
/// that finally produces the [RenderObject] is ready to attach it to this
/// node's render object, it passes that slot token back to this node, and that
/// allows this node to cheaply identify where to put the child render object
/// relative to the others in the parent render object.
///
/// A child's [slot] is determined when the parent calls [updateChild] to
/// inflate the child (see the next section). It can be updated by calling
/// [updateSlotForChild].
///
/// ### Updating children
///
/// Early in the lifecycle of an element, the framework calls the [mount]
/// method. This method should call [updateChild] for each child, passing in
/// the widget for that child, and the slot for that child, thus obtaining a
/// list of child [Element]s.
///
/// Subsequently, the framework will call the [update] method. In this method,
/// the [RenderObjectElement] should call [updateChild] for each child, passing
/// in the [Element] that was obtained during [mount] or the last time [update]
/// was run (whichever happened most recently), the new [Widget], and the slot.
/// This provides the object with a new list of [Element] objects.
///
/// Where possible, the [update] method should attempt to map the elements from
/// the last pass to the widgets in the new pass. For example, if one of the
/// elements from the last pass was configured with a particular [Key], and one
/// of the widgets in this new pass has that same key, they should be paired up,
/// and the old element should be updated with the widget (and the slot
/// corresponding to the new widget's new position, also). The [updateChildren]
/// method may be useful in this regard.
///
/// [updateChild] should be called for children in their logical order. The
/// order can matter; for example, if two of the children use [PageStorage]'s
/// `writeState` feature in their build method (and neither has a [Widget.key]),
/// then the state written by the first will be overwritten by the second.
///
/// #### Dynamically determining the children during the build phase
///
/// The child widgets need not necessarily come from this element's widget
/// verbatim. They could be generated dynamically from a callback, or generated
/// in other more creative ways.
///
/// #### Dynamically determining the children during layout
///
/// If the widgets are to be generated at layout time, then generating them in
/// the [mount] and [update] methods won't work: layout of this element's render
/// object hasn't started yet at that point. Instead, the [update] method can
/// mark the render object as needing layout (see
/// [RenderObject.markNeedsLayout]), and then the render object's
/// [RenderObject.performLayout] method can call back to the element to have it
/// generate the widgets and call [updateChild] accordingly.
///
/// For a render object to call an element during layout, it must use
/// [RenderObject.invokeLayoutCallback]. For an element to call [updateChild]
/// outside of its [update] method, it must use [BuildOwner.buildScope].
///
/// The framework provides many more checks in normal operation than it does
/// when doing a build during layout. For this reason, creating widgets with
/// layout-time build semantics should be done with great care.
///
/// #### Handling errors when building
///
/// If an element calls a builder function to obtain widgets for its children,
/// it may find that the build throws an exception. Such exceptions should be
/// caught and reported using [FlutterError.reportError]. If a child is needed
/// but a builder has failed in this way, an instance of [ErrorWidget] can be
/// used instead.
///
/// ### Detaching children
///
/// It is possible, when using [GlobalKey]s, for a child to be proactively
/// removed by another element before this element has been updated.
/// (Specifically, this happens when the subtree rooted at a widget with a
/// particular [GlobalKey] is being moved from this element to an element
/// processed earlier in the build phase.) When this happens, this element's
/// [forgetChild] method will be called with a reference to the affected child
/// element.
///
/// The [forgetChild] method of a [RenderObjectElement] subclass must remove the
/// child element from its child list, so that when it next [update]s its
/// children, the removed child is not considered.
///
/// For performance reasons, if there are many elements, it may be quicker to
/// track which elements were forgotten by storing them in a [Set], rather than
/// proactively mutating the local record of the child list and the identities
/// of all the slots. For example, see the implementation of
/// [MultiChildRenderObjectElement].
///
/// ### Maintaining the render object tree
///
/// Once a descendant produces a render object, it will call
/// [insertRenderObjectChild]. If the descendant's slot changes identity, it
/// will call [moveRenderObjectChild]. If a descendant goes away, it will call
/// [removeRenderObjectChild].
///
/// These three methods should update the render tree accordingly, attaching,
/// moving, and detaching the given child render object from this element's own
/// render object respectively.
///
/// ### Walking the children
///
/// If a [RenderObjectElement] object has any children [Element]s, it must
/// expose them in its implementation of the [visitChildren] method. This method
/// is used by many of the framework's internal mechanisms, and so should be
/// fast. It is also used by the test framework and [debugDumpApp]. ¿æ ¿¿G/// Creates an element that uses the given widget as its configuration.¿¿6   ¿K¿Y  ¿´¿∞ ¿√¿	1¿  ¿AÅ¿ﬁy/// The underlying [RenderObject] for this element.
///
/// If this element has been [unmount]ed, this getter will throw.  ¿¡¿¬¿k<¿Ñ   ¿k¿l¿Ã9¿·   ¿Ã¿Õ¿?É[¿T    ¿ûãŸ¿£  ¿∆*¿Î  ¿ˆ¿  ¿¿#  ¿< ¿H   ¿&{â ¿&ü    ¿/üÇ;¿/∞  ¿/∂¿/¿  ¿/«¿/–  ¿/ü¿/†¿1ﬁÅ¿1Ô  ¿1ˆ&¿2  ¿1ﬁ¿1ﬂ¿2ıÄç¿2˙    ¿3ÜÄú¿3ó   ¿3Ü¿3á¿4&ÅU¿4I   ¿4&¿4'¿4-¿4@¿4.¿5ÄÂ¿5ê   ¿5¿5Ä¿6hÇ/¿6y   ¿6h¿6i¿8õÑ‰¿8†  ¿8≤-¿8–   ¿=ÉÅV¿=î  ¿=ü¿=®  ¿=É¿=Ñ¿>›Ö¿>Ó  ¿?¿?
  ¿>›¿>ﬁ¿CÙÄÔ¿D   ¿CÙ¿Cı¿DÁÇ3¿FÃÅ¬/// Insert the given child into [renderObject] at the given slot.
///
/// {@template flutter.widgets.RenderObjectElement.insertRenderObjectChild}
/// The semantics of `slot` are determined by this element. For example, if
/// this element has a single child, the slot should always be null. If this
/// element has a list of children, the previous sibling element wrapped in an
/// [IndexedSlot] is a convenient value for the slot.
/// {@endtemplate} ¿F‰¿F¸  ¿G¿G  ¿F∫¿Fª¿GÉﬂ¿JìÉF/// Move the given child from the given old slot to the given new slot.
///
/// The given child is guaranteed to have [renderObject] as its parent.
///
/// {@macro flutter.widgets.RenderObjectElement.insertRenderObjectChild}
///
/// This method is only ever called if [updateChild] can end up being called
/// with an existing [Element] child and a `slot` that differs from the slot
/// that element was previously given. [MultiChildRenderObjectElement] does this,
/// for example. [SingleChildRenderObjectElement] does not (since the `slot` is
/// always null). An [Element] that has a specific set of slots with each child
/// always having the same slot (and where children in different slots are never
/// compared against each other for the purposes of updating one slot with the
/// element from another slot) would never call this. ¿J©¿J¡  ¿J«¿J⁄  ¿J‚¿Jı  ¿JÅ¿JÇ¿KÅ¿K∆Ä™/// Remove the given child from [renderObject].
///
/// The given child is guaranteed to have been inserted at the given `slot`
/// and have [renderObject] as its parent. ¿Kﬁ¿Kˆ  ¿K¸¿L  ¿K¥¿Kµ¿LÄÁ¿L)  ¿L=&¿LZ  ¿L¿L ¿MÇZ¿NMÄ—/// Deprecated. Unused in the framework and will be removed in a future version
/// of Flutter.
///
/// Classes that extend this class can extend [RenderObjectElement] and mixin
/// [RootElementMixin] instead. ¿NõÄ¿ ¿O5¿OL&/// Initializes fields for subclasses.¿OM¿OT  ¿Nƒ¿N≈¿Nœ¿O1¿N’¿N˙   ¿M’¿M÷¿M‡¿N<¿M‰¿N¿SÄÉ.¿S“K/// An [Element] that uses a [LeafRenderObjectWidget] as its configuration. ¿T
Äá ¿TT¿TkG/// Creates an element that uses the given widget as its configuration.¿Tl#¿Tä     ¿Tïb¿T¶  ¿T≤¿Tª  ¿Tï¿Tñ¿T˚c¿U  ¿U$¿U2  ¿U8¿UA  ¿T˚¿T¸¿Ubu¿Us  ¿Uâ¿Uó  ¿Uù¿U¶  ¿UÆ¿U∑  ¿Ub¿Uc¿U€c¿UÏ  ¿V¿V  ¿V¿V!  ¿U€¿U‹¿VBj¿Vd   ¿VB¿VC ¿V∞à%¿XÅJ/// An [Element] that uses a [SingleChildRenderObjectWidget] as its configuration.
///
/// The child is optional.
///
/// This element subclass can be used for [RenderObjectWidget]s whose
/// [RenderObject]s use the [RenderObjectWithChildMixin] mixin. Such widgets are
/// expected to inherit from [SingleChildRenderObjectWidget]. ¿X@Äï ¿Xä¿X®G/// Creates an element that uses the given widget as its configuration.¿X©*¿XŒ   ¿XŸ¿X‚   ¿XÌt¿X˛  ¿Y¿Y  ¿XÌ¿XÓ¿Ye¿Yv  ¿YÇ¿Yã  ¿Ye¿Yf¿YËÄπ¿Y˘  ¿Yˇ¿Z	  ¿Z¿Z  ¿YË¿YÈ¿Z•Ä›¿Z∂  ¿ZΩ'¿Z‹  ¿Z•¿Z¶¿[ÜÅn¿[ó  ¿[Ø¿[Ω  ¿[√¿[Ã  ¿[Ü¿[á¿\¯u¿]	  ¿]¿]-  ¿]3¿]<  ¿]D¿]M  ¿\¯¿\˘¿]qÅb¿]Ç  ¿]ö¿]®  ¿]Æ¿]∑  ¿]q¿]r ¿^◊ï¿a`ÇÇ/// An [Element] that uses a [MultiChildRenderObjectWidget] as its configuration.
///
/// This element subclass can be used for [RenderObjectWidget]s whose
/// [RenderObject]s use the [ContainerRenderObjectMixin] mixin with a parent data
/// type that implements [ContainerParentDataMixin<RenderObject>]. Such widgets
/// are expected to inherit from [MultiChildRenderObjectWidget].
///
/// See also:
///
/// * [IndexedSlot], which is used as [Element.slot]s for the children of a
///   [MultiChildRenderObjectElement].
/// * [RenderObjectElement.updateChildren], which discusses why [IndexedSlot]
///   is used for the slots of the children. ¿aûÄ⁄ ¿aË¿bG/// Creates an element that uses the given widget as its configuration.¿b)¿b*  ¿b7¿b=¿bv¿b>¿b?¿b]¿bu¿b^¿bf¿bl¿bm¿dì¿d¶  ¿e':¿e: ¿eO¿eV¿e^¿eW¿e_¿e`¿b|ÄÊ¿b›   ¿b|¿b}¿cfÅ)¿d;Äî/// The current list of children of this element.
///
/// This list is filtered to hide elements that have been forgotten (using
/// [forgetChild]).  ¿d¿d¿d¿d	¿efÅ¿ew  ¿eè¿eù  ¿e£¿e∫  ¿ef¿eg¿fÈÅñ¿f˙  ¿g¿g  ¿g$¿g;  ¿gC¿gZ  ¿fÈ¿fÍ¿hÉÅF¿hî  ¿h¨¿h∫  ¿h¿¿h…  ¿hÉ¿hÑ¿iÕÄ¿¿iﬁ  ¿iÏ¿i¸  ¿iÕ¿iŒ¿jëÄ ¿j¢  ¿jÆ¿j∑  ¿jë¿jí¿k_É?¿kd  ¿kâ¿kí   ¿n¢Ä·¿n∂  ¿nƒ¿nÃ  ¿n÷¿nﬂ  ¿n¢¿n£¿oáÇz¿oò  ¿oû¿o®  ¿oØ¿o∏  ¿oá¿oà¿rÅÊ¿r  ¿r&¿r;  ¿r¿r ¿sÔàÖ¿u∆Å«/// A [RenderObjectElement] used to manage the root of a render tree.
///
/// Unlike any other render object element this element does not attempt to
/// attach its [renderObject] to the closest ancestor [RenderObjectElement].
/// Instead, subclasses must override [attachRenderObject] and
/// [detachRenderObject] to attach/detach the [renderObject] to whatever
/// instance manages the render tree (e.g. by assigning it to
/// [PipelineOwner.rootNode]). ¿u¸n ¿vF¿v[G/// Creates an element that uses the given widget as its configuration.¿v\¿vc     ¿vnÄû¿vê  ¿v£¿v¨  ¿vn¿vo¿vz¿v{¿wN¿w2   ¿w¿w¿w¿w¿wbÄè¿ws  ¿w~¿wá  ¿wb¿wc¿wıÑ}¿w˙     ¿|vÅ±¿}3Ä∂/// A wrapper class for the [Element] that is the creator of a [RenderObject].
///
/// Setting a [DebugCreator] as [RenderObject.debugCreator] will lead to better
/// error messages. ¿}DX ¿}Å¿}ç:/// Create a [DebugCreator] instance with input [Element].¿}é¿}î   ¿}†>¿}◊&/// The creator of the [RenderObject].  ¿}„B¿}ˆ   ¿}„¿}‰ ¿‘Ñ›¿Ç7ÇQ/// A value for [Element.slot] used for children of
/// [MultiChildRenderObjectElement]s.
///
/// A slot for a [MultiChildRenderObjectElement] consists of an [index]
/// identifying where the child occupying this slot is located in the
/// [MultiChildRenderObjectElement]'s child list and an arbitrary [value] that
/// can further define where the child occupying this slot fits in its
/// parent's child list.
///
/// See also:
///
///  * [RenderObjectElement.updateChildren], which discusses why this class is
///    used as slot values for the children of a [MultiChildRenderObjectElement].¿ÇC¿ÇC¿Ç[u ¿Ç¨¿Ç∑H/// Creates an [IndexedSlot] with the provided [index] and slot [value].¿Ç∏
¿Çæ  ¿Çƒ
¿Ç    ¿Ç‘t¿ÉCb/// Information to define where the child occupying this slot fits in its
/// parent's child list. ¿ÉMH¿Éê6/// The index of this slot in the parent's child list. ¿Ñu:¿Ñâ   ¿Ñu¿Ñv¿ÉöÄ◊¿É¥  ¿É∑¿Éø  ¿Éö¿Éõ¿Ç&¿Ç'¿Ñ≥Å8¿Ö#i/// Used as a placeholder in [List<Element>] objects when the actual
/// elements are not yet determined. ¿ÖD, ¿ÖD¿ÖP  ¿ÖU¿ÖZ¿Ön¿Ö[¿Öa¿Öl¿Öm¿Öt-¿Öà ¿Öì¿Öü¿Ö†¿Ö¶C¿Öª   ¿Ö¶¿Öß  ¿ÖÌÄÅ¿ÖÛ  ¿Ü ¿Ü¿Ü#     ¿Ü*B¿Ü>   ¿Ü*¿Ü+  ¿ ÑÇS¿ Ñ\E/// Tracks the lifecycle of [State] objects when asserts are enabled.  ¿ Ñpb¿ ÑÀV/// The [State] object has been created. [State.initState] is called at this
/// time. ¿ Ñ◊Ä¨¿ ÖxÄú/// The [State.initState] method has been called but the [State] object is
/// not yet ready to build. [State.didChangeDependencies] is called at this time. ¿ Öàc¿ ÖÊY/// The [State] object is ready to build and [State.dispose] has not yet been
/// called. ¿ Öq¿ ÜZe/// The [State.dispose] method has been called and the [State] object is
/// no longer able to build.    ¿Z.F¿Z3   ¿ZI¿ZI  ¿ZT¿ZT  ¿Z^¿Z^  ¿Zj¿Zj        ¿6bÄ∂¿6g  ¿6Ç¿6ä   ¿~)Å©¿~=  ¿~Q¿~b  ¿~l¿~t  ¿~Ä¿~ç  ¿~ó*¿~Æ    ¿ Üff¿ Üü0/// The signature of [State.setState] functions.  ¿ Üª¿ Ü…   ¿bÅ¿b˘Ä”/// Signature for the callback to [BuildContext.visitChildElements].
///
/// The argument is the child being visited.
///
/// It is safe to call `element.visitChildElements` reentrantly within
/// this callback.  ¿c¿c!   ¿c+ÄÊ¿c÷Ä¢/// Signature for the callback to [BuildContext.visitAncestorElements].
///
/// The argument is the ancestor being visited.
///
/// Return false to stop the walk.  ¿d ¿d	   ¿sˆÇ#¿u◊Åÿ/// Signature for the constructor that is called when an error occurs while
/// building a widget.
///
/// The argument provides information regarding the cause of the error.
///
/// See also:
///
///  * [ErrorWidget.builder], which can be set to override the default
///    [ErrorWidget] builder.
///  * [FlutterError.reportError], which is typically called with the same
///    [FlutterErrorDetails] object immediately prior to [ErrorWidget.builder]
///    being called.  ¿u¸¿v   ¿âbÅ÷¿ãÅó/// Signature for a function that creates a widget, e.g. [StatelessWidget.build]
/// or [State.build].
///
/// Used by [Builder.builder], [OverlayEntry.builder], etc.
///
/// See also:
///
///  * [IndexedWidgetBuilder], which is similar but also takes an index.
///  * [TransitionBuilder], which is similar but also takes a child.
///  * [ValueWidgetBuilder], which is similar but takes a value and a child.  ¿ã"¿ã0   ¿ã:ÅÚ¿å‰Å°/// Signature for a function that creates a widget for a given index, e.g., in a
/// list.
///
/// Used by [ListView.builder] and other APIs that use lazily-generated widgets.
///
/// See also:
///
///  * [WidgetBuilder], which is similar but only takes a [BuildContext].
///  * [TransitionBuilder], which is similar but also takes a child.
///  * [NullableIndexedWidgetBuilder], which is similar but may return null.  ¿ç¿ç  ¿ç!	¿ç&   ¿ç.Ñ¿ê˙É√/// Signature for a function that creates a widget for a given index, e.g., in a
/// list, but may return null.
///
/// Used by [SliverChildBuilderDelegate.builder] and other APIs that
/// use lazily-generated widgets where the child count is not known
/// ahead of time.
///
/// Unlike most builders, this callback can return null, indicating the index
/// is out of range. Whether and when this is valid depends on the semantics
/// of the builder. For example, [SliverChildBuilderDelegate.builder] returns
/// null when the index is out of range, where the range is defined by the
/// [SliverChildBuilderDelegate.childCount]; so in that case the `index`
/// parameter's value may determine whether returning null is valid or not.
///
/// See also:
///
///  * [WidgetBuilder], which is similar but only takes a [BuildContext].
///  * [TransitionBuilder], which is similar but also takes a child.
///  * [IndexedWidgetBuilder], which is similar but not nullable.  ¿ë*¿ë8  ¿ë@	¿ëE   ¿ëMÇ;¿ì?ÅÈ/// A builder that builds a widget given a child.
///
/// The child should typically be part of the returned widget tree.
///
/// Used by [AnimatedBuilder.builder], [ListenableBuilder.builder],
/// [WidgetsApp.builder], and [MaterialApp.builder].
///
/// See also:
///
/// * [WidgetBuilder], which is similar but only takes a [BuildContext].
/// * [IndexedWidgetBuilder], which is similar but also takes an index.
/// * [ValueWidgetBuilder], which is similar but takes a value and a child.  ¿ìc¿ìq  ¿ìy¿ìÇ   ¿2sÇ§¿3>Äƒ/// Mixin this class to allow receiving [Notification] objects dispatched by
/// child elements.
///
/// See also:
///   * [NotificationListener], for a widget that allows consuming notifications.    ¿3dÅ1¿4kÄ˜/// Called when a notification of the appropriate type arrives at this
/// location in the tree.
///
/// Return true to cancel the notification bubbling. Return false to
/// allow the notification to continue to be dispatched to further ancestors. ¿4z¿4à   ¿4ô|¿4™   ¿4ô¿4ö ¿O_Ñ¿PÄ∞/// Mixin for the element at the root of the tree.
///
/// Only root elements may have their owner set explicitly. All other
/// elements inherit their owner from their parent.    ¿P6Çy¿RxÅ◊/// Set the owner of the element. The owner will be propagated to all the
/// descendants of this element.
///
/// The owner manages the dirty elements list.
///
/// The [WidgetsBinding] introduces the primary owner,
/// [WidgetsBinding.buildOwner], and assigns it to the widget tree in the call
/// to [runApp]. The binding is responsible for driving the build pipeline by
/// calling the build owner's [BuildOwner.buildScope] method. See
/// [WidgetsBinding.drawFrame]. ¿RÑ¿Rê   ¿R≥Ä…¿Rƒ  ¿R ¿R‘  ¿R€¿R‰  ¿R≥¿R¥ äê*ä° äÆä∏äπ¿ ÜŒD¿ Ü€ ¿ ÜÙ  õ† <ÄÜÄ§Ä•Ä∫Ä‘Ä’ÄˇÅ(Å)Å@ÅUÅrÅëÅ∂Å÷Å◊ÇÇÇÇ.ÇBÇOÇ[ÇpÇÙÉXÉ®ÉÔÑ^Ñ_ÑwÑïÑªÑÙÖIÖîÖÎÜÜÅÜ∂ááçàEàià~àŒàıàˆâEâêâ„ääää)äXä]ädäwäçäèäêäºäΩä≈ä∆ããã]ãwã{ãâãçã∏å	åå9åÑå£å§åËåˇç çç/ç[çoçuçìçΩç¡ç¬çŒééé$é:é^éãéëé‰éËéÍéÎèèèoèºêêêUê§êÛëDëRëVë¢ëÒí=íeíiíπíÓíÚì>ìzì~ìéìíì·î î$îqî¿ï	ïYï©ïºï¿ññXñ\ñjñnñøñÃñﬁó&ówóàóéóﬁóò@òAòmòsò¡ò‘ôôôfôgô©ôØö ööNöOöêöñöÊö˝õ5õ6õáõçõÿú)úbúzú®úŒùù6ùNùdùlùrùÉùáùâùäù≥ù∑ûû,û>ûçû¿û∆û˙üPüåüçü™ü´ü∑üÕ††=†r†x†®†¨†Æ†Ø†˚†ˇ°M°g°k°≠°±¢¢D¢ï¢·¢ˆ¢˙££1£R£X£`£d£Æ£˚§§§f§∏§Û§Ù•8•N•O•[•~•™•æ•ƒ•Î¶¶¶¶&¶U¶V¶b¶x¶∫ß ß}ßößœßÙ®=®C®x®|®~®®±®µ©©P©ï©ô©Ë™3™m™ª™€™ﬂ´0´Ä´À¨¨-¨1¨¨ ≠≠i≠∑ÆÆÆÆ$Æ(ÆtÆûÆÍØØ]ØêØõØŒØˆ∞∞∞X∞^∞•∞ˆ±H±ò±Î±˜±˝≤M≤û≤Ï≥7≥à≥©≥Ø¥ ¥¥¥-¥3¥f¥x¥y¥≥¥πµµ^µ´µ˚∂∂∂)∂D∂E∂x∂Ñ∂ü∂⁄∑∑∑∑∑^∑â∑“∑÷∑◊∑„∑Ò∏%∏&∏2∏@∏f∏g∏∑∏Á∏Ìπ>πçπ“πÿ∫)∫w∫à∫∆ª ª+ª/ª0ªzªœº#º|º∞º⁄ΩΩΩΩΩΩLΩPΩ†ΩÔæ9æÅæ“æ÷øøøiø±¿ @¿ @L¿ @ö¿ @ø¿ @√¿ @Â¿ @È¿ A8¿ AÑ¿ A‘¿ B¿ B¿ BY¿ B™¿ BÙ¿ C¿ C¿ CZ¿ C}¿ CÅ¿ C“¿ D"¿ Dq¿ D¬¿ E¿ E]¿ Eî¿ Eò¿ EÈ¿ F'¿ F+¿ F{¿ FÀ¿ G¿ G3¿ G7¿ GÇ¿ GÃ¿ H¿ Hm¿ Hª¿ I¿ I[¿ Iq¿ Iº¿ J¿ JX¿ J©¿ Jˆ¿ KB¿ Kì¿ K–¿ K„¿ KÁ¿ L8¿ Lo¿ Ls¿ L∂¿ L∫¿ LŒ¿ L“¿ M%¿ M)¿ Mz¿ Mï¿ Mô¿ M•¿ M”¿ M˘¿ M˝¿ N¿ N8¿ Nr¿ Nz¿ NÄ¿ Nà¿ Nò¿ Nú¿ N∞¿ N¥¿ O¿ O¿ O¿ O+¿ OT¿ Og¿ Oz¿ O®¿ Oº¿ O∆¿ O ¿ O„¿ O˛¿ P¿ P¿ P=¿ Pt¿ P|¿ PÇ¿ Pä¿ Pö¿ Pû¿ PÁ¿ Q6¿ QY¿ Q]¿ Qk¿ Qo¿ Qª¿ QÂ¿ R1¿ RW¿ Rá¿ RØ¿ R◊¿ Rÿ¿ S)¿ S/¿ Sl¿ Sx¿ S∂¿ S∑¿ T¿ T¿ TY¿ T©¿ TÙ¿ UG¿ Uo¿ Uu¿ U¿¿ V¿ V^¿ Vß¿ V„¿ VÈ¿ W9¿ Wá¿ W¨¿ W≤¿ X ¿ XI¿ Xñ¿ Xﬂ¿ Y*¿ Ym¿ Ys¿ Y∞¿ Y∂¿ Z¿ Z¿ ZL¿ Zá¿ Zç¿ Z’¿ Zı¿ Z˚¿ [¿ [¿ [j¿ [w¿ [ù¿ [ü¿ [†¿ [≈¿ […¿ \¿ \d¿ \Ø¿ \ˆ¿ \˙¿ ]I¿ ]ò¿ ]‚¿ ^*¿ ^{¿ ^¿ ^À¿ _¿ _b¿ _∞¿ _Û¿ `
¿ `¿ `Q¿ `U¿ `•¿ `Í¿ a8¿ aâ¿ aΩ¿ a¡¿ a˛¿ bG¿ bñ¿ b‡¿ c1¿ cÅ¿ cß¿ c´¿ cı¿ dC¿ dç¿ dÿ¿ e$¿ es¿ e¡¿ f¿ f`¿ f±¿ fˇ¿ gO¿ gõ¿ gü¿ g¡¿ g≈¿ h ¿ h¿ hU¿ h•¿ hÙ¿ iD¿ iî¿ i‡¿ j1¿ jM¿ jQ¿ jõ¿ jÊ¿ k7¿ kÄ¿ k—¿ kÏ¿ k¿ l7¿ lY¿ l]¿ l™¿ lÒ¿ mA¿ mo¿ ms¿ mƒ¿ n¿ nY¿ n®¿ n€¿ nﬂ¿ o*¿ ot¿ o∆¿ p¿ pf¿ pª¿ p„¿ pÁ¿ q3¿ qS¿ qW¿ qß¿ q¯¿ rG¿ rî¿ r‡¿ s-¿ sx¿ s∆¿ sÎ¿ sÔ¿ t:¿ tÜ¿ t ¿ u¿ uG¿ uK¿ uì¿ uó¿ uË¿ v¿ v#¿ vf¿ vj¿ v¨¿ v’¿ vŸ¿ vÌ¿ vÒ¿ w;¿ w?¿ wá¿ w“¿ x¿ x"¿ x.¿ x\¿ xÉ¿ xá¿ xó¿ x‘¿ x⁄¿ xﬁ¿ y¿ y%¿ yP¿ yä¿ yí¿ yò¿ y†¿ y∞¿ yƒ¿ y»¿ z¿ z_¿ z¿ zÉ¿ zè¿ z∑¿ z ¿ z›¿ {¿ {¿ {)¿ {-¿ {F¿ {a¿ {e¿ {u¿ {¶¿ {¨¿ {∞¿ {€¿ {ı¿ {˘¿ |¿ |5¿ |=¿ |A¿ |Q¿ ||¿ |ñ¿ |µ¿ |ˆ¿ }¿ } ¿ }(¿ }.¿ }6¿ }F¿ }J¿ }ì¿ }‚¿ ~¿ ~	¿ ~¿ ~¿ ~`¿ ~≠¿ ~‡¿ ,¿ R¿ Å¿ ©¿ –¿ —¿ Ä!¿ Ä'¿ Äd¿ Äp¿ Ä¨¿ Ä≠¿ Ä˛¿ Å¿ ÅK¿ ÅÄ¿ ÅÜ¿ Åî¿ Å§¿ Å·¿ ÅÎ¿ ÅÒ¿ Ç>¿ Çç¿ Çﬁ¿ É-¿ É}¿ É»¿ Éﬂ¿ ÉÏ¿ É˜¿ Ñ¿ Ñ¿ Ñ¿ ÑW¿ Ñn¿ ÑΩ¿ Ñ…¿ Ñ‘¿ Ñ’¿ Ö"¿ Öv¿ ÖÖ¿ ÖÜ¿ Ö÷¿ Ö‰¿ ÖÌ¿ ÖÓ¿ Ü9¿ ÜX¿ Üc¿ Üe¿ Üf¿ Üó¿ ÜÕ¿ ÜŒ¿ á¿ á¿ áN¿ áR¿ á°¿ áÌ¿ à8¿ à¿ àÉ¿ à√¿ â¿ â^¿ â≠¿ â˜¿ ä>¿ äé¿ äﬁ¿ ã(¿ ã,¿ ã^¿ ãb¿ ãõ¿ ã¿¿ å¿ å\¿ å™¿ å˜¿ ç¿ çb¿ ç¨¿ ç˙¿ éC¿ éR¿ é£¿ éÔ¿ èB¿ èê¿ è·¿ ê1¿ êv¿ ê≈¿ ë¿ ëX¿ ë°¿ ë±¿ ë˛¿ íG¿ íî¿ íÂ¿ ì6¿ ìÜ¿ ì”¿ î ¿ îm¿ îñ¿ î‰¿ ï-¿ ïs¿ ïΩ¿ ñ
¿ ñY¿ ñ™¿ ñ˜¿ óD¿ ó}¿ ó ¿ ò¿ òc¿ ò∞¿ ô¿ ôJ¿ ôî¿ ô£¿ ôÙ¿ öD¿ öí¿ ö›¿ õ¿ õN¿ õõ¿ õÎ¿ ú0¿ ú4¿ úB¿ úF¿ úó¿ ú”¿ ù ¿ ùS¿ ùü¿ ù≈¿ ù˝¿ û¿ ûT¿ ûu¿ û{¿ û»¿ ü¿ üa¿ ü™¿ ü˚¿ †J¿ †]¿ †y¿ †á¿ †à¿ †»¿ †Œ¿ °¿ °j¿ °¨¿ °≠¿ °¯¿ ¢$¿ ¢^¿ ¢_¿ ¢ò¿ ¢û¿ ¢È¿ £2¿ £Å¿ £“¿ £È¿ £Ô¿ §8¿ §b¿ §¿ §è¿ §≠¿ §…¿ •A¿ •À¿ •÷¿ •ﬁ¿ •Ò¿ •˚¿ ¶¿ ¶¿ ¶2¿ ¶3¿ ¶m¿ ¶s¿ ¶Ω¿ ß¿ ßO¿ ß†¿ ßø¿ ß≈¿ ®¿ ®/¿ ®0¿ ®i¿ ®o¿ ®æ¿ ®–¿ ®÷¿ ©¿ ©p¿ ©∑¿ ©Ω¿ ©Ô¿ ™8¿ ™Ä¿ ™Õ¿ ´¿ ´9¿ ´?¿ ´q¿ ´Ω¿ ¨¿ ¨!¿ ¨U¿ ¨[¿ ¨p¿ ¨v¿ ¨À¿ ≠¿ ≠l¿ ≠Å¿ ≠á¿ ≠÷¿ ≠ˇ¿ Æ¿ Æ¿ Æ2¿ Æo¿ Æõ¿ Æ⁄¿ Ø¿ Ø ¿ Ø6¿ Ø?¿ ØE¿ ØI¿ ØJ¿ ØÇ¿ Øà¿ Øÿ¿ ∞¿ ∞i¿ ∞≥¿ ∞‚¿ ∞Ë¿ ±8¿ ±T¿ ±Z¿ ±™¿ ±Ú¿ ±¯¿ ≤'¿ ≤-¿ ≤|¿ ≤¥¿ ≤∫¿ ≥¿ ≥$¿ ≥5¿ ≥B¿ ≥t¿ ≥u¿ ≥ß¿ ≥≠¿ ≥˜¿ ¥@¿ ¥è¿ ¥ï¿ ¥•¿ ¥´¿ ¥…¿ ¥ˆ¿ µ*¿ µ7¿ µH¿ µ`¿ µa¿ µ∞¿ µ∂¿ ∂¿ ∂9¿ ∂?¿ ∂M¿ ∂z¿ ∂Ñ¿ ∂ä¿ ∂◊¿ ∑&¿ ∑[¿ ∑a¿ ∑±¿ ∏ ¿ ∏Q¿ ∏_¿ ∏e¿ ∏±¿ ∏˛¿ π;¿ πA¿ πé¿ π‹¿ ∫,¿ ∫|¿ ∫Æ¿ ∫¥¿ ∫¬¿ ∫Ò¿ ª¿ ª¿ ª)¿ ªè¿ ªæ¿ º¿ º¿ º¿ º¿ ºi¿ º∫¿ Ω¿ Ω#¿ Ω)¿ Ωu¿ Ω≤¿ Ω∏¿ Ω∆¿ Ω›¿ æ¿ æ¿ æ(¿ æN¿ æX¿ æ^¿ æ¨¿ æ¯¿ øG¿ øï¿ øÂ¿ ø˚¿ ¿¿ ¿¿ ¿"¿ ¿s¿ ¿™¿ ¿ÿ¿ ¿ﬁ¿ ¡.¿ ¡¿ ¡œ¿ ¬
¿ ¬¿ ¬Q¿ ¬W¿ ¬§¿ ¬Û¿ √D¿ √ñ¿ √…¿ √œ¿ ƒ¿ ƒn¿ ƒt¿ ƒò¿ ƒû¿ ƒÓ¿ ≈=¿ ≈é¿ ≈ﬁ¿ ∆.¿ ∆P¿ ∆V¿ ∆¶¿ ∆˜¿ «E¿ «|¿ «Ç¿ «”¿ »$¿ »8¿ »>¿ »N¿ »T¿ »†¿ »‹¿ »È¿ …¿ …¿ …Y¿ …ë¿ …’¿ …Ò¿  N¿  ß¿  ˛¿ À?¿ ÀL¿ Àa¿ Àä¿ À·¿ Ã6¿ Ãã¿ Ã†¿ Ã≠¿ Ã¬¿ Õ¿ Õk¿ Õ∫¿ Œ
¿ Œ¿ Œ#¿ Œ+¿ Œt¿ Œ¨¿ ŒÔ¿ œ¿ œ]¿ œ∑¿ –¿ –A¿ –N¿ –Z¿ –b¿ –u¿ –¿ –´¿ –ª¿ –Ÿ¿ —¿ —\¿ —x¿ —œ¿ “¿ “¿ “2¿ “å¿ “Ë¿ ”%¿ ”2¿ ”>¿ ”F¿ ”ñ¿ ”∏¿ ”À¿ ”’¿ ”ı¿ ”˘¿ ”˙¿ ‘2¿ ‘8¿ ‘Ü¿ ‘“¿ ’#¿ ’s¿ ’Ω¿ ÷¿ ÷\¿ ÷´¿ ÷˚¿ ◊I¿ ◊ô¿ ◊«¿ ◊Õ¿ ÿ¿ ÿg¿ ÿ®¿ ÿÆ¿ ÿ˚¿ Ÿ%¿ Ÿ+¿ Ÿ;¿ ŸA¿ Ÿë¿ Ÿµ¿ Ÿ¬¿ Ÿ”¿ ŸÎ¿ ŸÏ¿ ⁄8¿ ⁄X¿ ⁄^¿ ⁄¨¿ ⁄˜¿ €.¿ €4¿ €É¿ €–¿ ‹¿ ‹j¿ ‹∫¿ ›¿ ›O¿ ›õ¿ ›Î¿ ﬁ3¿ ﬁÑ¿ ﬁä¿ ﬁÿ¿ ﬂ%¿ ﬂ;¿ ﬂA¿ ﬂê¿ ﬂ∏¿ ﬂæ¿ ﬂŒ¿ ﬂ‘¿ ‡¿ ‡d¿ ‡q¿ ‡Ç¿ ‡ò¿ ‡ô¿ ‡›¿ ‡„¿ ·-¿ ·{¿ · ¿ ‚¿ ‚e¿ ‚k¿ ‚∫¿ ‚Û¿ ‚˘¿ „(¿ „.¿ „{¿ „¢¿ „®¿ „π¿ „ø¿ ‰¿ ‰U¿ ‰k¿ ‰q¿ ‰ê¿ ‰ñ¿ ‰‚¿ Â/¿ Â}¿ ÂΩ¿ Â√¿ Ê¿ ÊI¿ ÊO¿ Êõ¿ Ê€¿ Ê·¿ Á/¿ Á^¿ Ád¿ Á†¿ Á¶¿ Á÷¿ Á‹¿ ÁÏ¿ ÁÚ¿ Ë-¿ Ë:¿ ËK¿ Ë^¿ Ëô¿ Ë©¿ Ëﬂ¿ ËÚ¿ Ë¸¿ È(¿ Èv¿ È|¿ ÈÄ¿ ÈÅ¿ ÈÃ¿ È“¿ Í!¿ Í0¿ Í6¿ ÍZ¿ ÍÑ¿ Í≥¿ Í¯¿ Î@¿ Îë¿ Î∏¿ Îæ¿ Ï¿ Ï>¿ ÏD¿ Ïè¿ Ï‹¿ Ì-¿ Ìv¿ Ì≤¿ Ì∏¿ Ó¿ ÓW¿ Ó¢¿ Ó®¿ Óˆ¿ Ô?¿ Ôé¿ Ô‹¿ (¿ w¿ ∂¿ º¿ ◊¿ ›¿ Ò'¿ Ò-¿ Ò{¿ Ò…¿ Ú¿ Ú.¿ Ú4¿ Ú¿ Ú–¿ Û ¿ Ûp¿ Ûº¿ Ûˆ¿ Û¸¿ ÙM¿ Ùó¿ ÙÁ¿ ÙÌ¿ ı=¿ ıã¿ ıÕ¿ ˆ¿ ˆm¿ ˆÜ¿ ˆå¿ ˆö¿ ˆƒ¿ ˆÛ¿ ˜'¿ ˜-¿ ˜H¿ ˜N¿ ˜`¿ ˜ö¿ ˜∫¿ ˜Ô¿ ˜¸¿ ¯¿ ¯¿ ¯¿ ¯¿ ¯o¿ ¯∫¿ ˘
¿ ˘W¿ ˘§¿ ˘Ò¿ ˙¿ ˙
¿ ˙W¿ ˙ß¿ ˙¬¿ ˙»¿ ˙÷¿ ˚¿ ˚C¿ ˚I¿ ˚d¿ ˚s¿ ˚{¿ ˚Å¿ ˚µ¿ ˚ƒ¿ ˚÷¿ ¸¿ ¸#¿ ¸a¿ ¸n¿ ¸x¿ ¸Ä¿ ¸ä¿ ¸ê¿ ¸·¿ ˝1¿ ˝~¿ ˝À¿ ˝Ï¿ ˝Ú¿ ˛¿ ˛¿ ˛`¿ ˛m¿ ˛ì¿ ˛î¿ ˛”¿ ˛Ÿ¿ ˇ¿ ˇd¿ ˇô¿ ˇü¿ ˇÌ¿ <¿ B¿ å¿ ÿ¿%¿o¿ñ¿£¿¥¿◊¿ÿ¿‰¿)¿T¿d¿Á¿˙¿¿X¿æ¿¬¿ƒ¿≈¿¿ ¿$¿p¿à¿å¿ö¿û¿Í¿¿I¿í¿ø¿¿5¿Ç¿µ¿Ì¿¿S¿å¿ç¿Ω¿√¿˜¿I¿ú¿Â¿˙¿	¿	¿	¿	`¿	{¿	¿	ª¿
	¿
I¿
M¿
ù¿
œ¿
”¿
Á¿
Î¿:¿¿É¿è¿–¿Á¿˙¿¿4¿>¿B¿Y¿]¿m¿•¿¿(¿J¿û¿»¿“¿⁄¿ﬁ¿Ó¿)¿/¿7¿G¿K¿Y¿]¿ö¿·¿(¿k¿ò¿Ê¿2¿\¿®¿˘¿A¿Ä¿Å¿ç¿”¿‘¿¿0¿6¿|¿Ã¿¯¿˛¿J¿x¿µ¿œ¿Ï¿¿¿¿h¿°¿ß¿ı¿!¿P¿V¿o¿u¿ƒ¿Ô¿;¿}¿É¿ë¿£¿‡¿Í¿¿@¿ç¿ﬁ¿
¿¿Y¿í¿ò¿Ê¿¿¿b¿¶¿ ¿¿E¿j¿ï¿∫¿¡¿€¿¯¿˘¿m¿ã¿©¿√¿¿¿(¿B¿∏¿√¿‘¿;¿±¿∫¿ﬂ¿Ú¿`¿k¿ç¿ß¿ ¿+¿2¿6¿7¿â¿è¿‘¿ ¿ b¿ ±¿ ÷¿ ‹¿!,¿!v¿!«¿"¿"g¿"m¿"π¿"Ú¿#?¿#]¿#j¿#ù¿#û¿#Î¿$¿$	¿$U¿$†¿$¶¿$∂¿$º¿%¿%¿%(¿%R¿%T¿%U¿%¶¿%™¿%Ì¿%Ò¿&B¿&é¿&í¿&·¿'¿'!¿'d¿'h¿'|¿'Ä¿'À¿'œ¿'€¿(	¿(!¿(4¿(Q¿(o¿(y¿(}¿(ñ¿(ö¿(“¿)¿)"¿)&¿)X¿)å¿)Õ¿)Â¿)Ì¿)Ò¿*¿*Q¿*W¿*_¿*o¿*s¿*¶¿*™¿*˙¿+¿+k¿+¥¿+∏¿,	¿,X¿,¶¿,Î¿,Ô¿->¿-é¿-Ω¿-¡¿.¿.`¿.∞¿.˙¿/?¿/ä¿/•¿/©¿/÷¿/⁄¿0+¿0z¿0ã¿0è¿0£¿0ß¿0˜¿1-¿11¿1=¿1h¿1ì¿1¥¿1∏¿1»¿1Û¿2¿2'¿2H¿2d¿2ô¿2∂¿2÷¿3#¿36¿3G¿3V¿3c¿3n¿3v¿3|¿3Ñ¿3î¿3ò¿3¨¿3∞¿3˙¿4J¿4}¿4Å¿4ç¿4∏¿4º¿4Ï¿5¿5¿5&¿5Q¿5j¿5Ö¿5¶¿5ø¿5€¿6¿6.¿6;¿6F¿6N¿6T¿6\¿6´¿6Ø¿6Ω¿6¡¿7¿75¿7Å¿7≥¿7Í¿8.¿8|¿8ë¿8·¿9
¿9?¿9ê¿9ÿ¿:¿:¿:#¿:a¿:b¿:≥¿:π¿;
¿;[¿;™¿;Û¿<¿<¿<\¿<¨¿<¯¿=¿=¿=S¿=U¿=V¿=¶¿=¿>¿>¿>P¿>t¿>x¿>∏¿?¿?U¿?ü¿?…¿?Õ¿@¿@M¿@û¿@Ê¿A¿A¿A`¿Al¿Aw¿Aû¿Aü¿Aﬂ¿B0¿BL¿BR¿B£¿BÂ¿C/¿C_¿Cç¿Cö¿C•¿Cﬁ¿Cﬂ¿D,¿D{¿D†¿D¶¿DÙ¿E>¿Eâ¿Eπ¿EË¿Eı¿FN¿FO¿Fù¿FÁ¿G¿G*¿Gq¿Gs¿Gt¿G»¿G„¿GÁ¿H4¿Hw¿H»¿I¿I?¿I@¿IL¿Iò¿Iö¿Iõ¿IÔ¿J¿J¿JW¿J•¿Jˆ¿K-¿K1¿K~¿K»¿L¿La¿L£¿L§¿L‘¿L⁄¿M¿M"¿M#¿M/¿Mâ¿Mã¿Må¿M‡¿N,¿Nv¿NÇ¿NÜ¿NΩ¿O¿OV¿O°¿OÂ¿P¿P¿P]¿Pa¿Po¿Ps¿PÆ¿P˚¿Q
¿QK¿Qú¿Q¿¿R	¿R2¿Râ¿Rä¿Rª¿R¡¿S¿SV¿S§¿S≥¿Sπ¿T¿TT¿T•¿TÏ¿TÚ¿U ¿U!¿UY¿Uå¿Uí¿UØ¿U«¿U˜¿V¿V¿V¿V'¿VT¿Vó¿V¬¿VÃ¿V‘¿Vﬁ¿V‰¿W#¿W)¿W7¿Wo¿W¢¿W®¿W≈¿W›¿X'¿Xf¿X†¿XÆ¿X∏¿Xæ¿X–¿X˝¿YI¿Y}¿Yá¿Yè¿Yô¿Y∏¿Yπ¿Y≈¿Z¿Z¿Z ¿Z!¿Z-¿Z.¿ZG¿ZR¿Z\¿Zh¿Zs¿Zu¿Zv¿Zê¿Z®¿Z›¿Zﬁ¿[¿[D¿[T¿[Ü¿[µ¿[ˇ¿\	¿\¿\$¿\.¿\Z¿\Ç¿\ô¿\°¿\∏¿\˙¿\˛¿\ˇ¿]¿]*¿]v¿]ç¿]ó¿]¬¿]“¿]Û¿^
¿^¿^¿^¿^M¿^é¿^®¿^Î¿_¿_.¿_P¿_c¿_m¿_q¿_r¿_ê¿_¶¿_–¿_ı¿`4¿`[¿`a¿`}¿`Å¿`Ç¿`£¿`π¿`‚¿a¿a&¿ag¿ak¿al¿aî¿a™¿a∫¿aÊ¿a˘¿b¿b¿b¿b¿b¿bb¿bf¿bì¿bó¿bﬁ¿bÒ¿c*¿c+¿cs¿cw¿cß¿c´¿cŒ¿d¿d¿dP¿dT¿dì¿d‹¿d‡¿e,¿e}¿e ¿f¿fO¿fS¿fü¿fÌ¿g8¿g<¿gã¿g⁄¿h)¿hy¿h ¿i¿ih¿i∑¿j¿jM¿jÄ¿jÑ¿j”¿k¿kg¿k∑¿l ¿l¿l¿l¿lG¿lx¿lè¿l¬¿lŸ¿m¿m$¿mO¿mm¿m£¿mŒ¿mÙ¿n'¿nJ¿nu¿nö¿n¡¿n˚¿o)¿o`¿oå¿o“¿p ¿p8¿pY¿pw¿pî¿pØ¿p»¿pﬂ¿pÙ¿q¿q¿q'¿q4¿q>¿qG¿qM¿qU¿qY¿q©¿q¯¿rE¿rf¿rj¿r≠¿r±¿s ¿sN¿så¿sﬁ¿t/¿tj¿tn¿tz¿tä¿tµ¿t‘¿tÙ¿u8¿u[¿uÜ¿uî¿u°¿uÕ¿uÿ¿u‡¿uË¿u˚¿uˇ¿vM¿võ¿vπ¿w¿w¿w¿wg¿wü¿w∏¿wπ¿x¿x#¿x)¿xx¿x∆¿x⁄¿x‡¿y.¿y4¿yq¿yÖ¿yÜ¿y“¿yÿ¿z#¿zW¿z®¿z ¿{¿{4¿{:¿{ã¿{Ã¿{¯¿{˛¿|6¿|R¿|S¿|ó¿|Â¿}2¿}N¿}T¿}ü¿}Î¿~0¿~¿~¨¿~≤¿¿R¿°¿Ë¿˙¿Ä ¿ÄL¿Än¿Ät¿Ä¡¿Å¿Å]¿ÅÉ¿Åß¿Å®¿ÅÍ¿Å¿Ç<¿Çà¿Ç—¿Ç˙¿É ¿ÉL¿Én¿Ét¿É≈¿Ñ¿Ñb¿ÑØ¿Ñµ¿Ö¿ÖN¿Öû¿Öƒ¿Ö÷¿Ö◊¿Ü¿ÜZ¿Ü`¿ÜÅ¿Üá¿Ü—¿á#¿áV¿á\¿á∞¿áﬁ¿à9¿à:¿àä¿à¬¿à»¿â¿âb¿âØ¿â˛¿ä?¿äE¿äó¿ä‚¿äÙ¿ä˙¿ãB¿ãé¿ã€¿å+¿åz¿å…¿å„¿åÈ¿ç9¿çà¿çŸ¿é&¿éZ¿é`¿éÆ¿é˚¿è/¿è5¿èÜ¿è±¿è∑¿ê¿êS¿ê§¿êÔ¿ë¿ë¿ëS¿ëö¿ëﬁ¿í¿í¿íq¿ír¿í¬¿íˆ¿í¸¿ìL¿ìô¿ìÍ¿î&¿î,¿î|¿îÀ¿ï¿ïi¿ïù¿ï£¿ïÒ¿ñ>¿ñr¿ñx¿ñ∏¿ñ˘¿ñ˙¿óO¿óñ¿óú¿óÃ¿ó“¿ò)¿òi¿òo¿òæ¿òÙ¿ò˙¿ôJ¿ôô¿ô”¿ö&¿öv¿ö°¿ö∂¿õ¿õ¿õd¿õê¿õñ¿õ„¿ú0¿úÅ¿úÀ¿ù¿ùh¿ùµ¿û¿ûV¿û¢¿û®¿ûÙ¿ü?¿üx¿ü~¿ü–¿†¿†j¿†Ω¿†√¿°¿°0¿°E¿°}¿°~¿°œ¿¢ ¿¢¿¢M¿¢û¿¢Ô¿£C¿£ñ¿£‚¿§.¿§R¿§X¿§•¿§Ù¿•E¿•w¿•}¿•…¿¶¿¶M¿¶S¿¶•¿¶Ò¿ß?¿ßå¿ß°¿ßß¿ßΩ¿ß√¿ß—¿®)¿®3¿®E¿®v¿®w¿®…¿®˙¿© ¿©K¿©£¿©Ô¿™¿™¿™p¿™Å¿™ñ¿™À¿™Ã¿´(¿´Y¿´_¿´≠¿´˛¿¨O¿¨£¿¨Ú¿≠B¿≠è¿≠∆¿≠Ã¿Æ¿Æc¿Æú¿Æ¢¿ÆÙ¿Ø@¿Øé¿Ø‚¿Ø˜¿∞6¿∞7¿∞à¿∞ø¿∞≈¿±
¿±Y¿±®¿±Ì¿±Û¿≤(¿≤.¿≤Å¿≤á¿≤Ÿ¿≥&¿≥t¿≥ø¿≥‘¿¥¿¥¿¥?¿¥E¿¥á¿¥“¿µ"¿µp¿µ†¿µ¶¿µÙ¿∂@¿∂N¿∂T¿∂ü¿∂Î¿∂Ò¿∑B¿∑å¿∑›¿∏.¿∏G¿∏\¿∏è¿∏ê¿∏”¿∏Ÿ¿π(¿πs¿πâ¿π¡¿π¬¿∫¿∫ ¿∫n¿∫t¿∫Ñ¿∫ä¿∫·¿ªT¿ªU¿ª¨¿ª≤¿ªˇ¿ºq¿ºr¿º¡¿ºÊ¿ºÏ¿Ω;¿Ωî¿Ωï¿Ωﬂ¿Ω˙¿æ ¿æL¿æÉ¿æÖ¿æÜ¿æ≥¿æ∑¿ø¿øU¿ø¢¿ø»¿øÃ¿¿¿¿X¿¿y¿¿}¿¿…¿¿Õ¿¿¸¿¡A¿¡R¿¡V¿¡j¿¡∏¿¬¿¬F¿¬J¿¬ñ¿¬¶¿¬π¿¬Á¿¬Ì¿√9¿√Ö¿√œ¿ƒ¿ƒ9¿ƒ¿ƒ–¿ƒ—¿≈¿≈)¿≈K¿≈L¿≈è¿≈ê¿≈ƒ¿≈Ò¿≈Ú¿∆=¿∆m¿∆s¿∆¬¿∆»¿«¿«,¿«R¿«S¿«ñ¿«ú¿«‰¿»-¿».¿»\¿»b¿»∞¿»Á¿»Ì¿…¿…¿…h¿…∑¿ ¿ W¿ j¿ á¿ à¿ ‘¿À¿À9¿À\¿Àl¿Àö¿Ã#¿Ã+¿ÃG¿Ã¿Ãﬁ¿Õ4¿ÕP¿Õ≥¿Õﬁ¿ÕÎ¿Œ ¿Œ^¿Œ™¿Œ¸¿œ	¿œ¿œ¿œ0¿œ:¿œZ¿œl¿œú¿–Q¿–[¿–Ä¿–∫¿—¿—$¿—~¿—À¿—⁄¿—Ë¿—Ú¿“¿“¿“>¿“L¿“R¿“ó¿“¬¿“›¿“„¿”¿”%¿”5¿”c¿”†¿”®¿”ª¿”≈¿”…¿” ¿”Í¿‘$¿‘%¿‘[¿‘a¿‘å¿‘∏¿‘◊¿‘¸¿‘˝¿’M¿’o¿’u¿’≈¿’Ê¿÷¿÷7¿÷G¿÷h¿÷{¿÷Ö¿÷è¿÷°¿÷±¿÷√¿÷Ê¿÷˚¿◊¿◊¿◊4¿◊8¿◊9¿◊Ö¿◊—¿ÿ¿ÿ¿ÿ[¿ÿõ¿ÿ°¿ÿÓ¿Ÿ:¿Ÿä¿ŸÃ¿Ÿˆ¿Ÿ¸¿⁄J¿⁄ô¿⁄ ¿⁄–¿€¿€¿€E¿€K¿€í¿€ﬂ¿‹-¿‹:¿‹g¿‹®¿‹ﬁ¿‹Ï¿‹Ú¿›¿›6¿›F¿›h¿›«¿›œ¿›¿ﬁ¿ﬁ ¿ﬁ*¿ﬁC¿ﬁv¿ﬁà¿ﬁ∫¿ﬁÔ¿ﬂ&¿ﬂS¿ﬂÜ¿ﬂØ¿ﬂº¿ﬂ∆¿ﬂ€¿ﬂÁ¿‡¿‡¿‡C¿‡L¿‡R¿‡\¿‡á¿‡•¿‡»¿‡Û¿·¿·F¿·t¿·ã¿·ô¿·«¿·’¿·Î¿·ˇ¿‚¿‚N¿‚è¿‚Ω¿‚÷¿‚Ê¿‚¿‚¯¿„"¿„N¿„|¿„ë¿„¥¿„Î¿‰¿‰%¿‰è¿‰À¿Â ¿Â@¿Â•¿Âˇ¿Ê¿Ê)¿Êê¿Ê˜¿Á\¿Á∞¿Á¡¿ÁÌ¿Ë ¿Ë9¿Ët¿ËÖ¿Ë±¿È(¿ÈA¿È|¿Èç¿Èù¿È©¿È¿¿ÈŒ¿Í2¿ÍS¿Íä¿Í†¿Í‰¿ÎE¿ÎS¿Îl¿Î|¿Î°¿ÎŒ¿Î˝¿Ï
¿Ï¿Ï"¿Ï?¿Ï\¿Ïx¿Ïπ¿Ï»¿Ï€¿Ì¿ÌU¿Ìï¿Ì∆¿Ó7¿ÓJ¿Ô&¿Ô5¿ÔB¿ÔL¿Ôm¿Ôï¿Ôü¿Ô≥¿¿4¿d¿í¿”¿Ò6¿Òè¿ÒÚ¿ÚU¿Úµ¿Û¿ÛL¿Ûd¿Ûp¿Ûz¿ÛÇ¿Ûî¿Ù¿ÙK¿Ùè¿Ù¸¿ıv¿ıÑ¿ıé¿ı£¿ıØ¿ıø¿ıı¿ˆ¿ˆA¿ˆI¿ˆg¿ˆì¿ˆæ¿ˆŸ¿ˆˇ¿˜¿˜%¿˜7¿˜W¿˜z¿˜û¿˜À¿˜’¿˜Í¿˜ˆ¿˜¸¿¯#¿¯'¿¯(¿¯à¿¯â¿¯Ú¿˘]¿˘Ω¿˘Û¿˙¿˙
¿˙¿˙:¿˙å¿˙ê¿˙ë¿˙ﬁ¿˙ﬂ¿˚7¿˚q¿˚¿˚÷¿˚◊¿¸&¿¸H¿¸ò¿¸µ¿¸∫¿˝¿˝L¿˝Z¿˝·¿˝‚¿˛/¿˛j¿˛°¿˛¢¿˛Ó¿˛˛¿ˇ9¿ˇL¿ˇV¿ˇZ¿ˇ[¿ˇó¿ˇß¿ˇÿ¿ ¿ b¿ ì¿ õ¿ Æ¿ ∏¿ ﬂ¿ „¿ ‰¿"¿2¿â¿∆¿¿¿.¿8¿f¿å¿í¿ñ¿ó¿Ë¿¯¿?¿y¿å¿ñ¿ö¿õ¿«¿◊¿!¿É¿ø¿,¿>¿H¿Ñ¿–¿¿1¿X¿l¿x¿ƒ¿¿Q¿Ä¿Õ¿¿b¿ó¿¡¿Á¿	¿	_¿	™¿	Ã¿
0¿
O¿
n¿
—¿
‰¿
ˆ¿¿K¿ñ¿∏¿¿k¿ã¿Ó¿¿¿!¿n¿º¿
¿0¿Z¿ï¿¬¿Ó¿ ¿¿ ¿J¿Ö¿≤¿ﬁ¿¿¿¿)¿<¿c¿o¿{¿Ö¿±¿ƒ¿Œ¿“¿”¿˝¿¿=¿ê¿‘¿¿D¿{¿±¿Ù¿L¿m¿ü¿©¿±¿ÿ¿¯¿?¿ì¿ ¿¿S¿£¿Ú¿C¿|¿Ú¿¸¿x¿´¿≥¿∆¿–¿‘¿’¿"¿7¿=¿q¿w¿»¿Â¿Î¿;¿h¿ï¿≠¿∆¿¯¿˛¿¿[¿m¿{¿©¿’¿-¿â¿«¿9¿É¿Î¿˚¿	¿,¿z¿ÿ¿¿W¿p¿õ¿≠¿Ω¿ˆ¿5¿W¿}¿ñ¿ ¿ ¿ %¿ ú¿ Ó¿!Z¿!ô¿!È¿"¿"5¿"G¿"W¿"î¿"€¿"˝¿#+¿#D¿#ª¿#Õ¿#ﬂ¿$¿$L¿$à¿$Õ¿%¿%l¿%¥¿%˙¿&L¿&ô¿&Ï¿'7¿'£¿'·¿(1¿(É¿(™¿(Ã¿)@¿)≥¿*¿*@¿*µ¿+;¿+≥¿,#¿,ñ¿,œ¿-¿-h¿-{¿-ç¿-õ¿-ß¿-ª¿.¿.¿.-¿.9¿.R¿.†¿.Î¿/¿/_¿/o¿/ä¿/∞¿/∏¿/æ¿/¬¿/√¿0¿0^¿0Ø¿0Œ¿0‘¿1 ¿1B¿1[¿1û¿1§¿1Æ¿1“¿1Ù¿2¿2¿28¿2^¿2f¿2l¿2p¿2r¿2s¿2¿¿2‘¿2ÿ¿2Ê¿38¿3b¿3´¿3«¿3Õ¿4¿4d¿4ñ¿4ó¿4£¿4≈¿5¿5¿5¿5¿53¿5c¿5d¿5á¿5§¿5•¿5ﬁ¿6¿6%¿6+¿6[¿6_¿6a¿6b¿6ì¿6π¿6Ë¿7¿7¿7¿7c¿7g¿7∑¿8¿8Y¿8§¿8Ù¿9¿9¿9]¿9©¿9≠¿9ÿ¿9‹¿:-¿:u¿:≈¿;¿;\¿;©¿;ˆ¿<¿<P¿<ü¿<Ó¿=?¿=ç¿=›¿>¿>h¿>∏¿?¿?U¿?¶¿?”¿@"¿@k¿@∂¿@¸¿AM¿Aö¿AÁ¿B5¿BÜ¿B™¿B¯¿CE¿CU¿Cü¿C–¿D¿Df¿Dl¿D≠¿D∆¿Dﬂ¿E¿EJ¿Es¿Eí¿E®¿E±¿E∑¿Eª¿Eº¿E–¿E¯¿E˘¿F!¿F'¿Fq¿Fº¿Fı¿F˚¿GJ¿Gò¿GÊ¿H5¿H;¿Hà¿H◊¿I%¿Im¿Is¿IΩ¿Iˇ¿J¿J¿Je¿J°¿J¢¿JÚ¿K¿K
¿K[¿K´¿K√¿K‡¿KÒ¿KÚ¿L?¿Lã¿Lù¿L≠¿LÁ¿M=¿ME¿MX¿Mb¿Mu¿My¿Må¿Mç¿Mﬁ¿MÙ¿N¿NG¿N~¿Nì¿N¶¿N¨¿N˚¿O¿O?¿O^¿O~¿OÑ¿O∑¿O≈¿O…¿O ¿P¿Pj¿Pø¿Q¿QL¿Qx¿Q•¿Q≥¿Q∑¿Q∏¿Q‚¿QË¿R2¿R~¿RŒ¿S¿Sj¿S†¿S¨¿SÕ¿S‡¿S·¿SÌ¿T¿T¿TC¿TI¿Tè¿Tﬂ¿T˚¿U¿U'¿Ug¿Uz¿UÑ¿Uö¿Uû¿Uü¿UÃ¿U“¿V¿Vh¿VÉ¿Vû¿VÆ¿VÏ¿Vˇ¿W	¿W¿W"¿W#¿W`¿Wl¿Wè¿W•¿W¶¿W€¿X&¿XG¿XM¿Xú¿XË¿Y¿Y¿Y]¿Y≠¿Y¬¿Y»¿Z¿Zj¿Zµ¿[¿[N¿[õ¿[Ï¿\'¿\<¿\B¿\R¿\X¿\t¿\°¿\’¿\Ê¿\Û¿]	¿]¿]C¿]]¿]e¿]i¿]j¿]ì¿]∞¿]Œ¿]Ì¿^¿^
¿^+¿^1¿^C¿^G¿^H¿^â¿^è¿^‡¿_0¿_^¿_d¿_±¿_˚¿`H¿`y¿`ú¿`π¿`◊¿a¿a(¿a[¿aÄ¿aè¿a≈¿aÕ¿a”¿a‰¿aË¿aÈ¿b:¿bz¿bÄ¿b–¿c!¿cd¿c∞¿c›¿c„¿d/¿dy¿dÜ¿d≤¿d≈¿dÈ¿e4¿eH¿eP¿ea¿ee¿ef¿er¿eÃ¿f¿f@¿fn¿få¿fü¿fß¿f®¿f⁄¿g0¿g<¿gm¿gu¿gv¿gñ¿gÔ¿g¸¿h$¿ha¿h•¿hØ¿hµ¿hÕ¿h—¿h“¿i)¿i~¿iõ¿i≠¿j%¿j@¿jG¿jK¿jL¿jX¿jÃ¿k¿k¿k¿k ¿kì¿k÷¿k⁄¿k€¿kÁ¿l¿lj¿lµ¿l»¿m¿m¿m¿mQ¿mg¿m®¿m©¿m¯¿n¿n¿nn¿nó¿nù¿nÈ¿o:¿oã¿o”¿p¿p¿pA¿pG¿pñ¿p¶¿p¨¿p˙¿qG¿qî¿q…¿qœ¿r¿r=¿rC¿rS¿rY¿rç¿r«¿s¿sf¿su¿s…¿s ¿t¿t¿tC¿tS¿tã¿t†¿t®¿tﬁ¿u!¿u;¿uå¿u‹¿v0¿v\¿vg¿vq¿v{¿vó¿võ¿vú¿v€¿v·¿w0¿w¿wÖ¿w’¿w€¿x-¿xÄ¿xÜ¿x’¿y¿y¿yf¿y∑¿z¿zS¿z|¿zÇ¿z”¿zÂ¿zÎ¿{:¿{à¿{ƒ¿{ ¿{˙¿| ¿|Q¿|¢¿|Û¿}y¿}¿}–¿~¿~a¿~´¿~˘¿>¿D¿ï¿¢¿¿¿Ä¿Ä*¿ÄE¿Äe¿Äm¿ÄÄ¿ÄÜ¿Äá¿Ä£¿Äº¿Ä·¿Å2¿ÅÇ¿Å’¿Ç-¿Çz¿ÇÉ¿Ç÷¿É3¿Éá¿Éù¿É¶¿Éı¿ÑA¿Ñí¿Ñ€¿ÑÌ¿Ö7¿ÖÉ¿Ö¬¿Ö◊¿Ö„¿Ü¿Üh¿Ü≥¿ÜÂ¿á
¿á8¿áB¿á\¿áØ¿á‘¿à¿à¿àk¿àå¿à√¿àŸ¿â¿ây¿âá¿â†¿â∞¿â’¿â˝¿ä,¿ä9¿äC¿äd¿äÖ¿ä≠¿ä∑¿ä‚¿äˆ¿ã-¿ãD¿ãR¿ãl¿ã{¿ãõ¿ã¬¿å¿å\¿åè¿å≈¿åÕ¿å⁄¿ç"¿çp¿ç°¿ç’¿ç€¿ç‹¿çÏ¿é¿é8¿é@¿éf¿éÑ¿é£¿é‚¿éÍ¿é˝¿è¿è¿è¿è!¿è"¿èa¿èg¿è∞¿ê¿ê,¿ê2¿êÅ¿êÕ¿ë¿ëi¿ë¥¿í¿í:¿í@¿íë¿í‚¿ì3¿ìÅ¿ì—¿î"¿îq¿îµ¿ï¿ï5¿ï;¿ït¿ï¡¿ñ¿ñ[¿ñ¢¿ñ¿ó ¿ó&¿ór¿óΩ¿ò	¿òX¿òö¿ò„¿ô6¿ôÅ¿ô“¿ö¿ö[¿ö©¿ö˙¿õ¿õ¿õØ¿õÔ¿õ¿ú)¿úÖ¿úã¿úå¿úÕ¿úË¿ù	¿ùJ¿ùP¿ùQ¿ùì¿ù‚¿û/¿ûs¿ût¿û£¿û√¿ûÂ¿ü*¿üO¿üí¿üŸ¿ü⁄¿†,¿†{¿†ï¿†„¿°/¿°|¿°ù¿°·¿¢	¿¢M¿¢Ä¿¢ª¿¢Á¿£3¿£s¿£π¿£Ã¿£Õ¿£È¿§¿§8¿§l¿§m¿§”¿§‘¿§¿§Ò¿•¿•q¿• ¿¶¿¶]¿¶¨¿¶ª¿¶√¿ß-¿ßq¿ßü¿ßø¿ß⁄¿ßı¿ß˚¿ß¸¿® ¿®}¿®Ÿ¿©¿©o¿©æ¿©Õ¿©’¿©Û¿™¿™¿™¿™P¿™ñ¿™ø¿™⁄¿´¿´9¿´î¿´Ó¿¨¿¨;¿¨z¿¨ç¿¨¥¿¨¿¿¨ ¿¨Á¿¨Ô¿¨ı¿¨ˆ¿≠¿≠N¿≠g¿≠¢¿≠ø¿≠Á¿Æ¿Æ/¿ÆQ¿Æë¿Æ¥¿Ø¿Ø-¿ØB¿Øà¿Øß¿Øµ¿Ø¡¿ØÀ¿Ø”¿∞#¿∞ç¿∞—¿±A¿±o¿±è¿±™¿±∞¿±±¿±÷¿≤¿≤@¿≤ó¿≤∆¿≤ˆ¿≤˜¿≥¿≥z¿≥∂¿≥Ú¿¥6¿¥q¿¥≠¿µ¿µ[¿µ∑¿µÂ¿∂¿∂ ¿∂;¿∂A¿∂B¿∂á¿∂¬¿∑¿∑T¿∑y¿∑É¿∑ã¿∑ë¿∑ﬂ¿∑˜¿∑˚¿∑¸¿∏F¿∏L¿∏ù¿∏È¿π7¿πl¿πr¿π¬¿πÊ¿πÏ¿∫;¿∫ã¿∫¬¿∫˜¿∫˝¿ªL¿ªÄ¿ªë¿ª¬¿ª¸¿º¿ºk¿ºÖ¿ºõ¿º∞¿º‡¿Ω¿Ω1¿Ω}¿Ωƒ¿Ω¯¿æ¿æ¿æ6¿æW¿æs¿æü¿æ•¿æø¿æ›¿æ·¿æ‚¿ø¿ø6¿øs¿øw¿øx¿ø∞¿ø∂¿ø˛¿¿M¿¿Ö¿¿ã¿¿”¿¿‰¿¡¿¡I¿¡É¿¡è¿¡¡¿¡‡¿¬¿¬¿¬h¿¬π¿√
¿√U¿√~¿√é¿√Â¿ƒ¿ƒ-¿ƒ7¿ƒP¿ƒT¿ƒU¿ƒò¿ƒû¿ƒÔ¿≈@¿≈o¿≈|¿≈∏¿≈Ò¿∆¿∆6¿∆Y¿∆ü¿∆ø¿∆⁄¿∆‚¿∆Ë¿∆˙¿∆˛¿∆ˇ¿«P¿«Ñ¿«ë¿«¢¿««¿» ¿»¿»_¿»t¿»x¿»y¿»†¿»œ¿»Ò¿…¿…5¿…`¿…j¿…p¿…t¿…u¿…ß¿…≠¿…Â¿ ¿ o¿ £¿ ©¿ ‘¿ Ú¿À¿À8¿À@¿ÀR¿ÀV¿ÀW¿À´¿À±¿ÀÈ¿Ã#¿Ãs¿Ã£¿Ã©¿Ã˘¿Õ&¿Õ@¿Õd¿Õç¿Õï¿Õ™¿ÕÆ¿ÕØ¿ÕÙ¿ŒI¿Œù¿ŒÎ¿œ<¿œâ¿œﬂ¿–¿–,¿–?¿–E¿–}¿–ê¿–ñ¿–¶¿–ÿ¿—P¿—X¿—k¿—u¿—¢¿—º¿—Œ¿—Ï¿“&¿“á¿“◊¿”*¿”ã¿‘)¿‘ò¿‘¶¿‘∞¿’
¿’¿’+¿’6¿’K¿’W¿’z¿’°¿’ß¿’Ã¿’˙¿÷¿÷¿÷¿÷^¿÷¿÷Ö¿÷Œ¿◊¿◊)¿◊/¿◊}¿◊Ã¿ÿ¿ÿn¿ÿt¿ÿƒ¿ÿ ¿Ÿ¿ŸH¿ŸU¿Ÿs¿Ÿ∞¿⁄¿⁄(¿⁄[¿⁄m¿⁄≠¿€¿€¿€$¿€0¿€Q¿€u¿€†¿€©¿€Ø¿€∞¿€∫¿€‡¿€˛¿‹H¿‹h¿‹î¿‹™¿‹÷¿‹Ô¿‹ˇ¿›¿›H¿›`¿›ƒ¿›÷¿›ˇ¿ﬁ¿ﬁ\¿ﬁj¿ﬁ¿ﬁã¿ﬁﬁ¿ﬂ
¿ﬂ*¿ﬂ4¿ﬂ<¿ﬂv¿ﬂà¿ﬂ∞¿ﬂ≈¿ﬂ—¿ﬂˆ¿‡:¿‡;¿‡R¿‡b¿‡Å¿‡ß¿‡Ø¿‡µ¿‡π¿‡∫¿‡Í¿·¿· ¿·;¿·`¿·~¿·Ü¿·“¿·Â¿·Ô¿·Û¿·Ù¿‚A¿‚k¿‚q¿‚¡¿„¿„7¿„=¿„}¿„É¿„–¿‰¿‰o¿‰æ¿Â¿Â¿Â:¿Â]¿Âw¿Âó¿ÂÏ¿Â¸¿Ê.¿Ê[¿Êû¿Ê®¿Ê∞¿Ê√¿ÊÕ¿Ê—¿Ê“¿Á"¿Ám¿Ár¿Á ¿Ë¿Ë¿Ëw¿Ëx¿Ë«¿È¿È	¿ÈV¿Èu¿È{¿È…¿Í¿Íf¿Íy¿Í¿ÍÕ¿ÍÓ¿Í˚¿Î¿Î0¿Î|¿Î∆¿Ï¿Ï_¿ÏÆ¿Ï‹¿ÏÏ¿Ì¿ÌQ¿ÌY¿Ìl¿Ìv¿Ìz¿Ì{¿Ìπ¿ÌÙ¿Ó
¿Ó¿ÓL¿Óè¿Óó¿Ó™¿Ó¥¿Ó÷¿Óˆ¿Ô¿ÔP¿ÔT¿ÔU¿Ôã¿ÔŒ¿ÔÊ¿'¿X¿\¿]¿£¿©¿˘¿ÒJ¿Òì¿Ò„¿ÒÈ¿Ú9¿Ú?¿Úé¿Ú∂¿Ú«¿Ú€¿Û¿Û1¿Ûß¿Û◊¿Ù*¿Ùk¿Ùá¿Ù∞¿Ù ¿ÙË¿Ù˙¿ı¿ı%¿ı@¿ı_¿ıe¿ıi¿ıj¿ı∞¿ı∂¿ˆ¿ˆW¿ˆ•¿ˆ¿˜A¿˜\¿˜b¿˜ö¿˜†¿˜¿˜ˆ¿¯C¿¯m¿¯~¿¯î¿¯Õ¿˘.¿˘l¿˘Æ¿˘ÿ¿˘‡¿˙1¿˙¿˙œ¿˚¿˚l¿˚à¿˚é¿˚≠¿˚ﬂ¿˚„¿˚‰¿¸:¿¸@¿¸s¿¸Ñ¿¸†¿¸€¿¸ﬂ¿¸‡¿˝'¿˝-¿˝|¿˝ ¿˛¿˛c¿˛i¿˛∏¿˛Œ¿˛‘¿ˇ!¿ˇo¿ˇ£¿ˇ©¿ˇ˘¿ˇˇ¿ L¿ s¿ Ñ¿ ó¿ “¿3¿N¿z¿»¿Œ¿¿9¿U¿É¿â¿”¿¿¿5¿f¿j¿k¿ª¿¿G¿M¿û¿Ô¿ı¿C¿ì¿ﬁ¿/¿}¿»¿¿c¿s¿y¿∆¿¿`¿±¿Ú¿¯¿	D¿	d¿	¢¿	£¿	Ø¿	‘¿	‰¿
¿
U¿
ù¿
π¿	¿E¿ç¿›¿¿¿q¿}¿Ö¿ò¿¢¿ª¿ø¿¿¿Ã¿ﬂ¿Ô¿(¿x¿ß¿ﬂ¿¿;¿å¿»¿¿¿o¿{¿É¿¶¿ﬁ¿¿3¿Ö¿’¿&¿s¿∑¿ƒ¿›¿Ú¿B¿î¿Ë¿:¿[¿h¿Å¿‘¿‡¿Ë¿˚¿¿@¿P¿r¿™¿Ó¿¿V¿´¿ˇ¿R¿à¿ï¿Ë¿Ù¿¸¿&¿^¿û¿≥¿ˆ¿F¿ì¿Ÿ¿%¿F¿S¿¶¿Û¿ˇ¿¿/¿g¿¿¿’¿*¿}¿Œ¿ˇ¿¿_¿¨¿∏¿¿¿Í¿¿<¿û¿≥¿¿X¿ß¿˘¿C¿P¿£¿ ¿ ¿ ¿ 9¿ q¿ ÿ¿ Ì¿!G¿!§¿!˛¿"U¿"{¿"à¿"€¿#;¿#P¿#™¿#Ú¿#ˇ¿$¿$¿$&¿$0¿$U¿$u¿${¿$å¿$ê¿$ë¿$“¿$˙¿%&¿%'¿%\¿%l¿%•¿%›¿&.¿&J¿&õ¿&≤¿&ø¿&‘¿'#¿'É¿'¬¿'œ¿'€¿'„¿'ˆ¿( ¿(¿(¿(¿(p¿(}¿(ø¿)¿)¿)¿)j¿)ù¿)ø¿)Ó¿*¿*!¿*"¿*.¿*Ö¿*æ¿+!¿+=¿+É¿+â¿+±¿+¬¿+∆¿+«¿+”¿,¿,\¿,`¿,a¿,m¿,»¿-¿-d¿-y¿-}¿-~¿-—¿-Ó¿-Ù¿.K¿.ü¿.±¿.∑¿.«¿/¿/'¿/I¿/}¿/Å¿/Ç¿/†¿/Ÿ¿0¿0¿0¿0 ¿0Y¿0í¿0≥¿0ˆ¿1¿1¿1B¿1F¿1G¿1S¿1ï¿1Œ¿1Ô¿2¿2N¿2]¿2e¿2à¿2é¿2⁄¿3¿3¿3	¿3¿3[¿3î¿3µ¿3‹¿3˚¿4;¿4`¿4h¿4ã¿4ë¿4ª¿4ø¿4¿¿4Ã¿5¿5E¿5f¿5Ö¿5–¿5˚¿6¿6&¿6,¿6=¿6A¿6B¿6N¿6ê¿6…¿6Í¿7¿7A¿7G¿7K¿7L¿7Ñ¿7ä¿7‡¿81¿8Ç¿8Ø¿8˛¿98¿9I¿9j¿9 ¿:¿:(¿:,¿:-¿:k¿:{¿:∞¿:Ë¿; ¿;F¿;i¿;v¿;Œ¿;„¿<6¿<N¿<s¿<ï¿<Æ¿=¿=¿=¿=#¿=6¿=@¿=Q¿=U¿=V¿=ù¿=£¿=ÿ¿>¿>.¿>H¿>{¿>¢¿>Ω¿>√¿>€¿>ˆ¿>¸¿?¿?#¿?$¿?s¿?y¿? ¿?¯¿@$¿@U¿@r¿@ç¿@§¿@ø¿@≈¿@◊¿@€¿@‹¿@Ë¿A!¿A\¿A`¿Aa¿Aï¿A°¿Aˇ¿B ¿B¿Ba¿Bå¿Bû¿B±¿B≈¿BÃ¿B–¿B—¿B›¿C"¿CM¿Cï¿CÕ¿D ¿D&¿D~¿E¿E3¿E}¿E¥¿Eﬂ¿F%¿F`¿Fù¿FÏ¿G]¿Gp¿G˘¿Gˇ¿H¿H¿H¿HB¿HÇ¿H¶¿H’¿H›¿HÚ¿Hˆ¿H˜¿I@¿IF¿Iâ¿I”¿I˙¿J¿J,¿J-¿J{¿J«¿J‰¿JÂ¿K ¿K@¿KA¿Kè¿K∞¿K∂¿K¸¿LC¿Lë¿L©¿L√¿L˝¿M4¿MB¿MH¿Mc¿Mú¿M¨¿Mœ¿N¿N2¿Ns¿Nä¿Nî¿NŸ¿O(¿OD¿O∞¿P¿P_¿Pµ¿Q
¿Q]¿Qå¿Qô¿Q˘¿R¿R;¿R⁄¿R‰¿S¿SD¿S|¿S⁄¿Sˆ¿TL¿T|¿Tâ¿TÈ¿Tı¿T˝¿U¿U¿U+¿U9¿U?¿UR¿Uu¿Uy¿Uz¿U»¿U⁄¿U‡¿V-¿V{¿Vµ¿Vª¿W¿WX¿Wå¿Wí¿W∞¿W∂¿WÃ¿W“¿X"¿Xo¿X≠¿X≥¿Y¿YP¿Y†¿Y„¿YÈ¿Z9¿Zä¿Z€¿[¿[¿[+¿[1¿[Ñ¿[¨¿[≤¿\¿\7¿\=¿\â¿\∏¿\æ¿]¿]¿]2¿]8¿]Ü¿]“¿^¿^d¿^©¿^Ø¿^˙¿_F¿_L¿_ñ¿_Ê¿`5¿`Ö¿`Ω¿`Í¿`¿a:¿aà¿aÆ¿a¥¿a˙¿bJ¿bô¿b¶¿b¨¿b¸¿cH¿cî¿cƒ¿c ¿c„¿cÈ¿d9¿dq¿dw¿d«¿e¿eg¿e≥¿e¯¿e˛¿fI¿fì¿fﬂ¿g/¿gz¿g ¿h¿h[¿h´¿h˙¿iF¿iL¿iñ¿iÊ¿j6¿jÖ¿j”¿k$¿k*¿kz¿kæ¿l¿l%¿lL¿lÜ¿l‘¿l‚¿lË¿l¯¿m6¿ma¿mÅ¿m©¿mÀ¿m‹¿n¿n¿n¿n+¿n5¿nn¿nî¿nª¿nÀ¿o¿o;¿oN¿oX¿ob¿oz¿oä¿oú¿o ¿p¿pG¿p\¿ph¿pn¿pÉ¿pá¿pà¿p±¿p∑¿p˛¿q¿q@¿qM¿q^¿qx¿qå¿qê¿qí¿qì¿qŸ¿q¸¿r¿r.¿rH¿rc¿ri¿rj¿rÅ¿rÇ¿ré¿r‹¿s¿sK¿sn¿s∑¿sΩ¿sﬁ¿sÔ¿sÛ¿sı¿sˆ¿tB¿tY¿t]¿t•¿t©¿t∑¿tª¿u¿u ¿uk¿u∫¿uœ¿v¿v¿vM¿vQ¿vù¿vÓ¿w:¿wu¿wy¿w•¿w©¿wΩ¿x¿xC¿xG¿xÖ¿xâ¿x÷¿xÊ¿xÍ¿x¯¿x¸¿yG¿yç¿y‹¿y¯¿z+¿ze¿zk¿z∏¿{¿{"¿{(¿{x¿{«¿{¿|¿|7¿|{¿|ö¿|õ¿|Ÿ¿|ﬂ¿}-¿}Y¿}ü¿}º¿}€¿}‹¿~¿~¿~]¿~§¿~≈¿~À¿¿i¿µ¿Ä¿ÄR¿ÄX¿Ä¶¿ÄÁ¿Å.¿Å}¿Åƒ¿Å ¿Ç¿ÇZ¿Ç`¿Çp¿Çv¿Çø¿É¿É[¿Én¿Éø¿É›¿Ñ¿Ñ ¿Ñj¿ÑÉ¿Ñì¿Ñ˙¿Ö¿Ö¿ÖG¿Ö≤¿Ö∂¿Ö∑¿ÖÁ¿ÖÒ¿Ü¿Ü*¿ÜÑ¿Ü‹¿á*¿á0¿áD¿áH¿áI¿ág¿á¿á§¿á•¿á±¿à¿à¿à¿àT¿à¿à†¿àÈ¿àˆ¿âU¿â[¿â_¿âa¿âb¿â≥¿â…¿âÕ¿ä	¿ä¿ä¿ä¿äh¿ä≠¿ä˙¿ã9¿ã:¿ãã¿ãï¿ãô¿ãÍ¿ãÓ¿ã¸¿å ¿åJ¿åè¿å‹¿ç-¿ç.¿ç¿çû¿ç¢¿çÁ¿é+¿é>¿éB¿éê¿é›¿è+¿èv¿èø¿ê¿ê¿ê¿ê!¿êk¿ê∞¿êÚ¿ëL¿ëM¿ë¿ëÉ¿ë«¿ëÀ¿í¿íD¿íH¿íV¿íZ¿í£¿íÎ¿ì7¿ìâ¿ìä¿ìª¿ìø¿î¿îM¿îQ¿îz¿î¨¿îˆ¿ï¿ï¿ï,¿ï-¿ïN¿ïZ¿ïä¿ïã¿ïó¿ïÃ¿ïÕ¿ïŸ¿ñ
¿ñ,¿ñH¿ñÅ¿ñî¿ñ∞¿ñ¥¿ñµ¿ñÃ¿ó¿óT¿óX¿óY¿ó®¿ó¯¿ò7¿ò=¿òã¿òº¿ò»¿òı¿ô¿ô"¿ô,¿ô>¿ô_¿ôt¿ôÄ¿ôó¿ô©¿ôÀ¿ô‡¿ôÏ¿ö¿ö3¿öS¿öv¿öê¿öæ¿öÀ¿ö‹¿õ¿õ1¿õl¿õy¿õÑ¿õç¿õù¿õÎ¿ú6¿úo¿úu¿ú¿ú∞¿úŒ¿úÁ¿ù
¿ù$¿ùR¿ù_¿ùp¿ù©¿ù≈¿û ¿û¿û¿û!¿ûP¿ûV¿ûZ¿û[¿û´¿û˜¿ü¿ü¿ü*¿ü+¿ü7¿üf¿üÄ¿üò¿üû¿ü¢¿ü£¿üØ¿ü”¿ü¿†¿†!¿†%¿†'¿†(¿†m¿†ü¿†È¿°¿°¿°(¿°e¿°f¿°r¿°ù¿°∫¿°€¿°ı¿°˘¿°˚¿°¸¿¢@¿¢q¿¢ª¿¢‰¿£¿£#¿£3¿£c¿£õ¿§¿§#¿§v¿§Ω¿•¿•¿•+¿•3¿•F¿•P¿•t¿•è¿•õ¿•∏¿¶¿¶V¿¶p¿¶w¿¶ì¿¶÷¿¶⁄¿¶€¿¶Á¿ß¿ß¿ßU¿ß[¿ß§¿ßÙ¿®¿®I¿®j¿®k¿®w¿®ç¿®•¿®Ω¿®¡¿®¬¿®Œ¿®Â¿©(¿©v¿©Ü¿©π¿©Ò¿™@¿™£¿™∏¿´¿´Z¿´g¿´s¿´{¿´é¿´ò¿´®¿´Ë¿´˚¿¨¿¨(¿¨8¿¨r¿¨Ö¿¨è¿¨®¿¨¨¿¨≠¿¨π¿¨”¿¨ı¿≠¿≠@¿≠F¿≠b¿≠f¿≠g¿≠s¿≠ù¿≠∫¿≠€¿Æ¿Æ>¿Æõ¿Æ´¿Æﬁ¿Ø¿Øk¿Ø’¿ØÍ¿∞G¿∞í¿∞ü¿∞´¿∞≥¿∞∆¿∞–¿∞Í¿∞Ó¿∞Ô¿∞˚¿±¿±%¿±;¿±å¿±⁄¿≤¿≤q¿≤á¿≤ã¿≤å¿≤ò¿≤Æ¿≤∆¿≤ﬁ¿≤‚¿≤„¿≤Ô¿≥¿≥¿≥,¿≥<¿≥¿≥î¿≥ú¿≥“¿¥&¿¥@¿¥•¿¥¿¥˚¿µ¿µ¿µ*¿µt¿µ®¿µª¿µø¿µ¿¿µÃ¿∂¿∂/¿∂j¿∂≠¿∂Â¿∑é¿∑™¿∏¿∏d¿∏∂¿π¿π,¿π9¿πN¿πæ¿∫0¿∫ä¿∫ó¿∫£¿∫´¿∫Ó¿ª&¿ª≥¿ªœ¿º)¿º|¿ºÀ¿Ω¿Ωb¿Ωo¿ΩÑ¿Ω⁄¿æ/¿æo¿æ»¿æ›¿æÍ¿æˇ¿ø9¿øî¿ø„¿¿6¿¿p¿¿}¿¿â¿¿ë¿¿§¿¿Æ¿¡¿¡¿¡¿¡Z¿¡™¿¡˘¿¬2¿¬8¿¬á¿¬¿¿√¿√A¿√h¿√i¿√u¿√ñ¿√π¿√‹¿√‡¿√·¿√Ì¿ƒB¿ƒm¿ƒ¿ƒí¿ƒ¶¿ƒº¿ƒ√¿ƒ«¿ƒ»¿ƒ‘¿≈¿≈D¿≈©¿≈≠¿≈Ø¿≈∞¿≈Ò¿∆(¿∆Q¿∆{¿∆|¿∆à¿∆ª¿∆º¿∆»¿∆Ô¿«(¿«I¿«f¿«á¿«ü¿«π¿«Ω¿«æ¿«˜¿«˝¿»M¿»ò¿»∑¿»ƒ¿»ˆ¿…¿…¿…¿…e¿…t¿…z¿…¡¿ ¿ ¿ L¿ N¿ O¿ ï¿ ⁄¿À$¿À[¿À\¿À´¿À∂¿Àº¿Ã¿Ã¿Ã;¿ÃK¿Ã[¿Ãk¿Ã~¿Ãà¿Ã†¿Ã¥¿Ã∫¿Õ¿Õ¿Õ¿ÕJ¿Õ{¿Õ•¿ÕŒ¿Õ›¿Œ¿Œ¿Œ ¿ŒK¿ŒO¿ŒP¿Œü¿ŒÂ¿Œ¸¿œ¿œO¿œ†¿œÀ¿œ—¿–%¿–o¿–ø¿–’¿–€¿—,¿—v¿—√¿—…¿“¿“e¿“k¿“ü¿“Ë¿“Ó¿”3¿”9¿”â¿”Ÿ¿‘)¿‘x¿‘»¿’¿’F¿’É¿’≥¿’˘¿÷¿÷¿÷¿÷+¿÷a¿÷ñ¿÷ö¿÷ú¿÷ù¿÷„¿◊¿◊[¿◊ç¿◊é¿◊◊¿◊ÿ¿◊‰¿ÿ¿ÿ;¿ÿÅ¿ÿ·¿Ÿ)¿Ÿ-¿Ÿ.¿Ÿ:¿ŸV¿Ÿf¿Ÿâ¿Ÿú¿Ÿ¶¿Ÿƒ¿Ÿ»¿Ÿ…¿⁄¿⁄%¿⁄+¿⁄k¿⁄¢¿⁄È¿€¿€%¿€h¿€°¿€∫¿€¿¿‹¿‹¿‹'¿‹-¿‹v¿‹≤¿‹¸¿›¿›W¿›£¿›Û¿ﬁ¿ﬁ&¿ﬁU¿ﬁx¿ﬁ|¿ﬁ}¿ﬁ«¿ﬁÕ¿ﬂ¿ﬂD¿ﬂë¿ﬂﬂ¿ﬂÂ¿‡(¿‡t¿‡z¿‡À¿‡—¿‡·¿‡Á¿·0¿·l¿·∏¿· ¿‚¿‚d¿‚¥¿‚⁄¿‚Á¿„"¿„F¿„J¿„K¿„°¿„ß¿„¿‰?¿‰X¿‰^¿‰´¿‰Ù¿Â¿Â¿ÂT¿Âì¿Âô¿Â©¿ÂØ¿Â˚¿Ê¿ÊW¿Ê†¿ÊÏ¿Á<¿Áb¿Áo¿ÁÆ¿Á‘¿Áÿ¿ÁŸ¿Ë¿Ë¿ËO¿ËU¿Ëì¿Ë⁄¿Ë‡¿Ë¿Ëˆ¿È?¿È{¿È«¿ÈŸ¿Í#¿Ís¿Íô¿Í¶¿Í˜¿Î¿Î"¿Î#¿Îì¿Îô¿ÎÁ¿Ï:¿Ï@¿Ïê¿Ï´¿Ï∏¿Ï…¿Ïı¿Ì¿Ì¿Ì¿Ìg¿Ì†¿Ì¶¿Ìﬁ¿Ì‰¿Ó'¿Ó3¿Ó_¿Ó§¿Óƒ¿Ó ¿ÓŒ¿Óœ¿Ô ¿ÔO¿ÔU¿Ô†¿ÔÔ¿9¿?¿O¿U¿£¿‰¿¿Ò"¿Òb¿Òö¿Ò¨¿Òﬁ¿Ú¿ÚD¿Úk¿Úu¿Úñ¿Ú¢¿ÚŒ¿Û¿Û2¿Û8¿Û<¿Û>¿Û?¿Ûá¿Ûã¿ÛŸ¿Ù!¿Ù@¿ÙD¿Ùj¿Ùn¿Ùø¿Ù√¿ÙÒ¿Ùı¿ı;¿ı?¿ıê¿ı©¿ı≠¿ı˚¿ˆ¿ˆ¿ˆV¿ˆo¿ˆs¿ˆƒ¿˜¿˜Z¿˜´¿˜‡¿˜‰¿¯/¿¯}¿¯ü¿¯£¿¯ƒ¿¯»¿˘¿˘W¿˘û¿˘Â¿˙¿˙¿˙$¿˙W¿˙w¿˙{¿˙π¿˙„¿˙Û¿˚8¿˚<¿˚P¿˚î¿˚⁄¿˚˚¿¸"¿¸1¿¸9¿¸=¿¸J¿¸P¿¸X¿¸\¿¸j¿¸n¿¸∑¿¸¿¸Ù¿˝@¿˝é¿˝’¿˛#¿˛[¿˛_¿˛≤¿ˇ¿ˇL¿ˇú¿ˇÍ¿ "¿ &¿ p¿ ª¿ ’¿ Ÿ¿ Û¿ ˜¿A¿é¿€¿˘¿˝¿L¿ú¿Ï¿<¿¿É¿”¿ ¿p¿¡¿	¿Y¿Ç¿Ü¿“¿ ¿q¿º¿¿¿¿	¿T¿§¿≈¿…¿¿	¿X¿©¿˜¿	)¿	k¿	ª¿	¯¿	¸¿
B¿
ê¿
Ÿ¿
›¿*¿w¿∑¿ª¿‚¿Ê¿5¿É¿“¿ ¿2¿6¿Q¿U¿†¿Â¿0¿z¿«¿¿#¿'¿x¿¬¿ı¿˘¿G¿ó¿Ê¿#¿H¿L¿w¿{¿∏¿¿T¿s¿w¿≈¿¿5¿9¿V¿Z¿•¿ˆ¿C¿á¿º¿¿>¿?¿u¿{¿ø¿À¿Ì¿*¿E¿I¿h¿i¿u¿®¿©¿ ¿÷¿¿¿<¿=¿y¿ö¿›¿+¿{¿±¿ˇ¿¿&¿f¿Å¿ã¿†¿¨¿–¿÷¿Ê¿,¿E¿M¿`¿j¿ó¿õ¿ú¿¬¿Ú¿¿8¿^¿d¿t¿Ø¿⁄¿B¿î¿√¿-¿;¿ä¿◊¿¿A¿Å¿ü¿Ì¿¿¿ò¿„¿Û¿ ¿ \¿ ´¿ «¿!/¿!I¿!Z¿!x¿!æ¿"¿"@¿"O¿"f¿"±¿#¿#P¿#É¿#í¿#©¿#Ò¿$@¿$Ö¿$Ø¿$æ¿$‹¿%(¿%h¿%w¿%Ö¿%Ø¿%À¿&¿&¿&8¿&E¿&O¿&W¿&j¿&t¿&x¿&y¿&√¿&‰¿'>¿'q¿'¶¿'›¿'ﬁ¿(-¿(F¿(ë¿(ﬂ¿)¿)M¿)à¿)’¿*#¿*k¿*π¿*“¿+¿+[¿+¢¿+‰¿,2¿,S¿,T¿,ó¿,Œ¿-¿-Ç¿-ø¿-À¿-‚¿-¯¿.¿.¿.A¿.G¿.W¿.á¿.ú¿.§¿.—¿.ˆ¿/¿/"¿/@¿/_¿/h¿/{¿/Ö¿/ò¿/ú¿/ù¿/©¿/⁄¿/¸¿0¿0+¿0>¿0H¿0ï¿0¡¿0—¿0Ò¿1¿1¿1¿1E¿1X¿1b¿1¿1†¿1◊¿1€¿1‹¿1Ë¿2 ¿2=¿2^¿2n¿2ï¿2®¿2≤¿2Ó¿2Ú¿2Û¿3¿3,¿3b¿3u¿3¿3É¿3Ñ¿3ê¿3„¿4¿4#¿4$¿4B¿4]¿4m¿4å¿4ü¿4©¿4Ù¿5¿5$¿57¿5A¿5x¿5|¿5}¿5â¿5ü¿5∑¿5√¿5·¿6.¿6Z¿6a¿6e¿6f¿6r¿6Ö¿6ë¿6µ¿7¿7¿7%¿7l¿7Å¿7ç¿7´¿7ı¿8!¿8(¿8\¿8z¿8î¿8ò¿8ô¿8„¿9¿9¿9 ¿9h¿9ã¿9≈¿:¿:L¿:¿:‹¿;&¿;5¿;C¿;M¿;q¿;¡¿<¿<a¿<®¿= ¿=¿=¿=%¿=@¿=v¿=|¿=Ä¿=Å¿=ç¿=≤¿=‘¿=Ù¿>¿>0¿>Ä¿>÷¿>⁄¿>€¿>Á¿?¿?F¿?[¿?¢¿?≤¿?‰¿@<¿@W¿@o¿@ÿ¿@Â¿A¿Ai¿Av¿Aã¿AÍ¿B;¿BH¿BR¿B_¿Bg¿Bz¿BÑ¿B÷¿C<¿Cî¿CÁ¿CÌ¿CÒ¿CÚ¿C˛¿D¿DL¿Dù¿D»¿DŒ¿D‡¿D‰¿DÂ¿E)¿E/¿E}¿EÀ¿F¿Fk¿F£¿F∏¿F≈¿G¿G¿Gf¿Gl¿G∂¿Gº¿H¿H¿H\¿H´¿Hˇ¿IQ¿I£¿Iˆ¿JG¿J¿Jå¿J˛¿Jˇ¿K1¿K7¿KÖ¿K≤¿Kø¿L¿L¿L"¿Lg¿Lí¿L¸¿M ¿M¿M¿MS¿Mc¿Mg¿Mµ¿M’¿M‚¿N¿N<¿N>¿Nô¿N¬¿N—¿Nˆ¿O/¿O3¿O\¿O^¿O_¿Oí¿Oñ¿O‹¿P¿P4¿PÄ¿P£¿P©¿P⁄¿P‡¿Q¿Qj¿Q∫¿Q˛¿R ¿Rq¿Rò¿R¨¿R∞¿R±¿RΩ¿RÓ¿S¿S:¿SW¿Sy¿S}¿S¿SÄ¿SÃ¿T¿TR¿Tí¿Tì¿Tü¿T√¿T÷¿TÙ¿T¯¿T˘¿U¿UH¿U[¿U_¿U`¿Ul¿U¡¿U‘¿Uÿ¿UŸ¿UÂ¿V(¿V;¿V?¿V@¿VL¿V~¿V©¿V≠¿VØ¿V∞¿W¿W¿W"¿W&¿Wl¿WΩ¿W˚¿X>¿Xà¿X÷¿X◊¿XÍ¿XÎ¿X˜¿Y&¿Y@¿YX¿Y^¿Yb¿Yc¿Yo¿Yì¿Y∞¿Y√¿Y·¿YÂ¿YÊ¿YÚ¿Z#¿ZE¿Zû¿Z¢¿Z£¿ZØ¿ZË¿[¿[&¿[¿[É¿[Ñ¿[ê¿[”¿\T¿\n¿\¢¿\¬¿\Ò¿\ı¿\ˆ¿]¿]W¿]j¿]n¿]o¿]{¿]æ¿^?¿^Y¿^Ç¿^°¿^–¿^‘¿^÷¿^◊¿_)¿_-¿_s¿_≈¿`¿`V¿`Z¿`h¿`l¿`∏¿`ﬂ¿a-¿aZ¿aú¿aÊ¿b1¿by¿bz¿bÜ¿bÏ¿c_¿cc¿cd¿cò¿cû¿cÎ¿d¿d¿d#¿dê¿dë¿d±¿e¿e%¿ec¿ed¿ep¿e¡¿f>¿fr¿f≥¿f‚¿fÊ¿fÁ¿fÛ¿gd¿g·¿h¿hM¿h|¿hÄ¿hÅ¿hç¿h–¿iM¿iw¿ió¿i∆¿i ¿iÀ¿i◊¿j¿j3¿jd¿j|¿jÑ¿jä¿jé¿jè¿jõ¿jø¿jÊ¿k¿k:¿kX¿k\¿k]¿kù¿k≠¿kÿ¿k˙¿l¿lZ¿l‘¿lÌ¿mD¿mÇ¿mì¿m˛¿n=¿nM¿nZ¿ne¿nm¿nÄ¿nä¿nõ¿nü¿n†¿n¨¿nÈ¿o/¿ok¿oÄ¿oÑ¿oÖ¿oë¿o¬¿o‰¿pR¿p–¿pÏ¿q¿q†¿qæ¿qﬁ¿q‰¿q˛¿r¿r¿r¿rG¿rd¿r“¿rÛ¿sO¿s»¿sË¿sÏ¿sÓ¿sÔ¿t5¿t9¿tÖ¿t“¿u¿uZ¿uò¿u∑¿u˙¿vD¿vk¿vl¿vx¿vâ¿v∂¿vÀ¿w	¿w¿w¿w¿w+¿wI¿w[¿w_¿w`¿wl¿wë¿w∞¿wÓ¿wÚ¿wÛ¿x-¿xD¿xW¿x]¿xì¿x∑¿x“¿xÍ¿ye¿yr¿yé¿yˆ¿z¿z¿zx¿z‘¿{¿{ ¿{5¿{ê¿{Ì¿|7¿|D¿|O¿|X¿|^¿|o¿|s¿|u¿|v¿|≈¿|…¿}¿}-¿}B¿}¿}ù¿}û¿}«¿}‡¿}·¿}Ì¿~&¿~(¿~)¿~O¿~j¿~~¿~ï¿~√¿~»¿¿¿/¿O¿e¿ï¿ö¿ø¿—¿”¿‘¿Ä¿Ä.¿Ä2¿Äz¿Ä¿¿Å¿ÅV¿Åo¿Ås¿ÅÅ¿ÅÖ¿Å‘¿Ç&¿Ç1¿ÇY¿Ç§¿Ç—¿Ç“¿É¿É9¿ÉJ¿ÉK¿ÉÑ¿Éó¿Éò¿É§¿É«¿ÉÛ¿Ñ¿Ñ¿Ñ-¿ÑM¿Ñn¿Ñr¿Ñs¿Ñ¿Ñ∞¿Ñ≤¿Ñ≥¿Ñ¯¿Ö¿ÖB¿Öq¿Ör¿Ö£¿Ö§¿Ö∞¿ÖÍ¿ÖÏ¿ÖÌ¿Ü¿Ü'¿Ü(¿Ü4¿Üm¿Üo    /
_DebugOnly
_debugOnly	ObjectKey	GlobalKeyLabeledGlobalKeyGlobalObjectKeyWidgetStatelessWidgetStatefulWidget_StateLifecycle_flutterWidgetsLibraryStateProxyWidgetParentDataWidgetInheritedWidgetRenderObjectWidgetLeafRenderObjectWidgetSingleChildRenderObjectWidgetMultiChildRenderObjectWidget_ElementLifecycle_InactiveElementsBuildContext
BuildOwnerNotifiableElementMixin_NotificationNode_isProfileBuildsEnabledForElement_ElementDiagnosticableTreeNodeErrorWidgetComponentElementStatelessElementStatefulElementProxyElementParentDataElementInheritedElementRenderObjectElementRootRenderObjectElementRootElementMixinLeafRenderObjectElementSingleChildRenderObjectElementMultiChildRenderObjectElementRenderTreeRootElementDebugCreator_reportExceptionIndexedSlot_NullElement_NullWidget ëî