Ä«shouldPainttoStringbuildHandlegetHandleAnchorbuildToolbargetHandleSizecanCutcanCopycanPastecanSelectAll	handleCut
handleCopyhandlePastehandleSelectAllcontextrenderObjectselectionControlsselectionDelegate_selectionOverlaycontextMenuBuildervalue_value
_selection_effectiveStartHandleVisibility_effectiveEndHandleVisibility_effectiveToolbarVisibility'_updateTextSelectionOverlayVisibilitieshandlesVisible_handlesVisibleshowHandleshideHandlesshowToolbar showSpellCheckSuggestionsToolbarshowMagnifierupdateMagnifierhideMagnifierupdate_updateSelectionOverlayupdateForScrollhandlesAreVisibletoolbarIsVisiblemagnifierIsVisiblespellCheckToolbarIsVisiblehidehideToolbardispose_getStartGlyphHeight_getEndGlyphHeight_buildMagnifier_endHandleDragPosition$_endHandleDragPositionToCenterOfLine"_handleSelectionEndHandleDragStart_getHandleDy#_handleSelectionEndHandleDragUpdate_startHandleDragPosition&_startHandleDragPositionToCenterOfLine$_handleSelectionStartHandleDragStart%_handleSelectionStartHandleDragUpdate_handleAnyDragEnd_handleSelectionHandleChanged_chooseType_magnifierInfo_magnifierControllermagnifierConfigurationstartHandleType_startHandleTypelineHeightAtStart_lineHeightAtStart_isDraggingStartHandlestartHandlesVisibleonStartHandleDragStart_handleStartHandleDragStart_handleStartHandleDragUpdateonStartHandleDragUpdateonStartHandleDragEnd_handleStartHandleDragEndendHandleType_endHandleTypelineHeightAtEnd_lineHeightAtEnd_isDraggingEndHandleendHandlesVisibleonEndHandleDragStart_handleEndHandleDragStart_handleEndHandleDragUpdateonEndHandleDragUpdateonEndHandleDragEnd_handleEndHandleDragEndtoolbarVisibleselectionEndpoints_selectionEndpointsdebugRequiredFortoolbarLayerLinkstartHandleLayerLinkendHandleLayerLinkdragStartBehavioronSelectionHandleTappedclipboardStatustoolbarLocation_toolbarLocationfadeDuration_handles_toolbar_contextMenuController_spellCheckToolbarController_buildScheduledmarkNeedsBuild_buildStartHandle_buildEndHandle_buildToolbarchildoffset	layerLink
visibilitycreateState_controller_opacity	initStatedidUpdateWidget_toolbarVisibilityChangedbuildhandleLayerLinkonSelectionHandleDragStartonSelectionHandleDragUpdateonSelectionHandleDragEndpreferredLineHeighttype_handleVisibilityChangededitableTextKeyforcePressEnabledselectionEnableddelegate#_showMagnifierIfSupportedByPlatform#_hideMagnifierIfSupportedByPlatform_lastSecondaryTapWasOnSelection _positionWasOnSelectionExclusive _positionWasOnSelectionInclusive_positionOnSelection_expandSelection_extendSelectionshouldShowSelectionToolbar_shouldShowSelectionToolbareditableTextrenderEditable_isShiftPressed_dragStartScrollOffset_dragStartViewportOffset_scrollPosition_dragStartSelection_dragBeganOnPreviousSelection_longPressStartedWithoutFocusonTapTrackStartonTapTrackReset	onTapDownonForcePressStartonForcePressEndonUserTapAlwaysCalled	onUserTaponSingleTapUponSingleTapCancelonSingleLongTapStartonSingleLongTapMoveUpdateonSingleLongTapEndonSecondaryTaponSecondaryTapDownonDoubleTapDown_selectParagraphsInRange_selectLinesInRange_moveToTextBoundary_selectTextBoundariesInRangeonTripleTapDownonDragSelectionStartonDragSelectionUpdateonDragSelectionEndbuildGestureDetectorbehavior _getEffectiveConsecutiveTapCount_handleTapTrackStart_handleTapTrackReset_handleTapDown_handleTapUp_handleTapCancel_handleDragStart_handleDragUpdate_handleDragEnd_forcePressStarted_forcePressEnded_handleLongPressStart_handleLongPressMoveUpdate_handleLongPressEnd	_disposedaddListenerremoveListenerdidChangeAppLifecycleState	pasteableunknownnotPasteableenableddisabledToolbarBuilderToolbarItemsParentDataTextSelectionControlsEmptyTextSelectionControlsemptyTextSelectionControlsTextSelectionOverlaySelectionOverlay_SelectionToolbarWrapper_SelectionToolbarWrapperState_SelectionHandleOverlay_SelectionHandleOverlayState+TextSelectionGestureDetectorBuilderDelegate#TextSelectionGestureDetectorBuilderTextSelectionGestureDetector"_TextSelectionGestureDetectorStateClipboardStatusNotifierClipboardStatusLiveTextInputStatusNotifierLiveTextInputStatusTextSelectionHandleControlsÅ∆TextSelectionPointTextSelectionDelegateTextSelectionToolbartoolbarBuilderCupertinoTextSelectionToolbarWidgetBuildContextContainerBoxParentData	RenderBoxbooloverrideStringtoStringEditableTextcontextMenuBuilderselectionControlsSelectionAreaonTapcupertinoTextSelectionControlsTextSelectionHandleTypedoubleVoidCallbackOffsetRenderEditablepreferredLineHeight
DeprecatedRectListValueListenableSize	Clipboard
cutEnabledtextEditingValue	selectionisCollapsedcopyEnabledpasteEnabledselectAllEnabledtext
isNotEmptycutSelectionvoidSelectionChangedCausetoolbarcopySelection	pasteTextFuture	selectAllMaterialTextSelectionControlszeroshrinkmaterialTextSelectionControlsOverlayTextEditingValue	LayerLinkDragStartBehaviorstartTextMagnifierConfiguration kFlutterMemoryAllocationsEnabledFlutterMemoryAllocationsinstancedispatchObjectCreatedlibrary	classNameobjectselectionStartInViewportaddListenerselectionEndInViewportmagnifierConfigurationcontextdebugRequiredForstartHandleType	collapsedstartHandlesVisiblelineHeightAtStartonStartHandleDragStartonStartHandleDragUpdateonEndHandleDragEndendHandleTypeendHandlesVisiblelineHeightAtEndonEndHandleDragStartonEndHandleDragUpdateonStartHandleDragEndtoolbarVisibleselectionEndpointsselectionDelegateclipboardStatusstartHandleLayerLinkendHandleLayerLinktoolbarLayerLinkonSelectionHandleTappeddragStartBehaviortoolbarLocationlastSecondaryTapDownPositionWidgetBuildervisibleForTestingTextSelectionValueNotifiervalueshowHandleshideHandlesshowToolbarmounted showSpellCheckSuggestionsToolbarbuilderTextPositiongetPositionForPointshowMagnifiercurrentTextPositionglobalGesturePositionrenderEditableupdateMagnifierhideMagnifierSchedulerBindingschedulerPhaseSchedulerPhasepersistentCallbacksWidgetsBinding	drawFramemarkNeedsBuildtextDirectionleftrightgetEndpointsForSelection_handlestoolbarIsVisible_magnifierControllershown_spellCheckToolbarControllerisShownhidehideToolbardispatchObjectDisposeddisposeremoveListenerint	plainTextisValid
textInside
charactersfirstlengthgetRectForComposingRange	TextRangeendheightlastMagnifierInfolocalToGlobalgetLocalRectForCaretgetLineAtOffsetoffsetextentOffsetaffinityTextAffinityupstream
baseOffset
fromPoints	topCenterbottomCenterfieldBoundssize	caretRectshiftcurrentLineBoundariesDragStartDetailsattachedglobalPositiondypointdxabsfloorDragUpdateDetailsfromPositiondefaultTargetPlatformTargetPlatformiOSmacOSandroidfuchsialinuxwindowsextentbaseDragEndDetailsuserUpdateTextEditingValuecopyWithdragTextDirectionltrrtldisableddebugCheckHasOverlayemptyMagnifierControllershowmagnifierBuilderbelowshouldDisplayHandlesInMagnifieroverlayEntryFadeTransitionValueChangedkindPointerDeviceKindtouchcall
listEqualsHapticFeedbackselectionClickCompositedTransformTargetdownDragGestureRecognizerbuildHandleCupertinoTextSelectionControlsgetDataDurationmillisecondsOverlayEntryContextMenuControllerofrootOverlay	insertAllremoveinsertfindRenderObject	layerLinkchildaddPostFrameCallback
debugLabeltypehandleLayerLinkonSelectionHandleDragStartonSelectionHandleDragUpdateonSelectionHandleDragEnd
visibilityTextFieldTapRegionExcludeSemanticsbottomRightwidthtopLeftBuilderbuildToolbarStatefulWidgetStateSingleTickerProviderStateMixinAnimationController	Animationview	initStatedurationfadeDurationvsyncwidgetdidUpdateWidgetforwardreverseDirectionalityopacityCompositedTransformFollowerlinkshowWhenUnlinkedgetHandleAnchorgetHandleSizefromLTWHexpandToInclude
fromCirclecenterradiuskMinInteractiveDimensionRelativeRectfromLTRBmax	Container	alignment	AlignmentRawGestureDetectorbehaviorHitTestBehaviortranslucentgesturesTypeGestureRecognizerFactoryPanGestureRecognizer$GestureRecognizerFactoryWithHandlers
debugOwnersupportedDevicesstylusunknownonStartonUpdateonEndPaddingpadding
EdgeInsetsonlytopbottom	TextFieldCupertinoTextField	GlobalKeyEditableTextState	protectedfromSelectioneditableTextKeycurrentStateRenderObjectPointerDownEventBaseTapAndDragGestureRecognizer
ScrollableScrollableStatecurrentContextmaybeOfpositionpixelsonTapTrackStartHardwareKeyboardlogicalKeysPressedintersectionLogicalKeyboardKey	shiftLeft
shiftRightonTapTrackReset	onTapDownhandleTapDownTapDragDownDetailsselectionEnabledTapDownDetailshasFocustapselectPositioncauseonForcePressStartForcePressDetailsforcePressEnabledselectWordsInRangefrom
forcePressonForcePressEnd	onUserTaponUserTapAlwaysCalledonSingleTapUpTapDragUpDetailsmousetrackpadinvertedStylustextPositionpreviousSelectionfindSuggestionSpanAtCursorIndexwordAtCursorIndexIsMisspelled
selectWordtoggleToolbarisAffinityTheSameselectWordEdgeonSingleTapCancelonSingleLongTapStartLongPressStartDetails	longPressselectPositionAtRawFloatingCursorPointstateFloatingCursorDragStateStartstartLocationglobalToLocalupdateFloatingCursoronSingleLongTapMoveUpdateLongPressMoveUpdateDetailsmaxLinesoffsetFromOrigintoUpdateonSingleLongTapEndLongPressEndDetailsEndonSecondaryTaponSecondaryTapDownhandleSecondaryTapDownonDoubleTapDown	doubleTapTextBoundaryParagraphBoundaryboundaryLineBoundarygetLeadingTextBoundaryAtgetTrailingTextBoundaryAtonTripleTapDownonDragSelectionStartTapDragStartDetails _getEffectiveConsecutiveTapCountconsecutiveTapCountonDragSelectionUpdateTapDragUpdateDetailsonDragSelectionEndTapDragEndDetailsKeykeyGestureDetectorGestureTapDragDownCallbackForcePressGestureRecognizerstartPressureGestureForcePressStartCallbackGestureForcePressEndCallbackGestureTapCallbackGestureTapDownCallbackGestureTapDragUpCallbackGestureCancelCallbackkLongPressTimeoutGestureLongPressStartCallback"GestureLongPressMoveUpdateCallbackGestureLongPressEndCallbackkDoubleTapTimeoutGestureTapDragStartCallbackGestureTapDragUpdateCallbackGestureTapDragEndCallbackdeferToChildminMapTapGestureRecognizerLongPressGestureRecognizeronLongPressStartonLongPressMoveUpdateonLongPressEnd%TapAndHorizontalDragGestureRecognizeronDragStartonDragUpdate	onDragEndonTapUponCancelTapAndPanGestureRecognizerexcludeFromSemanticsWidgetsBindingObserver
hasStringsFlutterErrorreportErrorFlutterErrorDetails	exceptionstackErrorDescription	pasteablenotPasteablehasListenersaddObserverremoveObserverAppLifecycleStateresumeddetachedinactivehiddenpausedLiveTextisLiveTextInputAvailableenabledContainerBoxParentDataTextSelectionControlsStatefulWidgetStateSingleTickerProviderStateMixinValueNotifierWidgetsBindingObserverÇ V/K•Vì]5ê›ÃÃK∆ ÉàÉüTextSelectionPoint É`package:flutter/rendering.dartÉ»É‚TextSelectionDelegate É°package:flutter/services.dart  Ä¶  
dart:async  Äª  ÄÕmathÄ–	dart:math  Äÿ  "package:characters/characters.dart  Å  package:flutter/foundation.dart  Å/  package:flutter/gestures.dart  ÅW  package:flutter/rendering.dart  ÅÄ  package:flutter/scheduler.dart  Å©  package:flutter/services.dart  Å“  
basic.dart  ÅÁ  binding.dart  Å˛  constants.dart  Ç  container.dart  Ç0  context_menu_controller.dart  ÇW  
debug.dart  Çl  editable_text.dart  Çâ  framework.dart  Ç¢  gesture_detector.dart  Ç¬  magnifier.dart  Ç€  overlay.dart  ÇÚ  scrollable.dart  É  tap_region.dart  É&  ticker_provider.dart  ÉE  transitions.dart    	dart:core¿ “ﬂ ¿Òé_ <ÄÜÄ§Ä•Ä∫Ä÷Ä◊ÅÅ.ÅVÅÅ®Å–Å—ÅÊÅ˝ÇÇ/ÇVÇkÇàÇ°Ç¡Ç⁄ÇÒÉÉ%ÉDÉ_É`É°É‰ÉÂÑ2Ñ=ÑAÑOÑSÑôÑßÑıÖÖjÖkÖªÖøÜÜ[ÜÄÜ…ÜıÜ˚áLáêá¨á≠áπààààJàqàuà∆ââ3â7âiâmâ±âˇäOä~äÇäªã
ã[ãèã∂ã∫å
åTåíåñå˜å˚ç	ççWç}ç§çŸçﬂé+éEéKéõéÎè7èkè„è‰ê5êÅê±ë ëë/ë5ëtëzë…ëÙë˙íKíàíéíÿììOì^ìáì¿ìƒì€ìıîî/îMîuîôî–î˙îˇï ï0ï]ï^ï©ïÒññ
ñZñ`ñ¶ñ«ñ÷ñˇó8ó<óló¿óƒó≈òòCòIòôòüòÊôôô?ôxô|ô≠ööööUöoöuöΩöﬁö‰õ4õÅõèõûõ«ú úú6úXú\ú]ú®úÛù ùùSùtùÉù¨ùÂùÈûû•û©û™ûÙû˙üGüWüfüèü»üÃüˇ†9†=†>†ä†ê†ﬁ†Ó†˝°&°_°c°ó°“°÷°◊¢¢¢h¢x¢~¢ ££&£g£v£ü£ÿ£‹§§V§Z§[§®§Õ§”§Ù§˙•K•^•m•ñ•œ•”¶¶C¶G¶I¶J¶ê¶î¶‚ß1ß~ßæ®® ®$®_®Ñ®≈®—©©©©/©I©h©É©°©…©Ì™$™N™n™o™{™Ù´´´´)´y´ë´ï´ó´ò´ﬁ´‚¨0¨¨Ã≠≠Q≠n≠≈≠∆≠«Æ	ÆÆ#ÆrÆΩÆ›Æ˙ØFØLØáØ†Ø≈Ø‡Ø˛∞'∞T∞∞ü∞ª∞‹±±D±o±ù±∫±˙≤#≤;≤{≤≥≤ﬂ≥≥O≥{≥ë≥ö≥†¥ ¥^¥ç¥∑¥Ìµµ/µcµùµŸµ˜∂;∂Å∂Æ∂Ê∑∑:∑z∑º∑Î∏∏V∏Ç∏Æ∏÷ππ6π`πòπƒ∫∫∫∫∫M∫à∫é∫€ªª1ªOªPªõª‰º+ºPºQºìº≈º∆ΩΩ9Ω:ΩkΩlΩ´Ω±ΩÁæææ1æFænæoæäæãæøæ¿øørø»ø…ø¸¿ @h¿ @–¿ AR¿ AV¿ AW¿ AÑ¿ Aä¿ A€¿ B
¿ B¿ B)¿ BW¿ Bw¿ Bú¿ B¬¿ B–¿ B÷¿ Bı¿ C$¿ C(¿ C)¿ Ce¿ C|¿ Cõ¿ C¿¿ Cƒ¿ C≈¿ D¿ D:¿ D;¿ Dw¿ Dé¿ D≠¿ DÆ¿ DÎ¿ E¿ E ¿ E&¿ E'¿ EM¿ E[¿ Ea¿ Eb¿ E¿ E¢¿ E∫¿ EË¿ EÔ¿ E˚¿ Eˇ¿ F ¿ FN¿ Fu¿ Fû¿ F‘¿ F⁄¿ F˘¿ G¿ G,¿ GU¿ Go¿ G•¿ G¨¿ Gø¿ G√¿ Gƒ¿ H¿ H0¿ HÑ¿ H£¿ H»¿ Hﬂ¿ I¿ I5¿ I[¿ Id¿ Ik¿ Io¿ Ip¿ I∞¿ I‡¿ J4¿ JS¿ Jz¿ Jë¿ J∏¿ JÁ¿ K¿ K¿ K¿ K!¿ K"¿ K`¿ Ky¿ K†¿ K§¿ K•¿ K‡¿ KÊ¿ L4¿ LÇ¿ L“¿ M¿ Mk¿ Mª¿ MÏ¿ N¿ N5¿ NC¿ NI¿ N`¿ N¿ NÀ¿ O¿ Ok¿ Oy¿ O°¿ O•¿ O¶¿ O…¿ Oﬂ¿ P	¿ P0¿ PT¿ Pz¿ P°¿ P©¿ P‹¿ Q¿ Q%¿ QL¿ Qr¿ Qz¿ Q©¿ Q‘¿ R#¿ Rh¿ Rl¿ Rm¿ Rü¿ R•¿ Rˆ¿ S/¿ SJ¿ Si¿ S∏¿ T¿ T¿ TE¿ TI¿ TJ¿ T{¿ T—¿ T“¿ U¿ U¿ U)¿ U/¿ UÇ¿ U•¿ UË¿ UÈ¿ V¿ Vj¿ Vk¿ V§¿ V™¿ V∫¿ V¿¿ W¿ Wh¿ Wi¿ Wû¿ W…¿ W ¿ X¿ X?¿ X@¿ Xx¿ Xã¿ XÀ¿ Y¿ Y/¿ Y}¿ YÉ¿ Y§¿ Z¿ Zh¿ Zì¿ Z¬¿ ZÔ¿ [¿ [¿ [¿ [)¿ [n¿ [ô¿ [¥¿ [˘¿ \C¿ \ì¿ \€¿ ]*¿ ]r¿ ]õ¿ ]˙¿ ^B¿ ^ë¿ _)¿ _/¿ _w¿ _{¿ _|¿ _ú¿ _·¿ `¿ `$¿ `X¿ `∑¿ `ˇ¿ aL¿ a›¿ a„¿ b)¿ b-¿ b.¿ bP¿ b|¿ bß¿ b÷¿ b›¿ c7¿ cë¿ cí¿ cÓ¿ d)¿ dT¿ d}¿ dÑ¿ dÖ¿ d¨¿ dÌ¿ e¿ e¿ e¿ eM¿ eù¿ eÍ¿ eÒ¿ eÚ¿ f¿ fR¿ fÜ¿ f ¿ g¿ g!¿ g%¿ g&¿ gs¿ gó¿ gΩ¿ gæ¿ h¿ h#¿ hW¿ hX¿ hû¿ h¿¿ hŒ¿ h‘¿ h’¿ i¿ iZ¿ ií¿ iÆ¿ j¿ jW¿ j©¿ jÌ¿ j˚¿ k¿ k4¿ k=¿ kD¿ kE¿ kj¿ kÅ¿ k®¿ kﬂ¿ l¿ l¿ l¿ l¿ l¿ lj¿ lÄ¿ lÜ¿ l“¿ m"¿ mn¿ mµ¿ mÌ¿ n#¿ na¿ n~¿ n⁄¿ o!¿ o%¿ o&¿ on¿ oê¿ oû¿ o§¿ o•¿ p¿ p-¿ pN¿ pì¿ pö¿ põ¿ pÔ¿ p¿ q¿ qK¿ qr¿ q©¿ qœ¿ qŸ¿ q⁄¿ r-¿ rd¿ rr¿ rx¿ ry¿ rü¿ rƒ¿ s¿ s.¿ sO¿ su¿ sû¿ s∆¿ s—¿ t¿ t5¿ t?¿ tb¿ tÖ¿ t¶¿ t…¿ tÔ¿ u¿ uE¿ uP¿ uî¿ u≈¿ uœ¿ u’¿ u÷¿ v¿ v¿ v@¿ vp¿ v•¿ v…¿ v—¿ v’¿ v÷¿ w%¿ wI¿ wq¿ wr¿ w¡¿ wŸ¿ x¿ x¿ xX¿ xz¿ xà¿ xé¿ xè¿ x”¿ y¿ yN¿ yl¿ y¬¿ z¿ zn¿ z≤¿ z¿¿ z„¿ z˘¿ {¿ {	¿ {
¿ {/¿ {F¿ {m¿ {§¿ { ¿ {”¿ {⁄¿ {ﬁ¿ {ﬂ¿ |)¿ |K¿ |Y¿ |_¿ |`¿ |¬¿ |Ï¿ }¿ }V¿ }]¿ }±¿ }≤¿ }‘¿ ~¿ ~4¿ ~k¿ ~ë¿ ~õ¿ ~ú¿ ~Ô¿ &¿ 4¿ :¿ ;¿ a¿ Ü¿ —¿ ¿ Ä¿ Ä7¿ Ä`¿ ÄÜ¿ Äë¿ ÄÃ¿ Ä˝¿ Å¿ Å*¿ ÅM¿ Ån¿ Åë¿ Å∑¿ Åﬁ¿ Ç¿ Ç¿ Ç^¿ Çè¿ Çô¿ Çü¿ Ç†¿ Ç◊¿ ÉS¿ Éà¿ É¨¿ É¥¿ Éµ¿ ÉÊ¿ ÉÍ¿ ÉÎ¿ Ñ¿ Ñ:¿ ÑH¿ ÑN¿ Ñã¿ Ñ¥¿ ÑŸ¿ Ö¿ Ö
¿ Ö¿ Ö¿ ÖE¿ Öh¿ Öç¿ Öß¿ Ö◊¿ Ö‡¿ ÖÊ¿ ÖÍ¿ ÖÎ¿ Ü.¿ Ü`¿ Üê¿ Ü≤¿ Üπ¿ ÜΩ¿ Üæ¿ ÜÂ¿ á¿ á/¿ áV¿ á`¿ áÇ¿ á≤¿ á∏¿ áπ¿ á÷¿ áÙ¿ à¿ à*¿ àB¿ àH¿ àL¿ àN¿ àO¿ àï¿ àô¿ à‰¿ â¿ â$¿ âp¿ âv¿ â±¿ â∆¿ â·¿ â¸¿ ä2¿ äY¿ äw¿ äò¿ ä∫¿ äŸ¿ ã¿ ã2¿ ãN¿ ãm¿ ãç¿ ã™¿ ã√¿ ã˝¿ å"¿ å3¿ åo¿ å™¿ å∞¿ å’¿ å¯¿ ç ¿ çF¿ çj¿ ç†¿ ç¬¿ ç”¿ é¿ éJ¿ éP¿ ém¿ é¥¿ éﬂ¿ è¿ è5¿ è`¿ èë¿ èº¿ èÎ¿ ê+¿ êc¿ êè¿ êŒ¿ êˇ¿ ë'¿ ë=¿ ëF¿ ëL¿ ëP¿ ëQ¿ ëâ¿ ëß¿ ë®¿ ëﬁ¿ í¿ í¿ í~¿ íÂ¿ ìG¿ ìz¿ ìƒ¿ ì≈¿ î¿ î¿ îD¿ îJ¿ îõ¿ î°¿ îÌ¿ ï(¿ ï)¿ ïm¿ ïù¿ ï£¿ ïÏ¿ ñ¿ ñ¿ ñ[¿ ñ¨¿ ñ¿ ñÙ¿ ñı¿ ó6¿ óé¿ ó‘¿ ò,¿ òK¿ òQ¿ òö¿ ò‰¿ ô¿ ô¿ ôW¿ ôs¿ ôà¿ ôé¿ ôè¿ ô–¿ ö¿ ö¿ öJ¿ öå¿ ö≥¿ öˇ¿ õ¿ õ*¿ õ@¿ õG¿ õH¿ õj¿ õx¿ õ~¿ õ¿ õû¿ õ∏¿ õ˛¿ ú¿ ú0¿ úY¿ ú]¿ ú^¿ úü¿ ú¡¿ ú«¿ ú˘¿ ù¿ ù'¿ ùk¿ ù∞¿ ùÏ¿ û!¿ û/¿ û5¿ û6¿ ûW¿ û[¿ û\¿ ûÜ¿ ûå¿ û€¿ ü¿ üJ¿ üÅ¿ ü¶¿ ü¥¿ ü∫¿ üÿ¿ üÓ¿ üÚ¿ üÛ¿ †!¿ †'¿ †x¿ †~¿ †Õ¿ °¿ ° ¿ °H¿ °o¿ °}¿ °É¿ °£¿ °π¿ °Ω¿ °æ¿ °Â¿ °Ê¿ ¢¿ ¢¿ ¢h¿ ¢å¿ ¢í¿ ¢‹¿ £¿ £¿ £Y¿ £ô¿ £ö¿ £Ÿ¿ £˛¿ §N¿ §û¿ §∫¿ §‡¿ §Ó¿ §Ù¿ •:¿ •e¿ •i¿ •j¿ •´¿ •˚¿ ¶K¿ ¶g¿ ¶ç¿ ¶õ¿ ¶°¿ ¶Õ¿ ¶—¿ ¶“¿ ß!¿ ßc¿ ßd¿ ß∂¿ ß≈¿ ®¿ ®¿ ®=¿ ®a¿ ®±¿ ©¿ ©¿ ©+¿ ©1¿ ©Z¿ ©^¿ ©_¿ ©á¿ ©ç¿ ©‹¿ ™¿ ™E¿ ™z¿ ™ù¿ ™´¿ ™±¿ ™Õ¿ ™„¿ ™Á¿ ™Ë¿ ´¿ ´¿ ´i¿ ´o¿ ´æ¿ ´¿ ¨¿ ¨1¿ ¨V¿ ¨d¿ ¨j¿ ¨à¿ ¨û¿ ¨¢¿ ¨£¿ ¨»¿ ¨…¿ ¨Ú¿ ¨¯¿ ≠G¿ ≠k¿ ≠q¿ ≠π¿ ≠Î¿ ≠Ï¿ Æ2¿ Æp¿ Æq¿ ÆÆ¿ Æ—¿ Ø!¿ Øq¿ Øç¿ Ø±¿ Øø¿ Ø≈¿ ∞	¿ ∞2¿ ∞6¿ ∞7¿ ∞v¿ ∞∆¿ ±¿ ±2¿ ±V¿ ±d¿ ±j¿ ±î¿ ±ò¿ ±ô¿ ±Ê¿ ≤&¿ ≤'¿ ≤w¿ ≤Ü¿ ≤¿¿ ≤¡¿ ≤˙¿ ≥¿ ≥l¿ ≥º¿ ≥ÿ¿ ≥Ê¿ ≥Ï¿ ¥¿ ¥¿ ¥¿ ¥>¿ ¥D¿ ¥ê¿ ¥¥¿ ¥∫¿ ¥Ù¿ µ#¿ µ$¿ µc¿ µ≠¿ µ›¿ ∂¿ ∂K¿ ∂c¿ ∂ü¿ ∂»¿ ∂Ô¿ ∑¿ ∑C¿ ∑f¿ ∑ã¿ ∑∞¿ ∑◊¿ ∑Í¿ ∑Ù¿ ∑¸¿ ∏¿ ∏#¿ ∏'¿ ∏(¿ ∏r¿ ∏î¿ ∏ï¿ ∏Ê¿ ∏Û¿ π¿ π¿ πe¿ πè¿ π∑¿ π∏¿ ∫¿ ∫-¿ ∫S¿ ∫T¿ ∫ô¿ ∫ ¿ ∫ﬂ¿ ª¿ ª¿ ªW¿ ªü¿ ª±¿ ª∆¿ ª’¿ ª˛¿ º7¿ º;¿ ºm¿ ºn¿ º¨¿ º≤¿ º˜¿ ΩC¿ Ωç¿ Ω¨¿ Ω≤¿ Ω˝¿ æK¿ æ|¿ æÇ¿ æ ¿ æ–¿ æ‡¿ æÊ¿ øN¿ ø{¿ ø|¿ ø«¿ ¿¿ ¿¿ ¿g¿ ¿Æ¿ ¿Ò¿ ¡@¿ ¡q¿ ¡¿¿ ¬¿ ¬?¿ ¬T¿ ¬§¿ ¬π¿ ¬Ë¿ ¬È¿ √9¿ √Q¿ √W¿ √¢¿ √“¿ ƒ¿ ƒ¿ ƒP¿ ƒv¿ ƒ|¿ ƒ ¿ ƒ¯¿ ƒ˛¿ ≈N¿ ≈h¿ ≈w¿ ≈ø¿ ≈¯¿ ≈¸¿ ∆/¿ ∆K¿ ∆r¿ ∆ó¿ ∆•¿ ∆´¿ ∆…¿ ∆ﬂ¿ ∆„¿ ∆‰¿ «4¿ «x¿ «y¿ «∆¿ «˛¿ »4¿ »5¿ »Q¿ »k¿ »l¿ »≤¿ …¿ …¿ …Y¿ …Z¿ …ô¿ …‚¿ …˜¿  ¿  *¿  8¿  >¿  ?¿  P¿  á¿  ∫¿  ¡¿ À¿ ÀT¿ ÀX¿ ÀY¿ Àò¿ À“¿ ÀÁ¿ À˛¿ Ã¿ Ã:¿ Ã[¿ Ãy¿ Ãò¿ ÃØ¿ Ãµ¿ Ãπ¿ Ã∫¿ Ã˘¿ Õ?¿ ÕT¿ Õi¿ ÕÑ¿ Õ´¿ Õ≤¿ Õÿ¿ Õˆ¿ Œ¿ Œ¿ ŒE¿ ŒÆ¿ Œº¿ Œ¬¿ Œ√¿ Œﬁ¿ ŒÏ¿ ŒÚ¿ ŒÛ¿ œ=¿ œ^¿ œv¿ œ©¿ œ“¿ œ˘¿ –2¿ –`¿ –k¿ –t¿ –{¿ –¿ –Ä¿ –Œ¿ –ı¿ —¿ —:¿ —^¿ —e¿ —Ä¿ —é¿ —î¿ —ï¿ —ﬂ¿ “¿ “¿ “Q¿ “z¿ “°¿ “⁄¿ “˝¿ ”¿ ”¿ ”¿ ”¿ ”¿ ”=¿ ”>¿ ”É¿ ”ù¿ ”Õ¿ ”€¿ ”·¿ ‘,¿ ‘e¿ ‘ø¿ ‘‹¿ ‘Ï¿ ‘Ù¿ ’¿ ’]¿ ’~¿ ’û¿ ’ ¿ ’Ù¿ ’˛¿ ÷"¿ ÷P¿ ÷É¿ ÷æ¿ ÷˜¿ ◊¿ ◊:¿ ◊G¿ ◊e¿ ◊è¿ ◊∑¿ ◊ø¿ ◊·¿ ÿ¿ ÿ>¿ ÿw¿ ÿÆ¿ ÿ∂¿ ÿº¿ ÿ¿¿ ÿ¡¿ ÿ˘¿ Ÿ?¿ ŸT¿ Ÿd¿ ŸÖ¿ Ÿ°¿ Ÿ¡¿ Ÿ‚¿ ⁄ ¿ ⁄¿ ⁄6¿ ⁄<¿ ⁄¢¿ ⁄∑¿ ⁄Ω¿ ⁄¡¿ ⁄¬¿ €¿ €.¿ €4¿ €a¿ €v¿ €ç¿ €≤¿ €›¿ €˘¿ ‹¿ ‹¿ ‹%¿ ‹>¿ ‹S¿ ‹W¿ ‹X¿ ‹ì¿ ‹≈¿ ‹⁄¿ ‹Ì¿ ›-¿ ›e¿ ›ë¿ ›ﬂ¿ ›Â¿ ›Ò¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁG¿ ﬁ`¿ ﬁ≠¿ ﬁ“¿ ﬁ˙¿ ﬂ¿ ﬂ/¿ ﬂO¿ ﬂ~¿ ﬂ∏¿ ﬂ˘¿ ‡<¿ ‡y¿ ‡ß¿ ‡–¿ ·¿ ·/¿ ·8¿ ·>¿ ·]¿ ·|¿ ·ì¿ ·ú¿ ·£¿ ·ß¿ ·®¿ ·Ÿ¿ ·Ú¿ ‚?¿ ‚ù¿ ‚Õ¿ ‚ı¿ „¿ „*¿ „H¿ „u¿ „Ø¿ „Ó¿ ‰/¿ ‰j¿ ‰ò¿ ‰ø¿ ‰Ó¿ Â¿ Â%¿ Â+¿ ÂJ¿ Âi¿ ÂÄ¿ Ââ¿ Âê¿ Âî¿ Âï¿ Â«¿ Âˆ¿ Ê¿ ÊA¿ ÊG¿ ÊØ¿ Ê∞¿ Êˇ¿ Á ¿ Á0¿ Á\¿ Á§¿ Á´¿ Á¨¿ Ë¿ Ë-¿ Ë.¿ ËÉ¿ Ë≠¿ Ë—¿ ËÒ¿ ÈE¿ ÈF¿ Èj¿ Èv¿ È≤¿ ÈÔ¿ Èˆ¿ È˜¿ Í¿ Í>¿ Ía¿ Íá¿ Íù¿ Í«¿ Í˘¿ Î¿ Î)¿ ÎH¿ Î^¿ Î~¿ Îû¿ Îª¿ Îÿ¿ ÎÂ¿ Î¿ Î˘¿ Ï ¿ Ï¿ Ï¿ ÏH¿ Ïï¿ Ï¥¿ Ï∫¿ Ì	¿ Ì_¿ Ìm¿ Ìs¿ Ìµ¿ Ì ¿ Ó ¿ Ó5¿ ÓC¿ ÓI¿ ÓJ¿ Ót¿ Óx¿ Óz¿ Ó{¿ Ó«¿ Ô¿ Ô\¿ Ôê¿ Ô›¿ ¿ <¿ _¿ t¿ ë¿ ´¿ ƒ¿  ¿ À¿ ·¿ ¯¿ Ò¿ Ò@¿ ÒA¿ ÒM¿ Ò°¿ Ò£¿ Ò§¿ Ú¿ Ú>¿ Út¿ Úu¿ ÚÅ¿ Úñ¿ Ú≠¿ ÚÆ¿ Û¿ Û¿ Û-¿ Ûl¿ Ûp¿ Ûq¿ Û}¿ Û∫¿ Û‡¿ Ù¿ Ù#¿ Ù)¿ Ùn¿ Ùè¿ ÙŒ¿ Ù“¿ Ù”¿ Ùﬂ¿ ÙÚ¿ ı4¿ ıO¿ ıd¿ ıh¿ ıi¿ ıé¿ ı∫¿ ı◊¿ ı‰¿ ˆ¿ ˆ¿ ˆ¿ ˆ¿ ˆ¿ ˆ?¿ ˆ^¿ ˆ{¿ ˆ≥¿ ˆ“¿ ˆÔ¿ ˜¿ ˜A¿ ˜f¿ ˜â¿ ˜™¿ ˜∑¿ ˜¬¿ ˜À¿ ˜“¿ ˜÷¿ ˜ÿ¿ ˜Ÿ¿ ¯¿ ¯P¿ ¯p¿ ¯í¿ ¯™¿ ¯Õ¿ ¯Ô¿ ˘¿ ˘:¿ ˘]¿ ˘Ç¿ ˘ó¿ ˘æ¿ ˘Ù¿ ˘˙¿ ˘˚¿ ˙¿ ˙M¿ ˙ë¿ ˙◊¿ ˚¿ ˚H¿ ˚s¿ ˚ó¿ ˚Ω¿ ˚Í¿ ˚Î¿ ˚˜¿ ¸I¿ ¸K¿ ¸L¿ ¸º¿ ¸‰¿ ˝¿ ˝¿ ˝'¿ ˝<¿ ˝S¿ ˝T¿ ˝±¿ ˝≤¿ ˝“¿ ˛¿ ˛¿ ˛¿ ˛9¿ ˛e¿ ˛Ç¿ ˛è¿ ˛¨¿ ˛≤¿ ˛∂¿ ˛∑¿ ˛√¿ ˛ˇ¿ ˇ%¿ ˇi¿ ˇâ¿ ˇ«¿ ˇÀ¿ ˇÃ¿ ˇÿ¿ ˇÎ¿ ,¿ G¿ \¿ `¿ a¿ m¿ î¿ ﬁ¿ Ò¿¿¿^¿Ä¿á¿à¿≥¿À¿„¿˚¿¿¿¿i¿¶¿˛¿¿=¿Ä¿≈¿¿M¿T¿U¿}¿°¿»¿Á¿¿¿9¿a¿â¿≥¿ÿ¿¿C¿£¿œ¿Û¿A¿z¿ß¿’¿¿¿,¿^¿y¿º¿˛¿	B¿	Å¿	î¿	•¿	¥¿	–¿	¯¿
¿
>¿
d¿
å¿
ù¿
ÿ¿
Ò¿¿:¿j¿{¿ä¿ó¿¢¿´¿≤¿∂¿∏¿π¿ˇ¿¿I¿ç¿¬¿¿Z¿•¿À¿œ¿›¿·¿1¿¿í¿œ¿¿^¿í¿ì¿—¿Ô¿¿*¿G¿I¿J¿ë¿ï¿€¿,¿u¿ƒ¿¿,¿0¿~¿Æ¿≤¿Ò¿A¿é¿‹¿˙¿˛¿¿¿]¿à¿Ã¿
¿6¿m¿ï¿±¿∑¿∏¿˚¿¿Q¿°¿›¿„¿'¿=¿J¿à¿â¿ÿ¿Û¿7¿\¿¿û¿“¿ı¿¿7¿Z¿`¿d¿e¿∂¿Â¿
¿-¿L¿r¿ï¿∂¿◊¿˙¿ ¿¿¿J¿w¿∏¿‰¿¯¿˛¿ˇ¿I¿}¿Ñ¿Ö¿«¿¿¿¿R¿ë¿Æ¿¬¿»¿…¿˙¿*¿.¿/¿t¿≥¿–¿‰¿Í¿Î¿¿N¿R¿S¿Ñ¿”¿ˆ¿ 
¿ ¿ ¿ e¿ f¿ û¿ ’¿ Ÿ¿ ⁄¿!¿!¿!g¿!≠¿!≤¿"¿"+¿"0¿"?¿"D¿"í¿"•¿#¿#E¿#F¿#ö¿#Í¿$¿$E¿$á¿$√¿%¿%>¿%E¿%F¿%s¿%°¿%√¿%Ã¿%Ÿ¿%‡¿%‰¿%Â¿&¿&"¿&U¿&Z¿&i¿&n¿&Ω¿&’¿'¿'U¿'V¿'™¿'È¿(%¿(P¿(W¿(X¿(Ö¿(≥¿(’¿(ﬁ¿(Î¿(Ú¿(ˆ¿(˜¿)$¿)*¿){¿) ¿)⁄¿* ¿*K¿*L¿*ô¿*ø¿*Ã¿+¿+¿+g¿+ó¿+§¿+Ë¿+È¿,9¿,u¿,ï¿,ñ¿,⁄¿-	¿-0¿-1¿-Ç¿-´¿-¨¿-À¿-¯¿.0¿.C¿.è¿.≤¿.¿¿.Î¿.Ô¿.¿/=¿/Ü¿/µ¿/€¿/‹¿0,¿0x¿0§¿0©¿0˘¿1H¿1r¿1ô¿1ö¿1Ó¿27¿2<¿2í¿2·¿3¿3J¿3K¿3ç¿3ì¿3£¿3©¿3ˆ¿4	¿4¿41¿4t¿4›¿4Ú¿4ˆ¿4˜¿59¿5?¿5O¿5U¿5¢¿5µ¿5¬¿5›¿5˙¿5˛¿5ˇ¿6;¿6A¿6í¿6Ì¿6Û¿7¿7	¿7Z¿7g¿7ñ¿7º¿7 ¿7–¿8$¿8y¿8Œ¿9$¿9w¿9¥¿:¿:]¿:∞¿:÷¿;"¿;T¿;•¿;Ì¿<%¿<T¿<}¿<®¿<©¿<ˇ¿=+¿=ë¿=∂¿=Ÿ¿=¸¿>;¿>d¿>É¿>¬¿>—¿>Ú¿?¿?g¿?Ü¿?©¿?¿@¿@?¿@[¿@¿@¶¿@¡¿@Œ¿@‡¿@Í¿A7¿Aà¿A”¿A¿B9¿BZ¿B}¿B°¿Bƒ¿C¿C%¿C/¿Cx¿C~¿CÇ¿CÉ¿C«¿CÕ¿D¿D6¿D<¿DÄ¿DÜ¿Dñ¿Dú¿DÎ¿D˛¿E¿EA¿Ei¿Eë¿E∂¿Eﬂ¿F¿F6¿F?¿FE¿FI¿FJ¿Få¿Fí¿F„¿G¿G¿GO¿GU¿Ge¿Gk¿G∏¿GÀ¿Gÿ¿H¿H4¿H[¿H¿HÆ¿Hµ¿H€¿H˝¿I¿I¿I¿IV¿I~¿IÑ¿Iù¿I™¿I’¿I÷¿J¿J¿J`¿Jf¿Jv¿J|¿J√¿J÷¿K$¿Kp¿KÉ¿Kê¿K›¿Kﬁ¿L¿L$¿Ld¿Lj¿Lz¿LÄ¿L∆¿Lﬁ¿LÎ¿M¿MA¿Mô¿M«¿N/¿NV¿Ny¿Nú¿N¡¿N“¿O¿O;¿O`¿O±¿O≈¿O—¿P¿PW¿P|¿P°¿PÚ¿Q¿Q¿Q]¿Q~¿Q£¿QÚ¿R¿Rb¿Ry¿Rµ¿R”¿R˘¿S"¿S?¿SN¿Sb¿Sn¿Sê¿S∫¿SÁ¿T¿TE¿Tù¿T‡¿U6¿Ut¿U√¿UÌ¿V¿Vä¿V˚¿WB¿WS¿W¡¿X5¿X™¿Y¿Y¿Yé¿Yº¿YÕ¿ZO¿Z–¿[(¿[£¿\¿\q¿\ı¿\ˆ¿])¿]v¿] ¿^¿^&¿^[¿^m¿_c¿_ñ¿_≠¿_˛¿`m¿`¢¿`ª¿`Ó¿a ¿a¿a¿a$¿a*¿a.¿a/¿as¿ay¿a¡¿a«¿a◊¿a›¿b'¿b?¿bL¿b°¿b¢¿bÈ¿bÔ¿c>¿cP¿cV¿cf¿cl¿cπ¿c—¿cﬁ¿d¿d@¿dg¿dà¿d´¿d’¿e¿eV¿ei¿eñ¿e¬¿e¯¿f¿f0¿f¿f≥¿f“¿g¿g6¿gÑ¿g“¿gÂ¿gˆ¿h¿h(¿hd¿hp¿hï¿h∫¿h›¿i¿iO¿iW¿iX¿iõ¿iú¿i€¿j¿j¿j¿j¿jb¿jh¿j∂¿j“¿jÿ¿jË¿jÓ¿k7¿kX¿ke¿k¨¿k—¿l¿l^¿lØ¿m¿m/¿m<¿mn¿mw¿mû¿mø¿m‚¿n¿n@¿n´¿n’¿o¿o¿o-¿oZ¿oÜ¿oº¿oÀ¿oˆ¿pE¿pz¿p™¿pπ¿pı¿q¿q&¿qK¿qn¿qì¿q¿¿r)¿rQ¿rÖ¿rí¿rö¿rõ¿rﬁ¿r‰¿rË¿rÈ¿s.¿s4¿se¿sk¿s{¿sÅ¿s—¿s‰¿sÒ¿t*¿tU¿t{¿tù¿t£¿tŒ¿tÚ¿u¿uü¿uƒ¿v¿v8¿vA¿vw¿v}¿vÅ¿vÇ¿v√¿v…¿w¿w¿w6¿w\¿wj¿wp¿wï¿w¥¿w’¿x!¿xh¿xr¿xú¿x¬¿xË¿xÚ¿y¿y8¿yY¿y|¿y§¿yÔ¿y˘¿z¿z%¿z)¿z*¿zo¿zu¿zÖ¿zã¿z€¿zÓ¿{/¿{<¿{p¿{ƒ¿|¿|n¿|ƒ¿}¿}T¿}∑¿}ﬂ¿}„¿}‰¿~&¿~,¿~w¿~Æ¿~¥¿~ƒ¿~ ¿¿*¿7¿l¿ë¿⁄¿Ä¿Ä&¿Ä.¿Ä4¿Ä8¿Ä9¿Ää¿Ä°¿Å¿Åg¿Å»¿ÅÃ¿ÅÕ¿Ç¿Ç0¿Çè¿Ç”¿É/¿É3¿É4¿ÉÇ¿ÉÀ¿Ñ¿Ñ=¿Ñé¿Ñº¿Ö^¿Ö÷¿Ü¿Ü¿Ü	¿ÜV¿Üv¿Ü{¿Ü ¿Ü‰¿ÜÈ¿á2¿áj¿áÚ¿àB¿àè¿àæ¿à’¿â¿â@¿âT¿ââ¿âÿ¿âŸ¿ä¿äo¿ä¿¿ä¡¿äÓ¿ã5¿ãB¿ãI¿ãM¿ãN¿ãê¿ãñ¿ã¬¿å¿å9¿å?¿åO¿åU¿å¢¿åµ¿å¬¿å˜¿ç¿ç+¿ç1¿çY¿çí¿çü¿ç∆¿çÎ¿é¿é1¿éT¿éy¿é›¿è ¿è_¿èg¿èm¿èì¿èµ¿èª¿èø¿è¿¿ê¿ê¿êR¿êX¿êh¿ên¿êª¿ê”¿ê‡¿ë¿ëA¿ëO¿ëU¿ëá¿ë∂¿ëﬂ¿í
¿í¿í?¿ím¿í™¿ì¿ì¿ìÇ¿ì√¿ì—¿ì◊¿ìÿ¿î<¿îc¿îÑ¿îß¿î˜¿ï¿ïA¿ïd¿ïâ¿ïŸ¿ï·¿ïÓ¿ñ¿ñ6¿ñX¿ñÇ¿ñØ¿ñﬁ¿ó¿ó?¿óP¿ó{¿óÆ¿óÿ¿ò¿òR¿ò§¿ò·¿ô0¿ôa¿ôë¿ô∆¿ôŸ¿ö&¿ö6¿öM¿öY¿ö~¿ö£¿ö≈¿öÔ¿õ¿õK¿õy¿õ¨¿õΩ¿õË¿ú¿úE¿úq¿ú∏¿ú˙¿ù'¿ùX¿ùà¿ùΩ¿ù–¿û¿û-¿ûD¿ûP¿ûs¿ûñ¿ûª¿ûÊ¿ü¿ü?¿üL¿üT¿üZ¿ü^¿ü_¿üß¿ü≠¿ü˚¿†¿†¿†(¿†.¿†|¿†µ¿†¬¿†ˇ¿°%¿°3¿°9¿°:¿°V¿°¢¿°„¿¢4¿¢Ü¿¢¥¿¢¡¿¢Û¿¢¸¿£\¿£]¿£{¿£Ó¿§¿§f¿§å¿§π¿§ƒ¿§≈¿§Â¿•¿•?¿•g¿•ë¿•·¿¶	¿¶4¿¶I¿¶]¿¶g¿¶o¿¶p¿¶ò¿ß¿ß4¿ß[¿ßÇ¿ß•¿ß…¿ßı¿®$¿®U¿®™¿®ÿ¿©¿© ¿©M¿©Ç¿©Æ¿©‹¿©ı¿™H¿™Ü¿™ù¿™´¿™ø¿™‰¿´¿´]¿´á¿´∏¿´«¿´Ó¿¨¿¨@¿¨ë¿¨ª¿¨Ï¿¨˚¿≠¿≠¿≠¿≠5¿≠V¿≠±¿Æ¿Æ`¿Æm¿Æ ¿Æ¸¿Ø¿ØH¿Øu¿Ø´¿Ø˛¿∞*¿∞]¿∞n¿∞ô¿∞Ã¿∞ˆ¿±"¿±_¿±â¿±ø¿±Û¿≤¿≤6¿≤f¿≤õ¿≤Æ¿≥¿≥¿≥)¿≥>¿≥J¿≥\¿≥Å¿≥¶¿≥¯¿¥[¿¥£¿¥≈¿¥Ô¿µ¿µG¿µz¿µ∞¿∂¿∂/¿∂b¿∂s¿∂ù¿∂…¿∂ˆ¿∑'¿∑W¿∑å¿∑ü¿∑Û¿∏¿∏¿∏/¿∏;¿∏M¿∏p¿∏ì¿∏∏¿∏Í¿π9¿πa¿πê¿πù¿π•¿π´¿π¨¿π’¿∫¿∫N¿∫°¿∫ß¿∫®¿∫Ù¿ª¿ªS¿ª≥¿ª„¿º0¿ºk¿º©¿ºË¿Ω9¿Ωh¿Ωò¿Ωº¿Ω˜¿æ$¿æ1¿æ<¿æ`¿æi¿æÑ¿æƒ¿ø
¿ø9¿øi¿øç¿ø∆¿øÛ¿¿ ¿¿¿¿/¿¿8¿¿E¿¿ë¿¿ó¿¿õ¿¿ú¿¿·¿¿Á¿¡*¿¡D¿¡J¿¡Z¿¡`¿¡∞¿¡√¿¡–¿¬¿¬1¿¬2¿¬¬¿¬‰¿¬Í¿¬Î¿√¿√(¿√.¿√/¿√Z¿√^¿√_¿√´¿√À¿√—¿ƒ ¿ƒS¿ƒò¿ƒ∏¿ƒ∆¿ƒÂ¿≈ ¿≈¿≈0¿≈@¿≈h¿≈ê¿≈¨¿≈¸¿∆H¿∆n¿∆ú¿∆¿¿∆Ï¿«¿«:¿«v¿«§¿«Ã¿«Ù¿»&¿»Z¿»à¿»º¿»÷¿»Í¿»Ò¿»ı¿»˜¿»¯¿…J¿…N¿…ô¿…Ë¿ 7¿ L¿ P¿ ^¿ b¿ Æ¿ ˙¿À¿ÀG¿Àv¿À|¿À∆¿ÀÌ¿À¸¿Ã¿Ã0¿ÃD¿Ã`¿Ãz¿Ãì¿Ã∞¿Ã»¿Ã‰¿Ã¯¿Õ¿Õ;¿ÕX¿Õr¿Õå¿Õ´¿ÕÀ¿ÕË¿Œ¿Œ#¿Œ<¿ŒB¿ŒC¿Œ®¿Œœ¿Œ–¿œ5¿œ\¿œ]¿œß¿œ˜¿–,¿–[¿–\¿–©¿–ı¿—0¿—1¿—Ç¿—ü¿—÷¿—◊¿“¿“A¿“B¿“Ö¿“π¿“∫¿”¿”¿”$¿”k¿”π¿‘¿‘C¿‘D¿‘ì¿‘‡¿’¿’F¿’G¿’ö¿’…¿’œ¿÷¿÷>¿÷e¿÷f¿÷™¿÷Ò¿◊/¿◊l¿◊m¿◊¥¿◊˚¿◊¸¿ÿB¿ÿ{¿ÿ|¿ÿ ¿Ÿ¿Ÿ@¿ŸA¿Ÿè¿Ÿ—¿⁄¿⁄¿⁄A¿⁄|¿⁄}¿⁄∂¿⁄Û¿⁄Ù¿€8¿€o¿€p¿€¬¿€»¿‹¿‹:¿‹;¿‹}¿‹É¿‹∫¿‹›¿‹ﬁ¿‹˝¿›¿›¿› ¿›o¿›q¿›r¿›…¿› ¿ﬁ¿ﬁl¿ﬁæ¿ﬁ‹¿ﬁ·¿ﬂ3¿ﬂG¿ﬂÖ¿ﬂ™¿ﬂÕ¿ﬂ¿‡¿‡_¿‡∞¿‡˝¿·M¿·ô¿·À¿‚¿‚<¿‚]¿‚≠¿‚¸¿„M¿„_¿„Ö¿„®¿„˜¿‰F¿‰ñ¿‰‚¿Â¿ÂO¿ÂU¿ÂY¿ÂZ¿Âz¿Âû¿Â¢¿Â£¿Â√¿ÂÁ¿ÂÎ¿ÂÏ¿Ê=¿Êc¿Êó¿Êº¿Á	¿Á\¿Á´¿ÁŸ¿Ë'¿Ë[¿Ëa¿Ëb¿Ë∞¿Ë‰¿ËÍ¿ËÓ¿ËÔ¿È¿Èm¿Èò¿È∏¿ÈÁ¿Í¿Í¿Í¿Í¿Í.¿ÍT¿ÍX¿ÍY¿Íê¿Í¿¿Íƒ¿Í≈¿Í˛¿Î/¿Î3¿Î4¿Îg¿Îï¿Îô¿Îö¿Î—¿Î˛¿Ï¿Ï¿Ï8¿Ïc¿Ïg¿Ïh¿Ï¶¿Ï’¿Ì¿Ì¿Ì¿Ì¿ÌU¿Ìâ¿Ìª¿Ì¡¿Ì≈¿Ì∆¿Ó ¿Ó-¿ÓX¿Ó^¿Ób¿Óc¿Óo¿Óñ¿ÓÛ¿ÓÙ¿ÔU¿Ôâ¿Ô±¿Ô¬¿Ôı¿1¿:¿A¿B¿q¿•¿“¿ÒA¿Òø¿ÒÔ¿Ú¿Ú9¿Úz¿ÚÆ¿Úπ¿Ú¬¿Ú»¿Ú…¿Ú¯¿Û(¿ÛU¿Û|¿Û°¿Û∆¿ÛÁ¿Ùp¿Ùª¿Ù˙¿ı¿ıg¿ıÜ¿ı√¿ı¸¿ˆ5¿ˆb¿ˆì¿ˆ∆¿ˆÛ¿˜¿˜K¿˜Z¿˜g¿˜ä¿˜≠¿˜“¿¯E¿¯Ö¿¯π¿¯–¿˘&¿˘E¿˘Ç¿˘ª¿˘Ù¿˙!¿˙R¿˙Ö¿˙≤¿˙€¿˚
¿˚¿˚&¿˚.¿˚4¿˚5¿˚É¿˚Ù¿¸1¿¸b¿¸u¿¸ ¿˝¿˝%¿˝.¿˝4¿˝5¿˝T¿˝n¿˝ê¿˝±¿˝Ã¿˝”¿˝◊¿˝Ÿ¿˝⁄¿˛(¿˛I¿˛M¿˛î¿˛ÿ¿ˇ#¿ˇÜ¿ˇ≤¿ˇŒ¿ ¿ ¿ ¿ 3¿ 4¿ n¿ é¿ £¿ ±¿ ∑¿ ∏¿ ”¿ ›¿¿/¿c¿Å¿ó¿∫¿¿¿`¿ú¿≥¿√¿À¿Ú¿ ¿¿8¿\¿Ñ¿Ö¿ö¿®¿Æ¿∆¿ ¿À¿◊¿¿¿M¿S¿¿è¿ï¿∂¿∫¿ª¿«¿ˆ¿¿A¿u¿{¿¿Ä¿å¿…¿ﬁ¿¿¿=¿d¿â¿Æ¿»¿◊¿›¿·¿‚¿Ó¿¿3¿I¿^¿b¿d¿e¿Æ¿≈¿¿!¿"¿p¿Ω¿	¿	¿	¿	\¿	l¿	n¿	o¿	œ¿	„¿	Á¿	ı¿
C¿
ß¿
⁄¿
ﬁ¿¿á¿≤¿“¿¿$¿%¿?¿@¿Ñ¿§¿π¿«¿Õ¿Œ¿ı¿ˇ¿I¿j¿û¿º¿“¿ı¿N¿X¿¢¿ﬁ¿¿-¿5¿`¿n¿t¿u¿∑¿›¿¿¿2¿@¿F¿^¿b¿c¿o¿õ¿¥¿Â¿Î¿¿+¿1¿R¿V¿W¿c¿í¿∂¿›¿¿¿¿¿(¿e¿z¿†¿≤¿Ÿ¿ ¿%¿J¿b¿h¿l¿m¿y¿å¿æ¿‘¿È¿Ì¿Ô¿¿O¿S¿a¿Ø¿ ¿ ¿¿¿o¿œ¿¿¿¿S¿_¿a¿b¿∞¿¿7¿à¿¿¿˝¿	¿ ¿:¿Y¿t¿í¿∫¿ﬁ¿¿?¿_¿`¿l¿§¿•¿±¿Í¿Î¿˜¿1¿2¿>¿|¿}¿â¿È¿Í¿ˆ¿W¿X¿d¿®¿©¿µ¿Ô¿Ò    Ä•  Ä∫Ä— Ä◊  Å  Å.  ÅV  Å  Å®  Å—  ÅÊ  Å˝  Ç  Ç/  ÇV  Çk  Çà  Ç°  Ç¡  Ç⁄  ÇÒ  É  É%  ÉD  É`ÉàÉüÉ°É»É‚ ÖkÇóÜÜÅ/// ParentData that determines whether or not to paint the corresponding child.
///
/// Used in the layout of the Cupertino and Material text selection menus, which
/// decide whether or not to paint their buttons after laying them out and
/// determining where they overflow.  ÜÀÄﬂáóÄæ/// Whether or not this child is painted.
///
/// Children in the selection toolbar may be laid out for measurement purposes
/// but not painted. This allows these children to be identified.á• áØQá¬   áØá∞ àûDçåÖx/// An interface for building the selection UI, to be provided by the
/// implementer of the toolbar widget.
///
/// Parts of this class, including [buildToolbar], have been deprecated in favor
/// of [EditableText.contextMenuBuilder], which is now the preferred way to
/// customize the context menus.
///
/// ## Use with [EditableText.contextMenuBuilder]
///
/// For backwards compatibility during the deprecation period, when
/// [EditableText.selectionControls] is set to an object that does not mix in
/// [TextSelectionHandleControls], [EditableText.contextMenuBuilder] is ignored
/// in favor of the deprecated [buildToolbar].
///
/// To migrate code from [buildToolbar] to the preferred
/// [EditableText.contextMenuBuilder], while still using [buildHandle], mix in
/// [TextSelectionHandleControls] into the [TextSelectionControls] subclass when
/// moving any toolbar code to a callback passed to
/// [EditableText.contextMenuBuilder].
///
/// In due course, [buildToolbar] will be removed, and the mixin will no longer
/// be necessary as a way to flag to the framework that the code has been
/// migrated and does not expect [buildToolbar] to be called.
///
/// For more information, see <https://docs.flutter.dev/release/breaking-changes/context-menus>.
///
/// See also:
///
///  * [SelectionArea], which selects appropriate text selection controls
///    based on the current platform.    ç¶Ç<ètÅ¥/// Builds a selection handle of the given `type`.
///
/// The top left corner of this widget is positioned at the bottom of the
/// selection position.
///
/// The supplied [onTap] should be invoked when the handle is tapped, if such
/// interaction is allowed. As a counterexample, the default selection handle
/// on iOS [cupertinoTextSelectionControls] does not call [onTap] at all,
/// since its handles are not meant to be tapped. èÄèé  èñèØ  è¥èº  èÃè€   èÊÅê∫Ä∆/// Get the anchor point of the handle relative to itself. The anchor point is
/// the point that is aligned with a specific point in the text. A handle
/// often visually "points to" that location. ê ê„  êËê   ëÉ˚ìÕÇ3/// Builds a toolbar near a text selection.
///
/// Typically displays buttons for copying and pasting text.
///
/// The [globalEditableRegion] parameter is the TextField size of the global
/// coordinate system in logical pixels.
///
/// The [textLineHeight] parameter is the [RenderEditable.preferredLineHeight]
/// of the [RenderEditable] we are building a toolbar for.
///
/// The [selectionMidpoint] parameter is a general calculation midpoint
/// parameter of the toolbar. More detailed position information
/// is computable from the [endpoints] parameter. ìﬂìÌ  ì˘ìˇ  îî   î3î;  îQ"îk  îyîê  îù1î¿  î‘$î›  ìQìRì\ì¬ìbìãïZï7-/// Returns the size of the selection handle. ïEïM   ï`ÇcóCÅX/// Whether the current selection of the text field managed by the given
/// `delegate` can be removed from the text field and placed into the
/// [Clipboard].
///
/// By default, false is returned when nothing is selected in the text field.
///
/// Subclasses can use this to decide if they should expose the cut
/// functionality to the user. óJóa  ñ…ñ ñ‘ó:ñ⁄óó«Ç>ôÉÅ3/// Whether the current selection of the text field managed by the given
/// `delegate` can be copied to the [Clipboard].
///
/// By default, false is returned when nothing is selected in the text field.
///
/// Subclasses can use this to decide if they should expose the copy
/// functionality to the user. ôãô¢  ô	ô
ôôzôôCö	ÇRúÅu/// Whether the text field managed by the given `delegate` supports pasting
/// from the clipboard.
///
/// Subclasses can use this to decide if they should expose the paste
/// functionality to the user.
///
/// This does not consider the contents of the clipboard. Subclasses may want
/// to, for example, disallow pasting when the clipboard contains an empty
/// string. úú+  õëõíõúúõ¢õÀú_ÇIùÅ
/// Whether the current selection of the text field managed by the given
/// `delegate` can be extended to include the entire content of the text
/// field.
///
/// Subclasses can use this to decide if they should expose the select all
/// functionality to the user. ù˝û  ùvùwùÅùÁùáù∞û¨Åêü”Ä§/// Call [TextSelectionDelegate.cutSelection] to cut current selection.
///
/// This is called by subclasses when their cut affordance is activated by
/// the user. ü›üÙ  üYüZüdü üjüì†@Åï°jÄß/// Call [TextSelectionDelegate.copySelection] to copy current selection.
///
/// This is called by subclasses when their copy affordance is activated by
/// the user. °u°å  ††Ò†˚°a°°*°ŸÇÄ£ÎÅ>/// Call [TextSelectionDelegate.pasteText] to paste text.
///
/// This is called by subclasses when their paste affordance is activated by
/// the user.
///
/// This function is asynchronous since interacting with the clipboard is
/// asynchronous. Race conditions may exist with this API as currently
/// implemented. £˜§  £i£j£t£⁄£z££§]ÅÈ•⁄ÄÙ/// Call [TextSelectionDelegate.selectAll] to set the current selection to
/// contain the entire text value.
///
/// Does not hide the toolbar.
///
/// This is called by subclasses when their select-all affordance is activated
/// by the user. •Í¶  •`•a•k•—•q•ö ¶JÖL®äÇ9/// Text selection controls that do not show any toolbars or handles.
///
/// This is a placeholder, suitable for temporary use during development, but
/// not practical for production. For example, it provides no way for the user
/// to interact with selections: no context menus on desktop, no toolbars or
/// drag handles on mobile, etc. For production, consider using
/// [MaterialTextSelectionControls] or creating a custom subclass of
/// [TextSelectionControls].
///
/// The [emptyTextSelectionControls] global variable has a
/// suitable instance of this class.    ®«C®ÿ  ®Ê®Ó  ®«®»©Å_©!  ©3©A  ©M©S  ©l©t  ©á©è  ©•"©ø  ©Õ©‰  ©Ò1™  ™($™1  ©©™qÄ™™Ñ  ™ê™û  ™¶™ø  ™ƒ™Ã  ™‹™Î  ™q™r´u´2  ´B´[  ´`´h  ´´  ≠«¿ ZÜÆ„Å/// An object that manages a pair of text selection handles for a
/// [RenderEditable].
///
/// This class is a wrapper of [SelectionOverlay] to provide APIs specific for
/// [RenderEditable]s. To manage selection handles for custom widgets, use
/// [SelectionOverlay] instead. Æ¸ã ØâØùÄÜ/// Creates an object that manages overlay entries for selection handles.
///
/// The [context] must have an [Overlay] as an ancestor.Ø§Øø  Ø…Øÿ  Ø‰ØÌ  ∞#∞  ∞+'∞?  ∞X%∞l  ∞É∞í  ∞£∞©  ∞ø∞≈  ∞‡∞Ô  ±=±  ±H%±W  ±s(±ç  ±°±ß  ±æ:±„  
∞’±+±<±=≤≤≤≤1≤*≤3∫Å9ªFÅ/// {@template flutter.widgets.SelectionOverlay.context}
/// The context in which the selection UI should appear.
///
/// This context must have an [Overlay] as an ancestor because this object
/// will display the text selection handles in that [Overlay].
/// {@endtemplate} ªÊhºBD/// The editable line in which the selected text is being displayed. ºSpº≤?/// {@macro flutter.widgets.SelectionOverlay.selectionControls} º»oΩ&?/// {@macro flutter.widgets.SelectionOverlay.selectionDelegate} Ω<-ΩX  ΩnÄ¢Ω˛t/// {@macro flutter.widgets.EditableText.contextMenuBuilder}
///
/// If not provided, no context menu will be built. æqæÇ  æ¬Væ‹ æ˛øøøøøøøTø6 øVøcøhødøiøoøjøtRøé ø¨øπøæø∫øøø≈ø¿¿ BY¿ B^ ¿ Bp¿ gô"¿ g•  ¿ h%0¿ h1  ¿ wK$¿ wW  ¿ w€2¿ wÁ  æXæ]/// Retrieve current value.  æ3æ4æç1æü    ¿ AYÄ˝¿ B4Ä≈/// Whether selection handles are visible.
///
/// Set to false if you want to hide the handles. Use this property to show or
/// hide the handle without rebuilding them.
///
/// Defaults to false.   ¿ ByÄÆ¿ B}  ¿ Bå¿ Bí   ¿ TLÄÑ¿ TÜ./// Whether the handles are currently visible.   ¿ T‘Å¿ U∞Ä∆/// {@macro flutter.widgets.SelectionOverlay.toolbarIsVisible}
///
/// See also:
///
///   * [spellCheckToolbarIsVisible], which is only whether the spell check menu
///     specifically is visible.   ¿ UÎ~¿ V&//// Whether the magnifier is currently visible.   ¿ VmÄ˙¿ WÄë/// Whether the spell check menu is currently visible.
///
/// See also:
///
///   * [toolbarIsVisible], which is whether any toolbar is visible.   øÀÅäø–    ¿ C+Äò¿ Cl9/// {@macro flutter.widgets.SelectionOverlay.showHandles}   ¿ C«r¿ D9/// {@macro flutter.widgets.SelectionOverlay.hideHandles}   ¿ D=Å¡¿ D~9/// {@macro flutter.widgets.SelectionOverlay.showToolbar}   ¿ FÅ¿¿ F|p/// Shows toolbar with spell check suggestions of misspelled words that are
/// available for click-and-replace. ¿ F¢1¿ F±   ¿ G∆Å®¿ H	;/// {@macro flutter.widgets.SelectionOverlay.showMagnifier} ¿ H¿ H   ¿ IrÅÆ¿ I∑=/// {@macro flutter.widgets.SelectionOverlay.updateMagnifier} ¿ I«¿ Iœ   ¿ K$¿ Kg;/// {@macro flutter.widgets.SelectionOverlay.hideMagnifier}   ¿ KßÉ˝¿ MÛÇ4/// Updates the overlay after the selection has changed.
///
/// If this method is called while the [SchedulerBinding.schedulerPhase] is
/// [SchedulerPhase.persistentCallbacks], i.e. during the build, layout, or
/// paint phases (see [WidgetsBinding.drawFrame]), then the update is delayed
/// until the post-frame callbacks phase. Otherwise the update is done
/// synchronously. This means that it is safe to call during builds, but also
/// that if you do call this during a build, the UI will not update until the
/// next frame (i.e. many milliseconds later). ¿ M˙¿ N   ¿ O®Ç√¿ O≠    ¿ RoÅŸ¿ S6Äπ/// Causes the overlay to update its rendering.
///
/// This is intended to be called when the [renderObject] may have changed its
/// text metrics (e.g. because the text was scrolled).   ¿ Wk]¿ W•2/// {@macro flutter.widgets.SelectionOverlay.hide}   ¿ WÃr¿ X9/// {@macro flutter.widgets.SelectionOverlay.hideToolbar}   ¿ XBÇ√¿ X5/// {@macro flutter.widgets.SelectionOverlay.dispose}   ¿ [	Ñq¿ [    ¿ _~ÇÆ¿ _Ö    ¿ b0ÑÙ¿ b>  ¿ bT&¿ bm  ¿ bÄ%¿ bë  ¿ b´)¿ b¬   ¿ hZÉæ¿ h_  ¿ hÇ¿ hî   ¿ lÉ¿ mæÅå/// Given a handle position and drag position, returns the position of handle
/// after the drag.
///
/// The handle jumps instantly between lines when the drag reaches a full
/// line's height away from the original handle position. In other words, the
/// line jump happens when the contact point would be located at the same
/// place on the handle at the new line as when the gesture started. ¿ mÀ¿ m”  ¿ m⁄¿ m‚   ¿ o(á¨¿ o-  ¿ oQ¿ od   ¿ xÉÀ¿ x  ¿ x<¿ xN   ¿ {·à¿ {Ê  ¿ |¿ |   ¿ ÉÌÅ¸¿ ÉÚ  ¿ Ñ¿ Ñ   ¿ ÖÌÄœ¿ ÖÚ  ¿ Ü¿ Ü   ¿ Ü¿Åã¿ Üÿ  ¿ ÜÎ¿ Ü˙  ¿ á¿ á'  ¿ á5¿ áN    ¿ àO¿ f*¿ âÄª/// An object that manages a pair of selection handles and a toolbar.
///
/// The selection handles are displayed in the [Overlay] that most closely
/// encloses the given [BuildContext]. ¿ â&à) ¿ â≥¿ â√ÄÜ/// Creates an object that manages overlay entries for selection handles.
///
/// The [context] must have an [Overlay] as an ancestor.¿ â ¿ âŸ  ¿ âÂ¿ âÎ  ¿ ä 0¿ ä"  ¿ ä6!¿ äG  ¿ ä]¿ äc  ¿ ä{¿ äÅ  ¿ äú¿ ä¢  ¿ äæ¿ äƒ  ¿ ä›.¿ äˇ  ¿ ã¿ ã"  ¿ ã6¿ ã<  ¿ ãR¿ ãX  ¿ ãq¿ ãw  ¿ ãë¿ ãó  ¿ ãÆ¿ ã¥  ¿ ã«4¿ ãÍ  ¿ å¿ å  ¿ å&Ä≠¿ å√  ¿ åŸ¿ åË  ¿ å¸"¿ ç  ¿ ç$ ¿ ç3  ¿ çJ¿ çY  ¿ çn0¿ çt  ¿ ç§¿ ç™  ¿ ç∆Ä•¿ é]  ¿ éqA¿ éw  +¿ å&¿ å'¿ å1¿ åÆ¿ å9¿ åu¿ çá¿ çò¿ çô¿ ç∆¿ ç«¿ ç—¿ éN¿ çŸ¿ é¿ éè¿ é©¿ é™¿ éÃ¿ éª¿ éŒ¿ é˘¿ éÊ¿ é˚¿ è$¿ è¿ è&¿ èM¿ è<¿ èO¿ è{¿ èg¿ è}¿ è©¿ èò¿ è´¿ è√¿ è…¿ èÁ¿ è ¿ èﬁ¿ èÊ¿ èﬂ$¿ ëSR¿ ëû5/// {@macro flutter.widgets.SelectionOverlay.context} ¿ ë™k¿ ëÕ 	¿ ë‰¿ ëÒ¿ ëˇ¿ ëÚ¿ í ¿ í¿ í¿ í¿ í¿ íÅ®¿ ìñÅY/// [MagnifierController.show] and [MagnifierController.hide] should not be called directly, except
/// from inside [showMagnifier] and [hideMagnifier]. If it is desired to show or hide the magnifier,
/// call [showMagnifier] or [hideMagnifier]. This is because the magnifier needs to orchestrate
/// with other properties in [SelectionOverlay].¿ ì≠¿ ì¿¿ ì¡¿ ì«Å_¿ ïÅ/// {@macro flutter.widgets.magnifier.TextMagnifierConfiguration.intro}
///
/// {@macro flutter.widgets.magnifier.intro}
///
/// By default, [SelectionOverlay]'s [TextMagnifierConfiguration] is disabled.
///
/// {@macro flutter.widgets.magnifier.TextMagnifierConfiguration.details} ¿ ü (¿ ü8  ¿ °¿ °  ¿ °¿#¿ °≈ ¿ °ﬁ¿ °ËÅ&¿ ¢˚ÄÈ/// Whether the start handle is visible.
///
/// If the value changes, the start handle uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null, the start selection handle will always be visible. ¿ £ÄÑ¿ £ÅE/// Called when the users start dragging the start selection handles. ¿ ¶‘Äç¿ ßJL/// Called when the users drag the start selection handles to new locations. ¿ ßfÄô¿ ßÎ\/// Called when the users lift their fingers after dragging the start selection
/// handles. ¿ ™&¿ ™5  ¿ ´Ú¿ ´˘  ¿ ¨•!¿ ¨™ ¿ ¨¡¿ ¨ÀÅ¿ ≠ÿÄ„/// Whether the end handle is visible.
///
/// If the value changes, the end handle uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null, the end selection handle will always be visible. ¿ ≠ÓÄÄ¿ ÆZC/// Called when the users start dragging the end selection handles. ¿ ±õÄâ¿ ≤J/// Called when the users drag the end selection handles to new locations. ¿ ≤)Äï¿ ≤¨Z/// Called when the users lift their fingers after dragging the end selection
/// handles. ¿ ¥Å¿ µÄœ/// Whether the toolbar is visible.
///
/// If the value changes, the toolbar uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null the toolbar will always be visible. ¿ µØ,¿ µ»  ¿ ∏*h¿ ∏ÇG/// Debugging information for explaining why the [Overlay] is required. ¿ ∏ó~¿ πY/// The object supplied to the [CompositedTransformTarget] that wraps the text
/// field. ¿ πÄõ¿ π°r/// The objects supplied to the [CompositedTransformTarget] that wraps the
/// location of start selection handle. ¿ π∫Äó¿ ∫?p/// The objects supplied to the [CompositedTransformTarget] that wraps the
/// location of end selection handle. ¿ ∫VÄπ¿ ∫˛ÄÑ/// {@template flutter.widgets.SelectionOverlay.selectionControls}
/// Builds text selection handles and toolbar.
/// {@endtemplate} ¿ ªÅW¿ ºZÄ´/// {@template flutter.widgets.SelectionOverlay.selectionDelegate}
/// The delegate for manipulating the current selection in the owning
/// text field.
/// {@endtemplate}¿ ª»¿ ª…¿ ª”¿ º9¿ ªŸ¿ º¿ ºpÉ	¿ øhÇø/// Determines the way that drag start behavior is handled.
///
/// If set to [DragStartBehavior.start], handle drag behavior will
/// begin at the position where the drag gesture won the arena. If set to
/// [DragStartBehavior.down] it will begin at the position where a down
/// event is first detected.
///
/// In general, setting this to [DragStartBehavior.start] will make drag
/// animation smoother and setting it to [DragStartBehavior.down] will make
/// drag behavior feel slightly more reactive.
///
/// By default, the drag start behavior is [DragStartBehavior.start].
///
/// See also:
///
///  * [DragGestureRecognizer.dragStartBehavior], which gives an example for the different behaviors. ¿ ø~Éh¿ ¬œÇø/// {@template flutter.widgets.SelectionOverlay.onSelectionHandleTapped}
/// A callback that's optionally invoked when a selection handle is tapped.
///
/// The [TextSelectionControls.buildHandle] implementation the text field
/// uses decides where the handle's tap "hotspot" is, or whether the
/// selection handle supports tap gestures at all. For instance,
/// [MaterialTextSelectionControls] calls [onSelectionHandleTapped] when the
/// selection handle's "knob" is tapped, while
/// [CupertinoTextSelectionControls] builds a handle that's not sufficiently
/// large for tapping (as it's not meant to be tapped) so it does not call
/// [onSelectionHandleTapped] even when tapped.
/// {@endtemplate} ¿ ¬ÎÅ¿ √ÛÄﬁ/// Maintains the status of the clipboard for determining if its contents can
/// be pasted or not.
///
/// Useful because the actual value of the clipboard can only be checked
/// asynchronously (see [Clipboard.getData]). ¿ ∆1¿ ∆9  ¿ ∆ÊÄê¿ «LM/// Controls the fade-in and fade-out animations for the toolbar and handles.¿ «[¿ «c¿ «u¿ «p¿ «d¿ «r¿ «{Ä∑¿ »*ÄÄ/// A pair of handles. If this is non-null, there are always 2, though the
/// second is hidden when the selection is collapsed. ¿ »72¿ »a/// A copy/paste toolbar. ¿ »¥L¿ »– ¿ »È¿ »˛¿ »ˇ¿ …R¿ …! ¿ …@¿ …U¿ …V¿ ”¿ ”$ ¿ ”6¿ ï+Å»¿ ñÄÕ/// {@template flutter.widgets.SelectionOverlay.toolbarIsVisible}
/// Whether the toolbar is currently visible.
///
/// Includes both the text selection toolbar and the spell check menu.
/// {@endtemplate}   ¿ û^Äø¿ û˘x/// The type of start selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ üLÄ•¿ üP  ¿ ü`¿ üy   ¿ üıÅ¿ †⁄Äœ/// The line height at the selection start.
///
/// This value is used for calculating the size of the start selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ °"Äö¿ °&  ¿ °8¿ °@   ¿ ©aÄπ¿ ©˙v/// The type of end selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ ™GÄü¿ ™K  ¿ ™Y¿ ™r   ¿ ™ÍÅ¿ ´ÀÄÀ/// The line height at the selection end.
///
/// This value is used for calculating the size of the end selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ ¨Äî¿ ¨  ¿ ¨!¿ ¨)   ¿ µ&ÄÜ¿ µÇ</// The text selection positions of selection start and end.   ¿ µﬂÇG¿ µ„  ¿ µˆ¿ ∂   ¿ ƒÇ'¿ ∆
ÅR/// The location of where the toolbar should be drawn in relative to the
/// location of [toolbarLayerLink].
///
/// If this is null, the toolbar is drawn based on [selectionEndpoints] and
/// the rect of render object of [context].
///
/// This is useful for displaying toolbars at the mouse right-click locations
/// in desktop devices.  ¿ ≈j¿ ≈k¿ ≈u¿ ≈˙¿ ≈{¿ ≈√¿ ∆MÄï¿ ∆Q  ¿ ∆a¿ ∆j   ¿ ñ˜Öe¿ ô#Ç/// {@template flutter.widgets.SelectionOverlay.showMagnifier}
/// Shows the magnifier, and hides the toolbar if it was showing when [showMagnifier]
/// was called. This is safe to call on platforms not mobile, since
/// a magnifierBuilder will not be provided, or the magnifierBuilder will return null
/// on platforms not mobile.
///
/// This is NOT the source of truth for if the magnifier is up or not,
/// since magnifiers may hide themselves. If this info is needed, check
/// [MagnifierController.shown].
/// {@endtemplate} ¿ ô1"¿ ô@   ¿ ú`Å˙¿ ùÄ•/// {@template flutter.widgets.SelectionOverlay.hideMagnifier}
/// Hide the current magnifier.
///
/// This does nothing if there is no magnifier.
/// {@endtemplate}   ¿ £úÅÃ¿ £°  ¿ £Ω¿ £œ   ¿ •lÅd¿ •q  ¿ •é¿ •°   ¿ ®ÅY¿ ®	  ¿ ®#¿ ®3   ¿ ÆsÅ¬¿ Æx  ¿ Æí¿ Æ§   ¿ ∞9Å^¿ ∞>  ¿ ∞Y¿ ∞l   ¿ ≤√ÅS¿ ≤»  ¿ ≤‡¿ ≤   ¿ …\Å˚¿ …˛Äñ/// {@template flutter.widgets.SelectionOverlay.showHandles}
/// Builds the handles by inserting them into the [context]'s overlay.
/// {@endtemplate}   ¿ À[Å]¿ ÀÓÄá/// {@template flutter.widgets.SelectionOverlay.hideHandles}
/// Destroys the handles by removing them from overlay.
/// {@endtemplate}   ¿ ÃºÉ¬¿ Õ[Äì/// {@template flutter.widgets.SelectionOverlay.showToolbar}
/// Shows the toolbar by inserting it into the [context]'s overlay.
/// {@endtemplate} ¿ Õm¿ Õ|  ¿ Õà!¿ Õò   ¿ –ÇÇô¿ –¸p/// Shows toolbar with spell check suggestions of misspelled words that are
/// available for click-and-replace. ¿ —#¿ —2  ¿ —>¿ —V   ¿ ”@Ö¿ ”äB/// Rebuilds the selection toolbar or handles if they are present.   ¿ ÿ√Å˝¿ Ÿ[Äå/// {@template flutter.widgets.SelectionOverlay.hide}
/// Hides the entire overlay including the toolbar and the handles.
/// {@endtemplate}   ¿ ⁄ƒÅí¿ €}Ä©/// {@template flutter.widgets.SelectionOverlay.hideToolbar}
/// Hides the toolbar part of the overlay.
///
/// To hide the whole overlay, see [hide].
/// {@endtemplate}   ¿ ‹ZÅ∏¿ ‹·{/// {@template flutter.widgets.SelectionOverlay.dispose}
/// Disposes this object and release resources.
/// {@endtemplate}   ¿ ﬁÉê¿ ﬁ  ¿ ﬁ/¿ ﬁ=   ¿ ·™ÉÈ¿ ·±  ¿ ·¡¿ ·œ   ¿ Â…Ü:¿ Â–  ¿ Âﬁ¿ ÂÏ   ¿ ÏÇp¿ Ì—Å∞/// {@template flutter.widgets.SelectionOverlay.updateMagnifier}
/// Update the current magnifier with new selection data, so the magnifier
/// can respond accordingly.
///
/// If the magnifier is not shown, this still updates the magnifier position
/// because the magnifier may have hidden itself and is looking for a cue to reshow
/// itself.
///
/// If there is no magnifier in the overlay, this does nothing.
/// {@endtemplate} ¿ Ì·¿ Ì    ¿ Åû¿ 
  ¿ >Äã ¿ D¿ \ ¿ c¿ i  ¿ x¿ á  ¿ ï¿ §  ¿ Ø¿ æ   ¿ Õ¿ ⁄  ¿ „¿   ¿ ˙¿ Ò
  ¿ Ò'¿ Ò4   ¿ ÒC]¿ Òo   ¿ ÒC¿ ÒD ¿ Ò§Ü3¿ Ò™   ¿ Ú$¿ Ú1  ¿ Ú@3¿ ÚV    ¿ ÚwÄ¯¿ Úà   ¿ Úw¿ Úx¿ ÛsÅ^¿ ÛÑ  ¿ Ûî"¿ ÛÆ  ¿ Ûs¿ Ût¿ Ù’Äí¿ ÙÊ   ¿ Ù’¿ Ù÷¿ ıkÄü¿ ıp    ¿ ˆÅ«¿ ˆ!  ¿ ˆ'¿ ˆ5  ¿ ˆ¿ ˆ ¿ ˜ŸÑq¿ ¯?/// This widget represents a single draggable selection handle. ¿ ¯RÅß ¿ ¯x¿ ¯è/// Create selection overlay.
¿ ¯ñ¿ ¯•  ¿ ¯Æ¿ ¯Ω  ¿ ¯—¿ ¯◊  ¿ ¯Û¿ ¯˘  ¿ ˘ ¿ ˘  ¿ ˘>¿ ˘D  ¿ ˘a¿ ˘p  ¿ ˘Ü¿ ˘å  ¿ ˘õ!¿ ˘™  ¿ ˘¬0¿ ˘»  ¿ ˘€¿ ˘Ï¿ ˘Ì
¿ ˘˝¿ ˙  ¿ ˙ +¿ ˙4  ¿ ˙O@¿ ˙u  ¿ ˙ìB¿ ˙∫  ¿ ˙Ÿ<¿ ˙˝  ¿ ˚-¿ ˚5  ¿ ˚J'¿ ˚g  ¿ ˚u ¿ ˚Ç  ¿ ˚ô"¿ ˚∑  ¿ ˚ø)¿ ˚◊   ¿ ˚Ì[¿ ¸   ¿ ˚Ì¿ ˚Ó ¿ ¸Lèk¿ ¸R   ¿ ¸æ$¿ ¸◊  ¿ ¸Ê3¿ ¸¸    ¿ ˝Äˆ¿ ˝.   ¿ ˝¿ ˝¿ ˛Äû¿ ˛    ¿ ˛πÅ¿ ˛   ¿ ˛⁄!¿ ˛Û  ¿ ˛π¿ ˛∫¿ ˇŒÄë¿ ˇﬂ   ¿ ˇŒ¿ ˇœ¿ cãR¿ v  ¿ |¿ ä  ¿ c¿ d ¿πÑè¿°Çÿ/// Delegate interface for the [TextSelectionGestureDetectorBuilder].
///
/// The interface is usually implemented by the [State] of text field
/// implementations wrapping [EditableText], so that they can use a
/// [TextSelectionGestureDetectorBuilder] to build a
/// [TextSelectionGestureDetector] for their [EditableText]. The delegate
/// provides the builder with information about the current state of the text
/// field. Based on that information, the builder adds the correct gesture
/// handlers to the gesture detector.
///
/// See also:
///
///  * [TextField], which implements this delegate for the Material text field.
///  * [CupertinoTextField], which implements this delegate for the Cupertino
///    text field.   ¿—Ä¿¿ÅÄä/// [GlobalKey] to the [EditableText] for which the
/// [TextSelectionGestureDetectorBuilder] will build a [TextSelectionGestureDetector].   ¿ïY¿‹;/// Whether the text field should respond to force presses.   ¿ÚT¿57/// Whether the user may select text in the text field.     ¿J¿ ∏¨¿Ñø/// Builds a [TextSelectionGestureDetector] to wrap an [EditableText].
///
/// The class implements sensible defaults for many user interactions
/// with an [EditableText] (see the documentation of the various gesture handler
/// methods, e.g. [onTapDown], [onForcePressStart], etc.). Subclasses of
/// [TextSelectionGestureDetectorBuilder] can change the behavior performed in
/// responds to these gesture events by overriding the corresponding handler
/// methods of this class.
///
/// The resulting [TextSelectionGestureDetector] to wrap an [EditableText] is
/// obtained by calling [buildGestureDetector].
///
/// A [TextSelectionGestureDetectorBuilder] must be provided a
/// [TextSelectionGestureDetectorBuilderDelegate], from which information about
/// the [EditableText] may be obtained. Typically, the [State] of the widget
/// that builds the [EditableText] implements this interface, and then passes
/// itself as the [delegate].
///
/// See also:
///
///  * [TextField], which uses a subclass to implement the Material-specific
///    gesture logic of an [EditableText].
///  * [CupertinoTextField], which uses a subclass to implement the
///    Cupertino-specific gesture logic of an [EditableText]. ¿8~ ¿o¿í4/// Creates a [TextSelectionGestureDetectorBuilder].¿ô¿®   ¿∫ÅÃ¿~Åt/// The delegate for this [TextSelectionGestureDetectorBuilder].
///
/// The delegate provides the builder with information about what actions can
/// currently be performed on the text field. Based on this, the builder adds
/// the correct gesture handlers to the gesture detector.
///
/// Typically implemented by a [State] of a widget that builds an
/// [EditableText].¿?¿@¿*"'¿*' ¿*E¿+ÎÄ®¿,|Äá/// Whether the Shift key was pressed when the most recent [PointerDownEvent]
/// was tracked by the [BaseTapAndDragGestureRecognizer].¿,é¿,òÄñ¿-n/// The viewport offset pixels of any [Scrollable] containing the
/// [RenderEditable] at the last drag start.¿-+¿-3v¿-ãN/// The viewport offset pixels of the [RenderEditable] at the last drag start.¿-¶¿/∑"¿/∆  ¿1t#¿1z  ¿3*¿3# ¿3C¿Ç¿UB/// Returns true if lastSecondaryTapDownPosition was on selection.   ¿(˘Å&¿)ÂÄÿ/// Whether to show the selection toolbar.
///
/// It is based on the signal source when a [onTapDown] is called. This getter
/// will return true if current [onTapDown] event is triggered by a touch or
/// a stylus.   ¿*NÄÕ¿*‰n/// The [State] of the [EditableText] for which the builder will provide a
/// [TextSelectionGestureDetector].  ¿*¡¿*¬¿+Ä»¿+πu/// The [RenderObject] of the [EditableText] for which the builder will
/// provide a [TextSelectionGestureDetector].  ¿+ô¿+ö¿-ÆÅ@¿-π    ¿I
Ä ¿IµÄå/// Whether the provided [onUserTap] callback should be dispatched on every
/// tap or only non-consecutive taps.
///
/// Defaults to false.  ¿Iü¿I†¿ıÅn¿˙  ¿¿&   ¿∏ÅK¿Ω    ¿Å¿  ¿5¿C   ¿1Å ¿6  ¿W¿e   ¿UÅÉ¿ã./// Returns true if position was on selection. ¿†¿®  ¿±¿¡   ¿"ßÉ<¿"¨  ¿"Ω¿"≈  ¿"Ã¿"„  ¿"Í¿"˙   ¿&◊Ç¿&‹  ¿&Ì¿&ı  ¿&¸¿'   ¿3MÅ®¿4Ä±/// Handler for [TextSelectionGestureDetector.onTapTrackStart].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTapTrackStart], which triggers this
///    callback.  ¿4¿4¿4˘Å¿5…Ä±/// Handler for [TextSelectionGestureDetector.onTapTrackReset].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTapTrackReset], which triggers this
///    callback.  ¿5∑¿5∏¿6çÄ¿7nÅJ/// Handler for [TextSelectionGestureDetector.onTapDown].
///
/// By default, it forwards the tap to [RenderEditable.handleTapDown] and sets
/// [shouldShowSelectionToolbar] to true if the tap was initiated by a finger or stylus.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTapDown], which triggers this callback. ¿7x¿7å  ¿7\¿7]¿CÖÇ√¿EÅd/// Handler for [TextSelectionGestureDetector.onForcePressStart].
///
/// By default, it selects the word at the position of the force press,
/// if selection is enabled.
///
/// This callback is only applicable when force press is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onForcePressStart], which triggers this
///    callback. ¿E$¿E7  ¿E ¿E¿FLÇ∫¿GﬂÅj/// Handler for [TextSelectionGestureDetector.onForcePressEnd].
///
/// By default, it selects words in the range specified in [details] and shows
/// toolbar if it is necessary.
///
/// This callback is only applicable when force press is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onForcePressEnd], which triggers this
///    callback. ¿GÔ¿H  ¿GÕ¿GŒ¿IÿÇ¿KóÅñ/// Handler for [TextSelectionGestureDetector.onUserTap].
///
/// By default, it serves as placeholder to enable subclass override.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onUserTap], which triggers this
///    callback.
///  * [TextSelectionGestureDetector.onUserTapAlwaysCalled], which controls
///     whether this callback is called only on the first tap in a series
///     of taps.  ¿KÖ¿KÜ¿K‡ïM¿LÚÄÔ/// Handler for [TextSelectionGestureDetector.onSingleTapUp].
///
/// By default, it selects word edge if selection is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleTapUp], which triggers
///    this callback. ¿M ¿M  ¿L‡¿L·¿a1Åo¿bSÄˇ/// Handler for [TextSelectionGestureDetector.onSingleTapCancel].
///
/// By default, it serves as placeholder to enable subclass override.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleTapCancel], which triggers
///    this callback.  ¿bA¿bB¿b§áp¿cÂÅ/// Handler for [TextSelectionGestureDetector.onSingleLongTapStart].
///
/// By default, it selects text position specified in [details] if selection
/// is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapStart], which triggers
///    this callback. ¿c˙¿d  ¿c”¿c‘¿jàœ¿klÅ//// Handler for [TextSelectionGestureDetector.onSingleLongTapMoveUpdate].
///
/// By default, it updates the selection location specified in [details] if
/// selection is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapMoveUpdate], which
///    triggers this callback. ¿kÜ"¿k¢  ¿kZ¿k[¿rÎÉï¿s¯ÄÍ/// Handler for [TextSelectionGestureDetector.onSingleLongTapEnd].
///
/// By default, it shows toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapEnd], which triggers this
///    callback. ¿t¿t   ¿sÊ¿sÁ¿vÑÉ§¿w#ÄÜ/// Handler for [TextSelectionGestureDetector.onSecondaryTap].
///
/// By default, selects the word if possible and shows the toolbar.  ¿w¿w¿z,É∂¿{CÄˆ/// Handler for [TextSelectionGestureDetector.onSecondaryTapDown].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSecondaryTapDown], which triggers this
///    callback.
///  * [onSecondaryTap], which is typically called after this. ¿{V¿{f  ¿{1¿{2¿}ÊÇQ¿>Å3/// Handler for [TextSelectionGestureDetector.onDoubleTapDown].
///
/// By default, it selects a word through [RenderEditable.selectWord] if
/// selectionEnabled and shows toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDoubleTapDown], which triggers this
///    callback. ¿N¿b  ¿,¿-¿Ä£Å(¿Ä®  ¿Ä¬¿Ä”  ¿Äÿ
¿Ä·  ¿Ä‰¿Ä¸   ¿Ç2Å ¿Ç7  ¿ÇL¿Ç]  ¿Çb
¿Çk  ¿Çn¿ÇÜ   ¿ÉÕÇ:¿É◊  ¿ÉÎ¿É˘  ¿Ñ ¿Ñ   ¿álÉ‡¿áq  ¿áè¿á¶  ¿áØ¿á¿  ¿á≈
¿áŒ  ¿á—¿áÈ   ¿ãPÑn¿å…ÅR/// Handler for [TextSelectionGestureDetector.onTripleTapDown].
///
/// By default, it selects a paragraph if
/// [TextSelectionGestureDetectorBuilderDelegate.selectionEnabled] is true
/// and shows the toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTripleTapDown], which triggers this
///    callback. ¿åŸ¿åÌ  ¿å∑¿å∏¿è¬èõ¿êÁÅ/// Handler for [TextSelectionGestureDetector.onDragSelectionStart].
///
/// By default, it selects a text position specified in [details].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionStart], which triggers
///    this callback. ¿ê¸¿ë  ¿ê’¿ê÷¿üa°9¿†…ÅC/// Handler for [TextSelectionGestureDetector.onDragSelectionUpdate].
///
/// By default, it updates the selection location specified in the provided
/// details objects.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionUpdate], which triggers
///    this callback./lib/src/material/text_field.dart ¿†ﬂ¿†ı  ¿†∑¿†∏¿¿ûÇø¿¡◊Å/// Handler for [TextSelectionGestureDetector.onDragSelectionEnd].
///
/// By default, it cleans up the state used for handling certain
/// built-in behaviors.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionEnd], which triggers this
///    callback. ¿¡Í¿¡˝  ¿¡≈¿¡∆¿√aÖì¿ƒ°Å,/// Returns a [TextSelectionGestureDetector] configured with the handlers
/// provided by this builder.
///
/// The [child] or its subtree should contain an [EditableText] whose key is
/// the [GlobalKey] provided by the [delegate]'s
/// [TextSelectionGestureDetectorBuilderDelegate.editableTextKey]. ¿ƒº¿ƒ¬  ¿ƒ ¿ƒ‹  ¿ƒÈ¿ƒ˙    ¿»¯îx¿ÀÇ/// A gesture detector to respond to non-exclusive event chains for a text field.
///
/// An ordinary [GestureDetector] configured to handle events like tap and
/// double tap will only recognize one or the other. This widget detects both:
/// the first tap and then any subsequent taps that occurs within a time limit
/// after the first.
///
/// See also:
///
///  * [TextField], a Material text field which uses this gesture detector.
///  * [CupertinoTextField], a Cupertino text field which uses this gesture
///    detector. ¿ÀIÇ¯ ¿ÀŒ¿ÀÍx/// Create a [TextSelectionGestureDetector].
///
/// Multiple callbacks can be called for one sequence of input gesture.¿ÀÒ	¿À¯  ¿Ã ¿Ã  ¿Ã¿Ã   ¿Ã4¿Ã:  ¿ÃH¿ÃN  ¿Ãd¿Ãj  ¿Ã~¿ÃÑ  ¿Ãó¿Ãù  ¿Ã¥¿Ã∫  ¿ÃÃ¿Ã“  ¿ÃË¿ÃÓ  ¿Ã¸¿Õ  ¿Õ¿Õ!  ¿Õ?¿ÕE  ¿Õ\¿Õb  ¿Õv¿Õ|  ¿Õê¿Õñ  ¿ÕØ¿Õµ  ¿Õœ¿Õ’  ¿ÕÏ"¿ÕÚ  ¿Œ¿Œ  ¿Œ'¿Œ6  ¿Œ	¿ŒEÄà¿Œæb/// {@macro flutter.gestures.selectionrecognizers.BaseTapAndDragGestureRecognizer.onTapTrackStart} ¿Œ“Äà¿œKb/// {@macro flutter.gestures.selectionrecognizers.BaseTapAndDragGestureRecognizer.onTapTrackReset} ¿œ_Ä˙¿–PÄ»/// Called for every tap down including every tap down that's part of a
/// double click or a long press, except touches that include enough movement
/// to not qualify as taps (e.g. pans and flings). ¿–^Ä–¿—Äî/// Called when a pointer has tapped down and the force of the pointer has
/// just become greater than [ForcePressGestureRecognizer.startPressure]. ¿—3Ä°¿—≈i/// Called when a pointer that had previously triggered [onForcePressStart] is
/// lifted off the screen. ¿—Ÿf¿“1;/// Called for a tap event with the secondary mouse button. ¿“Ds¿“•@/// Called for a tap down event with the secondary mouse button. ¿“ºÅÖ¿‘4ÅK/// Called for the first tap in a series of taps, consecutive taps do not call
/// this method.
///
/// For example, if the detector was configured with [onTapDown] and
/// [onDoubleTapDown], three quick taps would be recognized as a single tap
/// down, followed by a tap up, then a double tap down, followed by a single tap down. ¿‘FÄ˛¿’3Ä…/// Called for each touch that becomes recognized as a gesture that is not a
/// short tap, such as a long tap or drag. It is called at the moment when
/// another gesture from the touch is recognized. ¿’IÅ¿÷ZÄÏ/// Called for the first tap in a series of taps when [onUserTapAlwaysCalled] is
/// disabled, which is the default behavior.
///
/// When [onUserTapAlwaysCalled] is enabled, this is called for every tap,
/// including consecutive taps. ¿÷hÅ¿◊VÄ¬/// Called for a single long tap that's sustained for longer than
/// [kLongPressTimeout] but not necessarily lifted. Not called for a
/// double-tap-hold, which calls [onDoubleTapDown] instead. ¿◊oÄä¿◊‡D/// Called after [onSingleLongTapStart] when the pointer is dragged. ¿◊˛{¿ÿgC/// Called after [onSingleLongTapStart] when the pointer is lifted. ¿ÿ~Ä¿¿Ÿ/Ää/// Called after a momentary hold or a short tap that is close in space and
/// time (within [kDoubleTapTimeout]) to a previous short tap. ¿ŸCÄ¡¿ŸıÄã/// Called after a momentary hold or a short tap that is close in space and
/// time (within [kDoubleTapTimeout]) to a previous double-tap. ¿⁄	q¿⁄f7/// Called when a mouse starts dragging to select text. ¿⁄r¿⁄‹6/// Called repeatedly as a mouse moves while dragging. ¿⁄ˆw¿€[A/// Called when a mouse that was previously dragging is released. ¿€rÄ∆¿‹#Äü/// Whether [onUserTap] will be called for all taps including consecutive taps.
///
/// Defaults to false, so [onUserTap] is only called for each distinct tap. ¿‹=Äû¿‹”x/// How this gesture detector should behave during hit testing.
///
/// This defaults to [HitTestBehavior.deferToChild]. ¿‹‡1¿›/// Child below this widget.  ¿›X¿›8   ¿›¿› ¿›r†f¿›x     ¿ﬂIÜ¿ﬂT  ¿ﬂu¿ﬂz   ¿Â\E¿Âa    ¿Â•E¿Â™    ¿ÊeÇà¿Êj  ¿Êy¿Êç   ¿ËÒÅ¿Ëˆ  ¿È¿È   ¿ÍC¿Í    ¿Í[h¿Í`  ¿Íq¿ÍÜ   ¿Í«k¿ÍÃ  ¿Íﬁ¿ÍÙ   ¿Î6b¿Î;  ¿ÎJ¿Î]   ¿Îúe¿Î°  ¿Î¥¿Î«   ¿Ïa¿Ï
  ¿Ï¿Ï.   ¿ÏjÄ°¿Ïo  ¿ÏÖ¿Ïú   ¿ÌÄµ¿Ì  ¿Ì/"¿ÌK   ¿Ì»Äô¿ÌÕ  ¿Ì·¿Ìˆ   ¿Óeèq¿Óx  ¿Ó~¿Óå  ¿Óe¿Óf ¿˝⁄ââ¿ˇ)ÅH/// A [ValueNotifier] whose [value] indicates whether the current contents of
/// the clipboard can be pasted.
///
/// The contents of the clipboard can only be read asynchronously, via
/// [Clipboard.getData], so this maintains a value that can be used
/// synchronously. Call [update] to asynchronously update value if needed. ¿ˇàÄè ¿ˇ¥¿ˇÀ)/// Create a new ClipboardStatusNotifier.¿ˇ“/¿ˇ„  ¿ˇÍ¿ˇ˘¿ˇ˙¿ 
¿ ¿ ¿ ¿ ¿   ¿ , ¿ 6Éì¿ }7/// Check the [Clipboard] and update [value] if needed.   ¿ÕÄÏ¿ﬁ  ¿Í¿¯  ¿Õ¿Œ¿ΩÄ¡¿Œ  ¿›¿Î  ¿Ω¿æ¿ÇÅ^¿ì  ¿Æ¿¡  ¿Ç¿É¿‰}¿ı   ¿‰¿Â ¿	oä¿"Å¨/// A [ValueNotifier] whose [value] indicates whether the current device supports the Live Text
/// (OCR) function.
///
/// See also:
///  * [LiveText], where the availability of Live Text input can be obtained.
///  * [LiveTextInputStatus], an enumeration that indicates whether the current device is available
///                           for Live Text input.
///
/// Call [update] to asynchronously update [value] if needed. ¿âÄö ¿¥¿œ(/// Create a new LiveTextStatusNotifier.¿÷7¿Î  ¿Ú¿¿¿¿¿!¿¿'¿, ¿8 ¿BÑ¿ìA/// Check the [LiveTextInputStatus] and update [value] if needed.   ¿eÄ¿v  ¿Ç¿ê  ¿e¿f¿YÄ¡¿j  ¿y¿á  ¿Y¿Z¿ÅM¿/  ¿J¿]  ¿¿¿o}¿Ä   ¿o¿p  ¿eÇ¿≥H/// An enumeration of the status of the content on the user's clipboard.  ¿«X¿L/// The clipboard content can be pasted, such as a String of nonzero length. ¿$ÄÊ¿	Äÿ/// The status of the clipboard is unknown. Since getting clipboard data is
/// asynchronous (see [Clipboard.getData]), this status often exists while
/// waiting to receive the clipboard contents for the first time. ¿	[¿	^L/// The content on the clipboard is not pasteable, such as when it is empty.    ¿Çp¿¥Äæ/// An enumeration that indicates whether the current device is available for Live Text input.
///
/// See also:
///  * [LiveText], where the availability of Live Text input can be obtained.  ¿Ã=¿3/// This device supports Live Text input currently. ¿Å¿Ä˙/// The status of the Live Text input is unknown. Since getting the Live Text input availability
/// is asynchronous (see [LiveText.isLiveTextInputAvailable]), this status often exists while
/// waiting to receive the status value for the first time. ¿B¿U7/// The current device doesn't support Live Text input.         ÉÂÅÑÖ$Å6/// The type for a Function that builds a toolbar's container with the given
/// child.
///
/// See also:
///
///   * [TextSelectionToolbar.toolbarBuilder], which is of this type.
///     type.
///   * [CupertinoTextSelectionToolbar.toolbarBuilder], which is similar, but
///     for a Cupertino-style toolbar.  ÖEÖS  Ö[Öc   ¿7Ñπ¿∆Äà/// [TextSelectionControls] that specifically do not manage the toolbar in order
/// to leave that to [EditableText.contextMenuBuilder].    	¿ˇÅ_¿  ¿$¿2  ¿>¿D  ¿]¿e  ¿x¿Ä  ¿ñ"¿∞  ¿æ¿’  ¿‚1¿  ¿$¿"  ¿ˇ¿ ¿bA¿s  ¿z¿ë  ¿b¿c¿ßB¿∏  ¿¿¿◊  ¿ß¿®¿ÌC¿˛  ¿¿  ¿Ì¿Ó¿4G¿E  ¿R¿i  ¿4¿5¿i¿ê  ¿ö¿±  ¿ª(¿’  ¿¿Ä¿Ïj¿˝  ¿¿  ¿)(¿C  ¿Ï¿Ì¿ZM¿s  ¿¿ñ  ¿Z¿[¿´C¿º  ¿Ã¿„  ¿´¿¨ ´òÇ+≠äÅ’/// Text selection controls that do not show any toolbars or handles.
///
/// This is a placeholder, suitable for temporary use during development, but
/// not practical for production. For example, it provides no way for the user
/// to interact with selections: no context menus on desktop, no toolbars or
/// drag handles on mobile, etc. For production, consider using
/// [materialTextSelectionControls] or creating a custom subclass of
/// [TextSelectionControls].≠ß≠¡≠¬  é_ <ÄÜÄ§Ä•Ä∫Ä÷Ä◊ÅÅ.ÅVÅÅ®Å–Å—ÅÊÅ˝ÇÇ/ÇVÇkÇàÇ°Ç¡Ç⁄ÇÒÉÉ%ÉDÉ_É`É°É‰ÉÂÑ2Ñ=ÑAÑOÑSÑôÑßÑıÖÖjÖkÖªÖøÜÜ[ÜÄÜ…ÜıÜ˚áLáêá¨á≠áπààààJàqàuà∆ââ3â7âiâmâ±âˇäOä~äÇäªã
ã[ãèã∂ã∫å
åTåíåñå˜å˚ç	ççWç}ç§çŸçﬂé+éEéKéõéÎè7èkè„è‰ê5êÅê±ë ëë/ë5ëtëzë…ëÙë˙íKíàíéíÿììOì^ìáì¿ìƒì€ìıîî/îMîuîôî–î˙îˇï ï0ï]ï^ï©ïÒññ
ñZñ`ñ¶ñ«ñ÷ñˇó8ó<óló¿óƒó≈òòCòIòôòüòÊôôô?ôxô|ô≠ööööUöoöuöΩöﬁö‰õ4õÅõèõûõ«ú úú6úXú\ú]ú®úÛù ùùSùtùÉù¨ùÂùÈûû•û©û™ûÙû˙üGüWüfüèü»üÃüˇ†9†=†>†ä†ê†ﬁ†Ó†˝°&°_°c°ó°“°÷°◊¢¢¢h¢x¢~¢ ££&£g£v£ü£ÿ£‹§§V§Z§[§®§Õ§”§Ù§˙•K•^•m•ñ•œ•”¶¶C¶G¶I¶J¶ê¶î¶‚ß1ß~ßæ®® ®$®_®Ñ®≈®—©©©©/©I©h©É©°©…©Ì™$™N™n™o™{™Ù´´´´)´y´ë´ï´ó´ò´ﬁ´‚¨0¨¨Ã≠≠Q≠n≠≈≠∆≠«Æ	ÆÆ#ÆrÆΩÆ›Æ˙ØFØLØáØ†Ø≈Ø‡Ø˛∞'∞T∞∞ü∞ª∞‹±±D±o±ù±∫±˙≤#≤;≤{≤≥≤ﬂ≥≥O≥{≥ë≥ö≥†¥ ¥^¥ç¥∑¥Ìµµ/µcµùµŸµ˜∂;∂Å∂Æ∂Ê∑∑:∑z∑º∑Î∏∏V∏Ç∏Æ∏÷ππ6π`πòπƒ∫∫∫∫∫M∫à∫é∫€ªª1ªOªPªõª‰º+ºPºQºìº≈º∆ΩΩ9Ω:ΩkΩlΩ´Ω±ΩÁæææ1æFænæoæäæãæøæ¿øørø»ø…ø¸¿ @h¿ @–¿ AR¿ AV¿ AW¿ AÑ¿ Aä¿ A€¿ B
¿ B¿ B)¿ BW¿ Bw¿ Bú¿ B¬¿ B–¿ B÷¿ Bı¿ C$¿ C(¿ C)¿ Ce¿ C|¿ Cõ¿ C¿¿ Cƒ¿ C≈¿ D¿ D:¿ D;¿ Dw¿ Dé¿ D≠¿ DÆ¿ DÎ¿ E¿ E ¿ E&¿ E'¿ EM¿ E[¿ Ea¿ Eb¿ E¿ E¢¿ E∫¿ EË¿ EÔ¿ E˚¿ Eˇ¿ F ¿ FN¿ Fu¿ Fû¿ F‘¿ F⁄¿ F˘¿ G¿ G,¿ GU¿ Go¿ G•¿ G¨¿ Gø¿ G√¿ Gƒ¿ H¿ H0¿ HÑ¿ H£¿ H»¿ Hﬂ¿ I¿ I5¿ I[¿ Id¿ Ik¿ Io¿ Ip¿ I∞¿ I‡¿ J4¿ JS¿ Jz¿ Jë¿ J∏¿ JÁ¿ K¿ K¿ K¿ K!¿ K"¿ K`¿ Ky¿ K†¿ K§¿ K•¿ K‡¿ KÊ¿ L4¿ LÇ¿ L“¿ M¿ Mk¿ Mª¿ MÏ¿ N¿ N5¿ NC¿ NI¿ N`¿ N¿ NÀ¿ O¿ Ok¿ Oy¿ O°¿ O•¿ O¶¿ O…¿ Oﬂ¿ P	¿ P0¿ PT¿ Pz¿ P°¿ P©¿ P‹¿ Q¿ Q%¿ QL¿ Qr¿ Qz¿ Q©¿ Q‘¿ R#¿ Rh¿ Rl¿ Rm¿ Rü¿ R•¿ Rˆ¿ S/¿ SJ¿ Si¿ S∏¿ T¿ T¿ TE¿ TI¿ TJ¿ T{¿ T—¿ T“¿ U¿ U¿ U)¿ U/¿ UÇ¿ U•¿ UË¿ UÈ¿ V¿ Vj¿ Vk¿ V§¿ V™¿ V∫¿ V¿¿ W¿ Wh¿ Wi¿ Wû¿ W…¿ W ¿ X¿ X?¿ X@¿ Xx¿ Xã¿ XÀ¿ Y¿ Y/¿ Y}¿ YÉ¿ Y§¿ Z¿ Zh¿ Zì¿ Z¬¿ ZÔ¿ [¿ [¿ [¿ [)¿ [n¿ [ô¿ [¥¿ [˘¿ \C¿ \ì¿ \€¿ ]*¿ ]r¿ ]õ¿ ]˙¿ ^B¿ ^ë¿ _)¿ _/¿ _w¿ _{¿ _|¿ _ú¿ _·¿ `¿ `$¿ `X¿ `∑¿ `ˇ¿ aL¿ a›¿ a„¿ b)¿ b-¿ b.¿ bP¿ b|¿ bß¿ b÷¿ b›¿ c7¿ cë¿ cí¿ cÓ¿ d)¿ dT¿ d}¿ dÑ¿ dÖ¿ d¨¿ dÌ¿ e¿ e¿ e¿ eM¿ eù¿ eÍ¿ eÒ¿ eÚ¿ f¿ fR¿ fÜ¿ f ¿ g¿ g!¿ g%¿ g&¿ gs¿ gó¿ gΩ¿ gæ¿ h¿ h#¿ hW¿ hX¿ hû¿ h¿¿ hŒ¿ h‘¿ h’¿ i¿ iZ¿ ií¿ iÆ¿ j¿ jW¿ j©¿ jÌ¿ j˚¿ k¿ k4¿ k=¿ kD¿ kE¿ kj¿ kÅ¿ k®¿ kﬂ¿ l¿ l¿ l¿ l¿ l¿ lj¿ lÄ¿ lÜ¿ l“¿ m"¿ mn¿ mµ¿ mÌ¿ n#¿ na¿ n~¿ n⁄¿ o!¿ o%¿ o&¿ on¿ oê¿ oû¿ o§¿ o•¿ p¿ p-¿ pN¿ pì¿ pö¿ põ¿ pÔ¿ p¿ q¿ qK¿ qr¿ q©¿ qœ¿ qŸ¿ q⁄¿ r-¿ rd¿ rr¿ rx¿ ry¿ rü¿ rƒ¿ s¿ s.¿ sO¿ su¿ sû¿ s∆¿ s—¿ t¿ t5¿ t?¿ tb¿ tÖ¿ t¶¿ t…¿ tÔ¿ u¿ uE¿ uP¿ uî¿ u≈¿ uœ¿ u’¿ u÷¿ v¿ v¿ v@¿ vp¿ v•¿ v…¿ v—¿ v’¿ v÷¿ w%¿ wI¿ wq¿ wr¿ w¡¿ wŸ¿ x¿ x¿ xX¿ xz¿ xà¿ xé¿ xè¿ x”¿ y¿ yN¿ yl¿ y¬¿ z¿ zn¿ z≤¿ z¿¿ z„¿ z˘¿ {¿ {	¿ {
¿ {/¿ {F¿ {m¿ {§¿ { ¿ {”¿ {⁄¿ {ﬁ¿ {ﬂ¿ |)¿ |K¿ |Y¿ |_¿ |`¿ |¬¿ |Ï¿ }¿ }V¿ }]¿ }±¿ }≤¿ }‘¿ ~¿ ~4¿ ~k¿ ~ë¿ ~õ¿ ~ú¿ ~Ô¿ &¿ 4¿ :¿ ;¿ a¿ Ü¿ —¿ ¿ Ä¿ Ä7¿ Ä`¿ ÄÜ¿ Äë¿ ÄÃ¿ Ä˝¿ Å¿ Å*¿ ÅM¿ Ån¿ Åë¿ Å∑¿ Åﬁ¿ Ç¿ Ç¿ Ç^¿ Çè¿ Çô¿ Çü¿ Ç†¿ Ç◊¿ ÉS¿ Éà¿ É¨¿ É¥¿ Éµ¿ ÉÊ¿ ÉÍ¿ ÉÎ¿ Ñ¿ Ñ:¿ ÑH¿ ÑN¿ Ñã¿ Ñ¥¿ ÑŸ¿ Ö¿ Ö
¿ Ö¿ Ö¿ ÖE¿ Öh¿ Öç¿ Öß¿ Ö◊¿ Ö‡¿ ÖÊ¿ ÖÍ¿ ÖÎ¿ Ü.¿ Ü`¿ Üê¿ Ü≤¿ Üπ¿ ÜΩ¿ Üæ¿ ÜÂ¿ á¿ á/¿ áV¿ á`¿ áÇ¿ á≤¿ á∏¿ áπ¿ á÷¿ áÙ¿ à¿ à*¿ àB¿ àH¿ àL¿ àN¿ àO¿ àï¿ àô¿ à‰¿ â¿ â$¿ âp¿ âv¿ â±¿ â∆¿ â·¿ â¸¿ ä2¿ äY¿ äw¿ äò¿ ä∫¿ äŸ¿ ã¿ ã2¿ ãN¿ ãm¿ ãç¿ ã™¿ ã√¿ ã˝¿ å"¿ å3¿ åo¿ å™¿ å∞¿ å’¿ å¯¿ ç ¿ çF¿ çj¿ ç†¿ ç¬¿ ç”¿ é¿ éJ¿ éP¿ ém¿ é¥¿ éﬂ¿ è¿ è5¿ è`¿ èë¿ èº¿ èÎ¿ ê+¿ êc¿ êè¿ êŒ¿ êˇ¿ ë'¿ ë=¿ ëF¿ ëL¿ ëP¿ ëQ¿ ëâ¿ ëß¿ ë®¿ ëﬁ¿ í¿ í¿ í~¿ íÂ¿ ìG¿ ìz¿ ìƒ¿ ì≈¿ î¿ î¿ îD¿ îJ¿ îõ¿ î°¿ îÌ¿ ï(¿ ï)¿ ïm¿ ïù¿ ï£¿ ïÏ¿ ñ¿ ñ¿ ñ[¿ ñ¨¿ ñ¿ ñÙ¿ ñı¿ ó6¿ óé¿ ó‘¿ ò,¿ òK¿ òQ¿ òö¿ ò‰¿ ô¿ ô¿ ôW¿ ôs¿ ôà¿ ôé¿ ôè¿ ô–¿ ö¿ ö¿ öJ¿ öå¿ ö≥¿ öˇ¿ õ¿ õ*¿ õ@¿ õG¿ õH¿ õj¿ õx¿ õ~¿ õ¿ õû¿ õ∏¿ õ˛¿ ú¿ ú0¿ úY¿ ú]¿ ú^¿ úü¿ ú¡¿ ú«¿ ú˘¿ ù¿ ù'¿ ùk¿ ù∞¿ ùÏ¿ û!¿ û/¿ û5¿ û6¿ ûW¿ û[¿ û\¿ ûÜ¿ ûå¿ û€¿ ü¿ üJ¿ üÅ¿ ü¶¿ ü¥¿ ü∫¿ üÿ¿ üÓ¿ üÚ¿ üÛ¿ †!¿ †'¿ †x¿ †~¿ †Õ¿ °¿ ° ¿ °H¿ °o¿ °}¿ °É¿ °£¿ °π¿ °Ω¿ °æ¿ °Â¿ °Ê¿ ¢¿ ¢¿ ¢h¿ ¢å¿ ¢í¿ ¢‹¿ £¿ £¿ £Y¿ £ô¿ £ö¿ £Ÿ¿ £˛¿ §N¿ §û¿ §∫¿ §‡¿ §Ó¿ §Ù¿ •:¿ •e¿ •i¿ •j¿ •´¿ •˚¿ ¶K¿ ¶g¿ ¶ç¿ ¶õ¿ ¶°¿ ¶Õ¿ ¶—¿ ¶“¿ ß!¿ ßc¿ ßd¿ ß∂¿ ß≈¿ ®¿ ®¿ ®=¿ ®a¿ ®±¿ ©¿ ©¿ ©+¿ ©1¿ ©Z¿ ©^¿ ©_¿ ©á¿ ©ç¿ ©‹¿ ™¿ ™E¿ ™z¿ ™ù¿ ™´¿ ™±¿ ™Õ¿ ™„¿ ™Á¿ ™Ë¿ ´¿ ´¿ ´i¿ ´o¿ ´æ¿ ´¿ ¨¿ ¨1¿ ¨V¿ ¨d¿ ¨j¿ ¨à¿ ¨û¿ ¨¢¿ ¨£¿ ¨»¿ ¨…¿ ¨Ú¿ ¨¯¿ ≠G¿ ≠k¿ ≠q¿ ≠π¿ ≠Î¿ ≠Ï¿ Æ2¿ Æp¿ Æq¿ ÆÆ¿ Æ—¿ Ø!¿ Øq¿ Øç¿ Ø±¿ Øø¿ Ø≈¿ ∞	¿ ∞2¿ ∞6¿ ∞7¿ ∞v¿ ∞∆¿ ±¿ ±2¿ ±V¿ ±d¿ ±j¿ ±î¿ ±ò¿ ±ô¿ ±Ê¿ ≤&¿ ≤'¿ ≤w¿ ≤Ü¿ ≤¿¿ ≤¡¿ ≤˙¿ ≥¿ ≥l¿ ≥º¿ ≥ÿ¿ ≥Ê¿ ≥Ï¿ ¥¿ ¥¿ ¥¿ ¥>¿ ¥D¿ ¥ê¿ ¥¥¿ ¥∫¿ ¥Ù¿ µ#¿ µ$¿ µc¿ µ≠¿ µ›¿ ∂¿ ∂K¿ ∂c¿ ∂ü¿ ∂»¿ ∂Ô¿ ∑¿ ∑C¿ ∑f¿ ∑ã¿ ∑∞¿ ∑◊¿ ∑Í¿ ∑Ù¿ ∑¸¿ ∏¿ ∏#¿ ∏'¿ ∏(¿ ∏r¿ ∏î¿ ∏ï¿ ∏Ê¿ ∏Û¿ π¿ π¿ πe¿ πè¿ π∑¿ π∏¿ ∫¿ ∫-¿ ∫S¿ ∫T¿ ∫ô¿ ∫ ¿ ∫ﬂ¿ ª¿ ª¿ ªW¿ ªü¿ ª±¿ ª∆¿ ª’¿ ª˛¿ º7¿ º;¿ ºm¿ ºn¿ º¨¿ º≤¿ º˜¿ ΩC¿ Ωç¿ Ω¨¿ Ω≤¿ Ω˝¿ æK¿ æ|¿ æÇ¿ æ ¿ æ–¿ æ‡¿ æÊ¿ øN¿ ø{¿ ø|¿ ø«¿ ¿¿ ¿¿ ¿g¿ ¿Æ¿ ¿Ò¿ ¡@¿ ¡q¿ ¡¿¿ ¬¿ ¬?¿ ¬T¿ ¬§¿ ¬π¿ ¬Ë¿ ¬È¿ √9¿ √Q¿ √W¿ √¢¿ √“¿ ƒ¿ ƒ¿ ƒP¿ ƒv¿ ƒ|¿ ƒ ¿ ƒ¯¿ ƒ˛¿ ≈N¿ ≈h¿ ≈w¿ ≈ø¿ ≈¯¿ ≈¸¿ ∆/¿ ∆K¿ ∆r¿ ∆ó¿ ∆•¿ ∆´¿ ∆…¿ ∆ﬂ¿ ∆„¿ ∆‰¿ «4¿ «x¿ «y¿ «∆¿ «˛¿ »4¿ »5¿ »Q¿ »k¿ »l¿ »≤¿ …¿ …¿ …Y¿ …Z¿ …ô¿ …‚¿ …˜¿  ¿  *¿  8¿  >¿  ?¿  P¿  á¿  ∫¿  ¡¿ À¿ ÀT¿ ÀX¿ ÀY¿ Àò¿ À“¿ ÀÁ¿ À˛¿ Ã¿ Ã:¿ Ã[¿ Ãy¿ Ãò¿ ÃØ¿ Ãµ¿ Ãπ¿ Ã∫¿ Ã˘¿ Õ?¿ ÕT¿ Õi¿ ÕÑ¿ Õ´¿ Õ≤¿ Õÿ¿ Õˆ¿ Œ¿ Œ¿ ŒE¿ ŒÆ¿ Œº¿ Œ¬¿ Œ√¿ Œﬁ¿ ŒÏ¿ ŒÚ¿ ŒÛ¿ œ=¿ œ^¿ œv¿ œ©¿ œ“¿ œ˘¿ –2¿ –`¿ –k¿ –t¿ –{¿ –¿ –Ä¿ –Œ¿ –ı¿ —¿ —:¿ —^¿ —e¿ —Ä¿ —é¿ —î¿ —ï¿ —ﬂ¿ “¿ “¿ “Q¿ “z¿ “°¿ “⁄¿ “˝¿ ”¿ ”¿ ”¿ ”¿ ”¿ ”=¿ ”>¿ ”É¿ ”ù¿ ”Õ¿ ”€¿ ”·¿ ‘,¿ ‘e¿ ‘ø¿ ‘‹¿ ‘Ï¿ ‘Ù¿ ’¿ ’]¿ ’~¿ ’û¿ ’ ¿ ’Ù¿ ’˛¿ ÷"¿ ÷P¿ ÷É¿ ÷æ¿ ÷˜¿ ◊¿ ◊:¿ ◊G¿ ◊e¿ ◊è¿ ◊∑¿ ◊ø¿ ◊·¿ ÿ¿ ÿ>¿ ÿw¿ ÿÆ¿ ÿ∂¿ ÿº¿ ÿ¿¿ ÿ¡¿ ÿ˘¿ Ÿ?¿ ŸT¿ Ÿd¿ ŸÖ¿ Ÿ°¿ Ÿ¡¿ Ÿ‚¿ ⁄ ¿ ⁄¿ ⁄6¿ ⁄<¿ ⁄¢¿ ⁄∑¿ ⁄Ω¿ ⁄¡¿ ⁄¬¿ €¿ €.¿ €4¿ €a¿ €v¿ €ç¿ €≤¿ €›¿ €˘¿ ‹¿ ‹¿ ‹%¿ ‹>¿ ‹S¿ ‹W¿ ‹X¿ ‹ì¿ ‹≈¿ ‹⁄¿ ‹Ì¿ ›-¿ ›e¿ ›ë¿ ›ﬂ¿ ›Â¿ ›Ò¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁG¿ ﬁ`¿ ﬁ≠¿ ﬁ“¿ ﬁ˙¿ ﬂ¿ ﬂ/¿ ﬂO¿ ﬂ~¿ ﬂ∏¿ ﬂ˘¿ ‡<¿ ‡y¿ ‡ß¿ ‡–¿ ·¿ ·/¿ ·8¿ ·>¿ ·]¿ ·|¿ ·ì¿ ·ú¿ ·£¿ ·ß¿ ·®¿ ·Ÿ¿ ·Ú¿ ‚?¿ ‚ù¿ ‚Õ¿ ‚ı¿ „¿ „*¿ „H¿ „u¿ „Ø¿ „Ó¿ ‰/¿ ‰j¿ ‰ò¿ ‰ø¿ ‰Ó¿ Â¿ Â%¿ Â+¿ ÂJ¿ Âi¿ ÂÄ¿ Ââ¿ Âê¿ Âî¿ Âï¿ Â«¿ Âˆ¿ Ê¿ ÊA¿ ÊG¿ ÊØ¿ Ê∞¿ Êˇ¿ Á ¿ Á0¿ Á\¿ Á§¿ Á´¿ Á¨¿ Ë¿ Ë-¿ Ë.¿ ËÉ¿ Ë≠¿ Ë—¿ ËÒ¿ ÈE¿ ÈF¿ Èj¿ Èv¿ È≤¿ ÈÔ¿ Èˆ¿ È˜¿ Í¿ Í>¿ Ía¿ Íá¿ Íù¿ Í«¿ Í˘¿ Î¿ Î)¿ ÎH¿ Î^¿ Î~¿ Îû¿ Îª¿ Îÿ¿ ÎÂ¿ Î¿ Î˘¿ Ï ¿ Ï¿ Ï¿ ÏH¿ Ïï¿ Ï¥¿ Ï∫¿ Ì	¿ Ì_¿ Ìm¿ Ìs¿ Ìµ¿ Ì ¿ Ó ¿ Ó5¿ ÓC¿ ÓI¿ ÓJ¿ Ót¿ Óx¿ Óz¿ Ó{¿ Ó«¿ Ô¿ Ô\¿ Ôê¿ Ô›¿ ¿ <¿ _¿ t¿ ë¿ ´¿ ƒ¿  ¿ À¿ ·¿ ¯¿ Ò¿ Ò@¿ ÒA¿ ÒM¿ Ò°¿ Ò£¿ Ò§¿ Ú¿ Ú>¿ Út¿ Úu¿ ÚÅ¿ Úñ¿ Ú≠¿ ÚÆ¿ Û¿ Û¿ Û-¿ Ûl¿ Ûp¿ Ûq¿ Û}¿ Û∫¿ Û‡¿ Ù¿ Ù#¿ Ù)¿ Ùn¿ Ùè¿ ÙŒ¿ Ù“¿ Ù”¿ Ùﬂ¿ ÙÚ¿ ı4¿ ıO¿ ıd¿ ıh¿ ıi¿ ıé¿ ı∫¿ ı◊¿ ı‰¿ ˆ¿ ˆ¿ ˆ¿ ˆ¿ ˆ¿ ˆ?¿ ˆ^¿ ˆ{¿ ˆ≥¿ ˆ“¿ ˆÔ¿ ˜¿ ˜A¿ ˜f¿ ˜â¿ ˜™¿ ˜∑¿ ˜¬¿ ˜À¿ ˜“¿ ˜÷¿ ˜ÿ¿ ˜Ÿ¿ ¯¿ ¯P¿ ¯p¿ ¯í¿ ¯™¿ ¯Õ¿ ¯Ô¿ ˘¿ ˘:¿ ˘]¿ ˘Ç¿ ˘ó¿ ˘æ¿ ˘Ù¿ ˘˙¿ ˘˚¿ ˙¿ ˙M¿ ˙ë¿ ˙◊¿ ˚¿ ˚H¿ ˚s¿ ˚ó¿ ˚Ω¿ ˚Í¿ ˚Î¿ ˚˜¿ ¸I¿ ¸K¿ ¸L¿ ¸º¿ ¸‰¿ ˝¿ ˝¿ ˝'¿ ˝<¿ ˝S¿ ˝T¿ ˝±¿ ˝≤¿ ˝“¿ ˛¿ ˛¿ ˛¿ ˛9¿ ˛e¿ ˛Ç¿ ˛è¿ ˛¨¿ ˛≤¿ ˛∂¿ ˛∑¿ ˛√¿ ˛ˇ¿ ˇ%¿ ˇi¿ ˇâ¿ ˇ«¿ ˇÀ¿ ˇÃ¿ ˇÿ¿ ˇÎ¿ ,¿ G¿ \¿ `¿ a¿ m¿ î¿ ﬁ¿ Ò¿¿¿^¿Ä¿á¿à¿≥¿À¿„¿˚¿¿¿¿i¿¶¿˛¿¿=¿Ä¿≈¿¿M¿T¿U¿}¿°¿»¿Á¿¿¿9¿a¿â¿≥¿ÿ¿¿C¿£¿œ¿Û¿A¿z¿ß¿’¿¿¿,¿^¿y¿º¿˛¿	B¿	Å¿	î¿	•¿	¥¿	–¿	¯¿
¿
>¿
d¿
å¿
ù¿
ÿ¿
Ò¿¿:¿j¿{¿ä¿ó¿¢¿´¿≤¿∂¿∏¿π¿ˇ¿¿I¿ç¿¬¿¿Z¿•¿À¿œ¿›¿·¿1¿¿í¿œ¿¿^¿í¿ì¿—¿Ô¿¿*¿G¿I¿J¿ë¿ï¿€¿,¿u¿ƒ¿¿,¿0¿~¿Æ¿≤¿Ò¿A¿é¿‹¿˙¿˛¿¿¿]¿à¿Ã¿
¿6¿m¿ï¿±¿∑¿∏¿˚¿¿Q¿°¿›¿„¿'¿=¿J¿à¿â¿ÿ¿Û¿7¿\¿¿û¿“¿ı¿¿7¿Z¿`¿d¿e¿∂¿Â¿
¿-¿L¿r¿ï¿∂¿◊¿˙¿ ¿¿¿J¿w¿∏¿‰¿¯¿˛¿ˇ¿I¿}¿Ñ¿Ö¿«¿¿¿¿R¿ë¿Æ¿¬¿»¿…¿˙¿*¿.¿/¿t¿≥¿–¿‰¿Í¿Î¿¿N¿R¿S¿Ñ¿”¿ˆ¿ 
¿ ¿ ¿ e¿ f¿ û¿ ’¿ Ÿ¿ ⁄¿!¿!¿!g¿!≠¿!≤¿"¿"+¿"0¿"?¿"D¿"í¿"•¿#¿#E¿#F¿#ö¿#Í¿$¿$E¿$á¿$√¿%¿%>¿%E¿%F¿%s¿%°¿%√¿%Ã¿%Ÿ¿%‡¿%‰¿%Â¿&¿&"¿&U¿&Z¿&i¿&n¿&Ω¿&’¿'¿'U¿'V¿'™¿'È¿(%¿(P¿(W¿(X¿(Ö¿(≥¿(’¿(ﬁ¿(Î¿(Ú¿(ˆ¿(˜¿)$¿)*¿){¿) ¿)⁄¿* ¿*K¿*L¿*ô¿*ø¿*Ã¿+¿+¿+g¿+ó¿+§¿+Ë¿+È¿,9¿,u¿,ï¿,ñ¿,⁄¿-	¿-0¿-1¿-Ç¿-´¿-¨¿-À¿-¯¿.0¿.C¿.è¿.≤¿.¿¿.Î¿.Ô¿.¿/=¿/Ü¿/µ¿/€¿/‹¿0,¿0x¿0§¿0©¿0˘¿1H¿1r¿1ô¿1ö¿1Ó¿27¿2<¿2í¿2·¿3¿3J¿3K¿3ç¿3ì¿3£¿3©¿3ˆ¿4	¿4¿41¿4t¿4›¿4Ú¿4ˆ¿4˜¿59¿5?¿5O¿5U¿5¢¿5µ¿5¬¿5›¿5˙¿5˛¿5ˇ¿6;¿6A¿6í¿6Ì¿6Û¿7¿7	¿7Z¿7g¿7ñ¿7º¿7 ¿7–¿8$¿8y¿8Œ¿9$¿9w¿9¥¿:¿:]¿:∞¿:÷¿;"¿;T¿;•¿;Ì¿<%¿<T¿<}¿<®¿<©¿<ˇ¿=+¿=ë¿=∂¿=Ÿ¿=¸¿>;¿>d¿>É¿>¬¿>—¿>Ú¿?¿?g¿?Ü¿?©¿?¿@¿@?¿@[¿@¿@¶¿@¡¿@Œ¿@‡¿@Í¿A7¿Aà¿A”¿A¿B9¿BZ¿B}¿B°¿Bƒ¿C¿C%¿C/¿Cx¿C~¿CÇ¿CÉ¿C«¿CÕ¿D¿D6¿D<¿DÄ¿DÜ¿Dñ¿Dú¿DÎ¿D˛¿E¿EA¿Ei¿Eë¿E∂¿Eﬂ¿F¿F6¿F?¿FE¿FI¿FJ¿Få¿Fí¿F„¿G¿G¿GO¿GU¿Ge¿Gk¿G∏¿GÀ¿Gÿ¿H¿H4¿H[¿H¿HÆ¿Hµ¿H€¿H˝¿I¿I¿I¿IV¿I~¿IÑ¿Iù¿I™¿I’¿I÷¿J¿J¿J`¿Jf¿Jv¿J|¿J√¿J÷¿K$¿Kp¿KÉ¿Kê¿K›¿Kﬁ¿L¿L$¿Ld¿Lj¿Lz¿LÄ¿L∆¿Lﬁ¿LÎ¿M¿MA¿Mô¿M«¿N/¿NV¿Ny¿Nú¿N¡¿N“¿O¿O;¿O`¿O±¿O≈¿O—¿P¿PW¿P|¿P°¿PÚ¿Q¿Q¿Q]¿Q~¿Q£¿QÚ¿R¿Rb¿Ry¿Rµ¿R”¿R˘¿S"¿S?¿SN¿Sb¿Sn¿Sê¿S∫¿SÁ¿T¿TE¿Tù¿T‡¿U6¿Ut¿U√¿UÌ¿V¿Vä¿V˚¿WB¿WS¿W¡¿X5¿X™¿Y¿Y¿Yé¿Yº¿YÕ¿ZO¿Z–¿[(¿[£¿\¿\q¿\ı¿\ˆ¿])¿]v¿] ¿^¿^&¿^[¿^m¿_c¿_ñ¿_≠¿_˛¿`m¿`¢¿`ª¿`Ó¿a ¿a¿a¿a$¿a*¿a.¿a/¿as¿ay¿a¡¿a«¿a◊¿a›¿b'¿b?¿bL¿b°¿b¢¿bÈ¿bÔ¿c>¿cP¿cV¿cf¿cl¿cπ¿c—¿cﬁ¿d¿d@¿dg¿dà¿d´¿d’¿e¿eV¿ei¿eñ¿e¬¿e¯¿f¿f0¿f¿f≥¿f“¿g¿g6¿gÑ¿g“¿gÂ¿gˆ¿h¿h(¿hd¿hp¿hï¿h∫¿h›¿i¿iO¿iW¿iX¿iõ¿iú¿i€¿j¿j¿j¿j¿jb¿jh¿j∂¿j“¿jÿ¿jË¿jÓ¿k7¿kX¿ke¿k¨¿k—¿l¿l^¿lØ¿m¿m/¿m<¿mn¿mw¿mû¿mø¿m‚¿n¿n@¿n´¿n’¿o¿o¿o-¿oZ¿oÜ¿oº¿oÀ¿oˆ¿pE¿pz¿p™¿pπ¿pı¿q¿q&¿qK¿qn¿qì¿q¿¿r)¿rQ¿rÖ¿rí¿rö¿rõ¿rﬁ¿r‰¿rË¿rÈ¿s.¿s4¿se¿sk¿s{¿sÅ¿s—¿s‰¿sÒ¿t*¿tU¿t{¿tù¿t£¿tŒ¿tÚ¿u¿uü¿uƒ¿v¿v8¿vA¿vw¿v}¿vÅ¿vÇ¿v√¿v…¿w¿w¿w6¿w\¿wj¿wp¿wï¿w¥¿w’¿x!¿xh¿xr¿xú¿x¬¿xË¿xÚ¿y¿y8¿yY¿y|¿y§¿yÔ¿y˘¿z¿z%¿z)¿z*¿zo¿zu¿zÖ¿zã¿z€¿zÓ¿{/¿{<¿{p¿{ƒ¿|¿|n¿|ƒ¿}¿}T¿}∑¿}ﬂ¿}„¿}‰¿~&¿~,¿~w¿~Æ¿~¥¿~ƒ¿~ ¿¿*¿7¿l¿ë¿⁄¿Ä¿Ä&¿Ä.¿Ä4¿Ä8¿Ä9¿Ää¿Ä°¿Å¿Åg¿Å»¿ÅÃ¿ÅÕ¿Ç¿Ç0¿Çè¿Ç”¿É/¿É3¿É4¿ÉÇ¿ÉÀ¿Ñ¿Ñ=¿Ñé¿Ñº¿Ö^¿Ö÷¿Ü¿Ü¿Ü	¿ÜV¿Üv¿Ü{¿Ü ¿Ü‰¿ÜÈ¿á2¿áj¿áÚ¿àB¿àè¿àæ¿à’¿â¿â@¿âT¿ââ¿âÿ¿âŸ¿ä¿äo¿ä¿¿ä¡¿äÓ¿ã5¿ãB¿ãI¿ãM¿ãN¿ãê¿ãñ¿ã¬¿å¿å9¿å?¿åO¿åU¿å¢¿åµ¿å¬¿å˜¿ç¿ç+¿ç1¿çY¿çí¿çü¿ç∆¿çÎ¿é¿é1¿éT¿éy¿é›¿è ¿è_¿èg¿èm¿èì¿èµ¿èª¿èø¿è¿¿ê¿ê¿êR¿êX¿êh¿ên¿êª¿ê”¿ê‡¿ë¿ëA¿ëO¿ëU¿ëá¿ë∂¿ëﬂ¿í
¿í¿í?¿ím¿í™¿ì¿ì¿ìÇ¿ì√¿ì—¿ì◊¿ìÿ¿î<¿îc¿îÑ¿îß¿î˜¿ï¿ïA¿ïd¿ïâ¿ïŸ¿ï·¿ïÓ¿ñ¿ñ6¿ñX¿ñÇ¿ñØ¿ñﬁ¿ó¿ó?¿óP¿ó{¿óÆ¿óÿ¿ò¿òR¿ò§¿ò·¿ô0¿ôa¿ôë¿ô∆¿ôŸ¿ö&¿ö6¿öM¿öY¿ö~¿ö£¿ö≈¿öÔ¿õ¿õK¿õy¿õ¨¿õΩ¿õË¿ú¿úE¿úq¿ú∏¿ú˙¿ù'¿ùX¿ùà¿ùΩ¿ù–¿û¿û-¿ûD¿ûP¿ûs¿ûñ¿ûª¿ûÊ¿ü¿ü?¿üL¿üT¿üZ¿ü^¿ü_¿üß¿ü≠¿ü˚¿†¿†¿†(¿†.¿†|¿†µ¿†¬¿†ˇ¿°%¿°3¿°9¿°:¿°V¿°¢¿°„¿¢4¿¢Ü¿¢¥¿¢¡¿¢Û¿¢¸¿£\¿£]¿£{¿£Ó¿§¿§f¿§å¿§π¿§ƒ¿§≈¿§Â¿•¿•?¿•g¿•ë¿•·¿¶	¿¶4¿¶I¿¶]¿¶g¿¶o¿¶p¿¶ò¿ß¿ß4¿ß[¿ßÇ¿ß•¿ß…¿ßı¿®$¿®U¿®™¿®ÿ¿©¿© ¿©M¿©Ç¿©Æ¿©‹¿©ı¿™H¿™Ü¿™ù¿™´¿™ø¿™‰¿´¿´]¿´á¿´∏¿´«¿´Ó¿¨¿¨@¿¨ë¿¨ª¿¨Ï¿¨˚¿≠¿≠¿≠¿≠5¿≠V¿≠±¿Æ¿Æ`¿Æm¿Æ ¿Æ¸¿Ø¿ØH¿Øu¿Ø´¿Ø˛¿∞*¿∞]¿∞n¿∞ô¿∞Ã¿∞ˆ¿±"¿±_¿±â¿±ø¿±Û¿≤¿≤6¿≤f¿≤õ¿≤Æ¿≥¿≥¿≥)¿≥>¿≥J¿≥\¿≥Å¿≥¶¿≥¯¿¥[¿¥£¿¥≈¿¥Ô¿µ¿µG¿µz¿µ∞¿∂¿∂/¿∂b¿∂s¿∂ù¿∂…¿∂ˆ¿∑'¿∑W¿∑å¿∑ü¿∑Û¿∏¿∏¿∏/¿∏;¿∏M¿∏p¿∏ì¿∏∏¿∏Í¿π9¿πa¿πê¿πù¿π•¿π´¿π¨¿π’¿∫¿∫N¿∫°¿∫ß¿∫®¿∫Ù¿ª¿ªS¿ª≥¿ª„¿º0¿ºk¿º©¿ºË¿Ω9¿Ωh¿Ωò¿Ωº¿Ω˜¿æ$¿æ1¿æ<¿æ`¿æi¿æÑ¿æƒ¿ø
¿ø9¿øi¿øç¿ø∆¿øÛ¿¿ ¿¿¿¿/¿¿8¿¿E¿¿ë¿¿ó¿¿õ¿¿ú¿¿·¿¿Á¿¡*¿¡D¿¡J¿¡Z¿¡`¿¡∞¿¡√¿¡–¿¬¿¬1¿¬2¿¬¬¿¬‰¿¬Í¿¬Î¿√¿√(¿√.¿√/¿√Z¿√^¿√_¿√´¿√À¿√—¿ƒ ¿ƒS¿ƒò¿ƒ∏¿ƒ∆¿ƒÂ¿≈ ¿≈¿≈0¿≈@¿≈h¿≈ê¿≈¨¿≈¸¿∆H¿∆n¿∆ú¿∆¿¿∆Ï¿«¿«:¿«v¿«§¿«Ã¿«Ù¿»&¿»Z¿»à¿»º¿»÷¿»Í¿»Ò¿»ı¿»˜¿»¯¿…J¿…N¿…ô¿…Ë¿ 7¿ L¿ P¿ ^¿ b¿ Æ¿ ˙¿À¿ÀG¿Àv¿À|¿À∆¿ÀÌ¿À¸¿Ã¿Ã0¿ÃD¿Ã`¿Ãz¿Ãì¿Ã∞¿Ã»¿Ã‰¿Ã¯¿Õ¿Õ;¿ÕX¿Õr¿Õå¿Õ´¿ÕÀ¿ÕË¿Œ¿Œ#¿Œ<¿ŒB¿ŒC¿Œ®¿Œœ¿Œ–¿œ5¿œ\¿œ]¿œß¿œ˜¿–,¿–[¿–\¿–©¿–ı¿—0¿—1¿—Ç¿—ü¿—÷¿—◊¿“¿“A¿“B¿“Ö¿“π¿“∫¿”¿”¿”$¿”k¿”π¿‘¿‘C¿‘D¿‘ì¿‘‡¿’¿’F¿’G¿’ö¿’…¿’œ¿÷¿÷>¿÷e¿÷f¿÷™¿÷Ò¿◊/¿◊l¿◊m¿◊¥¿◊˚¿◊¸¿ÿB¿ÿ{¿ÿ|¿ÿ ¿Ÿ¿Ÿ@¿ŸA¿Ÿè¿Ÿ—¿⁄¿⁄¿⁄A¿⁄|¿⁄}¿⁄∂¿⁄Û¿⁄Ù¿€8¿€o¿€p¿€¬¿€»¿‹¿‹:¿‹;¿‹}¿‹É¿‹∫¿‹›¿‹ﬁ¿‹˝¿›¿›¿› ¿›o¿›q¿›r¿›…¿› ¿ﬁ¿ﬁl¿ﬁæ¿ﬁ‹¿ﬁ·¿ﬂ3¿ﬂG¿ﬂÖ¿ﬂ™¿ﬂÕ¿ﬂ¿‡¿‡_¿‡∞¿‡˝¿·M¿·ô¿·À¿‚¿‚<¿‚]¿‚≠¿‚¸¿„M¿„_¿„Ö¿„®¿„˜¿‰F¿‰ñ¿‰‚¿Â¿ÂO¿ÂU¿ÂY¿ÂZ¿Âz¿Âû¿Â¢¿Â£¿Â√¿ÂÁ¿ÂÎ¿ÂÏ¿Ê=¿Êc¿Êó¿Êº¿Á	¿Á\¿Á´¿ÁŸ¿Ë'¿Ë[¿Ëa¿Ëb¿Ë∞¿Ë‰¿ËÍ¿ËÓ¿ËÔ¿È¿Èm¿Èò¿È∏¿ÈÁ¿Í¿Í¿Í¿Í¿Í.¿ÍT¿ÍX¿ÍY¿Íê¿Í¿¿Íƒ¿Í≈¿Í˛¿Î/¿Î3¿Î4¿Îg¿Îï¿Îô¿Îö¿Î—¿Î˛¿Ï¿Ï¿Ï8¿Ïc¿Ïg¿Ïh¿Ï¶¿Ï’¿Ì¿Ì¿Ì¿Ì¿ÌU¿Ìâ¿Ìª¿Ì¡¿Ì≈¿Ì∆¿Ó ¿Ó-¿ÓX¿Ó^¿Ób¿Óc¿Óo¿Óñ¿ÓÛ¿ÓÙ¿ÔU¿Ôâ¿Ô±¿Ô¬¿Ôı¿1¿:¿A¿B¿q¿•¿“¿ÒA¿Òø¿ÒÔ¿Ú¿Ú9¿Úz¿ÚÆ¿Úπ¿Ú¬¿Ú»¿Ú…¿Ú¯¿Û(¿ÛU¿Û|¿Û°¿Û∆¿ÛÁ¿Ùp¿Ùª¿Ù˙¿ı¿ıg¿ıÜ¿ı√¿ı¸¿ˆ5¿ˆb¿ˆì¿ˆ∆¿ˆÛ¿˜¿˜K¿˜Z¿˜g¿˜ä¿˜≠¿˜“¿¯E¿¯Ö¿¯π¿¯–¿˘&¿˘E¿˘Ç¿˘ª¿˘Ù¿˙!¿˙R¿˙Ö¿˙≤¿˙€¿˚
¿˚¿˚&¿˚.¿˚4¿˚5¿˚É¿˚Ù¿¸1¿¸b¿¸u¿¸ ¿˝¿˝%¿˝.¿˝4¿˝5¿˝T¿˝n¿˝ê¿˝±¿˝Ã¿˝”¿˝◊¿˝Ÿ¿˝⁄¿˛(¿˛I¿˛M¿˛î¿˛ÿ¿ˇ#¿ˇÜ¿ˇ≤¿ˇŒ¿ ¿ ¿ ¿ 3¿ 4¿ n¿ é¿ £¿ ±¿ ∑¿ ∏¿ ”¿ ›¿¿/¿c¿Å¿ó¿∫¿¿¿`¿ú¿≥¿√¿À¿Ú¿ ¿¿8¿\¿Ñ¿Ö¿ö¿®¿Æ¿∆¿ ¿À¿◊¿¿¿M¿S¿¿è¿ï¿∂¿∫¿ª¿«¿ˆ¿¿A¿u¿{¿¿Ä¿å¿…¿ﬁ¿¿¿=¿d¿â¿Æ¿»¿◊¿›¿·¿‚¿Ó¿¿3¿I¿^¿b¿d¿e¿Æ¿≈¿¿!¿"¿p¿Ω¿	¿	¿	¿	\¿	l¿	n¿	o¿	œ¿	„¿	Á¿	ı¿
C¿
ß¿
⁄¿
ﬁ¿¿á¿≤¿“¿¿$¿%¿?¿@¿Ñ¿§¿π¿«¿Õ¿Œ¿ı¿ˇ¿I¿j¿û¿º¿“¿ı¿N¿X¿¢¿ﬁ¿¿-¿5¿`¿n¿t¿u¿∑¿›¿¿¿2¿@¿F¿^¿b¿c¿o¿õ¿¥¿Â¿Î¿¿+¿1¿R¿V¿W¿c¿í¿∂¿›¿¿¿¿¿(¿e¿z¿†¿≤¿Ÿ¿ ¿%¿J¿b¿h¿l¿m¿y¿å¿æ¿‘¿È¿Ì¿Ô¿¿O¿S¿a¿Ø¿ ¿ ¿¿¿o¿œ¿¿¿¿S¿_¿a¿b¿∞¿¿7¿à¿¿¿˝¿	¿ ¿:¿Y¿t¿í¿∫¿ﬁ¿¿?¿_¿`¿l¿§¿•¿±¿Í¿Î¿˜¿1¿2¿>¿|¿}¿â¿È¿Í¿ˆ¿W¿X¿d¿®¿©¿µ¿Ô¿Ò    ToolbarItemsParentDataTextSelectionControlsEmptyTextSelectionControlsemptyTextSelectionControlsTextSelectionOverlaySelectionOverlay_SelectionToolbarWrapper_SelectionToolbarWrapperState_SelectionHandleOverlay_SelectionHandleOverlayState+TextSelectionGestureDetectorBuilderDelegate#TextSelectionGestureDetectorBuilderTextSelectionGestureDetector"_TextSelectionGestureDetectorStateClipboardStatusNotifierClipboardStatusLiveTextInputStatusNotifierLiveTextInputStatusTextSelectionHandleControls #ë