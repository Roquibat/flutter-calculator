ÄÇaxisDirection
controllerphysicsviewportBuilderincrementCalculatorexcludeFromSemanticssemanticChildCountdragStartBehaviorrestorationIdscrollBehaviorclipBehavioraxiscreateStatedebugFillPropertiesmaybeOfof"recommendDeferredLoadingForContextensureVisible
scrollablepositionupdateShouldNotify	_positionresolvedPhysics_physicsdeltaToScrollOrigin_effectiveScrollControllervsyncdevicePixelRatio_devicePixelRationotificationContextstorageContext_persistedScrollOffset_configuration_fallbackScrollController_mediaQueryGestureSettings_updatePositionrestoreState
saveOffset	initStatedidChangeDependencies_shouldUpdatePositiondidUpdateWidgetdispose_scrollSemanticsKeysetSemanticsActions_gestureDetectorKey_ignorePointerKey_gestureRecognizers_shouldIgnorePointer_lastCanDrag_lastAxisDirection
setCanDragsetIgnorePointer_drag_hold_handleDragDown_handleDragStart_handleDragUpdate_handleDragEnd_handleDragCancel_disposeHold_disposeDrag#_targetScrollOffsetForPointerScroll_pointerSignalEventDelta_receivedPointerSignal_handlePointerScroll _handleScrollMetricsNotification_buildChromebuild_performEnsureVisiblestatechild	registrar_selectionDelegate_kDefaultDragTargetSize%_kDefaultSelectToScrollVelocityScalar_autoScroller_scheduledLayoutChange _currentDragStartRelatedToOrigin_currentDragEndRelatedToOrigin_selectionStartsInScrollable_scheduleLayoutChange!_selectableStartEdgeUpdateRecords_selectableEndEdgeUpdateRecordsdidChangeSelectableshandleClearSelectionhandleSelectionEdgeUpdate_inferPositionRelatedToOrigin"_updateDragLocationsFromGeometrieshandleSelectAllhandleSelectWordhandleGranularlyExtendSelection"handleDirectionallyExtendSelection_jumpToEdge_globalPositionInScrollable_dragTargetFromEventdispatchSelectionEventToChildensureChildUpdatedallowImplicitScrollingcreateRenderObjectupdateRenderObject_allowImplicitScrolling_semanticChildCountdescribeSemanticsConfiguration
_innerNodeassembleSemanticsNodeclearSemanticscreateDefaultValuedidUpdateValuefromPrimitivestoPrimitivesenablednoneweightedEventweightedContinuousfreediagonalDragBehaviorhorizontalDetailsverticalDetails_verticalFallbackController_horizontalFallbackController_verticalOuterScrollableKey_horizontalInnerScrollableKeyverticalScrollablehorizontalScrollabletwoDimensionalScrollablehorizontalKey
lockedAxislastDragOffset_evaluateLockedAxisViewportBuilderTwoDimensionalViewportBuilder_EnsureVisibleResults
Scrollable_ScrollableScopeScrollableState_ScrollableSelectionHandler _ScrollableSelectionHandlerState%_ScrollableSelectionContainerDelegate_getDeltaToScrollOrigin_ScrollSemantics_RenderScrollSemantics_RestorableScrollOffsetDiagonalDragBehaviorTwoDimensionalScrollableTwoDimensionalScrollableState_TwoDimensionalScrollableScope_VerticalOuterDimension_VerticalOuterDimensionState_HorizontalInnerDimension_HorizontalInnerDimensionStateÅó	ToleranceWidgetBuildContextViewportOffsetListFuturevoidViewportListViewGridViewCustomScrollViewofensureVisibleSingleChildScrollViewShrinkWrappingViewportScrollControllerScrollPositionPageViewPageControllerPageStoragekeepScrollOffsetPageStorageKeykey
ScrollViewScrollNotificationNotificationListenerStatefulWidgetAxisDirectiondownDragStartBehaviorstartCliphardEdgeaxisDirectionrightinitialScrollOffsetoffset	animateToScrollConfigurationScrollBehaviorscrollBehaviorScrollPhysicsphysicsAlwaysScrollableScrollPhysicsScrollActionScrollIncrementTypepagelineScrollIncrementCalculatorGestureDetectorexcludeFromSemanticsbool	separatedSemanticsConfigurationscrollChildCountintDragGestureRecognizerdragStartBehaviorRestorationBucketRestorationScopeRestorationManagerStringScrollableDetailsclipBehaviorAxisaxisDirectionToAxisoverrideDiagnosticPropertiesBuilderdebugFillPropertiesaddEnumPropertyDiagnosticsPropertyStringPropertyInheritedElement'getElementForInheritedWidgetOfExactTypewidget
scrollabledependOnInheritedElementcontextmaybeOfaxisFlutterError	fromPartsDiagnosticsNodeErrorSummaryErrorDescription	ErrorHintrecommendDeferredLoadingactivityScrollActivityvelocitygetInheritedWidgetOfExactTypepositiondoubleDurationzeroCurveCurveseaseScrollPositionAlignmentPolicyexplicitRenderObject_performEnsureVisiblefindRenderObject	alignmentdurationcurvealignmentPolicytargetRenderObjectaddAllisEmptyvaluelengthsinglewaitthenInheritedWidgetStateTickerProviderStateMixinRestorationMixinScrollContextcreateScrollPositionOffsetEdgeDraggingAutoScrollerpixelsupleft
controllerTickerProvidercurrentContextrestorationIdDeviceGestureSettingsgetScrollPhysicsapplyTodetachscheduleMicrotaskdisposeattachregisterForRestorationrestoreOffsetinitialRestore!debugIsSerializableForRestorationServicesBindinginstancerestorationManager	flushData	initState
MediaQuerymaybeGestureSettingsOfmaybeDevicePixelRatioOfViewdevicePixelRatiodidChangeDependenciesshouldNotifyruntimeTypeparentdidUpdateWidget	GlobalKey	protectedSetSemanticsActioncurrentStatereplaceSemanticsActionsRawGestureDetectorStateMapTypeGestureRecognizerFactoryverticalVerticalDragGestureRecognizer$GestureRecognizerFactoryWithHandlerssupportedDevicesdragDevicesonDownonStartonUpdateonEndonCancelminFlingDistanceminFlingVelocitymaxFlingVelocityvelocityTrackerBuildermultitouchDragStrategygestureSettings
horizontalHorizontalDragGestureRecognizerreplaceGestureRecognizersRenderIgnorePointerignoringDragScrollHoldControllerDragDownDetailsholdDragStartDetailsdragDragUpdateDetailsupdateDragEndDetailsendcancelminmaxminScrollExtentmaxScrollExtentPointerScrollEventLogicalKeyboardKeyHardwareKeyboardlogicalKeysPressedanypointerAxisModifierscontainskindPointerDeviceKindmousescrollDeltadydxaxisDirectionIsReversedPointerSignalEventshouldAcceptUserOffsetGestureBindingpointerSignalResolverregisterPointerScrollInertiaCancelEventpointerScrollPointerEventScrollMetricsNotificationdepthmarkNeedsSemanticsUpdate	directiondecorationClipBehaviorbuildScrollbarbuildOverscrollIndicatorchildListeneronPointerSignalRawGestureDetectorgesturesbehaviorHitTestBehavioropaque	SemanticsexplicitChildNodesIgnorePointerviewportBuilderonNotificationallowImplicitScrollingsemanticChildCountSelectionRegistrarSelectionContainerstate	registrardelegate)MultiSelectableSelectionContainerDelegatevelocityScalaraddListenerremoveListenerSchedulerBindingaddPostFrameCallbacklayoutDidChange
debugLabelSelectionEdgeUpdateEvent
SelectableselectablestoSetremoveWheredidChangeSelectablesSelectionResultClearSelectionEventclearhandleClearSelectionglobalPositiontypeSelectionEventTypeendEdgeUpdate	translateforEndgranularityforStarthandleSelectionEdgeUpdatependingstopAutoScrollstartAutoScrollIfNecessary	scrolling	RenderBoxglobalToLocallocalToGlobalsizeheightwidthinfiniteMatrix4getTransformTocurrentSelectionStartIndexforceUpdateStartSelectionGeometryhasSelectionSelectionPointstartSelectionPointMatrixUtilstransformPointlocalPosition
lineHeightcurrentSelectionEndIndexforceUpdateEndendSelectionPointSelectAllSelectionEventhandleSelectAllSelectWordSelectionEventhandleSelectWordGranularlyExtendSelectionEventhandleGranularlyExtendSelectionisEnd!DirectionallyExtendSelectionEvent"handleDirectionallyExtendSelectionRectfromLTRB
edgeBottombottomedgeToptopjumpTofromLTWH
fromCentercenterSelectionEventstartEdgeUpdategranularlyExtendSelectiondirectionallyExtendSelectionremove	selectAll
selectWorddispatchSelectionEventToChildabsprecisionErrorTolerancedispatchSelectionEventSemanticsNodeRenderViewportexcludeFromScrollingRenderAbstractViewportuseTwoPaneSemanticsdescribeSemanticsConfigurationSingleChildRenderObjectWidgetRenderProxyBoxisSemanticBoundaryhaveDimensionshasImplicitScrollingscrollPositionscrollExtentMaxscrollExtentMinIterablefirstisTaggedassembleSemanticsNodeshowOnScreenrecthasFlagSemanticsFlagisHiddenindexInParentscrollIndex
updateWithconfigchildrenInInversePaintOrderclearSemanticsRestorableValuenotifyListenersObject
kTouchSlopTwoDimensionalViewportTwoDimensionalScrollViewnoneverticalScrollablehorizontalScrollable"dependOnInheritedWidgetOfExactTypetwoDimensionalScrollableScrollMetricsverticalDetailshorizontalDetailshorizontalKeyincrementCalculatordiagonalDragBehaviorverticalOffsethorizontalOffsetweightedEventweightedContinuousfree_handleDragDown_handleDragStartsourceTimeStampdeltaprimaryDelta_handleDragUpdatepixelsPerSecondVelocityprimaryVelocity_handleDragEnd_handleDragCancel
setCanDrag_gestureRecognizersPanGestureRecognizer_configuration_physics_mediaQueryGestureSettings_lastCanDrag_lastAxisDirection_gestureDetectorKey_effectiveScrollControllerStatefulWidgetInheritedWidgetStateTickerProviderStateMixinRestorationMixinScrollContext)MultiSelectableSelectionContainerDelegateSingleChildRenderObjectWidgetRenderProxyBoxRestorableValue
ScrollableScrollableState≥ä +ü-Y!◊˜˙<ŸrJ∂ Ñ
Ñ	Tolerance É‰package:flutter/physics.dart  Ä¶  
dart:async  Äª  ÄÕmathÄ–	dart:math  Äÿ  package:flutter/foundation.dart  Å  package:flutter/gestures.dart  Å*  package:flutter/rendering.dart  ÅS  package:flutter/scheduler.dart  Å|  package:flutter/services.dart  Å•  
basic.dart  Å∫  framework.dart  Å”  gesture_detector.dart  ÅÛ  media_query.dart  Ç  notification_listener.dart  Ç3  restoration.dart  ÇN  restoration_properties.dart  Çt  scroll_activity.dart  Çì  scroll_configuration.dart  Ç∑  scroll_context.dart  Ç’  scroll_controller.dart  Çˆ  scroll_physics.dart  É  scroll_position.dart  É3  scrollable_helpers.dart  ÉU  selectable_region.dart  Év  selection_container.dart  Éô  ticker_provider.dart  É∏  	view.dart  ÉÃ  viewport.dart    	dart:core¿ ï˜ ¿r–â| <ÄÜÄ§Ä•Ä∫Ä÷Ä◊ÅÅ)ÅRÅ{Å£Å§ÅπÅ“ÅÚÇÇ2ÇMÇsÇíÇ∂Ç‘ÇıÉÉ2ÉTÉuÉòÉ∑ÉÀÉ„É‰ÑÑÑ3ÑQÑRÑùÑ¬ÖÖÖlÖõÜ.Ü/Ü\Ü_Ü•ÜÚáá`áaá±á⁄áﬁà)àwàªàøââ`â´â√â«ääbätäxäπäΩã
ãYãúãÊãÍå3åtåƒçççFçJçòçÈé5éÄéŒé“é‡é‰è-è]è≠è êê2êÄêûêÌê˚ëNëçë∑ë‹ëÒí í-íBíTíwíïíºíŸìì'ì@ìgì≠ìÆìÈîî!îoîøïïUï¶ï¬ï»ïññ*ñ+ñcñ¥ñƒñ óóhóµó˙òIòíò∑òΩôôFôLô\ôbô≠ô’ôÍöööFözöÄöÃö˜ö˝õKõtõzõØú ú7ú=úäú⁄ù+ùtùƒûû5û;ûKûQû¢ûüBüWüwüxü≈üÀ††[†a†q†w†¡°°T°}°~°ø¢¢X¢n¢t¢¿££H£N£Ü£‘§§"§Z§[§ù§Í•••]•©•Û¶¶¶¶$¶u¶â¶¨¶≠¶ı¶˚ßKßQßùßË®4®:®Ü®Õ®”®„®È©.©à©©©™™™@™~™Ñ™Ã´´b´Å´á´“¨ ¨Q¨W¨ü¨•¨µ¨ª≠
≠,≠2≠G≠t≠u≠∞≠˛ÆÆSÆêÆñÆ·Ø-Ø3ØCØIØñØ®ØΩØ‹Ø›∞∞∞]∞¶∞Í±±*±+±a±g±ä±ê±Ë≤;≤Å≤ú≤ù≤—≤◊≥ ≥7≥8≥D≥z≥{≥á≥Ã≥˜¥H¥î¥ÿ¥‹¥›µ-µVµ\µµÖµìµ‘µﬁµ‰∂0∂w∂√∂È∂Ô∑=∑ç∑⁄∑˜∑˝∏I∏ô∏¥∏∫∏ ∏–ππDπéπ’∫∫l∫ä∫‰ª7ªsªÆª…ª—ªıºJºPºaºeºfº∂º≈ºÀºÓºÙΩΩ=ΩGΩMΩôΩ‡æ,æRæXæ¶æˆø@øFøíø‚ø˝¿ @¿ @O¿ @â¿ @è¿ @ü¿ @•¿ @ı¿ A#¿ Ag¿ A≤¿ A¬¿ AÁ¿ B¿ B7¿ Bà¿ B™¿ B∑¿ B”¿ C¿ CT¿ C¶¿ C˚¿ D2¿ DX¿ Dr¿ D¿ D¶¿ D˙¿ E&¿ E3¿ E?¿ EG¿ EZ¿ Ed¿ EÅ¿ EÖ¿ EÜ¿ E◊¿ F¿ F¿ Fi¿ F∫¿ G
¿ G¿ G]¿ G¨¿ Gı¿ G˚¿ HI¿ Hí¿ H‹¿ Hˇ¿ I¿ IT¿ Ip¿ I…¿ J#¿ J@¿ Jö¿ J‹¿ J‰¿ K¿ KY¿ K_¿ Kq¿ Ku¿ Kv¿ K≈¿ K‚¿ KË¿ L&¿ Lv¿ Lò¿ LΩ¿ LŸ¿ Lı¿ M¿ M;¿ Mó¿ Mû¿ M◊¿ Mÿ¿ N'¿ Nv¿ N≈¿ O
¿ O9¿ O@¿ OÄ¿ O¶¿ OÂ¿ P¿ P1¿ Pt¿ Pô¿ P∑¿ P”¿ PÈ¿ Q¿ QC¿ QL¿ Qn¿ Qo¿ Q®¿ QÃ¿ Q¸¿ R¿ R¿ R;¿ R^¿ Rd¿ RÉ¿ R†¿ R¶¿ R¿ RÙ¿ Rˆ¿ R˜¿ SH¿ Sâ¿ S∫¿ S’¿ SÛ¿ T¿ T)¿ T/¿ T0¿ TT¿ Tu¿ Tv¿ TÇ¿ T¥¿ TŸ¿ T›¿ Tﬂ¿ T‡¿ U¿ U¿ UZ¿ UÖ¿ Uâ¿ UŒ¿ V¿ V¿ Vp¿ V•¿ W¿ W$¿ W%¿ W2¿ W3¿ Ww¿ W}¿ WÀ¿ X¿ Xf¿ Xì¿ X∞¿ X±¿ XÓ¿ Y ¿ Y;¿ Y<¿ Yã¿ YÕ¿ Y”¿ Z$¿ Z[¿ Z~¿ Zõ¿ Z∫¿ ZÂ¿ [¿ [.¿ [M¿ [y¿ [ô¿ [ƒ¿ [ ¿ [Œ¿ [œ¿ \5¿ \6¿ \B¿ \}¿ \~¿ \ä¿ \Æ¿ \Ø¿ \ª¿ \Ô¿ ]¿ ]¿ ]¿ ]l¿ ]m¿ ]y¿ ]ß¿ ]®¿ ]¥¿ ]È¿ ^=¿ ^>¿ ^d¿ ^ì¿ ^»¿ ^…¿ _¿ _,¿ _{¿ _¥¿ _÷¿ `
¿ `:¿ `è¿ `ï¿ `»¿ `Á¿ a¿ aj¿ a∂¿ aÏ¿ b¿ b ¿ b!¿ bÄ¿ bü¿ b–¿ b‘¿ b’¿ b·¿ c*¿ ch¿ cá¿ c∑¿ d¿ d¿ d¿ d¿ d+¿ dN¿ dÖ¿ d∞¿ d˚¿ eC¿ eÄ¿ eÑ¿ eÖ¿ eë¿ e¶¿ eÀ¿ f¿ f¿ f¿ f"¿ f#¿ f/¿ fP¿ fù¿ g¿ g¿ gA¿ gE¿ gF¿ g{¿ gÃ¿ gﬂ¿ gÂ¿ ht¿ há¿ hç¿ hÒ¿ i[¿ id¿ i§¿ iπ¿ i¡¿ iË¿ j¿ jG¿ jH¿ jò¿ jú¿ jù¿ j©¿ jÿ¿ j˛¿ jˇ¿ k4¿ k^¿ k´¿ kœ¿ l¿ l-¿ lb¿ lê¿ l∫¿ l…¿ l˝¿ m-¿ mV¿ m°¿ m¿¿ m˙¿ n¿ n¿ nE¿ nx¿ n~¿ n¿ n´¿ nƒ¿ n ¿ nŒ¿ nœ¿ n€¿ nÓ¿ o¿ o>¿ oK¿ o~¿ o™¿ o∞¿ o±¿ o…¿ oÔ¿ p¿ p¿ p	¿ p¿ p¿ pN¿ pO¿ p[¿ ph¿ p£¿ p◊¿ q!¿ q'¿ q+¿ q,¿ qZ¿ q[¿ q¬¿ qı¿ qˆ¿ rK¿ r±¿ r÷¿ r◊¿ rÌ¿ s	¿ s
¿ s¿ s#¿ sC¿ sï¿ s£¿ s©¿ sª¿ t¿ tO¿ tô¿ t◊¿ tÚ¿ tˇ¿ u¿ u8¿ uz¿ uÍ¿ vK¿ vÑ¿ vù¿ v ¿ v˘¿ w*¿ wU¿ wÜ¿ w»¿ x
¿ xL¿ x®¿ xÈ¿ y<¿ y}¿ y¿¿ y—¿ y‡¿ yÌ¿ z¿ zM¿ z¡¿ {$¿ {_¿ {x¿ {•¿ {‘¿ |¿ |0¿ |a¿ |£¿ |Â¿ }'¿ }É¿ }ƒ¿ ~¿ ~X¿ ~õ¿ ~¨¿ ~ª¿ ~»¿ ~–¿ ~÷¿ ~¿ ¿ J¿ ¢¿ ®¿ ¨¿ ≠¿ π¿ ∆¿ Ï¿ Ä¿ Ä#¿ Ä)¿ ÄK¿ Ä¿ Ä˘¿ Å*¿ Å0¿ Å4¿ Å5¿ ÅI¿ ÅJ¿ ÅY¿ Åx¿ Åy¿ Å´¿ Å∆¿ Å·¿ Ç
¿ Ç¿ Ç¿ ÇC¿ Çç¿ Çﬁ¿ É¿ É"¿ ÉT¿ Éo¿ Éä¿ Éé¿ Éè¿ É≈¿ Ñ¿ Ñ@¿ Ñ\¿ Ñ`¿ Ña¿ Ñë¿ Ñ‡¿ Ö¿ Ö%¿ Ö@¿ ÖD¿ ÖE¿ Öb¿ Öò¿ ÖÊ¿ Ü/¿ ÜB¿ ÜP¿ ÜV¿ ÜÜ¿ Ü’¿ á¿ á¿ á+¿ áF¿ áa¿ áe¿ áf¿ á~¿ áê¿ áî¿ áï¿ á≠¿ áø¿ á√¿ áƒ¿ á÷¿ á◊¿ à'¿ àa¿ àû¿ à≥¿ àˆ¿ â¿ â¿ â!¿ â"¿ âm¿ â∫¿ â»¿ ä¿ ä¿ äw¿ äŒ¿ ã¿ ã]¿ ã´¿ ã˘¿ åF¿ åU¿ åÇ¿ åÉ¿ åû¿ å∫¿ å”¿ åÙ¿ ç¿ ç0¿ çI¿ çj¿ çå¿ çí¿ çì¿ çÃ¿ çﬂ¿ çÂ¿ ç˜¿ ç˚¿ ç¸¿ é6¿ ér¿ éø¿ éœ¿ é◊¿ è¿ èg¿ èº¿ èˇ¿ ê\¿ êd¿ êü¿ ê¿¿ ë¿ ë¿ ë"¿ ë#¿ ëU¿ ë~¿ ëŒ¿ í ¿ ía¿ íÜ¿ íå¿ íê¿ íë¿ í„¿ ì¿ ìv¿ ìß¿ ìÁ¿ ìÔ¿ ìı¿ î¿ î¿ î¿ îH¿ îÅ¿ î®¿ î÷¿ ï	¿ ï¿ ï¿ ï;¿ ïJ¿ ïí¿ ï°¿ ï®¿ ï¨¿ ï≠¿ ïæ¿ ïø¿ ïÀ¿ ïÚ¿ ñ¿ ño¿ ñ∂¿ ñΩ¿ ñÂ¿ ó¿ ó¿ óu¿ óπ¿ óﬂ¿ ó˜¿ ò¿ ò(¿ òY¿ ò|¿ ò†¿ ò…¿ òı¿ ô2¿ ôN¿ ôå¿ ôÆ¿ ô‘¿ ö¿ öB¿ öQ¿ ö^¿ öi¿ ör¿ öy¿ öz¿ ö¢¿ ö‚¿ õ¿ õ=¿ õa¿ õ¿ õ√¿ õ¸¿ ú¿ ú¿ ú(¿ ú.¿ ú/¿ ú[¿ ú\¿ úü¿ úÓ¿ ù¿ ù7¿ ùL¿ ùh¿ ùÜ¿ ùù¿ ù¶¿ ù¨¿ ù≠¿ ù¿¿ ùƒ¿ ù≈¿ û¿ û_¿ û•¿ û‘¿ ûÔ¿ ü¿ ü2¿ üQ¿ ü≠¿ ü”¿ ü⁄¿ †¿ †-¿ †I¿ †c¿ †w¿ †ü¿ †Õ¿ †‘¿ °¿ °¿ °¿ °¿ °d¿ °è¿ °ﬂ¿ ¢6¿ ¢:¿ ¢<¿ ¢=¿ ¢p¿ ¢t¿ ¢±¿ ¢Û¿ £.¿ £T¿ £m¿ £â¿ £¶¿ £ø¿ £≈¿ £∆¿ £Â¿ §¿ §¿ §B¿ §C¿ §O¿ §ß¿ §©¿ §™¿ §˛¿ •?¿ •@¿ •L¿ •a¿ •x¿ •∏¿ •”¿ •Ù¿ •˚¿ •ˇ¿ ¶ ¿ ¶¿ ¶L¿ ¶r¿ ¶£¿ ¶ÿ¿ ¶ﬁ¿ ¶‚¿ ¶„¿ ¶Ô¿ ß¿ ß$¿ ß9¿ ß=¿ ß>¿ ßJ¿ ßq¿ ßê¿ ß≥¿ ß◊¿ ßÚ¿ ß˘¿ ß˝¿ ßˇ¿ ® ¿ ®O¿ ®z¿ ®~¿ ®Œ¿ ©¿ ©j¿ ©z¿ ©⁄¿ ™¿ ™¿ ™B¿ ™_¿ ™œ¿ ´¿ ´¿ ´¿ ´F¿ ´y¿ ´z¿ ´±¿ ´Û¿ ´Ù¿ ¨¿ ¨C¿ ¨j¿ ¨ñ¿ ¨¿¿ ¨¡¿ ≠¿ ≠?¿ ≠@¿ ≠l¿ ≠à¿ ≠Ø¿ ≠Õ¿ ≠€¿ ≠·¿ Æ¿ Æ-¿ Æ_¿ Æc¿ Æd¿ ÆÆ¿ ÆÓ¿ Ø¿ Ø1¿ Ø?¿ ØE¿ Øh¿ Ø≤¿ Ø◊¿ ØÁ¿ ØÔ¿ ∞¿ ∞.¿ ∞r¿ ∞v¿ ∞w¿ ∞∫¿ ∞‹¿ ∞‚¿ ±.¿ ±P¿ ±V¿ ±¶¿ ±ı¿ ≤B¿ ≤ì¿ ≤§¿ ≤™¿ ≤¯¿ ≥H¿ ≥ô¿ ≥ÿ¿ ¥4¿ ¥é¿ ¥è¿ ¥õ¿ ¥ª¿ ¥˙¿ µm¿ µﬁ¿ ∂ ¿ ∂¿ ∂¿ ∂¿ ∂U¿ ∂Ñ¿ ∂±¿ ∂ﬁ¿ ∑	¿ ∑3¿ ∑a¿ ∑e¿ ∑f¿ ∑r¿ ∑¿¿ ∏¿ ∏K¿ ∏£¿ ∏©¿ ∏Í¿ π$¿ πÄ¿ π¿ ∫Z¿ ∫g¿ ∫≈¿ ª9¿ ªß¿ ª≠¿ ª¯¿ ª˘¿ ºK¿ ºú¿ ºÆ¿ º€¿ Ω¿ Ω¿ Ω¿ ΩD¿ Ωë¿ Ω∂¿ Ωﬁ¿ ΩÊ¿ ΩÏ¿ Ωˇ¿ æ¿ æ¿ æD¿ æé¿ æ“¿ æ˚¿ øL¿ øô¿ øÈ¿ ¿9¿ ¿s¿ ¿¢¿ ¿™¿ ¿ˇ¿ ¡¿ ¡'¿ ¡-¿ ¡n¿ ¡…¿ ¡Õ¿ ¡Œ¿ ¬¿ ¬@¿ ¬F¿ ¬ï¿ ¬À¿ √¿ √[¿ √√¿ ƒ¿ ƒN¿ ƒÜ¿ ƒÙ¿ ≈L¿ ≈q¿ ≈≥¿ ∆¿ ∆U¿ ∆m¿ ∆Æ¿ ∆∑¿ «'¿ «-¿ «ï¿ «Î¿ »¿ »N¿ »Æ¿ »Ï¿ …¿ …A¿ …J¿ …∂¿ …º¿ …¿¿ …¡¿ …Õ¿  ¿  ;¿  |¿  –¿  ¸¿ À(¿ À.¿ ÀA¿ ÀE¿ ÀF¿ ÀR¿ Àó¿ ÀÌ¿ Ã/¿ ÃY¿ Ãl¿ Ãp¿ Ãq¿ Ã}¿ Ã◊¿ Õ(¿ Õu¿ Õƒ¿ Œ¿ Œ+¿ ŒQ¿ Œt¿ Œ{¿ Œ£¿ Œ√¿ Œ…¿ Œ‹¿ Œ‡¿ Œ·¿ ŒÌ¿ œM¿ œ°¿ œÓ¿ –=¿ –|¿ –§¿ – ¿ –Ì¿ –Ù¿ —¿ —<¿ —B¿ —U¿ —Y¿ —Z¿ —~¿ —ü¿ —Ω¿ —›¿ —Ò¿ “+¿ “\¿ “ü¿ “¨¿ “Ë¿ ”¿ ”`¿ ”f¿ ”î¿ ”¢¿ ”®¿ ”¸¿ ‘D¿ ‘¥¿ ’¿ ’A¿ ’^¿ ’¶¿ ’¯¿ ÷L¿ ÷^¿ ÷h¿ ÷ö¿ ÷Î¿ ÷˝¿ ◊¿ ◊3¿ ◊~¿ ◊à¿ ◊ò¿ ◊∏¿ ◊˙¿ ÿE¿ ÿW¿ ÿa¿ ÿå¿ ÿ÷¿ ÿË¿ ÿÚ¿ Ÿ¿ Ÿe¿ Ÿo¿ Ÿ¿ Ÿû¿ ŸÊ¿ ⁄8¿ ⁄å¿ ⁄û¿ ⁄®¿ ⁄⁄¿ €+¿ €=¿ €G¿ €s¿ €æ¿ €»¿ €ÿ¿ €˜¿ ‹9¿ ‹Ñ¿ ‹ñ¿ ‹†¿ ‹À¿ ›¿ ›'¿ ›1¿ ›[¿ ›§¿ ›Æ¿ ›æ¿ ›ƒ¿ ›»¿ ›…¿ ﬁ¿ ﬁO¿ ﬁì¿ ﬁﬂ¿ ﬂ¿ ﬂ¿ ﬂ¿ ﬂK¿ ﬂ∆¿ ﬂ ¿ ﬂÀ¿ ﬂ◊¿ ‡6¿ ‡P¿ ‡¿ ‡Œ¿ ‡ˆ¿ ·#¿ ·p¿ ·ò¿ ·—¿ ‚¿ ‚5¿ ‚Ñ¿ ‚—¿ ‚ˆ¿ „2¿ „p¿ „ô¿ „√¿ ‰¿ ‰_¿ ‰e¿ ‰®¿ ‰¨¿ ‰≠¿ ‰π¿ ‰Ï¿ Â ¿ Âw¿ Â´¿ Ê¿ ÊR¿ Êï¿ Á	¿ Ár¿ Á ¿ Ë ¿ ËM¿ ËS¿ Ë¶¿ Ëÿ¿ ÈB¿ È{¿ Èæ¿ Í.¿ Íì¿ ÍÍ¿ Î ¿ Îk¿ Îq¿ Îu¿ Îv¿ ÎÇ¿ Îï¿ Îƒ¿ ÎÒ¿ Ï¿ Ï9¿ ÏN¿ ÏR¿ ÏT¿ ÏU¿ Ïó¿ Ï¬¿ Ïﬂ¿ Ì¿ Ì3¿ Ìm¿ Ìä¿ Ìƒ¿ Ì‚¿ Ó¿ Ó¿ Ó!¿ Ó"¿ Ód¿ Ó¢¿ Ó¶¿ Ó·¿ Ô/¿ Ôv¿ Ô°¿ Ô‘¿ Ôÿ¿ (¿ v¿ ∆¿ Ò¿ Ò'¿ Òf¿ ÒÅ¿ Òê¿ Ò¨¿ Ò÷¿ Ò¸¿ Ú¿ ÚS¿ ÚT¿ Úu¿ Úö¿ Úª¿ Úº¿ Ú»¿ Û¿ Û/¿ ÛI¿ Û¿ Û≠¿ Û¥¿ Û∏¿ Ûπ¿ Û≈¿ Ù¿ Ù-¿ Ùe¿ ÙÅ¿ Ù≤¿ Ù∂¿ Ù∏¿ Ùπ¿ ÙÔ¿ ı
¿ ı0¿ ıZ¿ ıÄ¿ ıñ¿ ı≥¿ ıÏ¿ ˆ¿ ˆ3¿ ˆg¿ ˆk¿ ˆl¿ ˆ±¿ ˆ›¿ ˆ˘¿ ˜ ¿ ˜>¿ ˜L¿ ˜R¿ ˜ä¿ ˜°¿ ˜÷¿ ˜ˆ¿ ˜˙¿ ˜˚¿ ¯/¿ ¯m¿ ¯ç¿ ¯∏¿ ¯‰¿ ¯Ú¿ ¯¯¿ ˘¿ ˘=¿ ˘A¿ ˘B¿ ˘x¿ ˘î¿ ˘ª¿ ˘‚¿ ˘¿ ˘ˆ¿ ˙¿ ˙7¿ ˙;¿ ˙<¿ ˙H¿ ˙è¿ ˙¡¿ ˙Á¿ ˚
¿ ˚¿ ˚Q¿ ˚¿ ˚∑¿ ˚Ô¿ ¸"¿ ¸(¿ ¸,¿ ¸-¿ ¸J¿ ¸K¿ ¸W¿ ¸À¿ ˝'¿ ˝@¿ ˝{¿ ˝â¿ ˝è¿ ˝ê¿ ˝·¿ ˝‚¿ ˝˛¿ ˛E¿ ˛Å¿ ˛≥¿ ˛ı¿ ˇ6¿ ˇS¿ ˇb¿ ˇò¿ ˇÕ¿ ˇ◊¿ ˇÙ¿ ˇ¸¿ ¿ .¿ x¿ À¿ œ¿ –¿ ‹¿ ˆ¿¿)¿-¿/¿0¿Ç¿ê¿—¿›¿¿¿¿<¿S¿W¿X¿d¿å¿®¿¨¿≠¿π¿‘¿Ê¿Í¿Î¿˜¿¿¿¿/¿0¿q¿ë¿‰¿ ¿?¿E¿ñ¿µ¿Ω¿æ¿¿"¿(¿x¿«¿ÿ¿Ÿ¿¿X¿^¿™¿Ï¿ ¿¿¿_¿o¿w¿y¿z¿¬¿¿#¿'¿x¿ø¿˚¿	B¿	S¿	W¿	¢¿	Ò¿
)¿
-¿
;¿
?¿
ä¿
¡¿¿ ¿X¿è¿ï¿Ê¿ı¿¿'¿L¿o¿í¿∞¿»¿Ô¿*¿`¿f¿g¿¥¿»¿˚¿¸¿4¿:¿Ç¿Œ¿˚¿¸¿2¿8¿Ä¿ ¿ı¿ˆ¿C¿I¿ò¿‚¿Ë¿¯¿˛¿M¿r¿©¿™¿Ë¿Ó¿¿M¿N¿Ü¿å¿Œ¿¿]¿|¿}¿º¿¬¿È¿¿¿I¿O¿v¿£¿§¿∞¿¿¿U¿~¿Ñ¿ß¿≠¿ª¿¿"¿(¿j¿∏¿	¿I¿O¿û¿ƒ¿ ¿⁄¿‡¿,¿b¿™¿+¿X¿\¿]¿≠¿º¿¬¿Â¿Î¿˘¿P¿Z¿`¿¢¿¿A¿Å¿á¿◊¿¿!¿r¿ë¿ó¿ß¿≠¿˙¿G¿â¿÷¿Ê¿¿C¿[¿¨¿Î¿¯¿¿g¿π¿ ¿ X¿ ~¿ ò¿ •¿ ±¿ π¿ Ã¿ ÷¿ Û¿ ˜¿ ˘¿ ˙¿!4¿!8¿!â¿!Ÿ¿!Á¿!Î¿"8¿"~¿"∆¿#	¿#;¿#â¿#∫¿#Ì¿$L¿$≠¿$Æ¿$‡¿$Ê¿%!¿%'¿%u¿%î¿%ø¿%˝¿&3¿&7¿&8¿&l¿&r¿&≠¿&≥¿'¿'"¿'O¿'è¿'«¿'À¿'Ã¿'ÿ¿'Ì¿("¿(Z¿(`¿(ó¿(—¿(◊¿(Ó¿(Ú¿(Û¿(ˇ¿)<¿)b¿)§¿)•¿)µ¿*
¿*D¿*ë¿*µ¿*Í¿+%¿+U¿+Å¿+ø¿,¿,%¿,Z¿,î¿,ú¿,¢¿,£¿,µ¿-¿-J¿-ó¿-ª¿-Ú¿./¿.a¿.è¿.œ¿/¿/5¿/l¿/®¿/∞¿/∂¿/∫¿/ª¿/«¿/Ó¿/˙¿0H¿0ê¿0ó¿0£¿0ı¿1A¿1H¿1I¿1u¿1†¿1∆¿1¿2¿2H¿2Å¿2∑¿2‚¿3¿3M¿3à¿3§¿3›¿4¿4X¿4ç¿4»¿5¿5E¿5u¿5¥¿5¿6!¿6X¿6ò¿6Ÿ¿6˘¿76¿7u¿7ª¿7Ù¿83¿8ä¿8‚¿8Ò¿8˛¿9¿9¿9¿9¿9]¿9ñ¿9ó¿9¬¿9Ë¿9˝¿:¿:¿:	¿:¿:(¿:T¿:Ç¿:ó¿:õ¿:ù¿:û¿:‘¿;¿;K¿;n¿;≠¿;÷¿<¿<¿<"¿<#¿<c¿<d¿<p¿<∏¿<∫¿<ª¿<Ë¿=¿==¿=L¿=m¿=ë¿=≥¿=…¿=‹¿=Ù¿>¿>3¿>P¿>i¿>§¿>˝¿>˛¿?1¿?c¿?d¿?p¿?¿¿?¬¿?√¿@ ¿@m¿@‹¿@›¿@Ò¿A¿A¿AG¿AS¿AÇ¿Aù¿Aπ¿A‡¿Aˇ¿B[¿BÅ¿Bà¿Bî¿B°¿BÚ¿CC¿Ci¿Cp¿Cï¿Cô¿Cö¿C∆¿CÍ¿D#¿Dt¿D§¿D…¿E¿E#¿E<¿EB¿EF¿EG¿ES¿EÖ¿E©¿Eœ¿Eﬁ¿F¿FA¿Fg¿F≤¿FÃ¿G¿G	¿G-¿G1¿G2¿G>¿Gr¿Gü¿G√¿GÈ¿G¯¿H¿HA¿H{¿H≥¿H‚¿I¿I@¿Iu¿Iì¿I®¿IÈ¿J'¿Jc¿JÉ¿J≤¿JÓ¿K¿K ¿Kr¿K|¿KÇ¿Kß¿K´¿K¨¿K∏¿KÓ¿L3¿Lc¿Lè¿Lµ¿L„¿M¿M¿M]¿Mç¿Mπ¿Mﬂ¿N¿N9¿N@¿NA¿Ne¿Nã¿N¡¿N˜¿O¿O-¿OI¿Oê¿O∆¿O÷¿P
¿P?¿Pt¿P•¿P‘¿Q ¿Q<¿Qm¿Qú¿Q”¿Q›¿Q„¿Q˝¿R¿R=¿RÑ¿R†¿Rø¿S¿S¿S0¿S\¿Sb¿Sî¿Sò¿Sô¿S•¿S’¿S¿T¿TB¿T}¿Tº¿T¯¿U¿U¿U[¿Uó¿U≤¿Uπ¿U∫¿Uﬁ¿V¿V¿VB¿Vv¿Vú¿V‡¿VÊ¿W¿W¿W¿W&¿WC¿W^¿Wu¿Wô¿Wø¿WŒ¿W˝¿X1¿XW¿Xâ¿Xè¿XÆ¿X≤¿X≥¿Xø¿Xﬂ¿Y¿Y)¿Y{¿Yè¿Y∞¿Y¿¿YÔ¿Z#¿ZI¿Z^¿Z≠¿Z˙¿[F¿[ì¿[π¿[˚¿\Y¿\±¿\·¿\˙¿]'¿]V¿]á¿]≤¿]„¿^%¿^g¿^©¿_¿_F¿_à¿_ô¿_®¿_µ¿`¿`U¿`ó¿`∂¿`÷¿a¿a<¿aö¿a¶¿a∞¿a¿¿a∆¿a ¿aÀ¿a◊¿b¿bL¿bs¿b°¿b ¿b—¿c¿c=¿cä¿cé¿cê¿cë¿c¿¿cı¿d¿d(¿dL¿dn¿dÑ¿dó¿dØ¿dŒ¿dÓ¿e¿e$¿e_¿eª¿eº¿eÔ¿e¿e¸¿fP¿fR¿fS¿fí¿fΩ¿fæ¿g-¿g.¿g:¿g[¿gå¿g‡¿h¿h¿h¿hV¿h¢¿h¿h¸¿i+¿iF¿ib¿iâ¿i®¿j¿j*¿j1¿jm¿jn¿jô¿jß¿j√¿j›¿jÒ¿k¿k!¿k"¿k`¿kn¿kä¿k§¿k∏¿k‡¿kË¿kÈ¿l¿l¿l¿l'¿lG¿lk¿lë¿lÿ¿l˜¿m¿m(¿mW¿mã¿m±¿m∆¿n¿n]¿n´¿nı¿oG¿oï¿o◊¿oˆ¿p¿pB¿p|¿p⁄¿pÊ¿p¿q ¿q¿q
¿q¿q¿qS¿qå¿q≥¿q·¿r
¿r¿rW¿r}¿r ¿rŒ¿r–    Ä•  Ä∫Ä— Ä◊  Å  Å)  ÅR  Å{  Å§  Åπ  Å“  ÅÚ  Ç  Ç2  ÇM  Çs  Çí  Ç∂  Ç‘  Çı  É  É2  ÉT  Éu  Éò  É∑  ÉÀ  É‰Ñ
Ñ áa¿ Kîëìä+/// A widget that manages scrolling in one dimension and informs the [Viewport]
/// through which the content is viewed.
///
/// [Scrollable] implements the interaction model for a scrollable widget,
/// including gesture recognition, but does not have an opinion about how the
/// viewport, which actually displays the children, is constructed.
///
/// It's rare to construct a [Scrollable] directly. Instead, consider [ListView]
/// or [GridView], which combine scrolling, viewporting, and a layout model. To
/// combine layout models (or to use a custom layout mode), consider using
/// [CustomScrollView].
///
/// The static [Scrollable.of] and [Scrollable.ensureVisible] functions are
/// often used to interact with the [Scrollable] widget inside a [ListView] or
/// a [GridView].
///
/// To further customize scrolling behavior with a [Scrollable]:
///
/// 1. You can provide a [viewportBuilder] to customize the child model. For
///    example, [SingleChildScrollView] uses a viewport that displays a single
///    box child whereas [CustomScrollView] uses a [Viewport] or a
///    [ShrinkWrappingViewport], both of which display a list of slivers.
///
/// 2. You can provide a custom [ScrollController] that creates a custom
///    [ScrollPosition] subclass. For example, [PageView] uses a
///    [PageController], which creates a page-oriented scroll position subclass
///    that keeps the same page visible when the [Scrollable] resizes.
///
/// ## Persisting the scroll position during a session
///
/// Scrollables attempt to persist their scroll position using [PageStorage].
/// This can be disabled by setting [ScrollController.keepScrollOffset] to false
/// on the [controller]. If it is enabled, using a [PageStorageKey] for the
/// [key] of this widget (or one of its ancestors, e.g. a [ScrollView]) is
/// recommended to help disambiguate different [Scrollable]s from each other.
///
/// See also:
///
///  * [ListView], which is a commonly used [ScrollView] that displays a
///    scrolling, linear list of child widgets.
///  * [PageView], which is a scrolling list of child widgets that are each the
///    size of the viewport.
///  * [GridView], which is a [ScrollView] that displays a scrolling, 2D array
///    of child widgets.
///  * [CustomScrollView], which is a [ScrollView] that creates custom scroll
///    effects using slivers.
///  * [SingleChildScrollView], which is a scrollable widget that has a single
///    child.
///  * [ScrollNotification] and [NotificationListener], which can be used to watch
///    the scroll position without using a [ScrollController]. ëπÅÛ ë‰ëÓ"/// Creates a widget that scrolls.ëı	ë¸  í'í
  í1í7  íFíL  íXíg  í{íÅ  íô!íü  í¿í∆  í›0í„  ìì  ì+ì1  ìD!ìJ  íí&í'íµíˆìììXì\ì]ìnìtì™ìêìàìuìãì¶ììì©ì∞ÇxñÇ>/// {@template flutter.widgets.Scrollable.axisDirection}
/// The direction in which this widget scrolls.
///
/// For example, if the [Scrollable.axisDirection] is [AxisDirection.down],
/// increasing the scroll position will cause content below the bottom of the
/// viewport to become visible through the viewport. Similarly, if the
/// axisDirection is [AxisDirection.right], increasing the scroll position
/// will cause content beyond the right edge of the viewport to become visible
/// through the viewport.
///
/// Defaults to [AxisDirection.down].
/// {@endtemplate} ñ-É·öÉñ/// {@template flutter.widgets.Scrollable.controller}
/// An object that can be used to control the position to which this widget is
/// scrolled.
///
/// A [ScrollController] serves several purposes. It can be used to control
/// the initial scroll position (see [ScrollController.initialScrollOffset]).
/// It can be used to control whether the scroll view should automatically
/// save and restore its scroll position in the [PageStorage] (see
/// [ScrollController.keepScrollOffset]). It can be used to read the current
/// scroll position (see [ScrollController.offset]), or change it (see
/// [ScrollController.animateTo]).
///
/// If null, a [ScrollController] will be created internally by [Scrollable]
/// in order to create and manage the [ScrollPosition].
///
/// See also:
///
///  * [Scrollable.ensureVisible], which animates the scroll position to
///    reveal a given [BuildContext].
/// {@endtemplate} öÖbünÖ/// {@template flutter.widgets.Scrollable.physics}
/// How the widgets should respond to user input.
///
/// For example, determines how the widget continues to animate after the
/// user stops dragging the scroll view.
///
/// Defaults to matching platform conventions via the physics provided from
/// the ambient [ScrollConfiguration].
///
/// If an explicit [ScrollBehavior] is provided to
/// [Scrollable.scrollBehavior], the [ScrollPhysics] provided by that behavior
/// will take precedence after [Scrollable.physics].
///
/// The physics can be changed dynamically, but new physics will only take
/// effect if the _class_ of the provided object changes. Merely constructing
/// a new instance with a different configuration is insufficient to cause the
/// physics to be reapplied. (This is because the final object used is
/// generated dynamically, which can be relatively expensive, and it would be
/// inefficient to speculatively create this object each frame to see if the
/// physics should be updated.)
///
/// See also:
///
///  * [AlwaysScrollableScrollPhysics], which can be used to indicate that the
///    scrollable should react to scroll requests (and possible overscroll)
///    even if the scrollable's contents fit without scrolling being necessary.
/// {@endtemplate} üzÇ°lÅ«/// Builds the viewport through which the scrollable content is displayed.
///
/// A typical viewport uses the given [ViewportOffset] to determine which part
/// of its content is actually visible through the viewport.
///
/// See also:
///
///  * [Viewport], which is a viewport that displays a list of slivers.
///  * [ShrinkWrappingViewport], which is a viewport that displays a list of
///    slivers and sizes itself based on the size of the slivers. °ÄÇÿ§EÇâ/// {@template flutter.widgets.Scrollable.incrementCalculator}
/// An optional function that will be called to calculate the distance to
/// scroll when the scrollable is asked to scroll via the keyboard using a
/// [ScrollAction].
///
/// If not supplied, the [Scrollable] will scroll a default amount when a
/// keyboard navigation key is pressed (e.g. pageUp/pageDown, control-upArrow,
/// etc.), or otherwise invoked by a [ScrollAction].
///
/// If [incrementCalculator] is null, the default for
/// [ScrollIncrementType.page] is 80% of the size of the scroll window, and
/// for [ScrollIncrementType.line], 50 logical pixels.
/// {@endtemplate} §]ÇM¶ñÇ/// {@template flutter.widgets.scrollable.excludeFromSemantics}
/// Whether the scroll actions introduced by this [Scrollable] are exposed
/// in the semantics tree.
///
/// Text fields with an overflow are usually scrollable to make sure that the
/// user can get to the beginning/end of the entered text. However, these
/// scrolling actions are generally not exposed to the semantics layer.
/// {@endtemplate}
///
/// See also:
///
///  * [GestureDetector.excludeFromSemantics], which is used to accomplish the
///    exclusion. ¶ØÇ¯©ïÇº/// The number of children that will contribute semantic information.
///
/// The value will be null if the number of children is unknown or unbounded.
///
/// Some subtypes of [ScrollView] can infer this value automatically. For
/// example [ListView] will use the number of widgets in the child list,
/// while the [ListView.separated] constructor will use half that amount.
///
/// For [CustomScrollView] and other types which do not receive a builder
/// or list of widgets, the child count must be explicitly provided.
///
/// See also:
///
///  * [CustomScrollView], for an explanation of scroll semantics.
///  * [SemanticsConfiguration.scrollChildCount], the corresponding semantics property. ™Éo≠aÉ/// {@template flutter.widgets.scrollable.dragStartBehavior}
/// Determines the way that drag start behavior is handled.
///
/// If set to [DragStartBehavior.start], scrolling drag behavior will
/// begin at the position where the drag gesture won the arena. If set to
/// [DragStartBehavior.down] it will begin at the position where a down
/// event is first detected.
///
/// In general, setting this to [DragStartBehavior.start] will make drag
/// animation smoother and setting it to [DragStartBehavior.down] will make
/// drag behavior feel slightly more reactive.
///
/// By default, the drag start behavior is [DragStartBehavior.start].
///
/// See also:
///
///  * [DragGestureRecognizer.dragStartBehavior], which gives an example for
///    the different behaviors.
///
/// {@endtemplate} ≠wÇcØÕÇ+/// {@template flutter.widgets.scrollable.restorationId}
/// Restoration ID to save and restore the scroll offset of the scrollable.
///
/// If a restoration id is provided, the scrollable will persist its current
/// scroll offset and restore it during state restoration.
///
/// The scroll offset is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.
/// {@endtemplate} ØﬂÅI±Å/// {@macro flutter.widgets.shadow.scrollBehavior}
///
/// [ScrollBehavior]s also provide [ScrollPhysics]. If an explicit
/// [ScrollPhysics] is provided in [physics], it will take precedence,
/// followed by [scrollBehavior], and then the inherited ancestor
/// [ScrollBehavior]. ±-Åm≤éÅG/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge].
///
/// This is passed to decorators in [ScrollableDetails], and does not directly affect
/// clipping of the [Scrollable]. This reflects the same [Clip] that is provided
/// to [ScrollView.clipBehavior] and is supplied to the [Viewport]. ≤üÄó≥\/// The axis along which the scroll view scrolls.
///
/// Determined by the [axisDirection].   ≥:?≥V   ≥:≥;≥}Å^≥é  ≥¢&≥ø  ≥}≥~¥ﬂáÖπ^Ñ0/// The state from the closest instance of this class that encloses the given
/// context, or null if none is found.
///
/// Typical usage is as follows:
///
/// ```dart
/// ScrollableState? scrollable = Scrollable.maybeOf(context);
/// ```
///
/// Calling this method will create a dependency on the [ScrollableState]
/// that is returned, if there is one. This is typically the closest
/// [Scrollable], but may be a more distant ancestor if [axis] is used to
/// target a specific [Scrollable].
///
/// Using the optional [Axis] is useful when Scrollables are nested and the
/// target [Scrollable] is not the closest instance. When [axis] is provided,
/// the nearest enclosing [ScrollableState] in that [Axis] is returned, or
/// null if there is none.
///
/// This finds the nearest _ancestor_ [Scrollable] of the `context`. This
/// means that if the `context` is that of a [Scrollable], it will _not_ find
/// _that_ [Scrollable].
///
/// See also:
///
/// * [Scrollable.of], which is similar to this method, but asserts
///   if no [Scrollable] ancestor is found. πfπt  π~
πÖ   ºhâ¿ A<ÑÇ/// The state from the closest instance of this class that encloses the given
/// context.
///
/// Typical usage is as follows:
///
/// ```dart
/// ScrollableState scrollable = Scrollable.of(context);
/// ```
///
/// Calling this method will create a dependency on the [ScrollableState]
/// that is returned, if there is one. This is typically the closest
/// [Scrollable], but may be a more distant ancestor if [axis] is used to
/// target a specific [Scrollable].
///
/// Using the optional [Axis] is useful when Scrollables are nested and the
/// target [Scrollable] is not the closest instance. When [axis] is provided,
/// the nearest enclosing [ScrollableState] in that [Axis] is returned.
///
/// This finds the nearest _ancestor_ [Scrollable] of the `context`. This
/// means that if the `context` is that of a [Scrollable], it will _not_ find
/// _that_ [Scrollable].
///
/// If no [Scrollable] ancestor is found, then this method will assert in
/// debug mode, and throw an exception in release mode.
///
/// See also:
///
/// * [Scrollable.maybeOf], which is similar to this method, but returns null
///   if no [Scrollable] ancestor is found. ¿ A?¿ AM  ¿ AW
¿ A^   ¿ EàÖÏ¿ I~É≈/// Provides a heuristic to determine if expensive frame-bound tasks should be
/// deferred for the [context] at a specific point in time.
///
/// Calling this method does _not_ create a dependency on any other widget.
/// This also means that the value returned is only good for the point in time
/// when it is called, and callers will not get updated if the value changes.
///
/// The heuristic used is determined by the [physics] of this [Scrollable]
/// via [ScrollPhysics.recommendDeferredLoading]. That method is called with
/// the current [ScrollPosition.activity]'s [ScrollActivity.velocity].
///
/// The optional [Axis] allows targeting of a specific [Scrollable] of that
/// axis, useful when Scrollables are nested. When [axis] is provided,
/// [ScrollPosition.recommendDeferredLoading] is called for the nearest
/// [Scrollable] in that [Axis].
///
/// If there is no [Scrollable] in the widget tree above the [context], this
/// method returns false. ¿ I°¿ IØ  ¿ Iπ
¿ I¿   ¿ Kxá{¿ LÆÅ/// Scrolls the scrollables that enclose the given context so as to make the
/// given context visible.
///
/// If the [Scrollable] of the provided [BuildContext] is a
/// [TwoDimensionalScrollable], both vertical and horizontal axes will ensure
/// the target is made visible. ¿ L¡¿ Lœ  ¿ L›¿ LÂ  ¿ L˘!¿ M  ¿ M ¿ M'  ¿ M?V¿ M^  
¿ L¿ M¿ M¿ M¿ M.¿ M4¿ M5¿ Mo¿ Må¿ Mç ¿ SâÅU¿ Sè  ¿ Sºr ¿ S¬¿ S“ ¿ SŸ¿ SË  ¿ S˜¿ T  ¿ T¿ T#   ¿ T2 ¿ TH  ¿ TV¿ Tk   ¿ Txd¿ Tâ  ¿ Tú¿ TÆ  ¿ Tx¿ Ty ¿ T‡¿ M[¿ V´Åƒ/// State object for a [Scrollable] widget.
///
/// To manipulate a [Scrollable] widget's scroll position, use the object
/// obtained from the [position] property.
///
/// To be informed of when a [Scrollable] widget is scrolling, use a
/// [NotificationListener] to listen for [ScrollNotification] notifications.
///
/// This class is not intended to be subclassed. To specialize the behavior of a
/// [Scrollable], provide it with a [ScrollPhysics].  ¿ Xï¿ X•  ¿ Y"¿ Y1  ¿ \Ò¿ \˝  ¿ ]ÎP¿ ^	 ¿ ^"¿ ^9¿ ^:¿ ^@"¿ ^T  ¿ ^f+¿ ^x  ¿ ^ï1¿ ^¨  ¿ p1¿ p+ ¿ pA¿ pJ¿ pK¿ q]c¿ qÜ ¿ qú¿ q•¿ qΩ¿ q¶¿ qæ¿ qø¿ qƒ/¿ q‘ ¿ qË¿ qÒ¿ qÚ¿ rMb¿ rq ¿ rá¿ r≠¿ rÆ¿ rç¿ r¨¿ ré¿ rî¿ r≥!¿ r∏ ¿ rœ¿ rŸ¿ rﬂ  ¿ rÔ¿ rı  ¿ ÅL¿ ÅR  ¿ Å[¿ Åq  
¿ W5Å]¿ X{Å(/// The manager for this [Scrollable] widget's viewport position.
///
/// To control what kind of [ScrollPosition] is created for a [Scrollable],
/// provide it with custom [ScrollController] that creates the appropriate
/// [ScrollPosition] in its [ScrollController.createScrollPosition] method.   ¿ X≥l¿ Y:/// The resolved [ScrollPhysics] of the [ScrollableState].   ¿ Y>Çè¿ ZhÅ/// An [Offset] that represents the absolute distance from the origin, or 0,
/// of the [ScrollPosition] expressed in the associated [Axis].
///
/// Used by [EdgeDraggingAutoScroller] to progress the position forward when a
/// drag gesture reaches the edge of the [Viewport].   ¿ [—c¿ [Ê    ¿ \8D¿ \V   ¿ \8¿ \9¿ \Ä-¿ \ü   ¿ \Ä¿ \Å¿ \±=¿ \»   ¿ \±¿ \≤¿ ]X¿ ]1   ¿ ]¿ ]¿ ]o7¿ ]å   ¿ ]o¿ ]p¿ ]™>¿ ]¬   ¿ ]™¿ ]´¿ _É¿¿ _    ¿ b◊ÅF¿ bË  ¿ bı¿ c	  ¿ c¿ c  ¿ b◊¿ bÿ¿ d!Åb¿ d2  ¿ d=¿ dE  ¿ d!¿ d"¿ eáÄö¿ eò   ¿ eá¿ eà¿ f%Å¿ f6   ¿ f%¿ f&¿ gHÉS¿ gM  ¿ gc¿ go   ¿ jüÑ.¿ j∞  ¿ j¿¿ jÃ  ¿ jü¿ j†¿ n—Å6¿ n‚   ¿ n—¿ n“¿ pQÄŸ¿ po  ¿ pÉ¿ pô  ¿ pQ¿ pR¿ p]¿ p^¿ såü¿ s*  ¿ s5
¿ s;  ¿ s¿ s¿ s¿ s¿ ØÅÑ¿ Õ  ¿ ﬁ
¿ ‰  ¿ Ø¿ ∞¿ ª¿ º¿ Å{Äí¿ ÅÄ  ¿ Åê¿ Å°   ¿ ÇÅ|¿ Ç  ¿ Ç'¿ Ç9   ¿ ÉëÄŒ¿ Éñ  ¿ É®¿ Éª   ¿ ÑcÄ‡¿ Ñh  ¿ Ñw¿ Ñá   ¿ ÖGÇ¿ ÖL    ¿ áh+¿ ám    ¿ áó+¿ áú    ¿ àcÄΩ¿ àj  ¿ àé¿ àñ   ¿ â Ñ0¿ â—  ¿ âÍ¿ â˛   ¿ ç˛É#¿ é  ¿ é¿ é.   ¿ ë%Åj¿ ë*  ¿ ë?¿ ëM   ¿ íìÅw¿ íò  ¿ íπ&¿ í‘   ¿ îÅù¿ î  ¿ î"¿ î0  ¿ î8¿ î@   ¿ ï¡à¿ ï‘  ¿ ï⁄¿ ïË  ¿ ï¡¿ ï¬¿ ûßÇj¿ ûΩ  ¿ ûÿ¿ ûÊ  ¿ ûÛ¿ û˚  ¿ ü!¿ ü  ¿ ü6¿ ü=  ¿ üUV¿ üt  ¿ ü± ¿ ü¿  
¿ ü¿ ü#¿ ü+¿ ü,¿ üD¿ üJ¿ üK¿ üÖ¿ ü¢¿ ü£¿ °Å$¿ °&  ¿ °:&¿ °W  ¿ °¿ ° ¿ ¢=Çk¿ ¢˘Äµ/// A widget to handle selection for a scrollable.
///
/// This widget registers itself to the [registrar] and uses
/// [SelectionContainer] to collect selectables from its subtree. ¿ £0Äî ¿ £6¿ £Q ¿ £X¿ £g  ¿ £q¿ £Ä  ¿ £ç¿ £ú  ¿ £™¿ £π   ¿ £»¿ £ﬁ  ¿ £Á¿ £¸  ¿ §¿ §  ¿ §"¿ §7   ¿ §Ea¿ §r   ¿ §E¿ §F ¿ §™ÉT¿ §∞   ¿ • =¿ •+   ¿ •BÄº¿ •S   ¿ •B¿ •C¿ ¶Äﬂ¿ ¶  ¿ ¶#%¿ ¶@  ¿ ¶¿ ¶¿ ¶ÂW¿ ¶ˆ   ¿ ¶Â¿ ¶Ê¿ ß@Äº¿ ßS  ¿ ßY¿ ßg  ¿ ß@¿ ßA ¿ ® ¿ DS¿ ©ÄÅy/// This updater handles the case where the selectables change frequently, and
/// it optimizes toward scrolling updates.
///
/// It keeps track of the drag start offset relative to scroll origin for every
/// selectable. The records are used to determine whether the selection is up to
/// date with the scroll position when it sends the drag update event to a
/// selectable. ¿ ©‹Å( ¿ ©‹¿ ™ ¿ ™¿ ™  ¿ ™! ¿ ™:  ¿ ™S¿ ™I¿ ™U¿ ™t¿ ™f¿ ™v¿ ™é¿ ™À¿ ™è¿ ™§¿ ™ñ¿ ™¶¿ ´H/¿ ´\ ¿ ´v¿ ´≥>¿ ´« ¿ ´Ô¿ ´ˆ¿ ¨  ¿ ¨,¿ ¨4  ¿ ¨E#¿ ¨J ¿ ¨c¿ ¨l(¿ ¨t  ¿ ¨ò&¿ ¨†  ¿ ≠)¿ ≠ ¿ ≠8¿ ≠n¿ ≠}  ¿ ∞yÉπ¿ ≥¯É@/// Stores the scroll offset when a scrollable receives the last
/// [SelectionEdgeUpdateEvent].
///
/// The stored scroll offset may be null if a scrollable never receives a
/// [SelectionEdgeUpdateEvent].
///
/// When a new [SelectionEdgeUpdateEvent] is dispatched to a selectable, this
/// updater checks the current scroll offset against the one stored in these
/// records. If the scroll offset is different, it synthesizes an opposite
/// [SelectionEdgeUpdateEvent] and dispatches the event before dispatching the
/// new event.
///
/// For example, if a selectable receives an end [SelectionEdgeUpdateEvent]
/// and its scroll offset in the records is different from the current value,
/// it synthesizes a start [SelectionEdgeUpdateEvent] and dispatches it before
/// dispatching the original end [SelectionEdgeUpdateEvent].¿ ¥0¿ ¥1¿ ¥¿ ¥/¿ ¥¿ ¥)¿ ¥6V¿ ¥T ¿ ¥ä¿ ¥ã¿ ¥v¿ ¥â¿ ¥w¿ ¥É¿ ≠B)¿ ≠U    ¿ ≠äÄÿ¿ ≠é  ¿ ≠ó¿ ≠ß   ¿ ÆÅÖ¿ Æı    ¿ ¥ëÅr¿ ¥¢   ¿ ¥ë¿ ¥í¿ ∂Å]¿ ∂#  ¿ ∂8¿ ∂M  ¿ ∂¿ ∂¿ ∑hÜö¿ ∑Ñ  ¿ ∑û¿ ∑∏  ¿ ∑h¿ ∑i¿ æÉ∆¿ æ  ¿ æ+¿ æ3   ¿ ¡–áÔ¿ √bÅ~/// Infers the [_currentDragStartRelatedToOrigin] and
/// [_currentDragEndRelatedToOrigin] from the geometry.
///
/// This method is called after a select word and select all event where the
/// selection is triggered by none drag events. The
/// [_currentDragStartRelatedToOrigin] and [_currentDragEndRelatedToOrigin]
/// are essential to handle future [SelectionEdgeUpdateEvent]s. ¿ √Ü¿ √å  ¿ √§¿ √™  ¿ √û¿ √∫¿ …√ÅÅ¿ …ﬂ  ¿ …Ô¿    ¿ …√¿ …ƒ¿ ÀHÅ'¿ Àd  ¿ Àu¿ Àè  ¿ ÀH¿ ÀI¿ ÃsÇl¿ Ãè  ¿ ÃØ$¿ Ãœ  ¿ Ãs¿ Ãt¿ Œ„Çu¿ Œˇ  ¿ œ"'¿ œE  ¿ Œ„¿ Œ‰¿ —\åk¿ —a  ¿ —m¿ —s   ¿ ›ÀÅ@¿ ›–  ¿ ›Ï¿ ›Ù   ¿ ﬂÄ∫¿ ﬂ  ¿ ﬂ)¿ ﬂC   ¿ ﬂÕÑﬁ¿ ﬂÈ  ¿ ‡¿ ‡  ¿ ‡¿ ‡.  ¿ ﬂÕ¿ ﬂŒ¿ ‰ØÜ≈¿ ‰¿  ¿ ‰”¿ ‰ﬂ  ¿ ‰Ø¿ ‰∞¿ ÎxÄŸ¿ Îâ   ¿ Îx¿ Îy ¿ Ó"Üï¿ Ò-É/// With [_ScrollSemantics] certain child [SemanticsNode]s can be
/// excluded from the scrollable area for semantics purposes.
///
/// Nodes, that are to be excluded, have to be tagged with
/// [RenderViewport.excludeFromScrolling] and the [RenderAbstractViewport] in
/// use has to add the [RenderViewport.useTwoPaneSemantics] tag to its
/// [SemanticsConfiguration] by overriding
/// [RenderObject.describeSemanticsConfiguration].
///
/// If the tag [RenderViewport.useTwoPaneSemantics] is present on the viewport,
/// two semantics nodes will be used to represent the [Scrollable]: The outer
/// node will contain all children, that are excluded from scrolling. The inner
/// node, which is annotated with the scrolling actions, will house the
/// scrollable children. ¿ ÒhÄÍ ¿ Òn¿ Ò~ ¿ ÒÖ	¿ Òå  ¿ Òî¿ Ò£  ¿ Ò∞$¿ Òø  ¿ Ò⁄ ¿ ÒÈ  ¿ Ú ¿ Ú  
¿ Ú¿ Ú¿ ÚP¿ Ú6¿ Ú.¿ Ú¿ Ú1¿ ÚL¿ Ú9¿ ÚO¿ ÚV¿ Úk  ¿ Úw!¿ ÚÇ  ¿ Úú¿ Úß   ¿ ÚæÄ˘¿ Ú·  ¿ ÚÙ¿ Û  ¿ Úæ¿ Úø¿ ÛªÄ˙¿ ÛÃ  ¿ Ûﬂ¿ ÛÌ  ¿ Ûı#¿ Ù  ¿ Ûª¿ Ûº ¿ Ùπåu¿ Ùø  ¿ ÙÒÅy ¿ ÙÒ¿ ı ¿ ı ¿ ı'  ¿ ı4$¿ ıC  ¿ ı^ ¿ ım  ¿ ıÑ¿ ıê  ¿ ıß¿ ıù¿ ı©¿ ı“¿ ı∫¿ ı‘¿ ˆ¿ ıÛ¿ ˆ	¿ ˆ$¿ ˆ)¿ ˆ/¿ ˆ*¿ ˆﬂ¿ ˆÓ  ¿ ¯o¿ ¯t  ¿ ˘z¿ ˘  ¿ ¸/¿ ¸>  ¿ ˆnn¿ ˆ∆B/// Whether this render object is excluded from the semantic tree.   ¿ ˆ˚Ä˛¿ ˆˇ  ¿ ˜¿ ˜   ¿ ˜˝o¿ ¯:1/// Whether this node can be scrolled implicitly.   ¿ ¯èÄ±¿ ¯ì  ¿ ¯™
¿ ¯∞   ¿ ˘D3¿ ˘M    ¿ ˘ñÄ§¿ ˘ö  ¿ ˘≠
¿ ˘≥   ¿ ˙>ÅÌ¿ ˙O  ¿ ˙n¿ ˙Ü  ¿ ˙>¿ ˙?¿ ¸MÑÅ¿ ¸^  ¿ ¸t¿ ¸É  ¿ ¸à¿ ¸†  ¿ ¸ß ¿ ¸¿  ¿ ¸M¿ ¸N¿ “Z¿ „   ¿ “¿ ” ¿êÅç¿ñ    ¿Ì.¿   ¿Ì¿Ó¿”1¿Á   ¿”¿‘¿N¿  ¿(¿1  ¿¿	¿ZQ¿m  ¿|¿Ö  ¿Z¿[¿Ø:¿√   ¿Ø¿∞ ¿zô~¿&É•/// A widget that manages scrolling in both the vertical and horizontal
/// dimensions and informs the [TwoDimensionalViewport] through which the
/// content is viewed.
///
/// [TwoDimensionalScrollable] implements the interaction model for a scrollable
/// widget in both the vertical and horizontal axes, including gesture
/// recognition, but does not have an opinion about how the
/// [TwoDimensionalViewport], which actually displays the children, is
/// constructed.
///
/// It's rare to construct a [TwoDimensionalScrollable] directly. Instead,
/// consider subclassing [TwoDimensionalScrollView], which combines scrolling,
/// viewporting, and a layout model in both dimensions.
///
/// See also:
///
///  * [TwoDimensionalScrollView], an abstract base class for displaying a
///    scrolling array of children in both directions.
///  * [TwoDimensionalViewport], which can be used to customize the child layout
///    model. ¿ZÇ ¿˝¿Äî/// Creates a widget that scrolls in two dimensions.
///
/// The [horizontalDetails], [verticalDetails], and [viewportBuilder] must not
/// be null.	¿	¿#  ¿+¿:  ¿P¿_  ¿s¿Ç  ¿ñ¿ú  ¿¥¿∫  ¿Ã!¿“  ¿Û5¿˘  ¿.0¿4  ¿Ë¿¿#¿$¿G¿X¿Y¿iÄê¿Â\/// How scrolling gestures should lock to one axis, or allow free movement
/// in both axes. ¿˛Ä˚¿ËÄ…/// The configuration of the horizontal [Scrollable].
///
/// These [ScrollableDetails] can be used to set the [AxisDirection],
/// [ScrollController], [ScrollPhysics] and more for the horizontal axis. ¿˛Äı¿‰Ä≈/// The configuration of the vertical [Scrollable].
///
/// These [ScrollableDetails] can be used to set the [AxisDirection],
/// [ScrollController], [ScrollPhysics] and more for the vertical axis. ¿¯ÅØ¿òÅi/// Builds the viewport through which the scrollable content is displayed.
///
/// A [TwoDimensionalViewport] uses two given [ViewportOffset]s to determine
/// which part of its content is actually visible through the viewport.
///
/// See also:
///
///  * [TwoDimensionalViewport], which is a viewport that displays a span of
///    widgets in both dimensions. ¿¨Äü¿8d/// {@macro flutter.widgets.Scrollable.incrementCalculator}
///
/// This value applies in both axes. ¿PÅ*¿mÅ/// {@macro flutter.widgets.scrollable.restorationId}
///
/// Internally, the [TwoDimensionalScrollable] will introduce a
/// [RestorationScope] that will be assigned this value. The two [Scrollable]s
/// within will then be given unique IDs within this scope. ¿Äã¿ˆe/// {@macro flutter.widgets.scrollable.excludeFromSemantics}
///
/// This value applies to both axes. ¿Äí¿êb/// {@macro flutter.widgets.scrollable.dragStartBehavior}
///
/// This value applies in both axes.  ¿¶]¿“   ¿¶¿ß¿ÑT¿äÉ2/// The state from the closest instance of this class that encloses the given
/// context, or null if none is found.
///
/// Typical usage is as follows:
///
/// ```dart
/// TwoDimensionalScrollableState? scrollable = TwoDimensionalScrollable.maybeOf(context);
/// ```
///
/// Calling this method will create a dependency on the closest
/// [TwoDimensionalScrollable] in the [context]. The internal [Scrollable]s
/// can be accessed through [TwoDimensionalScrollableState.verticalScrollable]
/// and [TwoDimensionalScrollableState.horizontalScrollable].
///
/// Alternatively, [Scrollable.maybeOf] can be used by providing the desired
/// [Axis] to the `axis` parameter.
///
/// See also:
///
/// * [TwoDimensionalScrollable.of], which is similar to this method, but
///   asserts if no [Scrollable] ancestor is found. ¿í¿†   ¿_áó¿nÉπ/// The state from the closest instance of this class that encloses the given
/// context.
///
/// Typical usage is as follows:
///
/// ```dart
/// TwoDimensionalScrollableState scrollable = TwoDimensionalScrollable.of(context);
/// ```
///
/// Calling this method will create a dependency on the closest
/// [TwoDimensionalScrollable] in the [context]. The internal [Scrollable]s
/// can be accessed through [TwoDimensionalScrollableState.verticalScrollable]
/// and [TwoDimensionalScrollableState.horizontalScrollable].
///
/// If no [TwoDimensionalScrollable] ancestor is found, then this method will
/// assert in debug mode, and throw an exception in release mode.
///
/// Alternatively, [Scrollable.of] can be used by providing the desired [Axis]
/// to the `axis` parameter.
///
/// See also:
///
/// * [TwoDimensionalScrollable.maybeOf], which is similar to this method,
///   but returns null if no [TwoDimensionalScrollable] ancestor is found. ¿q¿    ¿ ˙ô¢¿#AÇ@/// State object for a [TwoDimensionalScrollable] widget.
///
/// To manipulate one of the internal [Scrollable] widget's scroll position, use
/// the object obtained from the [verticalScrollable] or [horizontalScrollable]
/// property.
///
/// To be informed of when a [TwoDimensionalScrollable] widget is scrolling,
/// use a [NotificationListener] to listen for [ScrollNotification]s.
/// Both axes will have the same viewport depth since there is only one
/// viewport, and so should be differentiated by the [Axis] of the
/// [ScrollMetrics] provided by the notification.  ¿#ã-¿#ù  ¿#º/¿#Œ  ¿#Ô[¿$ ¿$.¿$7¿$G¿$8¿$H¿$I¿$N]¿$o ¿$è¿$ò¿$®¿$ô¿$©¿$™¿$∞ÅÜ¿%™ÄŸ/// The [ScrollableState] of the vertical axis.
///
/// Accessible by calling [TwoDimensionalScrollable.of].
///
/// Alternatively, [Scrollable.of] can be used by providing [Axis.vertical]
/// to the `axis` parameter.   ¿&:Åê¿'8Ä›/// The [ScrollableState] of the horizontal axis.
///
/// Accessible by calling [TwoDimensionalScrollable.of].
///
/// Alternatively, [Scrollable.of] can be used by providing [Axis.horizontal]
/// to the `axis` parameter.   ¿'ŒÅ#¿'ﬂ   ¿'Œ¿'œ¿(ıÜƒ¿)  ¿)"¿)0  ¿(ı¿(ˆ¿/ΩäJ¿/–  ¿/÷¿/‰  ¿/Ω¿/æ¿:Äè¿:   ¿:¿: ¿;nÅK¿;t  ¿;Ør ¿;µ¿;” ¿;⁄&¿;È  ¿<¿<   ¿<%<¿<I   ¿<fQ¿<w  ¿<ä"¿<™  ¿<f¿<g ¿<ËÇŸ¿<Ó  ¿=Åﬂ ¿=#¿=: ¿=A	¿=H  ¿=P¿=_  ¿=q¿=Å  ¿=ï¿=•  ¿=∑¿=æ  ¿=Õ¿=‘  ¿=‡¿=Á  ¿=¯¿=ˇ  ¿>¿>  ¿>7¿>>  ¿>T¿>[  ¿>m5¿>s  ¿>â¿>ù¿>û¿>´¿>±¿>˙¿>‘¿>¿¿>≤¿>√¿>–¿>—¿>Â¿>◊¿>Ë¿>ı¿>ˆ¿? /¿?  ¿?3.¿?T   ¿?fY¿?è   ¿?f¿?g ¿?√£Ã¿?…   ¿@ﬂ¿@Â  ¿@Û¿@˚  ¿@j¿@    ¿@ol¿@É    	¿AIÇO¿Ak  ¿AÜ¿Aî  ¿A°¿A©  ¿AΩ!¿A«  ¿A‰¿AÎ  ¿BV¿B"  ¿B_ ¿Bn  ¿AI¿AJ¿A¥¿A—¿AŸ¿A⁄¿AÚ¿A¯¿A˘¿B3¿BP¿BQ¿CúÅ©¿C°  ¿Cµ¿CΩ   ¿EIÅÁ¿EZ  ¿Ej¿E{  ¿EI¿EJ¿G4Ñv¿GE  ¿GV¿Gh  ¿G4¿G5¿KÆáÈ¿Kø  ¿K—¿K‰  ¿KÆ¿KØ¿SõÉ}¿S¨  ¿Sª¿SÀ  ¿Sõ¿Sú¿WÅï¿W-   ¿W¿W¿Xµâ¿X∆  ¿X—
¿X◊  ¿Xµ¿X∂¿aÕÅ¿¿a‡  ¿aÌ¿a˚  ¿b¿b  ¿aÕ¿aŒ ¿c¿Çë¿c∆  ¿c˜Å√ ¿c˝¿d ¿d	¿d$  ¿d,¿d<  ¿dP¿d`  ¿dr¿dy  ¿dà¿dè  ¿dõ¿d¢  ¿d≥¿d∫  ¿d“¿dŸ  ¿dÚ¿d˘  ¿e¿e  ¿e(5¿e.  ¿eD¿eX¿eY¿ef¿el¿e∏¿eë¿e{¿em¿e~¿eã¿eå¿e¢¿eî¿e•¿e≤¿e≥¿eæ/¿eŸ   ¿eÚ]¿f   ¿eÚ¿eÛ ¿fSå|¿fY   ¿fî'¿f©  ¿f¿l¿fŸ    ¿g0Ä÷¿gA   ¿g0¿g1¿hÚÉ'¿i  ¿i/¿i=  ¿iJ¿iR  ¿if!¿ip  ¿iç¿iî  ¿i¨V¿iÀ  ¿j ¿j  ¿hÚ¿hÛ¿i]¿iz¿iÇ¿iÉ¿iõ¿i°¿i¢¿i‹¿i˘¿i˙¿lÑÏ¿l.  ¿l9
¿l?  ¿l¿l¿qÅ¿¿q   ¿q-¿q;  ¿qC¿qK  ¿q¿q  ¿0ÑH¿È`/// Specifies how to configure the [DragGestureRecognizer]s of a
/// [TwoDimensionalScrollable].  ¿Äπ¿∑Ä¨/// This behavior will not allow for any diagonal scrolling.
///
/// Drag gestures in one direction or the other will lock the input axis until
/// the gesture is released. ¿¿Å¿…Ä˛/// This behavior will only allow diagonal scrolling on a weighted
/// scale per gesture event.
///
/// This means that after initially evaluating the drag gesture, the weighted
/// evaluation (based on [kTouchSlop]) stands until the gesture is released. ¿€Å9¿Å/// This behavior will only allow diagonal scrolling on a weighted
/// scale that is evaluated throughout a gesture event.
///
/// This means that during each update to the drag gesture, the scrolling
/// axis will be allowed to scroll diagonally if it exceeds the
/// [kTouchSlop]. ¿\¿qS/// This behavior allows free movement in any and all directions when
/// dragging.       ¿ ÏUÅÀ¿ Ï\  ¿ Ït¿ ÏÖ    ÑRÄ…Ñ o/// Signature used by [Scrollable] to build the viewport through which the
/// scrollable content is displayed.  ÑÏÑ˙  ÖÖ   ÖÅÖ£}/// Signature used by [TwoDimensionalScrollable] to build the viewport through
/// which the scrollable content is displayed.  Ö”Ö·  ÖÈÖ˘  Ü
!Ü   áFá!         â| <ÄÜÄ§Ä•Ä∫Ä÷Ä◊ÅÅ)ÅRÅ{Å£Å§ÅπÅ“ÅÚÇÇ2ÇMÇsÇíÇ∂Ç‘ÇıÉÉ2ÉTÉuÉòÉ∑ÉÀÉ„É‰ÑÑÑ3ÑQÑRÑùÑ¬ÖÖÖlÖõÜ.Ü/Ü\Ü_Ü•ÜÚáá`áaá±á⁄áﬁà)àwàªàøââ`â´â√â«ääbätäxäπäΩã
ãYãúãÊãÍå3åtåƒçççFçJçòçÈé5éÄéŒé“é‡é‰è-è]è≠è êê2êÄêûêÌê˚ëNëçë∑ë‹ëÒí í-íBíTíwíïíºíŸìì'ì@ìgì≠ìÆìÈîî!îoîøïïUï¶ï¬ï»ïññ*ñ+ñcñ¥ñƒñ óóhóµó˙òIòíò∑òΩôôFôLô\ôbô≠ô’ôÍöööFözöÄöÃö˜ö˝õKõtõzõØú ú7ú=úäú⁄ù+ùtùƒûû5û;ûKûQû¢ûüBüWüwüxü≈üÀ††[†a†q†w†¡°°T°}°~°ø¢¢X¢n¢t¢¿££H£N£Ü£‘§§"§Z§[§ù§Í•••]•©•Û¶¶¶¶$¶u¶â¶¨¶≠¶ı¶˚ßKßQßùßË®4®:®Ü®Õ®”®„®È©.©à©©©™™™@™~™Ñ™Ã´´b´Å´á´“¨ ¨Q¨W¨ü¨•¨µ¨ª≠
≠,≠2≠G≠t≠u≠∞≠˛ÆÆSÆêÆñÆ·Ø-Ø3ØCØIØñØ®ØΩØ‹Ø›∞∞∞]∞¶∞Í±±*±+±a±g±ä±ê±Ë≤;≤Å≤ú≤ù≤—≤◊≥ ≥7≥8≥D≥z≥{≥á≥Ã≥˜¥H¥î¥ÿ¥‹¥›µ-µVµ\µµÖµìµ‘µﬁµ‰∂0∂w∂√∂È∂Ô∑=∑ç∑⁄∑˜∑˝∏I∏ô∏¥∏∫∏ ∏–ππDπéπ’∫∫l∫ä∫‰ª7ªsªÆª…ª—ªıºJºPºaºeºfº∂º≈ºÀºÓºÙΩΩ=ΩGΩMΩôΩ‡æ,æRæXæ¶æˆø@øFøíø‚ø˝¿ @¿ @O¿ @â¿ @è¿ @ü¿ @•¿ @ı¿ A#¿ Ag¿ A≤¿ A¬¿ AÁ¿ B¿ B7¿ Bà¿ B™¿ B∑¿ B”¿ C¿ CT¿ C¶¿ C˚¿ D2¿ DX¿ Dr¿ D¿ D¶¿ D˙¿ E&¿ E3¿ E?¿ EG¿ EZ¿ Ed¿ EÅ¿ EÖ¿ EÜ¿ E◊¿ F¿ F¿ Fi¿ F∫¿ G
¿ G¿ G]¿ G¨¿ Gı¿ G˚¿ HI¿ Hí¿ H‹¿ Hˇ¿ I¿ IT¿ Ip¿ I…¿ J#¿ J@¿ Jö¿ J‹¿ J‰¿ K¿ KY¿ K_¿ Kq¿ Ku¿ Kv¿ K≈¿ K‚¿ KË¿ L&¿ Lv¿ Lò¿ LΩ¿ LŸ¿ Lı¿ M¿ M;¿ Mó¿ Mû¿ M◊¿ Mÿ¿ N'¿ Nv¿ N≈¿ O
¿ O9¿ O@¿ OÄ¿ O¶¿ OÂ¿ P¿ P1¿ Pt¿ Pô¿ P∑¿ P”¿ PÈ¿ Q¿ QC¿ QL¿ Qn¿ Qo¿ Q®¿ QÃ¿ Q¸¿ R¿ R¿ R;¿ R^¿ Rd¿ RÉ¿ R†¿ R¶¿ R¿ RÙ¿ Rˆ¿ R˜¿ SH¿ Sâ¿ S∫¿ S’¿ SÛ¿ T¿ T)¿ T/¿ T0¿ TT¿ Tu¿ Tv¿ TÇ¿ T¥¿ TŸ¿ T›¿ Tﬂ¿ T‡¿ U¿ U¿ UZ¿ UÖ¿ Uâ¿ UŒ¿ V¿ V¿ Vp¿ V•¿ W¿ W$¿ W%¿ W2¿ W3¿ Ww¿ W}¿ WÀ¿ X¿ Xf¿ Xì¿ X∞¿ X±¿ XÓ¿ Y ¿ Y;¿ Y<¿ Yã¿ YÕ¿ Y”¿ Z$¿ Z[¿ Z~¿ Zõ¿ Z∫¿ ZÂ¿ [¿ [.¿ [M¿ [y¿ [ô¿ [ƒ¿ [ ¿ [Œ¿ [œ¿ \5¿ \6¿ \B¿ \}¿ \~¿ \ä¿ \Æ¿ \Ø¿ \ª¿ \Ô¿ ]¿ ]¿ ]¿ ]l¿ ]m¿ ]y¿ ]ß¿ ]®¿ ]¥¿ ]È¿ ^=¿ ^>¿ ^d¿ ^ì¿ ^»¿ ^…¿ _¿ _,¿ _{¿ _¥¿ _÷¿ `
¿ `:¿ `è¿ `ï¿ `»¿ `Á¿ a¿ aj¿ a∂¿ aÏ¿ b¿ b ¿ b!¿ bÄ¿ bü¿ b–¿ b‘¿ b’¿ b·¿ c*¿ ch¿ cá¿ c∑¿ d¿ d¿ d¿ d¿ d+¿ dN¿ dÖ¿ d∞¿ d˚¿ eC¿ eÄ¿ eÑ¿ eÖ¿ eë¿ e¶¿ eÀ¿ f¿ f¿ f¿ f"¿ f#¿ f/¿ fP¿ fù¿ g¿ g¿ gA¿ gE¿ gF¿ g{¿ gÃ¿ gﬂ¿ gÂ¿ ht¿ há¿ hç¿ hÒ¿ i[¿ id¿ i§¿ iπ¿ i¡¿ iË¿ j¿ jG¿ jH¿ jò¿ jú¿ jù¿ j©¿ jÿ¿ j˛¿ jˇ¿ k4¿ k^¿ k´¿ kœ¿ l¿ l-¿ lb¿ lê¿ l∫¿ l…¿ l˝¿ m-¿ mV¿ m°¿ m¿¿ m˙¿ n¿ n¿ nE¿ nx¿ n~¿ n¿ n´¿ nƒ¿ n ¿ nŒ¿ nœ¿ n€¿ nÓ¿ o¿ o>¿ oK¿ o~¿ o™¿ o∞¿ o±¿ o…¿ oÔ¿ p¿ p¿ p	¿ p¿ p¿ pN¿ pO¿ p[¿ ph¿ p£¿ p◊¿ q!¿ q'¿ q+¿ q,¿ qZ¿ q[¿ q¬¿ qı¿ qˆ¿ rK¿ r±¿ r÷¿ r◊¿ rÌ¿ s	¿ s
¿ s¿ s#¿ sC¿ sï¿ s£¿ s©¿ sª¿ t¿ tO¿ tô¿ t◊¿ tÚ¿ tˇ¿ u¿ u8¿ uz¿ uÍ¿ vK¿ vÑ¿ vù¿ v ¿ v˘¿ w*¿ wU¿ wÜ¿ w»¿ x
¿ xL¿ x®¿ xÈ¿ y<¿ y}¿ y¿¿ y—¿ y‡¿ yÌ¿ z¿ zM¿ z¡¿ {$¿ {_¿ {x¿ {•¿ {‘¿ |¿ |0¿ |a¿ |£¿ |Â¿ }'¿ }É¿ }ƒ¿ ~¿ ~X¿ ~õ¿ ~¨¿ ~ª¿ ~»¿ ~–¿ ~÷¿ ~¿ ¿ J¿ ¢¿ ®¿ ¨¿ ≠¿ π¿ ∆¿ Ï¿ Ä¿ Ä#¿ Ä)¿ ÄK¿ Ä¿ Ä˘¿ Å*¿ Å0¿ Å4¿ Å5¿ ÅI¿ ÅJ¿ ÅY¿ Åx¿ Åy¿ Å´¿ Å∆¿ Å·¿ Ç
¿ Ç¿ Ç¿ ÇC¿ Çç¿ Çﬁ¿ É¿ É"¿ ÉT¿ Éo¿ Éä¿ Éé¿ Éè¿ É≈¿ Ñ¿ Ñ@¿ Ñ\¿ Ñ`¿ Ña¿ Ñë¿ Ñ‡¿ Ö¿ Ö%¿ Ö@¿ ÖD¿ ÖE¿ Öb¿ Öò¿ ÖÊ¿ Ü/¿ ÜB¿ ÜP¿ ÜV¿ ÜÜ¿ Ü’¿ á¿ á¿ á+¿ áF¿ áa¿ áe¿ áf¿ á~¿ áê¿ áî¿ áï¿ á≠¿ áø¿ á√¿ áƒ¿ á÷¿ á◊¿ à'¿ àa¿ àû¿ à≥¿ àˆ¿ â¿ â¿ â!¿ â"¿ âm¿ â∫¿ â»¿ ä¿ ä¿ äw¿ äŒ¿ ã¿ ã]¿ ã´¿ ã˘¿ åF¿ åU¿ åÇ¿ åÉ¿ åû¿ å∫¿ å”¿ åÙ¿ ç¿ ç0¿ çI¿ çj¿ çå¿ çí¿ çì¿ çÃ¿ çﬂ¿ çÂ¿ ç˜¿ ç˚¿ ç¸¿ é6¿ ér¿ éø¿ éœ¿ é◊¿ è¿ èg¿ èº¿ èˇ¿ ê\¿ êd¿ êü¿ ê¿¿ ë¿ ë¿ ë"¿ ë#¿ ëU¿ ë~¿ ëŒ¿ í ¿ ía¿ íÜ¿ íå¿ íê¿ íë¿ í„¿ ì¿ ìv¿ ìß¿ ìÁ¿ ìÔ¿ ìı¿ î¿ î¿ î¿ îH¿ îÅ¿ î®¿ î÷¿ ï	¿ ï¿ ï¿ ï;¿ ïJ¿ ïí¿ ï°¿ ï®¿ ï¨¿ ï≠¿ ïæ¿ ïø¿ ïÀ¿ ïÚ¿ ñ¿ ño¿ ñ∂¿ ñΩ¿ ñÂ¿ ó¿ ó¿ óu¿ óπ¿ óﬂ¿ ó˜¿ ò¿ ò(¿ òY¿ ò|¿ ò†¿ ò…¿ òı¿ ô2¿ ôN¿ ôå¿ ôÆ¿ ô‘¿ ö¿ öB¿ öQ¿ ö^¿ öi¿ ör¿ öy¿ öz¿ ö¢¿ ö‚¿ õ¿ õ=¿ õa¿ õ¿ õ√¿ õ¸¿ ú¿ ú¿ ú(¿ ú.¿ ú/¿ ú[¿ ú\¿ úü¿ úÓ¿ ù¿ ù7¿ ùL¿ ùh¿ ùÜ¿ ùù¿ ù¶¿ ù¨¿ ù≠¿ ù¿¿ ùƒ¿ ù≈¿ û¿ û_¿ û•¿ û‘¿ ûÔ¿ ü¿ ü2¿ üQ¿ ü≠¿ ü”¿ ü⁄¿ †¿ †-¿ †I¿ †c¿ †w¿ †ü¿ †Õ¿ †‘¿ °¿ °¿ °¿ °¿ °d¿ °è¿ °ﬂ¿ ¢6¿ ¢:¿ ¢<¿ ¢=¿ ¢p¿ ¢t¿ ¢±¿ ¢Û¿ £.¿ £T¿ £m¿ £â¿ £¶¿ £ø¿ £≈¿ £∆¿ £Â¿ §¿ §¿ §B¿ §C¿ §O¿ §ß¿ §©¿ §™¿ §˛¿ •?¿ •@¿ •L¿ •a¿ •x¿ •∏¿ •”¿ •Ù¿ •˚¿ •ˇ¿ ¶ ¿ ¶¿ ¶L¿ ¶r¿ ¶£¿ ¶ÿ¿ ¶ﬁ¿ ¶‚¿ ¶„¿ ¶Ô¿ ß¿ ß$¿ ß9¿ ß=¿ ß>¿ ßJ¿ ßq¿ ßê¿ ß≥¿ ß◊¿ ßÚ¿ ß˘¿ ß˝¿ ßˇ¿ ® ¿ ®O¿ ®z¿ ®~¿ ®Œ¿ ©¿ ©j¿ ©z¿ ©⁄¿ ™¿ ™¿ ™B¿ ™_¿ ™œ¿ ´¿ ´¿ ´¿ ´F¿ ´y¿ ´z¿ ´±¿ ´Û¿ ´Ù¿ ¨¿ ¨C¿ ¨j¿ ¨ñ¿ ¨¿¿ ¨¡¿ ≠¿ ≠?¿ ≠@¿ ≠l¿ ≠à¿ ≠Ø¿ ≠Õ¿ ≠€¿ ≠·¿ Æ¿ Æ-¿ Æ_¿ Æc¿ Æd¿ ÆÆ¿ ÆÓ¿ Ø¿ Ø1¿ Ø?¿ ØE¿ Øh¿ Ø≤¿ Ø◊¿ ØÁ¿ ØÔ¿ ∞¿ ∞.¿ ∞r¿ ∞v¿ ∞w¿ ∞∫¿ ∞‹¿ ∞‚¿ ±.¿ ±P¿ ±V¿ ±¶¿ ±ı¿ ≤B¿ ≤ì¿ ≤§¿ ≤™¿ ≤¯¿ ≥H¿ ≥ô¿ ≥ÿ¿ ¥4¿ ¥é¿ ¥è¿ ¥õ¿ ¥ª¿ ¥˙¿ µm¿ µﬁ¿ ∂ ¿ ∂¿ ∂¿ ∂¿ ∂U¿ ∂Ñ¿ ∂±¿ ∂ﬁ¿ ∑	¿ ∑3¿ ∑a¿ ∑e¿ ∑f¿ ∑r¿ ∑¿¿ ∏¿ ∏K¿ ∏£¿ ∏©¿ ∏Í¿ π$¿ πÄ¿ π¿ ∫Z¿ ∫g¿ ∫≈¿ ª9¿ ªß¿ ª≠¿ ª¯¿ ª˘¿ ºK¿ ºú¿ ºÆ¿ º€¿ Ω¿ Ω¿ Ω¿ ΩD¿ Ωë¿ Ω∂¿ Ωﬁ¿ ΩÊ¿ ΩÏ¿ Ωˇ¿ æ¿ æ¿ æD¿ æé¿ æ“¿ æ˚¿ øL¿ øô¿ øÈ¿ ¿9¿ ¿s¿ ¿¢¿ ¿™¿ ¿ˇ¿ ¡¿ ¡'¿ ¡-¿ ¡n¿ ¡…¿ ¡Õ¿ ¡Œ¿ ¬¿ ¬@¿ ¬F¿ ¬ï¿ ¬À¿ √¿ √[¿ √√¿ ƒ¿ ƒN¿ ƒÜ¿ ƒÙ¿ ≈L¿ ≈q¿ ≈≥¿ ∆¿ ∆U¿ ∆m¿ ∆Æ¿ ∆∑¿ «'¿ «-¿ «ï¿ «Î¿ »¿ »N¿ »Æ¿ »Ï¿ …¿ …A¿ …J¿ …∂¿ …º¿ …¿¿ …¡¿ …Õ¿  ¿  ;¿  |¿  –¿  ¸¿ À(¿ À.¿ ÀA¿ ÀE¿ ÀF¿ ÀR¿ Àó¿ ÀÌ¿ Ã/¿ ÃY¿ Ãl¿ Ãp¿ Ãq¿ Ã}¿ Ã◊¿ Õ(¿ Õu¿ Õƒ¿ Œ¿ Œ+¿ ŒQ¿ Œt¿ Œ{¿ Œ£¿ Œ√¿ Œ…¿ Œ‹¿ Œ‡¿ Œ·¿ ŒÌ¿ œM¿ œ°¿ œÓ¿ –=¿ –|¿ –§¿ – ¿ –Ì¿ –Ù¿ —¿ —<¿ —B¿ —U¿ —Y¿ —Z¿ —~¿ —ü¿ —Ω¿ —›¿ —Ò¿ “+¿ “\¿ “ü¿ “¨¿ “Ë¿ ”¿ ”`¿ ”f¿ ”î¿ ”¢¿ ”®¿ ”¸¿ ‘D¿ ‘¥¿ ’¿ ’A¿ ’^¿ ’¶¿ ’¯¿ ÷L¿ ÷^¿ ÷h¿ ÷ö¿ ÷Î¿ ÷˝¿ ◊¿ ◊3¿ ◊~¿ ◊à¿ ◊ò¿ ◊∏¿ ◊˙¿ ÿE¿ ÿW¿ ÿa¿ ÿå¿ ÿ÷¿ ÿË¿ ÿÚ¿ Ÿ¿ Ÿe¿ Ÿo¿ Ÿ¿ Ÿû¿ ŸÊ¿ ⁄8¿ ⁄å¿ ⁄û¿ ⁄®¿ ⁄⁄¿ €+¿ €=¿ €G¿ €s¿ €æ¿ €»¿ €ÿ¿ €˜¿ ‹9¿ ‹Ñ¿ ‹ñ¿ ‹†¿ ‹À¿ ›¿ ›'¿ ›1¿ ›[¿ ›§¿ ›Æ¿ ›æ¿ ›ƒ¿ ›»¿ ›…¿ ﬁ¿ ﬁO¿ ﬁì¿ ﬁﬂ¿ ﬂ¿ ﬂ¿ ﬂ¿ ﬂK¿ ﬂ∆¿ ﬂ ¿ ﬂÀ¿ ﬂ◊¿ ‡6¿ ‡P¿ ‡¿ ‡Œ¿ ‡ˆ¿ ·#¿ ·p¿ ·ò¿ ·—¿ ‚¿ ‚5¿ ‚Ñ¿ ‚—¿ ‚ˆ¿ „2¿ „p¿ „ô¿ „√¿ ‰¿ ‰_¿ ‰e¿ ‰®¿ ‰¨¿ ‰≠¿ ‰π¿ ‰Ï¿ Â ¿ Âw¿ Â´¿ Ê¿ ÊR¿ Êï¿ Á	¿ Ár¿ Á ¿ Ë ¿ ËM¿ ËS¿ Ë¶¿ Ëÿ¿ ÈB¿ È{¿ Èæ¿ Í.¿ Íì¿ ÍÍ¿ Î ¿ Îk¿ Îq¿ Îu¿ Îv¿ ÎÇ¿ Îï¿ Îƒ¿ ÎÒ¿ Ï¿ Ï9¿ ÏN¿ ÏR¿ ÏT¿ ÏU¿ Ïó¿ Ï¬¿ Ïﬂ¿ Ì¿ Ì3¿ Ìm¿ Ìä¿ Ìƒ¿ Ì‚¿ Ó¿ Ó¿ Ó!¿ Ó"¿ Ód¿ Ó¢¿ Ó¶¿ Ó·¿ Ô/¿ Ôv¿ Ô°¿ Ô‘¿ Ôÿ¿ (¿ v¿ ∆¿ Ò¿ Ò'¿ Òf¿ ÒÅ¿ Òê¿ Ò¨¿ Ò÷¿ Ò¸¿ Ú¿ ÚS¿ ÚT¿ Úu¿ Úö¿ Úª¿ Úº¿ Ú»¿ Û¿ Û/¿ ÛI¿ Û¿ Û≠¿ Û¥¿ Û∏¿ Ûπ¿ Û≈¿ Ù¿ Ù-¿ Ùe¿ ÙÅ¿ Ù≤¿ Ù∂¿ Ù∏¿ Ùπ¿ ÙÔ¿ ı
¿ ı0¿ ıZ¿ ıÄ¿ ıñ¿ ı≥¿ ıÏ¿ ˆ¿ ˆ3¿ ˆg¿ ˆk¿ ˆl¿ ˆ±¿ ˆ›¿ ˆ˘¿ ˜ ¿ ˜>¿ ˜L¿ ˜R¿ ˜ä¿ ˜°¿ ˜÷¿ ˜ˆ¿ ˜˙¿ ˜˚¿ ¯/¿ ¯m¿ ¯ç¿ ¯∏¿ ¯‰¿ ¯Ú¿ ¯¯¿ ˘¿ ˘=¿ ˘A¿ ˘B¿ ˘x¿ ˘î¿ ˘ª¿ ˘‚¿ ˘¿ ˘ˆ¿ ˙¿ ˙7¿ ˙;¿ ˙<¿ ˙H¿ ˙è¿ ˙¡¿ ˙Á¿ ˚
¿ ˚¿ ˚Q¿ ˚¿ ˚∑¿ ˚Ô¿ ¸"¿ ¸(¿ ¸,¿ ¸-¿ ¸J¿ ¸K¿ ¸W¿ ¸À¿ ˝'¿ ˝@¿ ˝{¿ ˝â¿ ˝è¿ ˝ê¿ ˝·¿ ˝‚¿ ˝˛¿ ˛E¿ ˛Å¿ ˛≥¿ ˛ı¿ ˇ6¿ ˇS¿ ˇb¿ ˇò¿ ˇÕ¿ ˇ◊¿ ˇÙ¿ ˇ¸¿ ¿ .¿ x¿ À¿ œ¿ –¿ ‹¿ ˆ¿¿)¿-¿/¿0¿Ç¿ê¿—¿›¿¿¿¿<¿S¿W¿X¿d¿å¿®¿¨¿≠¿π¿‘¿Ê¿Í¿Î¿˜¿¿¿¿/¿0¿q¿ë¿‰¿ ¿?¿E¿ñ¿µ¿Ω¿æ¿¿"¿(¿x¿«¿ÿ¿Ÿ¿¿X¿^¿™¿Ï¿ ¿¿¿_¿o¿w¿y¿z¿¬¿¿#¿'¿x¿ø¿˚¿	B¿	S¿	W¿	¢¿	Ò¿
)¿
-¿
;¿
?¿
ä¿
¡¿¿ ¿X¿è¿ï¿Ê¿ı¿¿'¿L¿o¿í¿∞¿»¿Ô¿*¿`¿f¿g¿¥¿»¿˚¿¸¿4¿:¿Ç¿Œ¿˚¿¸¿2¿8¿Ä¿ ¿ı¿ˆ¿C¿I¿ò¿‚¿Ë¿¯¿˛¿M¿r¿©¿™¿Ë¿Ó¿¿M¿N¿Ü¿å¿Œ¿¿]¿|¿}¿º¿¬¿È¿¿¿I¿O¿v¿£¿§¿∞¿¿¿U¿~¿Ñ¿ß¿≠¿ª¿¿"¿(¿j¿∏¿	¿I¿O¿û¿ƒ¿ ¿⁄¿‡¿,¿b¿™¿+¿X¿\¿]¿≠¿º¿¬¿Â¿Î¿˘¿P¿Z¿`¿¢¿¿A¿Å¿á¿◊¿¿!¿r¿ë¿ó¿ß¿≠¿˙¿G¿â¿÷¿Ê¿¿C¿[¿¨¿Î¿¯¿¿g¿π¿ ¿ X¿ ~¿ ò¿ •¿ ±¿ π¿ Ã¿ ÷¿ Û¿ ˜¿ ˘¿ ˙¿!4¿!8¿!â¿!Ÿ¿!Á¿!Î¿"8¿"~¿"∆¿#	¿#;¿#â¿#∫¿#Ì¿$L¿$≠¿$Æ¿$‡¿$Ê¿%!¿%'¿%u¿%î¿%ø¿%˝¿&3¿&7¿&8¿&l¿&r¿&≠¿&≥¿'¿'"¿'O¿'è¿'«¿'À¿'Ã¿'ÿ¿'Ì¿("¿(Z¿(`¿(ó¿(—¿(◊¿(Ó¿(Ú¿(Û¿(ˇ¿)<¿)b¿)§¿)•¿)µ¿*
¿*D¿*ë¿*µ¿*Í¿+%¿+U¿+Å¿+ø¿,¿,%¿,Z¿,î¿,ú¿,¢¿,£¿,µ¿-¿-J¿-ó¿-ª¿-Ú¿./¿.a¿.è¿.œ¿/¿/5¿/l¿/®¿/∞¿/∂¿/∫¿/ª¿/«¿/Ó¿/˙¿0H¿0ê¿0ó¿0£¿0ı¿1A¿1H¿1I¿1u¿1†¿1∆¿1¿2¿2H¿2Å¿2∑¿2‚¿3¿3M¿3à¿3§¿3›¿4¿4X¿4ç¿4»¿5¿5E¿5u¿5¥¿5¿6!¿6X¿6ò¿6Ÿ¿6˘¿76¿7u¿7ª¿7Ù¿83¿8ä¿8‚¿8Ò¿8˛¿9¿9¿9¿9¿9]¿9ñ¿9ó¿9¬¿9Ë¿9˝¿:¿:¿:	¿:¿:(¿:T¿:Ç¿:ó¿:õ¿:ù¿:û¿:‘¿;¿;K¿;n¿;≠¿;÷¿<¿<¿<"¿<#¿<c¿<d¿<p¿<∏¿<∫¿<ª¿<Ë¿=¿==¿=L¿=m¿=ë¿=≥¿=…¿=‹¿=Ù¿>¿>3¿>P¿>i¿>§¿>˝¿>˛¿?1¿?c¿?d¿?p¿?¿¿?¬¿?√¿@ ¿@m¿@‹¿@›¿@Ò¿A¿A¿AG¿AS¿AÇ¿Aù¿Aπ¿A‡¿Aˇ¿B[¿BÅ¿Bà¿Bî¿B°¿BÚ¿CC¿Ci¿Cp¿Cï¿Cô¿Cö¿C∆¿CÍ¿D#¿Dt¿D§¿D…¿E¿E#¿E<¿EB¿EF¿EG¿ES¿EÖ¿E©¿Eœ¿Eﬁ¿F¿FA¿Fg¿F≤¿FÃ¿G¿G	¿G-¿G1¿G2¿G>¿Gr¿Gü¿G√¿GÈ¿G¯¿H¿HA¿H{¿H≥¿H‚¿I¿I@¿Iu¿Iì¿I®¿IÈ¿J'¿Jc¿JÉ¿J≤¿JÓ¿K¿K ¿Kr¿K|¿KÇ¿Kß¿K´¿K¨¿K∏¿KÓ¿L3¿Lc¿Lè¿Lµ¿L„¿M¿M¿M]¿Mç¿Mπ¿Mﬂ¿N¿N9¿N@¿NA¿Ne¿Nã¿N¡¿N˜¿O¿O-¿OI¿Oê¿O∆¿O÷¿P
¿P?¿Pt¿P•¿P‘¿Q ¿Q<¿Qm¿Qú¿Q”¿Q›¿Q„¿Q˝¿R¿R=¿RÑ¿R†¿Rø¿S¿S¿S0¿S\¿Sb¿Sî¿Sò¿Sô¿S•¿S’¿S¿T¿TB¿T}¿Tº¿T¯¿U¿U¿U[¿Uó¿U≤¿Uπ¿U∫¿Uﬁ¿V¿V¿VB¿Vv¿Vú¿V‡¿VÊ¿W¿W¿W¿W&¿WC¿W^¿Wu¿Wô¿Wø¿WŒ¿W˝¿X1¿XW¿Xâ¿Xè¿XÆ¿X≤¿X≥¿Xø¿Xﬂ¿Y¿Y)¿Y{¿Yè¿Y∞¿Y¿¿YÔ¿Z#¿ZI¿Z^¿Z≠¿Z˙¿[F¿[ì¿[π¿[˚¿\Y¿\±¿\·¿\˙¿]'¿]V¿]á¿]≤¿]„¿^%¿^g¿^©¿_¿_F¿_à¿_ô¿_®¿_µ¿`¿`U¿`ó¿`∂¿`÷¿a¿a<¿aö¿a¶¿a∞¿a¿¿a∆¿a ¿aÀ¿a◊¿b¿bL¿bs¿b°¿b ¿b—¿c¿c=¿cä¿cé¿cê¿cë¿c¿¿cı¿d¿d(¿dL¿dn¿dÑ¿dó¿dØ¿dŒ¿dÓ¿e¿e$¿e_¿eª¿eº¿eÔ¿e¿e¸¿fP¿fR¿fS¿fí¿fΩ¿fæ¿g-¿g.¿g:¿g[¿gå¿g‡¿h¿h¿h¿hV¿h¢¿h¿h¸¿i+¿iF¿ib¿iâ¿i®¿j¿j*¿j1¿jm¿jn¿jô¿jß¿j√¿j›¿jÒ¿k¿k!¿k"¿k`¿kn¿kä¿k§¿k∏¿k‡¿kË¿kÈ¿l¿l¿l¿l'¿lG¿lk¿lë¿lÿ¿l˜¿m¿m(¿mW¿mã¿m±¿m∆¿n¿n]¿n´¿nı¿oG¿oï¿o◊¿oˆ¿p¿pB¿p|¿p⁄¿pÊ¿p¿q ¿q¿q
¿q¿q¿qS¿qå¿q≥¿q·¿r
¿r¿rW¿r}¿r ¿rŒ¿r–    
Scrollable_ScrollableScopeScrollableState_ScrollableSelectionHandler _ScrollableSelectionHandlerState%_ScrollableSelectionContainerDelegate_getDeltaToScrollOrigin_ScrollSemantics_RenderScrollSemantics_RestorableScrollOffsetDiagonalDragBehaviorTwoDimensionalScrollableTwoDimensionalScrollableState_TwoDimensionalScrollableScope_VerticalOuterDimension_VerticalOuterDimensionState_HorizontalInnerDimension_HorizontalInnerDimensionState l