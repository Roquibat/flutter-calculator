ÄÃ_startstart_extentextent==hashCodetoStringlerpborderAnimationbordergapAnimationgaptextDirection	fillColorhoverColorTweenhoverAnimationblendedColorpaintshouldRepaint
hoverColor
isHoveringcreateState_kHoverDuration_controller_hoverColorController_borderAnimation_border_hoverAnimation_hoverColorTween	initStatedisposedidUpdateWidgetbuildchild	animation
translateX	textAlign
helperTexthelperStylehelperMaxLineserror	errorText
errorStyleerrorMaxLinesempty_helper_error	_hasError_handleChange_buildHelper_buildErrorneverautoalways_xcenter
_stringifyiconinputlabelhintprefixsuffix
prefixIcon
suffixIconhelperErrorcounter	containercontentPaddingisCollapsedfloatingLabelHeightfloatingLabelProgressfloatingLabelAlignment	borderGapalignLabelWithHintisDensevisualDensityboxToBaselineinputBaselineoutlineBaselinesubtextBaselinecontainerHeightsubtextHeight
subtextGapchildren
decoration_decoration_textDirectiontextBaseline_textBaseline_defaultTextAlignVerticaltextAlignVertical_textAlignVertical	isFocused
_isFocusedexpands_expands	material3
_material3_isOutlineAlignedvisitChildrenForSemanticssizedByParent	_minWidth	_maxWidth
_minHeight_boxSize_boxParentData_layoutLineBox_layout_interpolateThreecomputeMinIntrinsicWidthcomputeMaxIntrinsicWidth_lineHeightcomputeMinIntrinsicHeightcomputeMaxIntrinsicHeightcomputeDistanceToActualBaseline_labelTransformcomputeDryLayout$_childSemanticsConfigurationDelegatedescribeSemanticsConfigurationperformLayout_paintLabelhitTestSelfhitTestChildrenapplyPaintTransformslotschildForSlotcreateRenderObjectupdateRenderObjectlabelIsFloatingtextstylesemanticsSortKeysemanticsTag	baseStyleisEmpty_labelShouldWithdrawcontainerOfdebugFillProperties_floatingLabelController_floatingLabelAnimation_shakingLabelController
_borderGap_kPrefixSemanticsSortOrder_kInputSemanticsSortOrder_kSuffixSemanticsSortOrder_kPrefixSemanticsTag_kSuffixSemanticsTagdidChangeDependencies_effectiveDecoration_floatingLabelEnabled_getDefaultM2BorderColor_getFillColor_getHoverColor_getIconColor_getPrefixIconColor_getSuffixIconColor_hasInlineLabel_shouldShowLabel_getInlineLabelStyle_getInlineHintStyle_getFloatingLabelStyle_getHelperStyle_getErrorStylematerialState_getDefaultBorder	iconColor	labelText
labelStylefloatingLabelStylehintText	hintStylehintTextDirectionhintMaxLineshintFadeDurationfloatingLabelBehaviorprefixIconConstraints
prefixTextprefixStyleprefixIconColor
suffixTextsuffixStylesuffixIconColorsuffixIconConstraintscounterTextcounterStylefilled
focusColorerrorBorderfocusedBorderfocusedErrorBorderdisabledBorderenabledBorderenabledsemanticCounterTextconstraintscopyWithapplyDefaultsoutlineBorderactiveIndicatorBordermergecontext_colors
_textTheme_kTransitionDuration_kTransitionCurve_kFinalLabelScale_kHintFadeTransitionDuration_InputBorderGap_InputBorderTween_InputBorderPainter_BorderContainer_BorderContainerState_Shaker_HelperError_HelperErrorStateFloatingLabelBehaviorFloatingLabelAlignment_DecorationSlot_Decoration_RenderDecorationLayout_RenderDecoration
_Decorator
_AffixTextInputDecorator_InputDecoratorStateInputDecorationInputDecorationTheme_InputDecoratorDefaultsM2_InputDecoratorDefaultsM3Å•
lerpDoubleDurationmillisecondsCurveCurvesfastOutSlowIndoubleChangeNotifiernotifyListenersoverrideboolObject	identicalruntimeTypestartextentinthashStringdescribeIdentityTweenInputBorderShapeBorderlerpbeginendCustomPainter
Listenablerepaint	AnimationTextDirectionColor
ColorTween
alphaBlendevaluatevoidCanvasSizeRectOffsetzeroalphadrawPathgetOuterPathtextDirectionPaintcolorstylePaintingStylefillpaintgapStart	gapExtentgapPercentagevalueborderAnimationhoverAnimationgapAnimationbordergapStatefulWidgetStateTickerProviderStateMixinAnimationController	initStatedurationwidget
isHoveringvsyncCurvedAnimationparentcurvereverseCurveflippedlinearColorstransparent
hoverColordisposedidUpdateWidgetforwardreverseWidgetBuildContextCustomPaintforegroundPaintermergeDirectionalityof	fillColorhoverColorTweenAnimatedWidget
listenable	Transform	transformMatrix4translationValueschild	TextAlign	TextStyleSingleTickerProviderStateMixinSizedBoxshrink	errorTexterror
helperTextaddListenersetState	Semantics	containerFadeTransitionopacityanimateTexthelperStyle	textAlignoverflowTextOverflowellipsismaxLineshelperMaxLinesFractionalTranslationtranslationview
errorStyleerrorMaxLinesisDismissedisCompletedStackchildrenfloatingLabelBehaviorlabel	labelTextfloatingLabelAlignment	immutableltrrtl_hashCode_xtoStringAsFixedEdgeInsetsGeometryVisualDensitycontentPaddingisCollapsedfloatingLabelHeightfloatingLabelProgress	borderGapalignLabelWithHintisDensevisualDensityiconinputhintprefixsuffix
prefixIcon
suffixIconhelperErrorcounterMap	RenderBox!SlottedContainerRenderObjectMixinTextBaselineTextAlignVerticalchildForSlotIterablemarkNeedsLayoutcentertopymarkNeedsSemanticsUpdate	isOutlineRenderObjectVisitorgetMinIntrinsicWidthgetMaxIntrinsicWidthgetMinIntrinsicHeightsizeBoxParentData
parentData
EdgeInsetsBoxConstraintslayoutparentUsesSizegetDistanceToBaseline
alphabeticFlutterError	fromPartsDiagnosticsNodeErrorSummaryErrorDescriptionmaxWidthinfinityloosencopyWithwidthmax
horizontalconstraintsleftrightminWidthheightbaseSizeAdjustmentdeflateonlydybottomkMinInteractiveDimension	maxHeightminverticalboxToBaselinecontainerHeightinputBaselineoutlineBaselinesubtextBaselinesubtextHeightListboxreduceoffsetcomputeDistanceToActualBaselinedebugCannotComputeDryLayoutreason"ChildSemanticsConfigurationsResultSemanticsConfiguration)ChildSemanticsConfigurationsResultBuilderchildConfigtagsChildrenWith_kPrefixSemanticsTagadd_kSuffixSemanticsTagmarkAsMergeUpmarkAsSiblingMergeGroupbuildchildConfigurationsDelegatetightFordxoffsetToPrefixIcon	constrainconstrainWidthconstrainHeightPaintingContext
paintChild
borderSideidentity	translatescalelayerpushTransformneedsCompositingoldLayerTransformLayerBoxHitTestResultaddWithPaintOffsetpositionhitTesttransformedRenderObjectmultiplyapplyPaintTransform#SlottedMultiChildRenderObjectWidgetvalues
decorationtextBaselinetextAlignVertical	isFocusedexpands	material3ThemeuseMaterial3StatelessWidgetSemanticsSortKeySemanticsTagDefaultTextStyleAnimatedOpacitysortKeytagForChildren	TextFieldEditableTextMaterial
DecorationDecoratedBox	ThemeDatainputDecorationTheme	textThememinLinesDropdownButtonInkWellenabledfilledcounterTextfindAncestorRenderObjectOfTypeDiagnosticPropertiesBuilderdebugFillPropertiesDiagnosticsPropertydefaultValueOrdinalSortKeyalwaysnever_labelShouldWithdrawdidChangeDependenciesapplyDefaultscontextisEmptydisabledColorcolorSchemeprimary	hintColor	onSurfacewithOpacityMaterialStateProperty	resolveAs	iconColorprefixIconColorsuffixIconColor
labelStyletitleMedium	baseStyle	hintStylefloatingLabelStyleSetMaterialStatedisabledfocusedhoveredUnderlineInputBorder
BorderSidenoneactiveIndicatorBorderoutlineBorderhintTexthintFadeDurationhintTextDirectionhintMaxLineserrorBorderdisabledBorderfocusedErrorBorderfocusedBorderenabledBorder	animationAnimatedDefaultTextStyle
prefixText
suffixTextlabelIsFloatingtextprefixStylesemanticsSortKeysemanticsTagsuffixStyleMouseRegioncursorSystemMouseCursorsbasicPaddingpadding	IconThemedataIconThemeDataCenterwidthFactorheightFactorConstrainedBoxprefixIconConstraintseffectiveConstraints	minHeightIconButtonThemeIconButtonThemeData
IconButton	styleFromforegroundColoriconSizesuffixIconConstraints
liveRegioncounterStylesemanticsLabelsemanticCounterTextresolvefontSize
MediaQuerytextScalerOftextScaleFactorfromLTRBIcon	ImageIconMaterialStateColorrichMaterialStateTextStyleColorSchemeTextFormField	validatorauto	collapsedAlign
focusColorOutlineInputBorder!MaterialStateUnderlineInputBorderMaterialStateOutlineInputBorderhashAlljoinDiagnosticableIntPropertyColorPropertyresolveWithstatescontains	bodySmall
brightness
Brightnessdarklightwhite70black45	TextThemesurfaceVariantMaterialStateBorderSideonErrorContaineronSurfaceVariantoutline	bodyLargeChangeNotifierTweenCustomPainterStatefulWidgetStateTickerProviderStateMixinAnimatedWidgetSingleTickerProviderStateMixin	RenderBox!SlottedContainerRenderObjectMixin#SlottedMultiChildRenderObjectWidgetStatelessWidgetDiagnosticableInputDecorationTheme'0¨—D!òfº{?≤Pñ    Ä¶  Ä∏mathÄª	dart:mathÄ“Ä·
lerpDouble Ä¬  dart:ui  ÄÂ  package:flutter/foundation.dart  Å  package:flutter/rendering.dart  Å8  package:flutter/widgets.dart  Å`  color_scheme.dart  Å|  colors.dart  Åí  constants.dart  Å´  icon_button.dart  Å∆  icon_button_theme.dart  ÅÁ  input_border.dart  Ç  material.dart  Ç  material_state.dart  Ç9  text_theme.dart  ÇS  
theme.dart  Çh  theme_data.dart    	dart:core¿TU ¿ÀSí∂ <ÄÜÄ§Ä•Ä¡Ä„Ä‰ÅÅ7Å^Å_Å{ÅëÅ™Å≈ÅÊÇÇÇ8ÇRÇgÇÅÇÇÇöÇ≤Ç≥ÇŸÉoÉ≤ÉËÑÑÑJÑMÑèÑ◊Ñ˝ÖGÖHÖåÖ´Ö⁄ÖÏÜÜ(ÜCÜYÜrÜxÜ|Ü}ÜïÜµÜ“ÜÓááá$á(á)á5áñáπá€áÓáÙà à4à:à^à~à°à•à¶à≤ââEâFâRâÅâÉâÑâµâÍäää&äwäyäzäÀä˝ãã6ãYãsãìã™ãÀãËå
å-åMåNåyåõå√å‡çççBçlçmç—ç“çﬁééMé}éÆé‘éÎè7èGèlèîèùè£è§èªè…è€èˆêê<ê`êgêkêlêxêØêËëëRëyëöë–ë‘ë’ë·íííí_í™íÛììCì^ìxìèìØìÃìÍîîîî+îHîpîâî£îºîΩî…ïïïïjï∞ï±ïŸññ6ñXñÇñ¶ñßñ≥ñ»ñﬂóó1ó]ópówóûóƒó◊óﬁòò!òAòpòwòòò¥òŒò’ò¸ô!ô=ôDôöôûôüô´ôæôŸô˛öööö$öYöö¨öœöõõõ'õ=õRõXõçõÂõÎú ú?úhúwú†ú®úÆú≤ú≥úøúÊú˛ù,ù\ùxùéùØùªùÊùˇû*ûCûvûõû∆ûÔû¯ûˇüüüüBügüéü†ü ü⁄üˇ† †††^†_†y†ú†¬†◊†ı°°5°B°m°s°w°x°Ñ°´°¡¢¢¢¢"¢$¢%¢g¢¶¢ÿ£££/£D£Z£s£É£ó£¨£ƒ£ £À£È§§%§B§Y§t§ì§Ø§∞§º§ˆ§¯§˘•S•õ•‘¶¶¶.¶A¶S¶T¶û¶ü¶´¶¿¶◊¶˛ß$ß7ß>ßSßqßêßºß‹ß‚®®®®®2®M®b®f®g®Ä®í®¿®»®Ã®Õ®Ÿ©©$©%©P©É©∏©‡™™B™C™ê™È´]´^´Æ´‰¨¨#¨M¨o¨é¨ù¨º¨ƒ¨ ¨Œ¨œ¨È≠≠&≠=≠Z≠•≠∫≠ÿ≠˝Æ$ÆOÆzÆÖÆéÆïÆôÆöÆ≥ÆÒØØØ;ØYØØ•Ø“Ø∞∞?∞^∞Ñ∞≠∞⁄±±±±'±.±2±3±?±f±â±û±≈±Ó±˝≤≤+≤3≤9≤:≤]≤s≤ä≤±≤¿≤◊≤Ì≤ı≤˚≤¸≥$≥@≥F≥G≥~≥õ≥°≥¢≥∑≥À≥Á¥¥P¥l¥y¥í¥ù¥¶¥¨¥≠¥“¥Êµµµ6µXµsµÄµãµîµöµõµ≠µ±µ≥µ¥µÍµÓµ¸∂ ∂N∂ç∂ÿ∂Ò∑∑W∑`∑¶∑Æ∑„∑Ì∑Ô∑∏7∏M∏Q∏_∏c∏≥∏ÚπAπPπ[πzπ«π»∫∫∫∫d∫j∫µ∫ªªªUªõªÈªÍªˆººº&ºIºkº~ºÑº∞ºƒº ºıΩΩΩΩ@ΩUΩÇΩàΩúΩ Ω–ææææ"æIæKæLæÜæùæ•æÆæ∑æøæ…æ”æ·æÔæ˛ø	øøøøTø_øsøâø´ø øÒ¿ @¿ @D¿ @^¿ @{¿ @°¿ @º¿ @›¿ @Ï¿ @¸¿ A¿ A¿ A,¿ A=¿ AR¿ Ag¿ A}¿ Aè¿ A£¿ A©¿ A™¿ A’¿ AÔ¿ B¿ B9¿ Bp¿ Bå¿ BØ¿ B–¿ BÁ¿ C¿ C"¿ C9¿ CP¿ Cf¿ C~¿ Cñ¿ C≤¿ CŒ¿ CÎ¿ D¿ D¿ D ¿ D,¿ DO¿ Dq¿ DÑ¿ Dä¿ D∂¿ D ¿ D–¿ D¿ E"¿ EN¿ Eä¿ E ¿ F¿ F.¿ FV¿ Fê¿ F¥¿ F‰¿ G¿ G"¿ GB¿ G`¿ GÇ¿ G§¿ GŒ¿ G¯¿ H$¿ HH¿ Hq¿ Hu¿ Hv¿ HÇ¿ H•¿ Hπ¿ H“¿ HÌ¿ I	¿ I¿ I$¿ I<¿ II¿ I\¿ If¿ Iq¿ I|¿ IÜ¿ Ií¿ Iû¿ IÆ¿ Iæ¿ Iœ¿ I‹¿ IÎ¿ I¿ IÚ¿ IÛ¿ J?¿ Já¿ Jø¿ Jﬂ¿ K¿ K"¿ Kd¿ K¶¿ K…¿ KÏ¿ L¿ L¿ L¿ LC¿ La¿ LÅ¿ Lπ¿ LŸ¿ L˜¿ L˘¿ L˙¿ M@¿ MØ¿ M≈¿ MÍ¿ N¿ N<¿ NY¿ Nt¿ Në¿ Nª¿ N‹¿ O¿ O(¿ OW¿ Ov¿ Oë¿ O∞¿ O±¿ OŸ¿ O⁄¿ P¿ PV¿ Pï¿ P“¿ Q¿ QT¿ Qù¿ QÊ¿ R1¿ Rt¿ Rª¿ Rº¿ RÔ¿ R˚¿ S ¿ S8¿ SP¿ S_¿ Sx¿ Sà¿ S¶¿ Sª¿ SŸ¿ SÓ¿ T¿ T¿ T3¿ TD¿ T]¿ Tm¿ TÖ¿ Tî¿ T≥¿ T…¿ T‰¿ Tˆ¿ U¿ U'¿ U.¿ U2¿ U3¿ U`¿ U{¿ U°¿ U¡¿ Uœ¿ U’¿ UÓ¿ V¿ V	¿ V
¿ V?¿ V_¿ Vä¿ V≠¿ Vª¿ V¡¿ V›¿ VÙ¿ V¯¿ V˘¿ W+¿ WI¿ Wr¿ Wî¿ W¢¿ W®¿ W√¿ W⁄¿ Wﬁ¿ Wﬂ¿ X&¿ XG¿ Xf¿ Xƒ¿ XÌ¿ Y!¿ YH¿ YV¿ Y\¿ Y°¿ YÌ¿ Z¿ Z¿ Z#¿ ZC¿ ZZ¿ Z^¿ Z_¿ ZÉ¿ Zñ¿ Z¥¿ Z”¿ Z·¿ ZÁ¿ Zˇ¿ [¿ [#¿ [$¿ [D¿ []¿ [y¿ [ñ¿ [§¿ [™¿ [¿¿ [◊¿ [€¿ [‹¿ \ ¿ \¿ \9¿ \X¿ \f¿ \l¿ \Ñ¿ \õ¿ \ü¿ \†¿ \Ô¿ \¸¿ ]¿ ]^¿ ]b¿ ]c¿ ]o¿ ]Ø¿ ]«¿ ]›¿ ]„¿ ]˝¿ ^¿ ^¿ ^9¿ ^U¿ ^[¿ ^\¿ ^u¿ ^å¿ ^í¿ ^™¿ ^¡¿ ^Ÿ¿ ^˚¿ _¿ _¿ _!¿ _"¿ _;¿ _R¿ _X¿ _v¿ _í¿ _ò¿ _≤¿ _ ¿ _–¿ _Ì¿ `¿ `¿ `-¿ `J¿ `P¿ `k¿ `Ñ¿ `ä¿ `é¿ `è¿ `õ¿ `æ¿ `ø¿ `˙¿ a;¿ a?¿ a@¿ a{¿ aº¿ a¿¿ a¡¿ a¸¿ b=¿ bA¿ bB¿ bê¿ bë¿ bÎ¿ bÏ¿ c8¿ c9¿ cx¿ cæ¿ c’¿ cÁ¿ cÌ¿ d ¿ dr¿ d√¿ e¿ e_¿ e∞¿ e…¿ f¿ f¿ f+¿ fF¿ f[¿ fc¿ fô¿ f¯¿ g¿ g\¿ gã¿ gñ¿ g†¿ g™¿ gø¿ g√¿ gƒ¿ h¿ h_¿ h£¿ hÈ¿ hı¿ i)¿ iw¿ iö¿ iÁ¿ j6¿ jÑ¿ jÕ¿ jÚ¿ j˘¿ j˙¿ k:¿ kÑ¿ k ¿ kÀ¿ l ¿ l@¿ lâ¿ l…¿ l–¿ m"¿ mt¿ m¡¿ n¿ n"¿ nj¿ n≤¿ n≥¿ n€¿ nÊ¿ o¿ o"¿ oô¿ oæ¿ oﬂ¿ p ¿ p%¿ pû¿ p•¿ pÔ¿ qa¿ qö¿ q¡¿ r¿ r$¿ rL¿ rW¿ rv¿ rì¿ r±¿ r÷¿ r¿ s¿ s¿ sC¿ sP¿ sö¿ s°¿ sÀ¿ s◊¿ t"¿ t)¿ ts¿ tt¿ tΩ¿ tÊ¿ u¿ u*¿ uM¿ u•¿ uÆ¿ uµ¿ u∂¿ v¿ v1¿ v^¿ vh¿ vê¿ v…¿ w¿ w¿ wH¿ wR¿ wÄ¿ wΩ¿ wÊ¿ x¿ x(¿ xW¿ xÅ¿ xñ¿ xØ¿ x∂¿ y¿ y/¿ y<¿ yj¿ yÆ¿ y˚¿ z¿ z,¿ zJ¿ zS¿ zZ¿ z[¿ zù¿ z”¿ {¿ {Y¿ {å¿ {©¿ {≈¿ {Ã¿ {Õ¿ |¿ |-¿ |g¿ |°¿ |»¿ |Ê¿ }¿ }¿ }\¿ }ä¿ }∑¿ }‰¿ }Î¿ ~7¿ ~]¿ ~î¿ ~ø¿ ~»¿ ¿ ¿ ¿ I¿ ã¿ Õ¿ Ä¿ ÄG¿ Ä\¿ Äl¿ Äá¿ Äù¿ Ä±¿ Ä«¿ ÄÂ¿ Äˇ¿ Å¿ Åe¿ Åq¿ Åì¿ ÅÒ¿ Ç¿ Ç7¿ Çä¿ Çã¿ Ç◊¿ É¿ ÉQ¿ ÉÑ¿ Éë¿ Éí¿ É·¿ Ñ2¿ Ñ{¿ Ñ»¿ Ö¿ ÖN¿ Öú¿ ÖÌ¿ Ü<¿ Üg¿ Ü«¿ Ü»¿ á¿ áM¿ á_¿ á}¿ áò¿ á∂¿ á÷¿ àD¿ àî¿ à›¿ â5¿ âÇ¿ âÉ¿ â‘¿ â€¿ ä¿ äb¿ äõ¿ äŸ¿ ä‡¿ ã)¿ ãv¿ ãµ¿ ãÙ¿ å¿ åL¿ åÑ¿ å”¿ ç	¿ ç#¿ ç@¿ ç]¿ çv¿ ç}¿ ç~¿ çƒ¿ çÎ¿ é¿ é6¿ éZ¿ éu¿ éî¿ é‘¿ è¿ è¿ è7¿ èU¿ èô¿ è»¿ èŒ¿ è˚¿ ê¿ ê6¿ ê=¿ êh¿ êÑ¿ êü¿ ê¶¿ êß¿ êÀ¿ êÔ¿ ë¿ ë;¿ ëc¿ ëã¿ ëØ¿ ë∂¿ ë∫¿ ëª¿ í	¿ íZ¿ í©¿ íÛ¿ ìC¿ ìî¿ ì¢¿ î¿ î1¿ îÅ¿ î∆¿ î„¿ î˙¿ ï¿ ïS¿ ïd¿ ïî¿ ïø¿ ï≈¿ ï∆¿ ïﬂ¿ ïÙ¿ ï˙¿ ñK¿ ñW¿ ñÅ¿ ñ©¿ ñ≠¿ ñÆ¿ ñ∫¿ ñÌ¿ ó¿ óá¿ ó≠¿ óœ¿ ò¿ ò5¿ ò[¿ ò”¿ ò◊¿ òÿ¿ ò‰¿ ô¿ ô:¿ ô±¿ ô◊¿ ô˘¿ ö=¿ ö_¿ öÖ¿ ö˝¿ õ¿ õ¿ õ?¿ õX¿ õÇ¿ õõ¿ õ≠¿ õµ¿ õÓ¿ õÙ¿ ú¿ úT¿ úÖ¿ ú¿¿ úƒ¿ ú≈¿ ú—¿ ù¿ ù;¿ ùu¿ ùv¿ ù§¿ ù•¿ ùË¿ û4¿ û5¿ ûx¿ ûƒ¿ û≈¿ ü¿ ü¿ üA¿ üÑ¿ üÖ¿ ü◊¿ †0¿ †w¿ †ñ¿ †π¿ †ø¿ †¿¿ †˚¿ °;¿ °<¿ °w¿ °∑¿ °∏¿ ¢5¿ ¢ë¿ ¢˜¿ ¢¯¿ £F¿ £z¿ £π¿ £–¿ £Ó¿ §¿ §Ö¿ § ¿ §÷¿ §¯¿ •B¿ •F¿ •G¿ •S¿ •Ü¿ •≥¿ •∑¿ •∏¿ •ƒ¿ ¶¿ ¶o¿ ¶s¿ ¶t¿ ¶û¿ ¶∫¿ ¶ª¿ ¶«¿ ¶˝¿ ß%¿ ßÜ¿ ßé¿ ß§¿ ß®¿ ß©¿ ® ¿ ®ã¿ ®ø¿ ®Û¿ ©8¿ ©ç¿ ©∆¿ ©Ò¿ ™M¿ ™Ü¿ ™±¿ ™¿¿ ™Ï¿ ™Ù¿ ™˙¿ ´¿ ´W¿ ´]¿ ´Å¿ ´∫¿ ´¿¿ ´‹¿ ´‡¿ ´·¿ ´Ì¿ ¨4¿ ¨É¿ ¨á¿ ¨à¿ ¨î¿ ¨≠¿ ¨Ê¿ ≠¿ ≠C¿ ≠D¿ ≠z¿ ≠ ¿ ≠À¿ ≠¸¿ Æ¿ Æd¿ Æå¿ Æ¿¿ Æ…¿ Ø¿ Ø#¿ ØB¿ Øb¿ Øu¿ Øï¿ Øπ¿ Ø¬¿ Ø˚¿ ∞¿ ∞¿ ∞¿ ∞M¿ ∞ù¿ ∞∫¿ ∞¿¿ ∞¡¿ ∞€¿ ±¿ ±e¿ ±Ç¿ ±à¿ ±â¿ ±∂¿ ±Ù¿ ±ı¿ ≤¿ ≤l¿ ≤m¿ ≤Ö¿ ≤õ¿ ≤∫¿ ≤⁄¿ ≥	¿ ≥)¿ ≥<¿ ≥E¿ ≥c¿ ≥i¿ ≥j¿ ≥á¿ ≥ß¿ ≥‹¿ ≥˜¿ ¥¿ ¥B¿ ¥ê¿ ¥ö¿ ¥∑¿ ¥Ê¿ µ%¿ µ8¿ µu¿ µÅ¿ µã¿ µ©¿ µÒ¿ µ˚¿ ∂¿ ∂U¿ ∂_¿ ∂{¿ ∂∂¿ ∂¿¿ ∂‚¿ ∑¿ ∑9¿ ∑C¿ ∑a¿ ∑ê¿ ∑ö¿ ∑©¿ ∑±¿ ∑—¿ ∏¿ ∏!¿ ∏C¿ ∏k¿ ∏†¿ ∏™¿ ∏«¿ ∏ˆ¿ π!¿ π4¿ π]¿ πi¿ πs¿ πë¿ πƒ¿ πŒ¿ πÎ¿ ∫¿ ∫¿ ∫:¿ ∫b¿ ∫l¿ ∫é¿ ∫µ¿ ∫ˇ¿ ª	¿ ª'¿ ªk¿ ªu¿ ªÑ¿ ªå¿ ªí¿ ªì¿ ª≈¿ ªÍ¿ º¿ º¿ º3¿ ºS¿ ºx¿ º⁄¿ ºÊ¿ Ω¿ Ω3¿ Ω?¿ Ω_¿ ΩÑ¿ ΩÀ¿ Ω◊¿ Ω¯¿ æ;¿ æG¿ æO¿ æU¿ æV¿ æo¿ æ≠¿ æÔ¿ ø9¿ øÑ¿ ø√¿ ¿¿ ¿!¿ ¿A¿ ¿l¿ ¿≤¿ ¡¿ ¡¿ ¡y¿ ¡π¿ ¡“¿ ¡”¿ ¡Û¿ ¬D¿ ¬ï¿ ¬È¿ √¿ √Z¿ √±¿ √Ω¿ ƒ#¿ ƒc¿ ƒ|¿ ƒÑ¿ ƒœ¿ ƒ‹¿ ≈¿ ≈.¿ ≈4¿ ≈5¿ ≈z¿ ≈æ¿ ∆¿ ∆	¿ ∆
¿ ∆G¿ ∆o¿ ∆s¿ ∆t¿ ∆Ä¿ ∆∑¿ ∆‹¿ ∆˜¿ «A¿ «I¿ «O¿ «g¿ «h¿ «Å¿ «¡¿ «˙¿ »1¿ »s¿ »Ω¿ »˝¿ …C¿ …|¿ …«¿ …Ô¿  /¿  Å¿  ∫¿ À?¿ ÀÇ¿ ÀÕ¿ Ã¿ Ã&¿ Ã@¿ Ã_¿ Ãô¿ ÃŸ¿ Ã˘¿ ÕR¿ Õ±¿ ÕΩ¿ ÕÛ¿ Œ¿ Œ6¿ Œè¿ ŒÔ¿ Œ˚¿ œ¿ œX¿ œì¿ œ‹¿ –¿ –4¿ –L¿ –q¿ –ã¿ –õ¿ –µ¿ – ¿ –ˆ¿ –ˇ¿ —¿ — ¿ —&¿ —'¿ —:¿ —O¿ —d¿ —}¿ —ñ¿ —©¿ —Ω¿ —◊¿ —Ì¿ —Ò¿ —Ú¿ —˛¿ “+¿ “,¿ “8¿ “à¿ “∂¿ “ˇ¿ ”9¿ ”m¿ ”Ö¿ ”°¿ ”‚¿ ‘¿ ‘U¿ ‘`¿ ‘i¿ ‘|¿ ‘ë¿ ‘ô¿ ‘ü¿ ‘±¿ ‘µ¿ ‘∂¿ ‘¬¿ ’¿ ’;¿ ’{¿ ’ã¿ ’∞¿ ’Á¿ ’Ì¿ ÷¿ ÷"¿ ÷$¿ ÷%¿ ÷Ä¿ ÷ï¿ ÷∫¿ ÷ÿ¿ ÷˘¿ ◊¿ ◊6¿ ◊Q¿ ◊W¿ ◊X¿ ◊x¿ ◊ù¿ ◊¿¿ ◊Ó¿ ÿ¿ ÿ¿ ÿ¿ ÿ)¿ ÿj¿ ÿk¿ ÿw¿ ÿ¶¿ ÿ∫¿ ÿ€¿ ÿ˚¿ Ÿ¿ Ÿ>¿ Ÿ`¿ ŸÅ¿ Ÿ¢¿ Ÿ¬¿ ŸÂ¿ ⁄¿ ⁄*¿ ⁄L¿ ⁄s¿ ⁄ô¿ ⁄¿¿ ⁄Ê¿ €¿ €5¿ €Y¿ €|¿ €¢¿ €«¿ €Õ¿ €—¿ €“¿ €ﬁ¿ ‹¿ ‹;¿ ‹Y¿ ‹}¿ ‹ü¿ ‹À¿ ‹Á¿ ‹ˇ¿ ›0¿ ›7¿ ›;¿ ›<¿ ›H¿ ›ö¿ ›´¿ › ¿ ›„¿ ﬁ ¿ ﬁ-¿ ﬁP¿ ﬁv¿ ﬁz¿ ﬁ|¿ ﬁ}¿ ﬁ®¿ ﬁΩ¿ ﬁ‡¿ ﬁÔ¿ ﬁˇ¿ ﬂ¿ ﬂ*¿ ﬂJ¿ ﬂP¿ ﬂQ¿ ﬂo¿ ﬂÖ¿ ﬂü¿ ﬂ∂¿ ﬂ‚¿ ‡¿ ‡¿ ‡¿ ‡9¿ ‡\¿ ‡p¿ ‡é¿ ‡∂¿ ‡ÿ¿ ·¿ · ¿ ·E¿ ·m¿ ·∫¿ ·≈¿ ·Œ¿ ·’¿ ·Ÿ¿ ·€¿ ·‹¿ ‚¿ ‚¿ ‚h¿ ‚∑¿ „¿ „M¿ „Q¿ „ò¿ „ú¿ „Î¿ ‰¿ ‰!¿ ‰r¿ ‰Ω¿ ‰Ÿ¿ ‰›¿ ‰Î¿ ‰Ô¿ Â7¿ Âr¿ Âº¿ ÂŸ¿ Ê¿ ÊI¿ Êb¿ Êh¿ Êπ¿ Ê»¿ Ê·¿ Ê¿ Á¿ Á"¿ Á6¿ ÁR¿ Án¿ Áã¿ Á•¿ Áø¿ Áœ¿ Á’¿ Á÷¿ Ë¿ Ë¿ Ëg¿ Ëõ¿ Ëø¿ Ë¿¿ È¿ ÈH¿ ÈN¿ Èñ¿ È»¿ ÈŒ¿ Í¿ ÍE¿ Íc¿ Íd¿ Í©¿ Í«¿ Í»¿ Î¿ Î=¿ ÎC¿ Îê¿ Î·¿ Ï/¿ ÏÄ¿ Ïœ¿ Ì¿ Ìh¿ Ìá¿ Ìú¿ Ì ¿ ÌÀ¿ ÌÙ¿ Ì˙¿ ÓJ¿ ÓX¿ Ó^¿ Ów¿ Ó}¿ Óç¿ Óì¿ Óﬂ¿ Ô0¿ Ô@¿ ÔX¿ ÔY¿ Ô°¿ Ôß¿ ÔÊ¿ /¿ e¿ k¿ Ñ¿ ù¿ û¿ È¿ Ô¿ Ò>¿ Òé¿ Òö¿ Ò†¿ ÒÏ¿ Ú;¿ Úx¿ Ú~¿ Úó¿ Ú≠¿ ÚÆ¿ Ú÷¿ Ú‹¿ Û,¿ Û8¿ Û>¿ ÛW¿ Ûm¿ Ûn¿ Ûû¿ Û§¿ ÛÁ¿ Û˛¿ Ûˇ¿ ÙK¿ Ùk¿ Ùq¿ Ù¥¿ ı¿ ı¿ ı¿ ıT¿ ıU¿ ıü¿ ıÌ¿ ˆ9¿ ˆ~¿ ˆ£¿ ˆ©¿ ˆÊ¿ ˜¿ ˜Å¿ ˜ü¿ ˜£¿ ˜§¿ ˜∞¿ ˜ı¿ ¯ ¿ ¯t¿ ¯‘¿ ˘¿ ˘s¿ ˘∂¿ ˘∫¿ ˘º¿ ˘Ω¿ ˙¿ ˙Q¿ ˙â¿ ˙√¿ ˙˚¿ ˚I¿ ˚ñ¿ ˚‰¿ ¸D¿ ¸§¿ ¸•¿ ¸±¿ ¸∆¿ ¸›¿ ¸ﬁ¿ ˝P¿ ˝¶¿ ˝–¿ ˝—¿ ˛¿ ˛+¿ ˛>¿ ˛q¿ ˛x¿ ˛±¿ ˛‡¿ ˇ¿ ˇ(¿ ˇW¿ ˇ^¿ ˇ_¿ ˇí¿ ˇ∏¿ ˇÀ¿ ˇ“¿ ˇ÷¿ ˇ◊¿ ˇ„¿ ¿ '¿ H¿ L¿ M¿ Y¿ l¿ î¿ ª¿ ’¿ Í¿ Ó¿ Ô¿¿¿U¿]¿a¿b¿ã¿¿¿B¿l¿æ¿ ¿&¿I¿ï¿ô¿ö¿¶¿”¿Û¿"¿E¿K¿L¿√¿ƒ¿¿?¿∏¿‰¿Û¿¿'¿-¿.¿b¿ù¿û¿ ¿¿4¿I¿O¿S¿T¿å¿π¿¿0¿U¿[¿p¿ö¿†¿µ¿·¿Á¿	¿	'¿	-¿	¿	ï¿
¿
[¿
a¿
z¿
~¿
¿
À¿¿;¿A¿i¿Ω¿√¿¿¿¿F¿¶¿«¿Õ¿4¿8¿9¿Ö¿÷¿8¿Ü¿ä¿ã¿›¿3¿õ¿Ô¿Û¿Ù¿F¿ú¿¿X¿\¿]¿ô¿‚¿3¿D¿a¿â¿œ¿¿ ¿!¿a¿™¿´¿ı¿2¿â¿Ú¿Û¿V¿∫¿ª¿Á¿¿!¿5¿Q¿U¿V¿ü¿‹¿2¿ö¿õ¿˝¿`¿a¿ç¿¨¿«¿‹¿‡¿·¿:¿©¿Ê¿?¿E¿¨¿≠¿¿Ñ¿Ö¿±¿–¿Î¿
¿¿#¿$¿v¿«¿¿!¿"¿s¿√¿Ë¿Ï¿Ì¿¿2¿i¿ï¿¬¿Ï¿Û¿˜¿¯¿˘¿O¿±¿ÿ¿Ÿ¿ ¿ 1¿ 7¿ 8¿ h¿ }¿ É¿ Ñ¿ ¶¿ ∆¿ Ê¿!L¿!W¿!f¿!Ü¿!‰¿!Ô¿!˜¿!˝¿"¿"%¿"E¿"{¿"é¿"„¿#¿#H¿#Z¿#¿#ä¿#ì¿#ô¿#ù¿#û¿#™¿#—¿$¿$.¿$ü¿$†¿$Ï¿%,¿%-¿%w¿%©¿%Ì¿&'¿&t¿&î¿&ß¿&π¿&”¿'¿'G¿'e¿'ê¿'ô¿'†¿'°¿'∫¿'Ÿ¿((¿(D¿(ô¿(¶¿(Ù¿(˙¿)1¿)2¿)a¿)w¿)é¿)ª¿)¿*¿*;¿*B¿*C¿*®¿*◊¿*ı¿+¿+?¿+n¿+ó¿+¿¿+‰¿,¿,K¿,e¿,ê¿,≥¿,‡¿-¿-¿-¿-#¿-*¿-+¿-Ç¿-Ÿ¿-⁄¿-¸¿.I¿.W¿.Ê¿.Á¿/¿/ ¿/X¿/¿/Â¿0>¿0l¿0ê¿0ö¿0®¿0©¿0Œ¿0‚¿1¿1A¿1ß¿2 ¿2.¿2R¿2\¿2j¿2k¿2ü¿2∏¿2‰¿2˙¿3¿3	¿3
¿3J¿3á¿3à¿3¬¿3’¿3ˇ¿4¿4W¿4y¿4ö¿4”¿4Ò¿5 ¿5%¿52¿5=¿5F¿5G¿5ç¿5õ¿5µ¿5–¿5Ï¿6¿69¿6v¿6≤¿6ÿ¿7¿7E¿7X¿7i¿7ç¿7∞¿7Ò¿8¿8"¿8H¿8s¿8†¿8Ì¿9¿9(¿9;¿9]¿9ç¿9†¿9±¿9¿¿9Õ¿9ÿ¿9·¿9‚¿:(¿:6¿:P¿:k¿:á¿:≥¿:‘¿;¿;M¿;s¿;©¿;‡¿;Û¿<¿<*¿<O¿<í¿<¥¿<«¿<Ô¿=¿=K¿=ö¿=¬¿=Ÿ¿=Ó¿>¿>D¿>Y¿>l¿>}¿>å¿>ô¿>§¿>•¿>“¿>Ó¿?¿?P¿?Å¿?†¿?«¿?˛¿@-¿@4¿@5¿@J¿@p¿@î¿@Â¿A ¿A¿A8¿AM¿Ap¿Aˆ¿B!¿B[¿Bf¿Bo¿Bu¿Bv¿B≈¿BÌ¿C1¿Cï¿Cñ¿Cª¿C·¿D ¿D9¿DZ¿Dû¿D¬¿E¿Eâ¿E±¿E˘¿F5¿Fu¿FÑ¿F“¿G¿Gb¿G™¿G‰¿H"¿H*¿H7¿HX¿Hû¿H⁄¿I¿I¿I¿IL¿Ik¿Iì¿IÓ¿J ¿Jd¿J¢¿J∫¿JŸ¿K¿KB¿Kr¿KÜ¿Kú¿K≤¿K∆¿Kﬁ¿Kˆ¿L¿L6¿LX¿Lr¿Lè¿Lò¿Lº¿Lﬁ¿M¿M-¿ML¿MS¿MT¿M¬¿M·¿M˛¿N ¿N:¿NC¿NI¿N_¿Nc¿Ne¿Nf¿N¨¿N√¿N«¿O¿O[¿O®¿O¨¿O¿¿P¿P\¿P©¿P˙¿Q@¿QD¿Q†¿Q§¿Q¸¿R¿R¿R$¿Rj¿R∂¿R˙¿R˛¿Sd¿Sh¿S¿¿S–¿S‘¿SË¿T7¿TÅ¿T»¿TÃ¿U.¿U2¿Uä¿Uö¿Uû¿U≤¿U˚¿VL¿VÉ¿Vá¿VÒ¿Vı¿WM¿W]¿Wa¿Wu¿WÀ¿X¿XA¿XE¿X¨¿Xº¿X¿¿X‘¿Y*¿Y~¿Yø¿Y√¿Z*¿Z:¿Z>¿ZL¿ZP¿Zé¿Z®¿ZÛ¿[¿[d¿[Ç¿[ç¿[•¿[Ì¿\¿\ ¿\m¿\º¿]¿]*¿]0¿]n¿]t¿]Ω¿]◊¿]Ê¿]˙¿^
¿^¿^3¿^P¿^e¿^{¿^î¿^ß¿^ª¿^◊¿^Ó¿_	¿_¿_-¿_B¿_Z¿_z¿_õ¿_±¿_√¿_‹¿_Ò¿`¿`"¿`7¿`M¿`g¿`|¿`ç¿`¢¿`∏¿`“¿`Ú¿a¿a¿a1¿aB¿aV¿ak¿aÄ¿añ¿aÆ¿aÀ¿a‰¿a¸¿b¿b&¿bD¿ba¿bw¿bÂ¿cW¿c…¿d7¿d8¿dÑ¿dä¿d‘¿d⁄¿e	¿e-¿eI¿ei¿eä¿eû¿e∫¿e”¿eÁ¿e¸¿f¿f5¿fN¿fb¿f{¿fê¿f©¿f√¿fÂ¿fˇ¿g¿g8¿gT¿gt¿gâ¿g¢¿gº¿gŸ¿gÒ¿h¿h5¿hO¿he¿h¿hö¿hπ¿hﬁ¿hÙ¿i¿i(¿iC¿ib¿iá¿iû¿iπ¿i’¿i¿j¿j/¿jM¿jj¿jç¿j∞¿jÀ¿jÃ¿k¿k*¿k0¿kz¿k∆¿kŸ¿kﬂ¿l¿l¿li¿l≠¿lÎ¿m¿m¿m6¿mL¿mM¿ml¿mr¿mµ¿m˜¿n#¿n=¿n>¿nt¿nz¿n≥¿o ¿oM¿oö¿oÌ¿p=¿pT¿pi¿po¿p»¿q¿q ¿q6¿qá¿q◊¿q›¿r=¿rO¿rU¿rë¿r®¿r©¿r›¿r„¿s¿s¿sl¿s®¿s√¿sƒ¿t¿tR¿tl¿tr¿t∫¿u¿u-¿u3¿uÜ¿uÕ¿u”¿v ¿vK¿vQ¿vê¿v÷¿w¿w¿w3¿wÄ¿wß¿w≠¿x ¿xL¿x_¿xe¿x—¿x„¿x¯¿y¿y¿y^¿yß¿y„¿yÈ¿z6¿z`¿zf¿z∂¿z˝¿{)¿{/¿{X¿{^¿{ù¿{„¿|$¿|*¿|@¿|ç¿|¥¿|∫¿|˝¿}N¿}t¿}z¿}Ô¿~¿~¿~=¿~>¿~é¿~≥¿~π¿¿R¿Ö¿°¿¢¿œ¿’¿Ä¿Äe¿Äë¿Ä±¿Ä≤¿ÄÒ¿Ä˜¿ÅA¿Åv¿Å|¿Åæ¿Åı¿Å˚¿Ç¿Ç¿ÇS¿Çp¿Çq¿Ç∞¿Ç∂¿É¿ÉT¿É°¿Éº¿É÷¿É◊¿Ñ¿Ñ¿ÑO¿Ññ¿Ñ¬¿Ñ»¿Ö¿Ö^¿Öò¿Öû¿ÖÎ¿Ü¿Ü4¿Ü5¿Üd¿Üj¿Ü≥¿Üﬁ¿á¿á	¿áF¿áL¿áã¿áë¿á”¿à(¿àm¿àà¿àâ¿àœ¿à’¿â¿âd¿âà¿ââ¿â›¿â„¿ä<¿äB¿ä~¿äï¿äñ¿äﬂ¿äÂ¿ã3¿ãD¿ãJ¿ãî¿ã ¿ã–¿å¿å#¿å_¿åz¿å{¿åπ¿åı¿å˚¿çH¿çs¿çy¿ç∫¿é¿éQ¿éö¿é®¿éΩ¿é‹¿é›¿è¿è!¿èj¿èü¿è•¿èÁ¿ê¿ê#¿ê3¿ê9¿ê}¿êô¿êö¿ê„¿ë¿ë!¿ës¿ë¡¿ëÌ¿ëÛ¿íD¿íj¿íp¿í¬¿íÁ¿í¸¿ì¿ìL¿ìR¿ìb¿ìh¿ìµ¿ì”¿î	¿î
¿îT¿îî¿îö¿îÈ¿ï3¿ïÅ¿ïí¿ïò¿ïÈ¿ñ¿ñ¿ñ¿ñg¿ñm¿ñ}¿ñÉ¿ñ‘¿ñÂ¿ó¿ó¿óy¿óá¿óç¿ó¶¿óΩ¿óæ¿óˆ¿ó¸¿òB¿òH¿òï¿ò•¿ò´¿òˆ¿ò¸¿ôL¿ôô¿ôÍ¿ö;¿öâ¿ö’¿ö€¿õ&¿õi¿õ≤¿õﬁ¿õﬂ¿ú!¿ú'¿úu¿ú{¿ú ¿úÂ¿úÊ¿ù0¿ù~¿ùÑ¿ù’¿û!¿û4¿û:¿ûà¿û“¿ü!¿üq¿üº¿üœ¿ü’¿ü„¿ü˛¿†>¿†x¿†Ä¿†ä¿†ê¿†÷¿†‹¿°8¿°N¿°T¿°j¿°√¿°Û¿°˘¿¢_¿¢q¿¢w¿¢á¿¢ç¿¢÷¿£¿£T¿£ó¿£‰¿§¿§1¿§2¿§]¿§c¿§≥¿§π¿•¿•T¿•¢¿•Æ¿•¥¿• ¿¶¿¶g¿¶m¿¶¨¿¶Ÿ¿¶ﬂ¿ß*¿ß6¿ß<¿ßÆ¿ß¿¿ßÔ¿ß¿®-¿®3¿®¿®Õ¿©¿©(¿©.¿©l¿©r¿©º¿©¬¿©“¿©ÿ¿™¿™,¿™-¿™o¿™u¿™∆¿´	¿´¿´^¿´ú¿´¢¿´¿´ˆ¿¨¿¨¿¨L¿¨h¿¨i¿¨ñ¿¨ú¿¨Â¿≠,¿≠X¿≠^¿≠ä¿≠ê¿≠†¿≠¶¿≠Á¿Æ¿Æ¿Æ/¿Æ5¿ÆS¿ÆY¿Æ¢¿Æ‰¿Ø¿Ø0¿Ø1¿Øz¿Ø«¿ØÕ¿∞¿∞j¿∞}¿∞É¿∞—¿±¿±j¿±µ¿≤¿≤¿≤!¿≤/¿≤J¿≤à¿≤¡¿≤…¿≤”¿≤Ÿ¿≥%¿≥i¿≥ß¿≥Õ¿≥”¿¥/¿¥E¿¥K¿¥a¿¥∫¿¥Í¿¥¿µV¿µh¿µn¿µ~¿µÑ¿µÕ¿∂¿∂K¿∂ç¿∂⁄¿∑¿∑'¿∑(¿∑d¿∑j¿∑∫¿∏¿∏W¿∏]¿∏õ¿∏°¿∏Ï¿∏Ú¿π¿π¿πC¿π[¿π\¿πù¿π£¿πÙ¿∫7¿∫=¿∫å¿∫ ¿∫–¿ª¿ª%¿ª5¿ª;¿ªz¿ªñ¿ªó¿ªƒ¿ª ¿º¿ºa¿ºÜ¿ºå¿º∏¿ºæ¿ºŒ¿º‘¿Ω¿Ω4¿Ω5¿Ω_¿Ωe¿ΩÉ¿Ωâ¿Ω“¿æ¿æ@¿æ`¿æa¿æå¿æí¿æ‚¿æË¿ø7¿øÉ¿ø—¿ø›¿ø„¿¿0¿¿<¿¿B¿¿X¿¿¶¿¿ı¿¿˚¿¡:¿¡g¿¡m¿¡∏¿¡ƒ¿¡ ¿¬<¿¬N¿¬}¿¬~¿¬¿¿¬∆¿√¿√¿√%¿√t¿√z¿√«¿√Ù¿ƒ¿ƒ¿ƒ`¿ƒ©¿ƒ∏¿ƒ—¿ƒ“¿≈ ¿≈¿≈P¿≈ó¿≈√¿≈…¿≈˜¿∆¿∆¿∆^¿∆d¿∆µ¿∆÷¿∆‹¿«-¿«3¿«|¿«Õ¿»¿»j¿»¿»Ö¿»Æ¿»ƒ¿»≈¿…¿…
¿…[¿…|¿…Ç¿…ª¿…„¿…È¿ /¿ I¿ J¿ ö¿ †¿ ⁄¿À¿À	¿ÀW¿Àü¿À„¿Ã¿Ã#¿Ãi¿ÃÑ¿ÃÖ¿Ã–¿Ã¯¿Ã˛¿ÕJ¿Õr¿Õx¿Õ«¿Õ˙¿Œ ¿ŒC¿ŒI¿Œè¿Œ™¿Œ´¿Œ˝¿œ¿œ¿œ.¿œ4¿œá¿œü¿œ˚¿–N¿–£¿–„¿—+¿—n¿—®¿—Ù¿“&¿“w¿“≠¿“˙¿”,¿”w¿”©¿”À¿”Ã¿‘¿‘3¿‘9¿‘I¿‘O¿‘¢¿‘∫¿’¿’i¿’æ¿’˛¿÷F¿÷â¿÷√¿◊¿◊D¿◊ï¿◊À¿ÿ¿ÿJ¿ÿï¿ÿ«¿ÿÎ¿ÿÏ¿Ÿ7¿ŸO¿ŸU¿Ÿe¿Ÿk¿Ÿæ¿Ÿ÷¿⁄2¿⁄Ö¿⁄⁄¿€¿€b¿€•¿€ﬂ¿‹*¿‹`¿‹¨¿‹ﬁ¿›+¿›]¿›®¿›⁄¿ﬁ¿ﬁ¿ﬁQ¿ﬁi¿ﬁo¿ﬁ¿ﬁÖ¿ﬁ›¿ﬂ9¿ﬂå¿ﬂ·¿‡!¿‡i¿‡¨¿‡Ê¿·1¿·g¿·≥¿·Â¿‚6¿‚l¿‚∑¿‚È¿„¿„¿„[¿„s¿„y¿„â¿„è¿„Á¿‰C¿‰ñ¿‰Î¿Â+¿Âs¿Â∂¿Â¿Ê;¿Êq¿ÊΩ¿ÊÔ¿Á@¿Áv¿Á√¿Áı¿Ë¿Ë¿Ëc¿Ëi¿Ë§¿Ë¯¿ÈL¿ÈR¿È¶¿È˜¿ÍI¿Íó¿Íﬂ¿ÍÂ¿Î1¿Îu¿Îµ¿Î˙¿Ï¿Ï%¿Ïr¿Ïè¿Ïï¿Ï·¿Ì3¿Ì~¿Ì¡¿Ìˇ¿Ó9¿Ó?¿ÓÜ¿Ó—¿Ó◊¿ÓÁ¿ÓÌ¿Ô'¿Ôm¿Ô°¿ÔÈ¿,¿I¿J¿ò¿€¿·¿Ò	¿Ò¿Ò ¿ÒN¿ÒT¿Òl¿Òr¿Òº¿Ò·¿Ò‚¿Ú-¿Ú}¿Ú∆¿ÚÃ¿ÚÂ¿Û¿Û¿ÛJ¿ÛP¿Ûû¿ÛÍ¿Ù1¿Ù|¿Ùâ¿Ùè¿Ù“¿ı¿ıU¿ıÄ¿ı•¿ı¶¿ıÛ¿ˆ¿ˆ)¿ˆ;¿ˆQ¿ˆd¿ˆ{¿ˆñ¿ˆπ¿ˆ—¿ˆÌ¿˜¿˜¿˜6¿˜\¿˜|¿˜ì¿˜¶¿˜Ω¿˜ÿ¿˜¿¯"¿¯V¿¯m¿¯Ä¿¯®¿¯¿¿¯‘¿¯Ï¿˘¿˘3¿˘O¿˘g¿˘{¿˘ì¿˘Ø¿˘À¿˘ˆ¿˙¿˙$¿˙A¿˙S¿˙i¿˙Ä¿˙ó¿˙µ¿˙’¿˙˙¿˚¿˚;¿˚T¿˚g¿˚à¿˚¶¿˚«¿˚Œ¿˚Í¿¸	¿¸7¿¸Y¿¸á¿¸∏¿˝¿˝2¿˝f¿˝§¿˝œ¿˝˝¿˛C¿˛z¿˛Ω¿˛ﬂ¿ˇ¿ˇ>¿ˇx¿ˇ ¿ ¿ S¿ {¿ ∏¿ È¿¿?¿s¿≥¿¿6¿[¿å¿¿¿ ¿R¿z¿Æ¿Â¿
¿8¿i¿ö¿Œ¿¿Q¿é¿»¿Ì¿¿a¿™¿ﬁ¿Â¿È¿Í¿6¿z¿Ä¿À¿˚¿9¿N¿Ä¿ ¿ˇ¿	>¿	m¿	±¿	„¿
¿
q¿
«¿
¿.¿c¿í¿«¿¿=¿~¿∂¿‹¿¿=¿o¿§¿ﬂ¿)¿g¿¢¿»¿¿G¿N¿R¿S¿_¿Ç¿§¿∑¿Ω¿È¿˝¿¿'¿E¿m¿ç¿µ¿ﬂ¿¿C¿o¿°¿«¿Ô¿'¿U¿ã¿´¿”¿˝¿-¿m¿Ø¿”¿¿1¿[¿è¿±¿€¿¿G¿q¿•¿«¿Ò¿¿]¿Å¿≠¿€¿˝¿%¿O¿y¿•¿’¿¿A¿q¿ì¿∑¿Û¿-¿Z¿^¿_¿k¿Ä¿¨¿∏¿…¿÷¿Á¿¿¿%¿8¿N¿^¿o¿à¿ú¿¥¿¡¿“¿‰¿˘¿¿4¿C¿Y¿l¿z¿ã¿ù¿Ø¿¡¿ÿ¿Ê¿¯¿¿(¿:¿Q¿_¿q¿Ñ¿°¿∞¿√¿◊¿Í¿ˇ¿¿/¿D¿R¿a¿|¿ñ¿©¿∞¿”¿◊¿ÿ¿‰¿˙¿)¿P¿Ü¿∞¿Ë¿;¿v¿Ω¿Ú¿ 3¿ Ä¿ ¨¿ ‰¿!¿!c¿!Ω¿"¿"K¿"ê¿"Õ¿#¿#N¿#{¿#¥¿#¿$J¿$É¿$À¿$¯¿%1¿%m¿%«¿%˜¿&3¿&r¿&ù¿&”¿'¿'E¿'Å¿'√¿(¿(Y¿(õ¿(»¿(Ó¿)B¿)ì¿)œ¿)÷¿*¿*¿*¿*¿*O¿*S¿*£¿*Í¿+6¿+F¿+J¿+î¿+À¿+÷¿,¿,G¿,z¿,ô¿,Æ¿,À¿,·¿,˙¿-¿-)¿->¿-V¿-ì¿-”¿-Ì¿.¿.$¿.8¿.N¿.h¿.~¿.ò¿.Ø¿.»¿.‹¿.¸¿/¿/)¿/>¿/T¿/l¿/â¿/¢¿/∫¿/À¿/¿0¿0¿0¿0H¿0g¿0h¿0´¿0“¿0”¿1¿1¿1[¿1¢¿1Œ¿1Ó¿1Ô¿2>¿2D¿2ì¿2”¿2Ÿ¿3¿3R¿3X¿3h¿3n¿3¿¿3›¿3ﬁ¿4¿4¿4f¿4≠¿4Ÿ¿4ﬂ¿5¿5l¿5º¿5 ¿5–¿6¿6H¿6f¿6g¿6Ω¿6·¿6‚¿7¿7<¿7=¿7ã¿7ë¿7‚¿8¿8%¿8g¿8ù¿8£¿8≥¿8π¿9¿9)¿9*¿9p¿9v¿9¶¿9€¿9‹¿:#¿:)¿:[¿:í¿:ì¿:·¿:˝¿;¿;¿;2¿;3¿;k¿;q¿;±¿;˜¿<<¿<|¿<¡¿<Ê¿<Ï¿=9¿={¿=î¿=¿¿=¡¿>¿>	¿>O¿>ê¿>™¿>´¿>‚¿>Ë¿?+¿?m¿?ô¿?ü¿?’¿?Ô¿?¿@-¿@3¿@|¿@√¿@Ô¿@ı¿A!¿AA¿AB¿A¿AÖ¿AŒ¿B¿B<¿BB¿Bx¿Bò¿Bô¿B÷¿B‹¿C%¿Cg¿Cì¿Cô¿C≈¿CÂ¿CÊ¿D#¿D)¿Dr¿D¥¿D‡¿DÊ¿E¿E<¿E=¿E{¿EÅ¿EÀ¿F¿F>¿FD¿Fr¿Fì¿Fî¿FŸ¿Fﬂ¿G¿G6¿G<¿GÇ¿G√¿GÌ¿GÛ¿H¿H1¿H2¿HÄ¿HÜ¿H∆¿HÃ¿I¿IS¿I}¿Ió¿Iò¿I‚¿J¿J¿JR¿J}¿J~¿JŒ¿K ¿K¿KI¿KO¿Kï¿K÷¿L ¿L¿L¿Ld¿Lü¿L•¿LË¿LÓ¿M4¿Mu¿Mü¿M•¿Mı¿N¿N¿Nc¿N~¿NÑ¿Nî¿Nö¿NÌ¿O¿Oa¿O¥¿P	¿PI¿Pë¿P‘¿Q¿QZ¿Qå¿Q›¿R¿R`¿Rí¿R›¿S¿S1¿S2¿SÅ¿Sô¿Sü¿SØ¿Sµ¿T¿T ¿T|¿Tœ¿U$¿Ud¿U¨¿UÔ¿V)¿Vt¿V™¿V˚¿W1¿W~¿W∞¿W˚¿X-¿XQ¿XR¿Xù¿Xµ¿Xª¿XÀ¿X—¿Y$¿Y<¿Yò¿YÎ¿Z@¿ZÄ¿Z»¿[¿[E¿[ê¿[∆¿\¿\D¿\ë¿\√¿]¿]@¿]i¿]j¿]∑¿]œ¿]’¿]Â¿]Î¿^C¿^ü¿^Ú¿_G¿_á¿_œ¿`¿`L¿`ó¿`Õ¿a¿aK¿aú¿a“¿b¿bO¿bt¿bu¿b¡¿bŸ¿bﬂ¿bÔ¿bı¿cM¿c©¿c¸¿dQ¿dë¿dŸ¿e¿eV¿e°¿e◊¿f#¿fU¿f¶¿f‹¿g)¿g[¿g¿gÄ¿g…¿gœ¿h
¿h^¿h≤¿h∏¿i¿iH¿ià¿iÕ¿iÚ¿i¯¿jE¿jb¿jh¿j¥¿k¿kQ¿kî¿k“¿l¿l¿lY¿l§¿l™¿l∫¿l¿¿l˙¿m@¿mt¿mº¿mˇ¿n¿n¿nh¿n∏¿o¿o"¿o#¿oe¿ok¿oπ¿p¿pL¿pó¿p§¿p™¿pÔ¿q¿q ¿q0¿q6¿qÑ¿qû¿q√¿qƒ¿r¿r&¿rH¿rc¿rÜ¿r¢¿rª¿r’¿rı¿s¿s(¿sZ¿sé¿s°¿s…¿s‡¿sˆ¿t¿t.¿tJ¿tf¿tÉ¿tï¿t´¿t“¿tÒ¿u¿u¿u=¿u]¿uÇ¿u£¿u√¿u‹¿u˙¿v¿v"¿vC¿vt¿vΩ¿vÒ¿w.¿w\¿wü¿w–¿x
¿x\¿x±¿xŸ¿y¿y2¿yf¿yö¿y⁄¿z¿zN¿zÖ¿z™¿zÿ¿{*¿{d¿{ï¿{∆¿{˙¿|4¿|}¿|∫¿|Ù¿}¿}b¿}ñ¿}ù¿}°¿}¢¿}Ò¿~A¿~e¿~k¿~√¿¿"¿v¿∆¿Ä¿Ä9¿ÄL¿ÄR¿Äg¿Ä®¿Å¿ÅE¿Åí¿Å–¿Ç#¿Çd¿ÇÆ¿Ç˚¿É9¿É}¿ÉÕ¿Ñ¿Ña¿Ñ®¿ÑÊ¿ÖH¿Öí¿Ö”¿Ü¿ÜX¿Ü¢¿Ü˚¿áH¿áí¿á«¿à¿à¿à¿à¿à#¿àF¿àV¿àn¿à¿àì¿à¢¿à≤¿à≈¿à‡¿à¸¿â	¿â¿â.¿â=¿âN¿âc¿ât¿ââ¿âõ¿âß¿â∏¿â…¿âÊ¿â˚¿ä¿ä¿ä2¿äG¿äa¿äw¿äå¿äö¿ä¥¿ä«¿äﬂ¿äÊ¿äÎ¿äÏ¿ä¯¿ã¿ã=¿ãP¿ãV¿ãÇ¿ãñ¿ãú¿ã≈¿ãÔ¿å)¿åU¿åá¿åØ¿åÂ¿ç¿ç?¿çc¿çï¿ç¡¿çÈ¿é¿éI¿éu¿é©¿é◊¿è¿èY¿è{¿è£¿è„¿ê¿ê=¿êg¿êì¿ê√¿ê˝¿ë/¿ë_¿ëÅ¿ëª¿ëÁ¿í¿í¿í¿í+¿íp¿íõ¿í·¿ìV¿ì„¿î[¿î…¿ï;¿ï¡¿ñ6¿ñ°¿óC¿óÈ¿òP¿ò⁄¿ôM¿ôª¿ö;¿ö≥¿õ3¿õ´¿ú&¿úä¿úÎ¿ùÇ¿û¿ûe¿û…¿üC¿ü»¿†W¿†⁄¿°Z¿°≈¿¢M¿¢ ¿¢Œ¿¢–¿¢—¿£¿£@¿£Q¿£R¿£p¿£q¿£}¿£‹¿§¿§O¿§U¿§è¿§ï¿§ñ¿§¢¿•¿•5¿•u¿•{¿•µ¿•ª¿•º¿•»¿¶0¿¶c¿¶£¿¶©¿¶Ÿ¿ß¿ß#¿ßU¿ßõ¿ß°¿ß€¿ß·¿ß‚¿ßÓ¿®O¿®Å¿®¥¿©¿©¿©¿©\¿©b¿©c¿©o¿©œ¿™¿™4¿™Ö¿™ã¿™„¿™È¿™Í¿™ˆ¿´M¿´Ä¿´û¿´Ω¿´Î¿¨	¿¨3¿¨R¿¨}¿¨Ö¿¨ã¿¨®¿¨≈¿¨Ò¿≠-¿≠j¿≠p¿≠v¿≠w¿≠É¿≠⁄¿Æ8¿Æf¿Æl¿Æû¿Æ“¿Æÿ¿Ø¿Ø ¿Ø?¿Ø\¿Ø{¿ØÅ¿Øá¿Øà¿Øî¿ØÒ¿∞O¿∞}¿∞É¿∞µ¿∞È¿∞Ô¿±¿±7¿±V¿±s¿±í¿±ò¿±û¿±ü¿±´¿≤¿≤f¿≤î¿≤ö¿≤Ã¿≥ ¿≥¿≥2¿≥N¿≥m¿≥ä¿≥©¿≥Ø¿≥µ¿≥∑¿≥∏¿≥Ì¿≥Ó¿¥1¿¥u¿¥ù¿¥–¿¥—¿µ¿µ;¿µJ¿µK¿µi¿µj¿µ¨¿µÌ¿µÓ¿µ˙¿∂Y¿∂å¿∂Ã¿∂“¿∑¿∑¿∑¿∑¿∑v¿∑©¿∑€¿∑·¿∏¿∏
¿∏¿∏¿∏Ñ¿∏∑¿∏¸¿π¿π2¿πf¿π¢¿π™¿πﬁ¿∫¿∫#¿∫R¿∫X¿∫ä¿∫Ω¿∫√¿∫ı¿ª2¿ª8¿ªp¿ªx¿ªy¿ªÖ¿ªÍ¿º¿ºb¿ºh¿ºò¿ºÃ¿Ω¿Ω¿ΩD¿ΩÅ¿Ωâ¿Ω∏¿Ωæ¿Ω¿æ#¿æ)¿æ[¿æò¿æû¿æÕ¿æ”¿æ‘¿æ‡¿ø¿ø¿ø!¿ø~¿ø£¿ø©¿ø™¿ø∂¿¿¿¿F¿¿x¿¿~¿¿Æ¿¿ ¿¿–¿¿ı¿¿˚¿¿¸¿¡¿¡h¿¡≥¿¡Ê¿¬3¿¬9¿¬i¿¬ù¿¬·¿¬È¿√¿√V¿√^¿√ï¿√õ¿√Õ¿ƒ¿ƒ¿ƒG¿ƒÄ¿ƒÜ¿ƒ∆¿ƒÃ¿ƒÕ¿ƒŸ¿≈A¿≈å¿≈ø¿∆¿∆¿∆B¿∆v¿∆∫¿∆¬¿∆ˆ¿«/¿«7¿«n¿«t¿«¶¿«Ë¿«Ó¿» ¿»Y¿»_¿»ü¿»•¿»¶¿»≤¿…¿…^¿…ë¿…ﬁ¿…‰¿ $¿ *¿ +¿ 7¿ ó¿ ‚¿À¿À¿À¿À ¿ÀS    Ä•Äº Ä¡ Ä“Ä·Ä‰  Å  Å7  Å_  Å{  Åë  Å™  Å≈  ÅÊ  Ç  Ç  Ç8  ÇR  Çg    Ö´É◊Ö±   Ö‹Ö‰  ÜÜÜ ÜêÖÓÖ˙    ÜnÜ  ÜÜ    ÜóÜ¢    Ü∑pÜª  Ü¬Ü    à®Äúâ   à®à©á+Åyá¶  á©á±  á+á,âH8â[   âHâI âµÄ√âª  âÏ, âÏâ˝ âˇä  ä	ä     äZä4  ä9äA  ää äÀáFä—  äˇÅM äˇã 	ãã.  ã:ãI  ã]ãl  ãwãÜ  ãóã¶  ãÆãΩ  ãœãﬁ  ãÏã˚  åå  å4å9åJåAå:åCåP'åh  å{åì  åù$åµ  å≈å€  å‚!åˆ  çç  ç  ç1  çD&ç\  çoaçy    ç‘ÇñçÂ  çÎçÛ  ç˙	é   ç‘ç’ênÅeê  êçê¢  ênêoë◊8ëÍ   ë◊ëÿ ìÅ˘ì  ìEÄ» ìKì[ ìbìq  ì|ìã  ììì¢  ì≥ì¬  ì–ìﬂ  ìÓì˝   îî#  î-îC  îJ$îb  îrî~  îãîó  î•î∞   îøKî·   îøî¿ ïâˆï   ïlBïÇ ïîïúï≠ï©ïùï´ï≥$ïÃ  ï€.ïÙ  ñ'ñ$  ñ8ñO  ñZ&ñq  ñÑ ñî   ñ©ÇÙñ∫   ñ©ñ™ô°uô≤   ô°ô¢öÇóö+  ö;öM  ööúµÇMú»  úŒú‹  úµú∂ ügÇºüm  üên üñüù ü§$ü¿  üŒ
ü‘  ü·üÊü¸üÒüÁüÛ††  †C†0    †aÅ†l    °zÄß°ç  °ì°°  °z°{ ¢ÿÇ¢ﬁ  £Ä√ ££ ££%  £3£9  £H£N  £^£d  £w
£}  £á£ç  £õ£°  £∞£∂   £Õ£ﬁ  £Î£˘  §§  §'§2  §D§R  §[§i  §v§á  §ï§†   §≤C§–   §≤§≥ §˘êπ§ˇ   •÷-•Í •Ú•˙•˚¶¶¶$¶!  ¶0¶8  ¶C¶K  ¶VG¶_    ¶°Åp¶≤   ¶°¶¢®P®&   ®®®ib®n    ®œÉ˛®‡  ®®˛  ®œ®–¨—Å«¨ÿ    ÆúÇïÆ£    ±5Ñ{±H  ±N±\  ±5±6 ∑ÜZπaÅ_/// Defines **where** the floating label should be displayed within an
/// [InputDecorator].
///
/// See also:
///
///  * [InputDecoration.floatingLabelAlignment] which defines the alignment for
///    [InputDecoration.label] or [InputDecoration.labelText].
///  * [FloatingLabelBehavior] which defines **how** the floating label should
///    behave. π|Jπòπôπö πõπ°  π¶π¨πƒπ∏π∞π≠π≥π¥πæπªπ¡∫∫  ∫Å9ª-Ä‰/// Align the floating label on the leading edge of the [InputDecorator].
///
/// For left-to-right text ([TextDirection.ltr]), this is the left edge.
///
/// For right-to-left text ([TextDirection.rtl]), this is the right edge.ª5ªKªLªMªRªNªOªWÄêª¡C/// Aligns the floating label to the center of an [InputDecorator].ª ª‡ª·ª‚ªÊª„ªÏ,º    ªÏªÌºÄ˚º6  º9ºA  ººΩÄ˘Ω)  Ω4Ω<   æ0æ+   ææπPπQøTäùøe  øuÇ3 ø{øÜ øçøú  øØøæ  øŒ!ø›  øı#¿ @  ¿ @$¿ @-  ¿ @H¿ @W  ¿ @b¿ @q  ¿ @ ¿ @é  ¿ @•¿ @¥  ¿ @¿¿ @œ  ¿ @·	¿ @Á  ¿ @
¿ @ˆ  ¿ A 
¿ A  ¿ A	¿ A  ¿ A¿ A%  ¿ A0¿ A6  ¿ AA¿ AG  ¿ AV¿ A\  ¿ Ak¿ Aq  ¿ AÅ¿ Aá  ¿ Aì¿ Aô   ¿ A¨'¿ A≈  ¿ A◊¿ A‚  ¿ AÒ ¿ A˛  ¿ B"¿ B"  ¿ B;3¿ BX  ¿ Br¿ BÑ  ¿ Bé¿ B§  ¿ B±¿ Bº  ¿ B“¿ Bﬁ  ¿ BÈ!¿ B˝  ¿ C¿ C  ¿ C$¿ C2  ¿ C;¿ CI  ¿ CR¿ C`  ¿ Ch¿ Cv  ¿ CÄ¿ Cé  ¿ Cò¿ C¶  ¿ C¥¿ C¬  ¿ C–¿ Cﬁ  ¿ CÌ¿ C˚  ¿ D¿ D  ¿ HxÅw¿ Hå   ¿ Hx¿ Hy¿ D"ÑR¿ D<  ¿ D?¿ DG  ¿ D"¿ D#øTøU¿ JøÇ9¿ J≈  ¿ J·Å1 ¿ JÁ¿ J˛ ¿ K¿ K  ¿ K&¿ K5  ¿ Kh¿ Kw  ¿ K™¿ Kπ  ¿ KÕ¿ K‹  ¿ K¿ Kˇ   ¿ L+¿ L4  ¿ LE¿ LR  ¿ Lc¿ Lp  ¿ LÉ¿ Lê  ¿ Lª¿ L»  ¿ L€¿ LË     ¿ M@¿ à„¿ MF  ¿ M±Å˛ ¿ M±¿ M¬ ¿ M…¿ Mﬂ  ¿ MÓ$¿ N  ¿ N"¿ N/  ¿ N@¿ NO  ¿ N]¿ Nl  ¿ Nx¿ Ná  ¿ Nï$¿ N©  ¿ NŒ¿ N¬¿ N–¿ NÚ¿ N„¿ NÙ¿ O¿ O
¿ O¿ OB¿ O/¿ OD¿ Oi¿ O^¿ Ok¿ OÜ¿ O}¿ Oà¿ O£¿ Oò¿ O•	¿ O≥$¿ O« ¿ O‘¿ Ub¿ Un  ¿ VA¿ VO  ¿ W-¿ W:  ¿ X∆%¿ XŸ  ¿ ZÖ¿ Zä  ¿ [F¿ [K ¿ [V¿ \¿ \ ¿ \¿ ¶†¿ ¶©  ¿ O‹:¿ OÎ    ¿ P<¿ P(    ¿ PX<¿ Pg    ¿ Pó:¿ P¶    ¿ P‘>¿ P„    ¿ Q>¿ Q$    ¿ QVF¿ Qe    ¿ QüF¿ QÆ    ¿ QËH¿ Q˜    ¿ R3@¿ RB    ¿ RvD¿ RÖ    ¿ RÒÇ@¿ S   ¿ RÒ¿ RÚ¿ U5*¿ UE    ¿ U}Äã¿ UÅ  ¿ Uå¿ Uô   ¿ V2¿ V    ¿ VaÄñ¿ Ve  ¿ Vs¿ VÇ   ¿ V˚/¿ W    ¿ WKÄí¿ WO  ¿ W\¿ Wj   ¿ W·ÄÑ¿ W˜    ¿ Xh[¿ X~    ¿ XÔÅn¿ XÛ  ¿ Y¿ Y   ¿ Za!¿ Zj    ¿ ZòÄä¿ Zú  ¿ Z¶
¿ Z¨   ¿ [&¿ [/    ¿ [_{¿ [c  ¿ [k
¿ [q   ¿ [ﬁ!¿ [Á    ¿ \ÄÅ¿ \!  ¿ \+
¿ \1   ¿ \˛c¿ ]    ¿ `ë,¿ `¶   ¿ `ë¿ `í¿ bÓI¿ b˝    ¿ ]eÉ(¿ ]v  ¿ ]ê¿ ]•  ¿ ]e¿ ]f¿ `¡}¿ `œ  ¿ `Ÿ¿ `Â  ¿ `È¿ `Ò   ¿ aB}¿ aP  ¿ aZ¿ af  ¿ aj¿ ar   ¿ a√}¿ a—  ¿ a‹¿ aË  ¿ aÏ¿ aÙ   ¿ bDK¿ bP  ¿ bY¿ be   ¿ bìW¿ b®  ¿ b∑¿ b¬   ¿ czÑH¿ cÅ  ¿ cê¿ cú  ¿ c†¿ c∞   ¿ h•©¿ hΩ  ¿ h≈ ¿ h’   ¿ ì§É¿ ì´  ¿ ìΩ¿ ì≈  ¿ ìÀ¿ ì”  ¿ ì⁄
¿ ì‚  ¿ ìÊ#¿ ì˘   ¿ ñ∞Ç&¿ ñ√  ¿ ñ‹¿ ñ‰  ¿ ñ∞¿ ñ±¿ ò⁄Ç&¿ òÌ  ¿ ô¿ ô  ¿ ò⁄¿ ò€¿ õÅø¿ õ  ¿ õ¿ õ  ¿ õ%¿ õ7   ¿ ú«à~¿ ú⁄  ¿ úÙ¿ ú¸  ¿ ú«¿ ú»¿ •Im¿ •\  ¿ •v¿ •~  ¿ •I¿ •J¿ •∫Ä∏¿ •Õ  ¿ •Ì¿ •˚  ¿ •∫¿ •ª¿ ¶ΩÄÍ¿ ¶Œ  ¿ ¶ﬂ¿ ¶Ô  ¿ ¶Ω¿ ¶æ¿ ß´Ñ4¿ ßŒ  ¿ ßÛ)¿ ®   ¿ ´„Ä£¿ ´Ù  ¿ ¨¿ ¨+  ¿ ´„¿ ´‰¿ ¨äô~¿ ¨õ   ¿ ¨ä¿ ¨ã¿ ∆f¿ ∆  ¿ ∆¿ ∆.  ¿ ∆6¿ ∆>   ¿ ∆vãz¿ ∆á  ¿ ∆ç¿ ∆û  ¿ ∆¶¿ ∆Æ  ¿ ∆v¿ ∆w¿ —Ù6¿ “  ¿ “¿ “  ¿ —Ù¿ —ı¿ “.ÇÜ¿ “?  ¿ “O¿ “a  ¿ “j¿ “{  ¿ “.¿ “/¿ ‘∏Åi¿ ‘…  ¿ ‘›¿ ‘Î  ¿ ‘Ò¿ ‘˙  ¿ ‘∏¿ ‘π ¿ ÷%àV¿ ÷+  ¿ ÷ÇÄ‘ ¿ ÷à¿ ÷í ¿ ÷ô¿ ÷®  ¿ ÷æ¿ ÷Õ  ¿ ÷‹¿ ÷Î  ¿ ÷˝¿ ◊  ¿ ◊¿ ◊,  ¿ ◊:¿ ◊I   ¿ ◊Z¿ ◊l  ¿ ◊z!¿ ◊é  ¿ ◊ü¿ ◊≤  ¿ ◊¬*¿ ◊€  ¿ ◊¿ ◊˚  ¿ ÿ¿ ÿ  ¿ ÿJ¿ ÿI   ¿ ÿ¿ ÿ ¿ ÿmÉc¿ ÿÅ  ¿ ÿé¿ ÿü  ¿ ÿm¿ ÿn¿ €‘Åf¿ €Ú  ¿ ‹¿ ‹  ¿ €‘¿ €’¿ ›>Å;¿ ›O  ¿ ›b¿ ›p  ¿ ›x¿ ›ã  ¿ ›>¿ ›? ¿ ﬁ}É]¿ ﬁÉ  ¿ ﬁ™Ä• ¿ ﬁ∞¿ ﬁ∫ ¿ ﬁ¡¿ ﬁ–  ¿ ﬁ‰	¿ ﬁÍ  ¿ ﬁÛ
¿ ﬁ˘  ¿ ﬂ
¿ ﬂ	  ¿ ﬂ¿ ﬂ  ¿ ﬂ.¿ ﬂ=   ¿ ﬂS¿ ﬂ^  ¿ ﬂq¿ ﬂ  ¿ ﬂá¿ ﬂò  ¿ ﬂ°¿ ﬂØ  ¿ ﬂ∏(¿ ﬂ–  ¿ ﬂ‰¿ ﬂ˜   ¿ ‡Å–¿ ‡  ¿ ‡!¿ ‡/  ¿ ‡¿ ‡	 ¿ ·‹óﬂ¿ ÂﬂÉ¸/// Defines the appearance of a Material Design text field.
///
/// [InputDecorator] displays the visual elements of a Material Design text
/// field around its input [child]. The visual elements themselves are defined
/// by an [InputDecoration] object and their layout and appearance depend
/// on the `baseStyle`, `textAlign`, `isFocused`, and `isEmpty` parameters.
///
/// [TextField] uses this widget to decorate its [EditableText] child.
///
/// [InputDecorator] can be used to create widgets that look and behave like a
/// [TextField] but support other kinds of input.
///
/// Requires one of its ancestors to be a [Material] widget. The [child] widget,
/// as well as the decorative widgets specified in [decoration], must have
/// non-negative baselines.
///
/// See also:
///
///  * [TextField], which uses an [InputDecorator] to display a border,
///    labels, and icons, around its [EditableText] child.
///  * [Decoration] and [DecoratedBox], for drawing arbitrary decorations
///    around other widgets. ¿ Ê	ÅÀ ¿ Ê–¿ ÊﬁÄ∂/// Creates a widget that displays a border, labels, and icons,
/// for a [TextField].
///
/// The [isFocused], [isHovering], [expands], and [isEmpty] arguments must not
/// be null.
¿ ÊÂ	¿ ÊÏ  ¿ ÊÙ¿ Á  ¿ Á¿ Á  ¿ Á&¿ Á,  ¿ Á:¿ Á@  ¿ ÁV¿ Á\  ¿ Ár¿ Áx  ¿ Áè¿ Áï  ¿ Á©¿ ÁØ  ¿ Á√
¿ Á…  ¿ Ág¿ ÁÑ¿ Áû¿ Á∏	¿ ÁÿÄÂ¿ Ë≥Äº/// The text and styles to use when decorating the child.
///
/// Null [InputDecoration] properties are initialized with the corresponding
/// values from [ThemeData.inputDecorationTheme]. ¿ Ë¬Åü¿ ÍXÅt/// The style on which to base the label, hint, counter, and error styles
/// if the [decoration] does not provide explicit styles.
///
/// If null, [baseStyle] defaults to the `titleMedium` style from the
/// current [Theme], see [ThemeData.textTheme].
///
/// The [TextStyle.textBaseline] of the [baseStyle] is used to determine
/// the baseline used for text alignment. ¿ Íf_¿ ÍºB/// How the text in the decoration should be aligned horizontally. ¿ Í Ç˛¿ Ì∑Çª/// {@template flutter.material.InputDecorator.textAlignVertical}
/// How the text should be aligned vertically.
///
/// Determines the alignment of the baseline within the available space of
/// the input (typically a TextField). For example, TextAlignVertical.top will
/// place the baseline such that the text, and any attached decoration like
/// prefix and suffix, is as close to the top of the input as possible without
/// overflowing. The heights of the prefix and suffix are similarly included
/// for other alignment values. If the height is greater than the height
/// available, then the prefix and suffix will be allowed to overflow first
/// before the text scrolls.
/// {@endtemplate} ¿ ÌÕÅâ¿ ÔMÅ\/// Whether the input field has focus.
///
/// Determines the position of the label text and the color and weight of the
/// border.
///
/// Defaults to false.
///
/// See also:
///
///  * [InputDecoration.hoverColor], which is also blended into the focus
///    color and fill color when the [isHovering] is true to produce the final
///    color. ¿ Ô[Å@¿ ëÅ/// Whether the input field is being hovered over by a mouse pointer.
///
/// Determines the container fill color, which is a blend of
/// [InputDecoration.hoverColor] with [InputDecoration.fillColor] when
/// true, and [InputDecoration.fillColor] when not.
///
/// Defaults to false. ¿ †Ç¿ Ú§Å‚/// If true, the height of the input field will be as large as possible.
///
/// If wrapped in a widget that constrains its child's height, like Expanded
/// or SizedBox, the input field will only be affected if [expands] is set to
/// true.
///
/// See [TextField.minLines] and [TextField.maxLines] for related ways to
/// affect the height of an input. When [expands] is true, both must be null
/// in order to avoid ambiguity in determining the height.
///
/// Defaults to false. ¿ Ú∞Äª¿ ÛdÄú/// Whether the input field is empty.
///
/// Determines the position of the label text and whether to display the hint
/// text.
///
/// Defaults to false. ¿ ÛpÄå¿ Û˜r/// The widget below this widget in the tree.
///
/// Typically an [EditableText], [DropdownButton], or [InkWell]. ¿ ÙÅ¿ ÙøÄ¨/// Whether the label needs to get out of the way of the input, either by
/// floating or disappearing.
///
/// Will withdraw when not empty, or when focused while enabled.   ¿ ı	J¿ ı+   ¿ ı	¿ ı
¿ ıWÇK¿ ˆ˙ÅÇ/// The RenderBox that defines this decorator's "container". That's the
/// area which is filled if [InputDecoration.filled] is true. It's the area
/// adjacent to [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// [TextField] renders ink splashes within the container. ¿ ˜¿ ˜   ¿ ˜¶Ç¿ ˜∑  ¿ ˜À&¿ ˜Ë  ¿ ˜¶¿ ˜ß ¿ ˘Ω¿ Tß¿ ˘√   
¿ ˙7¿ ˙7  ¿ ˙S4¿ ˙p  ¿ ˙ã6¿ ˙™  ¿ ˙≈4¿ ˙€ ¿ ˙Ë¿ ˙˜¿ ˙¯¿ ˙˝J¿ ˚ ¿ ˚6¿ ˚D¿ ˚F¿ ˚E¿ ˚KI¿ ˚g ¿ ˚É¿ ˚ë¿ ˚ì¿ ˚í¿ ˚òJ¿ ˚¥ ¿ ˚—¿ ˚ﬂ¿ ˚·¿ ˚‡¿ ˚Ê\¿ ¸  ¿ ¸¿ ¸#¿ ¸A¿ ¸$¿ ¸F\¿ ¸` ¿ ¸w¿ ¸É¿ ¸°¿ ¸Ñ¿d%¿u  
¿çÄÉ¿°    ¿-¿#    ¿D'¿M    ¿nO¿w    ¿¿?¿…    ¿#¿    ¿(p¿1    ¿FÄŸ¿O    ¿cF¿l    ¿ÔÅ¿    ¿ ¸ßÉ.¿ ¸∏   ¿ ¸ß¿ ¸®¿ ˇŸr¿ ˇÍ   ¿ ˇŸ¿ ˇ⁄¿ OÄû¿ `   ¿ O¿ P¿ Òo¿ ˆ    ¿úÉ∂¿≠  ¿Ω¿Õ  ¿ú¿ù¿VÉ'¿\  ¿u¿Ä   ¿
ÅÅï¿
á  ¿
ï¿
†  ¿
™¿
¿   ¿Å¿   ¿/¿:   ¿;ÅN¿A  ¿O¿Z  ¿d¿z   ¿çÅe¿ì  ¿ß¿≤  ¿º¿“   ¿ˆÅe¿¸  ¿¿  ¿%¿;   ¿4Ç ¿>  ¿S¿^  ¿h¿~   ¿ﬁÇ¿Ë  ¿¸¿  ¿¿'   ¿„É?¿Ì  ¿¿  ¿¿/   ¿&Ä˙¿0  ¿@¿K  ¿U¿k   ¿$Ä«¿.  ¿=¿H  ¿R¿h   ¿˚Ñ°¿  ¿¿$  ¿.¿D   ¿#†™¬¿#≥  ¿#π¿#«  ¿#†¿#° ¿Nf¿ €Æ¿[ìç/// The border, labels, icons, and styles used to decorate a Material
/// Design text field.
///
/// The [TextField] and [InputDecorator] classes use [InputDecoration] objects
/// to describe their decoration. (In fact, this class is merely the
/// configuration of an [InputDecorator], which does all the heavy lifting.)
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` using an `InputDecorator`. The
/// TextField displays a "send message" icon to the left of the input area,
/// which is surrounded by a border an all sides. It displays the `hintText`
/// inside the input area to help the user understand what input is required. It
/// displays the `helperText` and `counterText` below the input area.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a "collapsed" `TextField` using an
/// `InputDecorator`. The collapsed `TextField` surrounds the hint text and
/// input area with a border, but does not add padding around them.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_collapsed.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.1.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to create a `TextField` with hint text, a red border
/// on all sides, and an error message. To display a red border and error
/// message, provide `errorText` to the [InputDecoration] constructor.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_error.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.2.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` with a round border and
/// additional text before and after the input area. It displays "Prefix" before
/// the input area, and "Suffix" after the input area.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/input_decoration_prefix_suffix.png)
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.3.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` with a prefixIcon that changes color
/// based on the `MaterialState`. The color defaults to gray, be blue while focused
/// and red if in an error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.material_state.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This sample shows how to style a `TextField` with a prefixIcon that changes color
/// based on the `MaterialState` through the use of `ThemeData`. The color defaults
/// to gray, be blue while focused and red if in an error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.material_state.1.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TextField], which is a text input widget that uses an
///    [InputDecoration].
///  * [InputDecorator], which is a widget that draws an [InputDecoration]
///    around an input child widget.
///  * [Decoration] and [DecoratedBox], for drawing borders and backgrounds
///    around a child widget. ¿[ßàè ¿]≈¿]‘Ç/// Creates a bundle of the border, labels, icons, and styles used to
/// decorate a Material Design text field.
///
/// Unless specified by [ThemeData.inputDecorationTheme], [InputDecorator]
/// defaults [isDense] to false and [filled] to false. The default border is
/// an instance of [UnderlineInputBorder]. If [border] is [InputBorder.none]
/// then no border is drawn.
///
/// Only one of [prefix] and [prefixText] can be specified.
///
/// Similarly, only one of [suffix] and [suffixText] can be specified.4¿]€	¿]·  ¿]Í¿]  ¿]˛
¿^  ¿^¿^  ¿^"¿^(  ¿^7¿^=  ¿^T¿^Z  ¿^i¿^o  ¿^¿^Ö  ¿^ò¿^û  ¿^´¿^±  ¿^ø¿^≈  ¿^€¿^·  ¿^Ú¿^¯  ¿_
¿_  ¿_¿_#  ¿_1¿_7  ¿_F¿_L  ¿_^¿_d  ¿_~¿_Ñ  ¿_ü¿_•  ¿_µ¿_ª  ¿_«¿_Õ  ¿_‡¿_Ê  ¿_ı¿_˚  ¿`¿`  ¿`&¿`,  ¿`;¿`A  ¿`Q¿`W  ¿`k¿`q  ¿`Ä¿`Ü  ¿`ë¿`ó  ¿`¶¿`¨  ¿`º¿`¬  ¿`÷¿`‹  ¿`ˆ¿`¸  ¿a¿a  ¿a¿a$  ¿a5¿a;  ¿aF¿aL  ¿aZ¿a`  ¿ao¿au  ¿aÑ¿aä  ¿aö¿a†  ¿a≤¿a∏  ¿aœ¿a’  ¿aË¿aÓ  ¿b ¿b  ¿b¿b  ¿b*¿b0  ¿bH¿bN  ¿be¿bk  =¿b ¿b~¿bÑ¿b™¿b‚¿bÖ¿bÜ¿b©¿bï¿bç¿bá¿bê¿b¢¿bò¿b•¿b¨¿bÏ¿bÚ¿c¿cT¿bÛ¿bÙ¿c¿c¿b¸¿bı¿bˇ¿c¿c¿c¿c¿c^¿cd¿cå¿c∆¿ce¿cf¿cã¿cv¿cn¿cg¿cq¿cÑ¿cy¿cá¿cé¿c–¿c÷¿c¸¿d4¿c◊¿cÿ¿c˚¿cÁ¿cﬂ¿cŸ¿c‚¿cÙ¿cÍ¿c˜¿c˛¿d:Üê¿e ¿e!¿e*Ä∆/// Defines an [InputDecorator] that is the same size as the input field.
///
/// This type of input decoration does not include a border by default.
///
/// Sets the [isCollapsed] property to true.¿e1¿e@  ¿eM¿eS  ¿em¿es  ¿eé¿eî  ¿e¢¿e®  ¿eæ¿eƒ  ¿e◊¿e›  ¿eÎ¿eÒ  ¿f ¿f  ¿f¿f  ¿f9¿f?  ÄÇ¿eÃ¿f#¿f.¿f/¿fH¿fZ¿fU¿f\¿fs¿fi¿fu¿fà¿fÇ¿fä¿f°¿fó¿f£¿fª¿f∞¿fΩ¿f›¿f ¿fﬂ¿f˜¿fÏ¿f˘¿g¿g¿g¿g0¿g!¿g2¿gL¿g?¿gN¿gl¿g[¿gn¿gÅ¿g{¿gÉ¿gö¿gê¿gú¿g¥¿g©¿g∂¿g—¿g√¿g”¿gË¿g‡¿gÍ¿h¿g¯¿h	¿h¿h¿h-¿h!¿h/¿hG¿h<¿hI¿h]¿hV¿h_¿hw¿hl¿hy¿hí¿hÜ¿hî¿h±¿h°¿h≥¿h÷¿h¿¿hÿ¿hÏ¿hÂ¿hÓ¿i¿h˚¿i¿i ¿i¿i"¿i;¿i/¿i=¿iZ¿iJ¿i\¿i¿ii¿iÅ¿iñ¿ié¿iò¿i±¿i•¿i≥¿iÕ¿i¿¿iœ¿iË¿i‹¿iÍ¿j¿i˜¿j¿j'¿j¿j)¿jE¿j6¿jG¿jb¿jT¿jd¿jÖ¿jq¿já¿jß¿jî¿j©¿j√¿j∑¿j≈4¿jŒÇ|¿mFÇK/// An icon to show before the input field and outside of the decoration's
/// container.
///
/// The size and color of the icon is configured automatically using an
/// [IconTheme] and therefore does not need to be explicitly given in the
/// icon widget.
///
/// The trailing edge of the icon is padded by 16dps.
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [icon] and above the widgets that contain [helperText],
/// [errorText], and [counterText].
///
/// See [Icon], [ImageIcon]. ¿mOÄÏ¿n2ÄÀ/// The color of the [icon].
///
/// If [iconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿n@Ñf¿r°Ñ&/// Optional widget that describes the input field.
///
/// {@template flutter.material.inputDecoration.label}
/// When the input field is empty and unfocused, the label is displayed on
/// top of the input field (i.e., at the same location on the screen where
/// text may be entered in the input field). When the input field receives
/// focus (or if the field is non-empty), depending on [floatingLabelAlignment],
/// the label moves above, either vertically adjacent to, or to the center of
/// the input field.
/// {@endtemplate}
///
/// This can be used, for example, to add multiple [TextStyle]'s to a label that would
/// otherwise be specified using [labelText], which only takes one [TextStyle].
///
/// {@tool dartpad}
/// This example shows a `TextField` with a [Text.rich] widget as the [label].
/// The widget contains multiple [Text] widgets with different [TextStyle]'s.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.label.0.dart **
/// {@end-tool}
///
/// Only one of [label] and [labelText] can be specified. ¿r´Å¿s∏ÄÚ/// Optional text that describes the input field.
///
/// {@macro flutter.material.inputDecoration.label}
///
/// If a more elaborate label is required, consider using [label] instead.
/// Only one of [label] and [labelText] can be specified. ¿s∆ÖO¿yÑ˘/// {@template flutter.material.inputDecoration.labelStyle}
/// The style to use for [InputDecoration.labelText] when the label is on top
/// of the input field.
///
/// If [labelStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// When the [InputDecoration.labelText] is above (i.e., vertically adjacent to)
/// the input field, the text uses the [floatingLabelStyle] instead.
///
/// If null, defaults to a value derived from the base [TextStyle] for the
/// input field and the current [Theme].
///
/// Specifying this style will override the default behavior
/// of [InputDecoration] that changes the color of the label to the
/// [InputDecoration.errorStyle] color or [ColorScheme.error].
///
/// {@tool dartpad}
/// It's possible to override the label style for just the error state, or
/// just the default state, or both.
///
/// In this example the [labelStyle] is specified with a [MaterialStateProperty]
/// which resolves to a text style whose color depends on the decorator's
/// error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.label_style_error.0.dart **
/// {@end-tool}
/// {@endtemplate} ¿yÖ!¿~)Ñ≈/// {@template flutter.material.inputDecoration.floatingLabelStyle}
/// The style to use for [InputDecoration.labelText] when the label is
/// above (i.e., vertically adjacent to) the input field.
///
/// When the [InputDecoration.labelText] is on top of the input field, the
/// text uses the [labelStyle] instead.
///
/// If [floatingLabelStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to [labelStyle].
///
/// Specifying this style will override the default behavior
/// of [InputDecoration] that changes the color of the label to the
/// [InputDecoration.errorStyle] color or [ColorScheme.error].
///
/// {@tool dartpad}
/// It's possible to override the label style for just the error state, or
/// just the default state, or both.
///
/// In this example the [floatingLabelStyle] is specified with a
/// [MaterialStateProperty] which resolves to a text style whose color depends
/// on the decorator's error state.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.floating_label_style_error.0.dart **
/// {@end-tool}
/// {@endtemplate} ¿~@Å_¿ïÅ:/// Text that provides context about the [InputDecorator.child]'s value, such
/// as how the value will be used.
///
/// If non-null, the text is displayed below the [InputDecorator.child], in
/// the same location as [errorText]. If a non-null [errorText] value is
/// specified then the helper text is not shown. ¿§Å¿Ä§Ä‰/// The style to use for the [helperText].
///
/// If [helperStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿Ä¥Å∫¿Ç`Åä/// The maximum number of lines the [helperText] can occupy.
///
/// Defaults to null, which means that the [helperText] will be limited
/// to a single line with [TextOverflow.ellipsis].
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the helper.
///
/// See also:
///
///  * [errorMaxLines], the equivalent but for the [errorText]. ¿ÇsÅa¿ÉÃÅ>/// Text that suggests what sort of input the field accepts.
///
/// Displayed on top of the [InputDecorator.child] (i.e., at the same location
/// on the screen where text may be entered in the [InputDecorator.child])
/// when the input [isEmpty] and either (a) [labelText] is null or (b) the
/// input has the focus. ¿ÉŸÇY¿Ü)Ç&/// The style to use for the [hintText].
///
/// If [hintStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// Also used for the [labelText] when the [labelText] is displayed on
/// top of the input field (i.e., at the same location on the screen where
/// text may be entered in the [InputDecorator.child]).
///
/// If null, defaults to a value derived from the base [TextStyle] for the
/// input field and the current [Theme]. ¿Ü7Äœ¿ÜıÄ†/// The direction to use for the [hintText].
///
/// If null, defaults to a value derived from [Directionality] for the
/// input field and the current context. ¿áÅ{¿àzÅU/// The maximum number of lines the [hintText] can occupy.
///
/// Defaults to the value of [TextField.maxLines] attribute.
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the hint text. [TextOverflow.ellipsis] is
/// used to handle the overflow when it is limited to single line. ¿àãÄ˚¿âvÄ“/// The duration of the [hintText] fade in and fade out animations.
///
/// If null, defaults to [InputDecorationTheme.hintFadeDuration].
/// If [InputDecorationTheme.hintFadeDuration] is null defaults to 20ms. ¿âãÅ¿äéÄÍ/// Optional widget that appears below the [InputDecorator.child] and the border.
///
/// If non-null, the border's color animates to red and the [helperText] is not shown.
///
/// Only one of [error] and [errorText] can be specified. ¿äòÅ‡¿åoÅ≤/// Text that appears below the [InputDecorator.child] and the border.
///
/// If non-null, the border's color animates to red and the [helperText] is
/// not shown.
///
/// In a [TextFormField], this is overridden by the value returned from
/// [TextFormField.validator], if that is not null.
///
/// If a more elaborate error is required, consider using [error] instead.
///
/// Only one of [error] and [errorText] can be specified. ¿å}Ç]¿é–Ç)/// {@template flutter.material.inputDecoration.errorStyle}
/// The style to use for the [InputDecoration.errorText].
///
/// If null, defaults of a value derived from the base [TextStyle] for the
/// input field and the current [Theme].
///
/// By default the color of style will be used by the label of
/// [InputDecoration] if [InputDecoration.errorText] is not null. See
/// [InputDecoration.labelStyle] or [InputDecoration.floatingLabelStyle] for
/// an example of how to replicate this behavior when specifying those
/// styles.
/// {@endtemplate} ¿éﬂÅ∏¿êäÅâ/// The maximum number of lines the [errorText] can occupy.
///
/// Defaults to null, which means that the [errorText] will be limited
/// to a single line with [TextOverflow.ellipsis].
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the error.
///
/// See also:
///
///  * [helperMaxLines], the equivalent but for the [helperText]. ¿êúÉk¿ìÚÉ/// {@template flutter.material.inputDecoration.floatingLabelBehavior}
/// Defines **how** the floating label should behave.
///
/// When [FloatingLabelBehavior.auto] the label will float to the top only when
/// the field is focused or has some text content, otherwise it will appear
/// in the field in place of the content.
///
/// When [FloatingLabelBehavior.always] the label will always float at the top
/// of the field above the content.
///
/// When [FloatingLabelBehavior.never] the label will always appear in an empty
/// field in place of the content.
/// {@endtemplate}
///
/// If null, [InputDecorationTheme.floatingLabelBehavior] will be used.
///
/// See also:
///
///  * [floatingLabelAlignment] which defines **where** the floating label
///    should be displayed. ¿îÉ¿óÇ∂/// {@template flutter.material.inputDecoration.floatingLabelAlignment}
/// Defines **where** the floating label should be displayed.
///
/// [FloatingLabelAlignment.start] aligns the floating label to the leftmost
/// (when [TextDirection.ltr]) or rightmost (when [TextDirection.rtl]),
/// possible position, which is vertically adjacent to the label, on top of
/// the field.
///
/// [FloatingLabelAlignment.center] aligns the floating label to the center on
/// top of the field.
/// {@endtemplate}
///
/// If null, [InputDecorationTheme.floatingLabelAlignment] will be used.
///
/// See also:
///
///  * [floatingLabelBehavior] which defines **how** the floating label should
///    behave. ¿ó Äõ¿ó¥/// Whether the [InputDecorator.child] is part of a dense form (i.e., uses less vertical
/// space).
///
/// Defaults to false. ¿ó¿Ñ¿õŒÉÕ/// The padding for the input decoration's container.
///
/// {@macro flutter.material.input_decorator.container_description}
///
/// By default the [contentPadding] reflects [isDense] and the type of the
/// [border].
///
/// If [isCollapsed] is true then [contentPadding] is [EdgeInsets.zero].
///
/// If `isOutline` property of [border] is false and if [filled] is true then
/// [contentPadding] is `EdgeInsets.fromLTRB(12, 8, 12, 8)` when [isDense]
/// is true and `EdgeInsets.fromLTRB(12, 12, 12, 12)` when [isDense] is false.
/// If `isOutline` property of [border] is false and if [filled] is false then
/// [contentPadding] is `EdgeInsets.fromLTRB(0, 8, 0, 8)` when [isDense] is
/// true and `EdgeInsets.fromLTRB(0, 12, 0, 12)` when [isDense] is false.
///
/// If `isOutline` property of [border] is true then [contentPadding] is
/// `EdgeInsets.fromLTRB(12, 20, 12, 12)` when [isDense] is true
/// and `EdgeInsets.fromLTRB(12, 24, 12, 16)` when [isDense] is false. ¿õ·Å¿úÿÄ‡/// Whether the decoration is the same size as the input field.
///
/// A collapsed decoration cannot have [labelText], [errorText], an [icon].
///
/// To create a collapsed input decoration, use [InputDecoration.collapsed]. ¿úËáG¿§%Ü‹/// An icon that appears before the [prefix] or [prefixText] and before
/// the editable part of the text field, within the decoration's container.
///
/// The size and color of the prefix icon is configured automatically using an
/// [IconTheme] and therefore does not need to be explicitly given in the
/// icon widget.
///
/// The prefix icon is constrained with a minimum size of 48px by 48px, but
/// can be expanded beyond that. Anything larger than 24px will require
/// additional padding to ensure it matches the Material Design spec of 12px
/// padding between the left edge of the input and leading edge of the prefix
/// icon. The following snippet shows how to pad the leading edge of the
/// prefix icon:
///
/// ```dart
/// prefixIcon: Padding(
///   padding: const EdgeInsetsDirectional.only(start: 12.0),
///   child: _myIcon, // _myIcon is a 48px-wide widget.
/// )
/// ```
///
/// {@macro flutter.material.input_decorator.container_description}
///
/// The prefix icon alignment can be changed using [Align] with a fixed `widthFactor` and
/// `heightFactor`.
///
/// {@tool dartpad}
/// This example shows how the prefix icon alignment can be changed using [Align] with
/// a fixed `widthFactor` and `heightFactor`.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.prefix_icon.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [Icon] and [ImageIcon], which are typically used to show icons.
///  * [prefix] and [prefixText], which are other ways to show content
///    before the text field (but after the icon).
///  * [suffixIcon], which is the same but on the trailing edge.
///  * [Align] A widget that aligns its child within itself and optionally
///    sizes itself based on the child's size. ¿§4Éπ¿ßÿÉc/// The constraints for the prefix icon.
///
/// This can be used to modify the [BoxConstraints] surrounding [prefixIcon].
///
/// This property is particularly useful for getting the decoration's height
/// less than 48px. This can be achieved by setting [isDense] to true and
/// setting the constraints' minimum height and width to a value lower than
/// 48px.
///
/// {@tool dartpad}
/// This example shows the differences between two `TextField` widgets when
/// [prefixIconConstraints] is set to the default value and when one is not.
///
/// The [isDense] property must be set to true to be able to
/// set the constraints smaller than 48px.
///
/// If null, [BoxConstraints] with a minimum width and height of 48px is
/// used.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.prefix_icon_constraints.0.dart **
/// {@end-tool} ¿ßÚÇ8¿™$Ç/// Optional widget to place on the line before the input.
///
/// This can be used, for example, to add some padding to text that would
/// otherwise be specified using [prefixText], or to add a custom widget in
/// front of the input. The widget's baseline is lined up with the input
/// baseline.
///
/// Only one of [prefix] and [prefixText] can be specified.
///
/// The [prefix] appears after the [prefixIcon], if both are specified.
///
/// See also:
///
///  * [suffix], the equivalent but on the trailing edge. ¿™/Ç7¿¨\Ç/// Optional text prefix to place on the line before the input.
///
/// Uses the [prefixStyle]. Uses [hintStyle] if [prefixStyle] isn't specified.
/// The prefix text is not returned as part of the user's input.
///
/// If a more elaborate prefix is required, consider using [prefix] instead.
/// Only one of [prefix] and [prefixText] can be specified.
///
/// The [prefixText] appears after the [prefixIcon], if both are specified.
///
/// See also:
///
///  * [suffixText], the equivalent but on the trailing edge. ¿¨kÅö¿≠˙Åg/// The style to use for the [prefixText].
///
/// If [prefixStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle].
///
/// See also:
///
///  * [suffixStyle], the equivalent but on the trailing edge. ¿Æ
Å$¿ØÄ˘/// Optional color of the prefixIcon
///
/// Defaults to [iconColor]
///
/// If [prefixIconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿Ø3áÚ¿∑áÅ/// An icon that appears after the editable part of the text field and
/// after the [suffix] or [suffixText], within the decoration's container.
///
/// The size and color of the suffix icon is configured automatically using an
/// [IconTheme] and therefore does not need to be explicitly given in the
/// icon widget.
///
/// The suffix icon is constrained with a minimum size of 48px by 48px, but
/// can be expanded beyond that. Anything larger than 24px will require
/// additional padding to ensure it matches the Material Design spec of 12px
/// padding between the right edge of the input and trailing edge of the
/// prefix icon. The following snippet shows how to pad the trailing edge of
/// the suffix icon:
///
/// ```dart
/// suffixIcon: Padding(
///   padding: const EdgeInsetsDirectional.only(end: 12.0),
///   child: _myIcon, // myIcon is a 48px-wide widget.
/// )
/// ```
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [icon] and above the widgets that contain [helperText],
/// [errorText], and [counterText].
///
/// The suffix icon alignment can be changed using [Align] with a fixed `widthFactor` and
/// `heightFactor`.
///
/// {@tool dartpad}
/// This example shows how the suffix icon alignment can be changed using [Align] with
/// a fixed `widthFactor` and `heightFactor`.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.suffix_icon.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [Icon] and [ImageIcon], which are typically used to show icons.
///  * [suffix] and [suffixText], which are other ways to show content
///    after the text field (but before the icon).
///  * [prefixIcon], which is the same but on the leading edge.
///  * [Align] A widget that aligns its child within itself and optionally
///    sizes itself based on the child's size. ¿∑*Ç/¿πSÇ /// Optional widget to place on the line after the input.
///
/// This can be used, for example, to add some padding to the text that would
/// otherwise be specified using [suffixText], or to add a custom widget after
/// the input. The widget's baseline is lined up with the input baseline.
///
/// Only one of [suffix] and [suffixText] can be specified.
///
/// The [suffix] appears before the [suffixIcon], if both are specified.
///
/// See also:
///
///  * [prefix], the equivalent but on the leading edge. ¿π^Ç6¿ªäÇ/// Optional text suffix to place on the line after the input.
///
/// Uses the [suffixStyle]. Uses [hintStyle] if [suffixStyle] isn't specified.
/// The suffix text is not returned as part of the user's input.
///
/// If a more elaborate suffix is required, consider using [suffix] instead.
/// Only one of [suffix] and [suffixText] can be specified.
///
/// The [suffixText] appears before the [suffixIcon], if both are specified.
///
/// See also:
///
///  * [prefixText], the equivalent but on the leading edge. ¿ªôÅô¿Ω'Åf/// The style to use for the [suffixText].
///
/// If [suffixStyle] is a [MaterialStateTextStyle], then the effective text
/// style can depend on the [MaterialState.focused] state, i.e. if the
/// [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle].
///
/// See also:
///
///  * [prefixStyle], the equivalent but on the leading edge. ¿Ω7Å'¿æOÄ¸/// Optional color of the [suffixIcon].
///
/// Defaults to [iconColor]
///
/// If [suffixIconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿æcÑ¿¬fÉº/// The constraints for the suffix icon.
///
/// This can be used to modify the [BoxConstraints] surrounding [suffixIcon].
///
/// This property is particularly useful for getting the decoration's height
/// less than 48px. This can be achieved by setting [isDense] to true and
/// setting the constraints' minimum height and width to a value lower than
/// 48px.
///
/// If null, a [BoxConstraints] with a minimum width and height of 48px is
/// used.
///
/// {@tool dartpad}
/// This example shows the differences between two `TextField` widgets when
/// [suffixIconConstraints] is set to the default value and when one is not.
///
/// The [isDense] property must be set to true to be able to
/// set the constraints smaller than 48px.
///
/// If null, [BoxConstraints] with a minimum width and height of 48px is
/// used.
///
/// ** See code in examples/api/lib/material/input_decorator/input_decoration.suffix_icon_constraints.0.dart **
/// {@end-tool} ¿¬ÄÅè¿ƒÅc/// Optional text to place below the line as a character count.
///
/// Rendered using [counterStyle]. Uses [helperStyle] if [counterStyle] is
/// null.
///
/// The semantic label can be replaced by providing a [semanticCounterText].
///
/// If null or an empty string and [counter] isn't specified, then nothing
/// will appear in the counter's location. ¿ƒÄª¿ƒ»Äü/// Optional custom counter widget to go in the place otherwise occupied by
/// [counterText]. If this property is non null, then [counterText] is
/// ignored. ¿ƒ‘ÅB¿∆
Å/// The style to use for the [counterText].
///
/// If [counterStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [helperStyle]. ¿∆Çß¿»ºÇx/// If true the decoration's container is filled with [fillColor].
///
/// When [InputDecorator.isHovering] is true, the [hoverColor] is also blended
/// into the final fill color.
///
/// Typically this field set to true if [border] is an [UnderlineInputBorder].
///
/// {@template flutter.material.input_decorator.container_description}
/// The decoration's container is the area which is filled if [filled] is true
/// and bordered per the [border]. It's the area adjacent to [icon] and above
/// the widgets that contain [helperText], [errorText], and [counterText].
/// {@endtemplate}
///
/// This property is false by default. ¿»«ÅÄ¿ >ÅW/// The base fill color of the decoration's container color.
///
/// When [InputDecorator.isHovering] is true, the [hoverColor] is also blended
/// into the final fill color.
///
/// By default the [fillColor] is based on the current
/// [InputDecorationTheme.fillColor].
///
/// {@macro flutter.material.input_decorator.container_description} ¿ LÇ6¿ÃxÇ/// The fill color of the decoration's container when it has the input focus.
///
/// By default the [focusColor] is based on the current
/// [InputDecorationTheme.focusColor].
///
/// This [focusColor] is ignored by [TextField] and [TextFormField] because
/// they don't respond to focus changes by changing their decorator's
/// container color, they respond by changing their border to the
/// [focusedBorder], which you can change the color of.
///
/// {@macro flutter.material.input_decorator.container_description} ¿ÃáÇ!¿ŒûÅÒ/// The color of the highlight for the decoration shown if the container
/// is being hovered over by a mouse.
///
/// If [filled] is true, the [hoverColor] is blended with [fillColor] and
/// fills the decoration's container.
///
/// If [filled] is false, and [InputDecorator.isFocused] is false, the color
/// is blended over the [enabledBorder]'s color.
///
/// By default the [hoverColor] is based on the current [Theme].
///
/// {@macro flutter.material.input_decorator.container_description} ¿Œ≠Ö¿”æÑ—/// The border to display when the [InputDecorator] does not have the focus and
/// is showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿”ŒÖ¿ÿ‹ÑŒ/// The border to display when the [InputDecorator] has the focus and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿ÿÓÖ¿›ÔÑ¡/// The border to display when the [InputDecorator] has the focus and is
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿ﬁÖ¿‚˛Ñ∫/// The border to display when the [InputDecorator] is disabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿„Ö¿Ë
Ñª/// The border to display when the [InputDecorator] is enabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null. ¿Ëà+¿Aá…/// The shape of the border to draw around the decoration's container.
///
/// If [border] is a [MaterialStateUnderlineInputBorder]
/// or [MaterialStateOutlineInputBorder], then the effective border can depend on
/// the [MaterialState.focused] state, i.e. if the [TextField] is focused or not.
///
/// If [border] derives from [InputBorder] the border's [InputBorder.borderSide],
/// i.e. the border's color and width, will be overridden to reflect the input
/// decorator's state. Only the border's shape is used. If custom  [BorderSide]
/// values are desired for a given state, all four borders ‚Äì [errorBorder],
/// [focusedBorder], [enabledBorder], [disabledBorder] ‚Äì must be set.
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// The border's bounds, i.e. the value of `border.getOuterPath()`, define
/// the area to be filled.
///
/// This property is only used when the appropriate one of [errorBorder],
/// [focusedBorder], [focusedErrorBorder], [disabledBorder], or [enabledBorder]
/// is not specified. This border's [InputBorder.borderSide] property is
/// configured by the InputDecorator, depending on the values of
/// [InputDecoration.errorText], [InputDecoration.enabled],
/// [InputDecorator.isFocused] and the current [Theme].
///
/// Typically one of [UnderlineInputBorder] or [OutlineInputBorder].
/// If null, InputDecorator's default is `const UnderlineInputBorder()`.
///
/// See also:
///
///  * [InputBorder.none], which doesn't draw a border.
///  * [UnderlineInputBorder], which draws a horizontal line at the
///    bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container. ¿LÄ—¿ÒÄ∂/// If false [helperText],[errorText], and [counterText] are not displayed,
/// and the opacity of the remaining visual elements is reduced.
///
/// This property is true by default. ¿Ò"ÄΩ¿ÒÃÄë/// A semantic label for the [counterText].
///
/// Defaults to null.
///
/// If provided, this replaces the semantic label of the [counterText]. ¿Ò‰Å!¿ÚÛÄ¯/// Typically set to true when the [InputDecorator] contains a multiline
/// [TextField] ([TextField.maxLines] is null or > 1) to override the default
/// behavior of aligning the label with the center of the [TextField].
///
/// Defaults to false. ¿Û
Çô¿ıòÇ_/// Defines minimum and maximum sizes for the [InputDecorator].
///
/// Typically the decorator will fill the horizontal space it is given. For
/// larger screens, it may be useful to have the maximum width clamped to
/// a given value so it doesn't fill the whole screen. This property
/// allows you to control how big the decorator will be in its available
/// space.
///
/// If null, then the ambient [ThemeData.inputDecorationTheme]'s
/// [InputDecorationTheme.constraints] will be used. If that
/// is null then the decorator will fill the available width with
/// a default height based on text size. ¿aÑu¿u   ¿a¿b¿ı®ë@¿ˆa/// Creates a copy of this input decoration with the given fields replaced
/// by the new values. 4¿ˆ-¿ˆ6  ¿ˆ?¿ˆG  ¿ˆU¿ˆ^  ¿ˆh¿ˆq  ¿ˆ¿ˆã  ¿ˆö¿ˆ¶  ¿ˆΩ¿ˆ∆  ¿ˆ’¿ˆ·  ¿ˆÒ¿ˆ˜  ¿˜
¿˜  ¿˜ ¿˜,  ¿˜: ¿˜J  ¿˜`¿˜k  ¿˜Ä¿˜Ü  ¿˜ó¿˜†  ¿˜™¿˜≥  ¿˜¡¿˜Õ  ¿˜‹¿˜‚  ¿˜Ù,¿¯  ¿¯&.¿¯?  ¿¯Z¿¯a  ¿¯q¿¯x  ¿¯Ñ"¿¯ô  ¿¯¨¿¯µ  ¿¯ƒ¿¯Õ  ¿¯ÿ¿¯·  ¿¯%¿˘  ¿˘¿˘'  ¿˘7¿˘?  ¿˘S¿˘\  ¿˘k¿˘t  ¿˘¿˘à  ¿˘ó¿˘£  ¿˘≥¿˘ª  ¿˘œ%¿˘‡  ¿˘˙¿˙  ¿˙¿˙  ¿˙(¿˙4  ¿˙E¿˙L  ¿˙W¿˙_  ¿˙m¿˙u  ¿˙Ñ¿˙å  ¿˙õ¿˙©  ¿˙π¿˙«  ¿˙Ÿ¿˙Á  ¿˙˛¿˚  ¿˚¿˚-  ¿˚?¿˚M  ¿˚X¿˚_  ¿˚k¿˚t  ¿˚å¿˚ì  ¿˚™¿˚ª   ¿Ïàe¿Å/// Used by widgets like [TextField] and [InputDecorator] to create a new
/// [InputDecoration] with default values taken from the [theme].
///
/// Only null valued properties from this [InputDecoration] are replaced
/// by the corresponding values from [theme]. ¿¿1   ¿Uä¿o  ¿r¿z  ¿U¿V¿⁄å8¿Ì   ¿⁄¿€¿[Ç¿[É¿*¿ xπ¿+‹Å¥/// Defines the default appearance of [InputDecorator]s.
///
/// This class is used to define the value of [ThemeData.inputDecorationTheme].
/// The [InputDecorator], [TextField], and [TextFormField] widgets use
/// the current input decoration theme to initialize null [InputDecoration]
/// properties.
///
/// The [InputDecoration.applyDefaults] method is used to combine a input
/// decoration theme with an [InputDecoration] object. ¿,	Ñ ¿,Ç¿,ñn/// Creates a value for [ThemeData.inputDecorationTheme] that
/// defines default values for [InputDecorator].!¿,ù¿,£  ¿,≤¿,∏  ¿,œ¿,’  ¿,Â¿,Î  ¿,˛¿-  ¿-¿-  ¿--¿-3  ¿-B¿-H  ¿-Z7¿-`  ¿-ó:¿-ù  ¿-◊¿-›  ¿-Ò¿-˜  ¿.
¿.  ¿.(¿..  ¿.<¿.B  ¿.R¿.X  ¿.l¿.r  ¿.Ç¿.à  ¿.ú¿.¢  ¿.≥¿.π  ¿.Ã¿.“  ¿.‡¿.Ê  ¿/ ¿/  ¿/¿/  ¿/-¿/3  ¿/B¿/H  ¿/X¿/^  ¿/p¿/v  ¿/ç¿/ì  ¿/¶¿/¨  ¿/æ¿/ƒ  ¿/œ¿/’  ¿/Ù¿/˙  
¿-w¿-å¿-ç¿-µ¿-À¿-Ã¿-Ê¿.¿.¡¿/È!¿0V¿0[8/// {@macro flutter.material.inputDecoration.labelStyle} ¿0jf¿0æ@/// {@macro flutter.material.inputDecoration.floatingLabelStyle} ¿0’Å¿1·Ä/// The style to use for [InputDecoration.helperText].
///
/// If [helperStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not. ¿1ÒÅÍ¿3ÕÅ∫/// The maximum number of lines the [InputDecoration.helperText] can occupy.
///
/// Defaults to null, which means that the [InputDecoration.helperText] will
/// be limited to a single line with [TextOverflow.ellipsis].
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the helper.
///
/// See also:
///
///  * [errorMaxLines], the equivalent but for the [InputDecoration.errorText]. ¿3‡ÇÑ¿6[ÇO/// The style to use for the [InputDecoration.hintText].
///
/// If [hintStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// Also used for the [InputDecoration.labelText] when the
/// [InputDecoration.labelText] is displayed on top of the input field (i.e.,
/// at the same location on the screen where text may be entered in the input
/// field).
///
/// If null, defaults to a value derived from the base [TextStyle] for the
/// input field and the current [Theme]. ¿6iv¿6œS/// The duration of the [InputDecoration.hintText] fade in and fade out animations. ¿6‰V¿708/// {@macro flutter.material.inputDecoration.errorStyle} ¿7?ÅË¿9Åπ/// The maximum number of lines the [InputDecoration.errorText] can occupy.
///
/// Defaults to null, which means that the [InputDecoration.errorText] will be
/// limited to a single line with [TextOverflow.ellipsis].
///
/// This value is passed along to the [Text.maxLines] attribute
/// of the [Text] widget used to display the error.
///
/// See also:
///
///  * [helperMaxLines], the equivalent but for the [InputDecoration.helperText]. ¿9,Ä≠¿9ƒu/// {@macro flutter.material.inputDecoration.floatingLabelBehavior}
///
/// Defaults to [FloatingLabelBehavior.auto]. ¿9ﬁÄ≤¿:zx/// {@macro flutter.material.inputDecoration.floatingLabelAlignment}
///
/// Defaults to [FloatingLabelAlignment.start]. ¿:ïÄõ¿;)ÄÄ/// Whether the input decorator's child is part of a dense form (i.e., uses
/// less vertical space).
///
/// Defaults to false. ¿;5Çâ¿=∞ÇH/// The padding for the input decoration's container.
///
/// The decoration's container is the area which is filled if
/// [InputDecoration.filled] is true and bordered per the [border].
/// It's the area adjacent to [InputDecoration.icon] and above the
/// [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// By default the [contentPadding] reflects [isDense] and the type of the
/// [border]. If [isCollapsed] is true then [contentPadding] is
/// [EdgeInsets.zero]. ¿=√ÄÂ¿>ùÄ∆/// Whether the decoration is the same size as the input field.
///
/// A collapsed decoration cannot have [InputDecoration.labelText],
/// [InputDecoration.errorText], or an [InputDecoration.icon]. ¿>≠Å@¿?‰Å/// The Color to use for the [InputDecoration.icon].
///
/// If [iconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [ColorScheme.primary]. ¿?ÚÅM¿A4Å"/// The style to use for the [InputDecoration.prefixText].
///
/// If [prefixStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle]. ¿ADÅR¿BáÅ'/// The Color to use for the [InputDecoration.prefixIcon].
///
/// If [prefixIconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [ColorScheme.primary]. ¿BõÅH¿CÿÅ/// The style to use for the [InputDecoration.suffixText].
///
/// If [suffixStyle] is a [MaterialStateTextStyle], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [hintStyle]. ¿CËÅR¿E+Å'/// The Color to use for the [InputDecoration.suffixIcon].
///
/// If [suffixIconColor] is a [MaterialStateColor], then the effective
/// color can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [ColorScheme.primary]. ¿E?ÅR¿FÖÅ&/// The style to use for the [InputDecoration.counterText].
///
/// If [counterStyle] is a [MaterialStateTextStyle], then the effective
/// text style can depend on the [MaterialState.focused] state, i.e.
/// if the [TextField] is focused or not.
///
/// If null, defaults to the [helperStyle]. ¿FñÅô¿H)Ås/// If true the decoration's container is filled with [fillColor].
///
/// Typically this field set to true if [border] is an
/// [UnderlineInputBorder].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border].
///
/// This property is false by default. ¿H4Åa¿IåÅ</// The color to fill the decoration's container with, if [filled] is true.
///
/// By default the fillColor is based on the current [Theme].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border]. ¿Iöi¿IˆG/// The borderSide of the OutlineInputBorder with `color` and `weight`. ¿Js¿JfI/// The borderSide of the UnderlineInputBorder with `color` and `weight`. ¿JÄÅô¿LÅq/// The color to blend with the decoration's [fillColor] with, if [filled] is
/// true and the container has the input focus.
///
/// By default the [focusColor] is based on the current [Theme].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border]. ¿LÅ¿NÅƒ/// The color to blend with the decoration's [fillColor] with, if the
/// decoration is being hovered over by a mouse pointer.
///
/// By default the [hoverColor] is based on the current [Theme].
///
/// The decoration's container is the area, defined by the border's
/// [InputBorder.getOuterPath], which is filled if [filled] is
/// true and bordered per the [border].
///
/// The container will be filled when hovered over even if [filled] is false. ¿NÖ¿S$Ñ—/// The border to display when the [InputDecorator] does not have the focus and
/// is showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿S4Ö¿XBÑŒ/// The border to display when the [InputDecorator] has the focus and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿XTÖ¿]UÑ¡/// The border to display when the [InputDecorator] has the focus and is
/// showing an error.
///
/// See also:
///
///  * [InputDecorator.isFocused], which is true if the [InputDecorator]'s child
///    has the focus.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿]lÖ¿bdÑ∫/// The border to display when the [InputDecorator] is disabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [enabledBorder], displayed when [InputDecoration.enabled] is true
///    and [InputDecoration.errorText] is null. ¿bwÖ¿gpÑª/// The border to display when the [InputDecorator] is enabled and is not
/// showing an error.
///
/// See also:
///
///  * [InputDecoration.enabled], which is false if the [InputDecorator] is disabled.
///  * [InputDecoration.errorText], the error shown by the [InputDecorator], if non-null.
///  * [border], for a description of where the [InputDecorator] border appears.
///  * [UnderlineInputBorder], an [InputDecorator] border which draws a horizontal
///    line at the bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container.
///  * [InputBorder.none], which doesn't draw a border.
///  * [errorBorder], displayed when [InputDecorator.isFocused] is false
///    and [InputDecoration.errorText] is non-null.
///  * [focusedBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is null.
///  * [focusedErrorBorder], displayed when [InputDecorator.isFocused] is true
///    and [InputDecoration.errorText] is non-null.
///  * [disabledBorder], displayed when [InputDecoration.enabled] is false
///    and [InputDecoration.errorText] is null. ¿gÇÜò¿nÜ>/// The shape of the border to draw around the decoration's container.
///
/// If [border] is a [MaterialStateUnderlineInputBorder]
/// or [MaterialStateOutlineInputBorder], then the effective border can depend on
/// the [MaterialState.focused] state, i.e. if the [TextField] is focused or not.
///
/// The decoration's container is the area which is filled if [filled] is
/// true and bordered per the [border]. It's the area adjacent to
/// [InputDecoration.icon] and above the widgets that contain
/// [InputDecoration.helperText], [InputDecoration.errorText], and
/// [InputDecoration.counterText].
///
/// The border's bounds, i.e. the value of `border.getOuterPath()`, define
/// the area to be filled.
///
/// This property is only used when the appropriate one of [errorBorder],
/// [focusedBorder], [focusedErrorBorder], [disabledBorder], or [enabledBorder]
/// is not specified. This border's [InputBorder.borderSide] property is
/// configured by the InputDecorator, depending on the values of
/// [InputDecoration.errorText], [InputDecoration.enabled],
/// [InputDecorator.isFocused] and the current [Theme].
///
/// Typically one of [UnderlineInputBorder] or [OutlineInputBorder].
/// If null, InputDecorator's default is `const UnderlineInputBorder()`.
///
/// See also:
///
///  * [InputBorder.none], which doesn't draw a border.
///  * [UnderlineInputBorder], which draws a horizontal line at the
///    bottom of the input decorator's container.
///  * [OutlineInputBorder], an [InputDecorator] border which draws a
///    rounded rectangle around the input decorator's container. ¿nÅ¿oÄ›/// Typically set to true when the [InputDecorator] contains a multiline
/// [TextField] ([TextField.maxLines] is null or > 1) to override the default
/// behavior of aligning the label with the center of the [TextField]. ¿o%Çú¿q∂Ç\/// Defines minimum and maximum sizes for the [InputDecorator].
///
/// Typically the decorator will fill the horizontal space it is given. For
/// larger screens, it may be useful to have the maximum width clamped to
/// a given value so it doesn't fill the whole screen. This property
/// allows you to control how big the decorator will be in its available
/// space.
///
/// If null, then the decorator will fill the available width with
/// a default height based on text size.
///
/// See also:
///
///  * [InputDecoration.constraints], which can override this setting for a
///    given decorator. ¿àÇ—¿à-   ¿à¿à¿q∆ã⁄¿r=]/// Creates a copy of this object but with the given fields replaced with the
/// new values. !¿rL¿rX  ¿rg¿rs  ¿rä¿rñ  ¿r¶¿r¨  ¿rø¿rÀ  ¿rŸ¿r‰  ¿r˘¿s  ¿s¿s  ¿s,,¿sD  ¿s^.¿sw  ¿sí¿sô  ¿s•"¿s∫  ¿sÕ¿s‘  ¿s‰¿sÏ  ¿s˙¿t  ¿t¿t  ¿t2¿t>  ¿tN¿tV  ¿tj¿tv  ¿tá¿té  ¿tô¿t°  ¿tØ!¿tº  ¿t÷¿t„  ¿tı¿t˝  ¿u¿u  ¿u#¿u1  ¿uA¿uO  ¿ua¿uo  ¿uÜ¿uî  ¿uß¿uµ  ¿u«¿u’  ¿u‡¿uÁ  ¿u˛¿v   ¿}§äq¿›Ç/// Returns a copy of this InputDecorationTheme where the non-null fields in
/// the given InputDecorationTheme override the corresponding nullable fields
/// in this InputDecorationTheme.
///
/// The non-nullable fields of InputDecorationTheme, such as [floatingLabelBehavior],
/// [isDense], [isCollapsed], [filled], and [alignLabelWithHint] cannot be overridden.
///
/// In other words, the fields of the provided [InputDecorationTheme] are used to
/// fill in the unspecified and nullable fields of this InputDecorationTheme. ¿„*¿˙   ¿äÓá/¿ã  ¿ã¿ã  ¿äÓ¿äÔ¿í!ê¨¿í2  ¿íF&¿íc  ¿í!¿í"¿+À¿+Ã¿¢—êÂ¿¢◊  ¿£> ¿£¿£1 ¿£2¿£8  ¿£H¿£M¿£N¿£T¿£g  	¿£sÅ!¿£é   ¿£s¿£t¿§òÅ"¿§≥   ¿§ò¿§ô¿•æÇ"¿•Ÿ   ¿•æ¿•ø¿ß‰Å}¿ßˇ   ¿ß‰¿ßÂ¿©eÅÉ¿©Ä   ¿©e¿©f¿™ÏÇâ¿´   ¿™Ï¿™Ì¿≠yÇ¿≠ê   ¿≠y¿≠z¿ØäÇ¿Ø°   ¿Øä¿Øã¿±°Ç¿±∏   ¿±°¿±¢  ¿¥—ñM¿¥◊  ¿µ6 ¿µ¿µ, ¿µ-¿µ3  ¿µA¿µF¿µG¿µM¿µ`  ¿µl>¿µÉ ¿µç¿µí¿µì¿µï¿µù¿µñ¿µû¿µü¿µÆ=¿µ√ ¿µ–¿µ’¿µ÷¿µÿ¿µ‡¿µŸ¿µ·¿µ‚¿µÅ!¿∂   ¿µ¿µÒ¿∑ÄÙ¿∑,   ¿∑¿∑¿∏Éj¿∏)   ¿∏¿∏¿ª{ÉW¿ªó   ¿ª{¿ª|¿æ÷=¿æÌ   ¿æ÷¿æ◊¿øÄë¿ø.   ¿ø¿ø¿ø¨ÅN¿ø√   ¿ø¨¿ø≠¿¿˛ÉÕ¿¡   ¿¿˛¿¿ˇ¿ƒœÉ’¿ƒÍ   ¿ƒœ¿ƒ–¿»®ÅÅ¿»√   ¿»®¿»©¿ -ÄÔ¿ H   ¿ -¿ .   µ¥Ç:∂ˆÅ</// Defines **how** the floating label should behave.
///
/// See also:
///
///  * [InputDecoration.floatingLabelBehavior] which defines the behavior for
///    [InputDecoration.label] or [InputDecoration.labelText].
///  * [FloatingLabelAlignment] which defines **where** the floating label
///    should displayed.  ∑N∑YF/// The label will always be positioned within the content, or hidden. ∑bJ∑®C/// The label will float when the input is focused, or has content. ∑∞;∑Â2/// The label will always float above the content.    æÜÄëæã   æüæü  æßæß  æ∞æ∞  æπæπ  æ¡æ¡  æÀæÀ  æ’
æ’  æ„
æ„  æÒæÒ  ø ø   ø	ø            ÉoAÉ~ ÉïÉùÉØÉ™ÉûÉ¨É≤4Éæ É“ÉÿÉŸÉË%Éı Ñ	Ñ˝HÖ Ö+Ö3ÖDÖ@Ö4ÖB  í∂ <ÄÜÄ§Ä•Ä¡Ä„Ä‰ÅÅ7Å^Å_Å{ÅëÅ™Å≈ÅÊÇÇÇ8ÇRÇgÇÅÇÇÇöÇ≤Ç≥ÇŸÉoÉ≤ÉËÑÑÑJÑMÑèÑ◊Ñ˝ÖGÖHÖåÖ´Ö⁄ÖÏÜÜ(ÜCÜYÜrÜxÜ|Ü}ÜïÜµÜ“ÜÓááá$á(á)á5áñáπá€áÓáÙà à4à:à^à~à°à•à¶à≤ââEâFâRâÅâÉâÑâµâÍäää&äwäyäzäÀä˝ãã6ãYãsãìã™ãÀãËå
å-åMåNåyåõå√å‡çççBçlçmç—ç“çﬁééMé}éÆé‘éÎè7èGèlèîèùè£è§èªè…è€èˆêê<ê`êgêkêlêxêØêËëëRëyëöë–ë‘ë’ë·íííí_í™íÛììCì^ìxìèìØìÃìÍîîîî+îHîpîâî£îºîΩî…ïïïïjï∞ï±ïŸññ6ñXñÇñ¶ñßñ≥ñ»ñﬂóó1ó]ópówóûóƒó◊óﬁòò!òAòpòwòòò¥òŒò’ò¸ô!ô=ôDôöôûôüô´ôæôŸô˛öööö$öYöö¨öœöõõõ'õ=õRõXõçõÂõÎú ú?úhúwú†ú®úÆú≤ú≥úøúÊú˛ù,ù\ùxùéùØùªùÊùˇû*ûCûvûõû∆ûÔû¯ûˇüüüüBügüéü†ü ü⁄üˇ† †††^†_†y†ú†¬†◊†ı°°5°B°m°s°w°x°Ñ°´°¡¢¢¢¢"¢$¢%¢g¢¶¢ÿ£££/£D£Z£s£É£ó£¨£ƒ£ £À£È§§%§B§Y§t§ì§Ø§∞§º§ˆ§¯§˘•S•õ•‘¶¶¶.¶A¶S¶T¶û¶ü¶´¶¿¶◊¶˛ß$ß7ß>ßSßqßêßºß‹ß‚®®®®®2®M®b®f®g®Ä®í®¿®»®Ã®Õ®Ÿ©©$©%©P©É©∏©‡™™B™C™ê™È´]´^´Æ´‰¨¨#¨M¨o¨é¨ù¨º¨ƒ¨ ¨Œ¨œ¨È≠≠&≠=≠Z≠•≠∫≠ÿ≠˝Æ$ÆOÆzÆÖÆéÆïÆôÆöÆ≥ÆÒØØØ;ØYØØ•Ø“Ø∞∞?∞^∞Ñ∞≠∞⁄±±±±'±.±2±3±?±f±â±û±≈±Ó±˝≤≤+≤3≤9≤:≤]≤s≤ä≤±≤¿≤◊≤Ì≤ı≤˚≤¸≥$≥@≥F≥G≥~≥õ≥°≥¢≥∑≥À≥Á¥¥P¥l¥y¥í¥ù¥¶¥¨¥≠¥“¥Êµµµ6µXµsµÄµãµîµöµõµ≠µ±µ≥µ¥µÍµÓµ¸∂ ∂N∂ç∂ÿ∂Ò∑∑W∑`∑¶∑Æ∑„∑Ì∑Ô∑∏7∏M∏Q∏_∏c∏≥∏ÚπAπPπ[πzπ«π»∫∫∫∫d∫j∫µ∫ªªªUªõªÈªÍªˆººº&ºIºkº~ºÑº∞ºƒº ºıΩΩΩΩ@ΩUΩÇΩàΩúΩ Ω–ææææ"æIæKæLæÜæùæ•æÆæ∑æøæ…æ”æ·æÔæ˛ø	øøøøTø_øsøâø´ø øÒ¿ @¿ @D¿ @^¿ @{¿ @°¿ @º¿ @›¿ @Ï¿ @¸¿ A¿ A¿ A,¿ A=¿ AR¿ Ag¿ A}¿ Aè¿ A£¿ A©¿ A™¿ A’¿ AÔ¿ B¿ B9¿ Bp¿ Bå¿ BØ¿ B–¿ BÁ¿ C¿ C"¿ C9¿ CP¿ Cf¿ C~¿ Cñ¿ C≤¿ CŒ¿ CÎ¿ D¿ D¿ D ¿ D,¿ DO¿ Dq¿ DÑ¿ Dä¿ D∂¿ D ¿ D–¿ D¿ E"¿ EN¿ Eä¿ E ¿ F¿ F.¿ FV¿ Fê¿ F¥¿ F‰¿ G¿ G"¿ GB¿ G`¿ GÇ¿ G§¿ GŒ¿ G¯¿ H$¿ HH¿ Hq¿ Hu¿ Hv¿ HÇ¿ H•¿ Hπ¿ H“¿ HÌ¿ I	¿ I¿ I$¿ I<¿ II¿ I\¿ If¿ Iq¿ I|¿ IÜ¿ Ií¿ Iû¿ IÆ¿ Iæ¿ Iœ¿ I‹¿ IÎ¿ I¿ IÚ¿ IÛ¿ J?¿ Já¿ Jø¿ Jﬂ¿ K¿ K"¿ Kd¿ K¶¿ K…¿ KÏ¿ L¿ L¿ L¿ LC¿ La¿ LÅ¿ Lπ¿ LŸ¿ L˜¿ L˘¿ L˙¿ M@¿ MØ¿ M≈¿ MÍ¿ N¿ N<¿ NY¿ Nt¿ Në¿ Nª¿ N‹¿ O¿ O(¿ OW¿ Ov¿ Oë¿ O∞¿ O±¿ OŸ¿ O⁄¿ P¿ PV¿ Pï¿ P“¿ Q¿ QT¿ Qù¿ QÊ¿ R1¿ Rt¿ Rª¿ Rº¿ RÔ¿ R˚¿ S ¿ S8¿ SP¿ S_¿ Sx¿ Sà¿ S¶¿ Sª¿ SŸ¿ SÓ¿ T¿ T¿ T3¿ TD¿ T]¿ Tm¿ TÖ¿ Tî¿ T≥¿ T…¿ T‰¿ Tˆ¿ U¿ U'¿ U.¿ U2¿ U3¿ U`¿ U{¿ U°¿ U¡¿ Uœ¿ U’¿ UÓ¿ V¿ V	¿ V
¿ V?¿ V_¿ Vä¿ V≠¿ Vª¿ V¡¿ V›¿ VÙ¿ V¯¿ V˘¿ W+¿ WI¿ Wr¿ Wî¿ W¢¿ W®¿ W√¿ W⁄¿ Wﬁ¿ Wﬂ¿ X&¿ XG¿ Xf¿ Xƒ¿ XÌ¿ Y!¿ YH¿ YV¿ Y\¿ Y°¿ YÌ¿ Z¿ Z¿ Z#¿ ZC¿ ZZ¿ Z^¿ Z_¿ ZÉ¿ Zñ¿ Z¥¿ Z”¿ Z·¿ ZÁ¿ Zˇ¿ [¿ [#¿ [$¿ [D¿ []¿ [y¿ [ñ¿ [§¿ [™¿ [¿¿ [◊¿ [€¿ [‹¿ \ ¿ \¿ \9¿ \X¿ \f¿ \l¿ \Ñ¿ \õ¿ \ü¿ \†¿ \Ô¿ \¸¿ ]¿ ]^¿ ]b¿ ]c¿ ]o¿ ]Ø¿ ]«¿ ]›¿ ]„¿ ]˝¿ ^¿ ^¿ ^9¿ ^U¿ ^[¿ ^\¿ ^u¿ ^å¿ ^í¿ ^™¿ ^¡¿ ^Ÿ¿ ^˚¿ _¿ _¿ _!¿ _"¿ _;¿ _R¿ _X¿ _v¿ _í¿ _ò¿ _≤¿ _ ¿ _–¿ _Ì¿ `¿ `¿ `-¿ `J¿ `P¿ `k¿ `Ñ¿ `ä¿ `é¿ `è¿ `õ¿ `æ¿ `ø¿ `˙¿ a;¿ a?¿ a@¿ a{¿ aº¿ a¿¿ a¡¿ a¸¿ b=¿ bA¿ bB¿ bê¿ bë¿ bÎ¿ bÏ¿ c8¿ c9¿ cx¿ cæ¿ c’¿ cÁ¿ cÌ¿ d ¿ dr¿ d√¿ e¿ e_¿ e∞¿ e…¿ f¿ f¿ f+¿ fF¿ f[¿ fc¿ fô¿ f¯¿ g¿ g\¿ gã¿ gñ¿ g†¿ g™¿ gø¿ g√¿ gƒ¿ h¿ h_¿ h£¿ hÈ¿ hı¿ i)¿ iw¿ iö¿ iÁ¿ j6¿ jÑ¿ jÕ¿ jÚ¿ j˘¿ j˙¿ k:¿ kÑ¿ k ¿ kÀ¿ l ¿ l@¿ lâ¿ l…¿ l–¿ m"¿ mt¿ m¡¿ n¿ n"¿ nj¿ n≤¿ n≥¿ n€¿ nÊ¿ o¿ o"¿ oô¿ oæ¿ oﬂ¿ p ¿ p%¿ pû¿ p•¿ pÔ¿ qa¿ qö¿ q¡¿ r¿ r$¿ rL¿ rW¿ rv¿ rì¿ r±¿ r÷¿ r¿ s¿ s¿ sC¿ sP¿ sö¿ s°¿ sÀ¿ s◊¿ t"¿ t)¿ ts¿ tt¿ tΩ¿ tÊ¿ u¿ u*¿ uM¿ u•¿ uÆ¿ uµ¿ u∂¿ v¿ v1¿ v^¿ vh¿ vê¿ v…¿ w¿ w¿ wH¿ wR¿ wÄ¿ wΩ¿ wÊ¿ x¿ x(¿ xW¿ xÅ¿ xñ¿ xØ¿ x∂¿ y¿ y/¿ y<¿ yj¿ yÆ¿ y˚¿ z¿ z,¿ zJ¿ zS¿ zZ¿ z[¿ zù¿ z”¿ {¿ {Y¿ {å¿ {©¿ {≈¿ {Ã¿ {Õ¿ |¿ |-¿ |g¿ |°¿ |»¿ |Ê¿ }¿ }¿ }\¿ }ä¿ }∑¿ }‰¿ }Î¿ ~7¿ ~]¿ ~î¿ ~ø¿ ~»¿ ¿ ¿ ¿ I¿ ã¿ Õ¿ Ä¿ ÄG¿ Ä\¿ Äl¿ Äá¿ Äù¿ Ä±¿ Ä«¿ ÄÂ¿ Äˇ¿ Å¿ Åe¿ Åq¿ Åì¿ ÅÒ¿ Ç¿ Ç7¿ Çä¿ Çã¿ Ç◊¿ É¿ ÉQ¿ ÉÑ¿ Éë¿ Éí¿ É·¿ Ñ2¿ Ñ{¿ Ñ»¿ Ö¿ ÖN¿ Öú¿ ÖÌ¿ Ü<¿ Üg¿ Ü«¿ Ü»¿ á¿ áM¿ á_¿ á}¿ áò¿ á∂¿ á÷¿ àD¿ àî¿ à›¿ â5¿ âÇ¿ âÉ¿ â‘¿ â€¿ ä¿ äb¿ äõ¿ äŸ¿ ä‡¿ ã)¿ ãv¿ ãµ¿ ãÙ¿ å¿ åL¿ åÑ¿ å”¿ ç	¿ ç#¿ ç@¿ ç]¿ çv¿ ç}¿ ç~¿ çƒ¿ çÎ¿ é¿ é6¿ éZ¿ éu¿ éî¿ é‘¿ è¿ è¿ è7¿ èU¿ èô¿ è»¿ èŒ¿ è˚¿ ê¿ ê6¿ ê=¿ êh¿ êÑ¿ êü¿ ê¶¿ êß¿ êÀ¿ êÔ¿ ë¿ ë;¿ ëc¿ ëã¿ ëØ¿ ë∂¿ ë∫¿ ëª¿ í	¿ íZ¿ í©¿ íÛ¿ ìC¿ ìî¿ ì¢¿ î¿ î1¿ îÅ¿ î∆¿ î„¿ î˙¿ ï¿ ïS¿ ïd¿ ïî¿ ïø¿ ï≈¿ ï∆¿ ïﬂ¿ ïÙ¿ ï˙¿ ñK¿ ñW¿ ñÅ¿ ñ©¿ ñ≠¿ ñÆ¿ ñ∫¿ ñÌ¿ ó¿ óá¿ ó≠¿ óœ¿ ò¿ ò5¿ ò[¿ ò”¿ ò◊¿ òÿ¿ ò‰¿ ô¿ ô:¿ ô±¿ ô◊¿ ô˘¿ ö=¿ ö_¿ öÖ¿ ö˝¿ õ¿ õ¿ õ?¿ õX¿ õÇ¿ õõ¿ õ≠¿ õµ¿ õÓ¿ õÙ¿ ú¿ úT¿ úÖ¿ ú¿¿ úƒ¿ ú≈¿ ú—¿ ù¿ ù;¿ ùu¿ ùv¿ ù§¿ ù•¿ ùË¿ û4¿ û5¿ ûx¿ ûƒ¿ û≈¿ ü¿ ü¿ üA¿ üÑ¿ üÖ¿ ü◊¿ †0¿ †w¿ †ñ¿ †π¿ †ø¿ †¿¿ †˚¿ °;¿ °<¿ °w¿ °∑¿ °∏¿ ¢5¿ ¢ë¿ ¢˜¿ ¢¯¿ £F¿ £z¿ £π¿ £–¿ £Ó¿ §¿ §Ö¿ § ¿ §÷¿ §¯¿ •B¿ •F¿ •G¿ •S¿ •Ü¿ •≥¿ •∑¿ •∏¿ •ƒ¿ ¶¿ ¶o¿ ¶s¿ ¶t¿ ¶û¿ ¶∫¿ ¶ª¿ ¶«¿ ¶˝¿ ß%¿ ßÜ¿ ßé¿ ß§¿ ß®¿ ß©¿ ® ¿ ®ã¿ ®ø¿ ®Û¿ ©8¿ ©ç¿ ©∆¿ ©Ò¿ ™M¿ ™Ü¿ ™±¿ ™¿¿ ™Ï¿ ™Ù¿ ™˙¿ ´¿ ´W¿ ´]¿ ´Å¿ ´∫¿ ´¿¿ ´‹¿ ´‡¿ ´·¿ ´Ì¿ ¨4¿ ¨É¿ ¨á¿ ¨à¿ ¨î¿ ¨≠¿ ¨Ê¿ ≠¿ ≠C¿ ≠D¿ ≠z¿ ≠ ¿ ≠À¿ ≠¸¿ Æ¿ Æd¿ Æå¿ Æ¿¿ Æ…¿ Ø¿ Ø#¿ ØB¿ Øb¿ Øu¿ Øï¿ Øπ¿ Ø¬¿ Ø˚¿ ∞¿ ∞¿ ∞¿ ∞M¿ ∞ù¿ ∞∫¿ ∞¿¿ ∞¡¿ ∞€¿ ±¿ ±e¿ ±Ç¿ ±à¿ ±â¿ ±∂¿ ±Ù¿ ±ı¿ ≤¿ ≤l¿ ≤m¿ ≤Ö¿ ≤õ¿ ≤∫¿ ≤⁄¿ ≥	¿ ≥)¿ ≥<¿ ≥E¿ ≥c¿ ≥i¿ ≥j¿ ≥á¿ ≥ß¿ ≥‹¿ ≥˜¿ ¥¿ ¥B¿ ¥ê¿ ¥ö¿ ¥∑¿ ¥Ê¿ µ%¿ µ8¿ µu¿ µÅ¿ µã¿ µ©¿ µÒ¿ µ˚¿ ∂¿ ∂U¿ ∂_¿ ∂{¿ ∂∂¿ ∂¿¿ ∂‚¿ ∑¿ ∑9¿ ∑C¿ ∑a¿ ∑ê¿ ∑ö¿ ∑©¿ ∑±¿ ∑—¿ ∏¿ ∏!¿ ∏C¿ ∏k¿ ∏†¿ ∏™¿ ∏«¿ ∏ˆ¿ π!¿ π4¿ π]¿ πi¿ πs¿ πë¿ πƒ¿ πŒ¿ πÎ¿ ∫¿ ∫¿ ∫:¿ ∫b¿ ∫l¿ ∫é¿ ∫µ¿ ∫ˇ¿ ª	¿ ª'¿ ªk¿ ªu¿ ªÑ¿ ªå¿ ªí¿ ªì¿ ª≈¿ ªÍ¿ º¿ º¿ º3¿ ºS¿ ºx¿ º⁄¿ ºÊ¿ Ω¿ Ω3¿ Ω?¿ Ω_¿ ΩÑ¿ ΩÀ¿ Ω◊¿ Ω¯¿ æ;¿ æG¿ æO¿ æU¿ æV¿ æo¿ æ≠¿ æÔ¿ ø9¿ øÑ¿ ø√¿ ¿¿ ¿!¿ ¿A¿ ¿l¿ ¿≤¿ ¡¿ ¡¿ ¡y¿ ¡π¿ ¡“¿ ¡”¿ ¡Û¿ ¬D¿ ¬ï¿ ¬È¿ √¿ √Z¿ √±¿ √Ω¿ ƒ#¿ ƒc¿ ƒ|¿ ƒÑ¿ ƒœ¿ ƒ‹¿ ≈¿ ≈.¿ ≈4¿ ≈5¿ ≈z¿ ≈æ¿ ∆¿ ∆	¿ ∆
¿ ∆G¿ ∆o¿ ∆s¿ ∆t¿ ∆Ä¿ ∆∑¿ ∆‹¿ ∆˜¿ «A¿ «I¿ «O¿ «g¿ «h¿ «Å¿ «¡¿ «˙¿ »1¿ »s¿ »Ω¿ »˝¿ …C¿ …|¿ …«¿ …Ô¿  /¿  Å¿  ∫¿ À?¿ ÀÇ¿ ÀÕ¿ Ã¿ Ã&¿ Ã@¿ Ã_¿ Ãô¿ ÃŸ¿ Ã˘¿ ÕR¿ Õ±¿ ÕΩ¿ ÕÛ¿ Œ¿ Œ6¿ Œè¿ ŒÔ¿ Œ˚¿ œ¿ œX¿ œì¿ œ‹¿ –¿ –4¿ –L¿ –q¿ –ã¿ –õ¿ –µ¿ – ¿ –ˆ¿ –ˇ¿ —¿ — ¿ —&¿ —'¿ —:¿ —O¿ —d¿ —}¿ —ñ¿ —©¿ —Ω¿ —◊¿ —Ì¿ —Ò¿ —Ú¿ —˛¿ “+¿ “,¿ “8¿ “à¿ “∂¿ “ˇ¿ ”9¿ ”m¿ ”Ö¿ ”°¿ ”‚¿ ‘¿ ‘U¿ ‘`¿ ‘i¿ ‘|¿ ‘ë¿ ‘ô¿ ‘ü¿ ‘±¿ ‘µ¿ ‘∂¿ ‘¬¿ ’¿ ’;¿ ’{¿ ’ã¿ ’∞¿ ’Á¿ ’Ì¿ ÷¿ ÷"¿ ÷$¿ ÷%¿ ÷Ä¿ ÷ï¿ ÷∫¿ ÷ÿ¿ ÷˘¿ ◊¿ ◊6¿ ◊Q¿ ◊W¿ ◊X¿ ◊x¿ ◊ù¿ ◊¿¿ ◊Ó¿ ÿ¿ ÿ¿ ÿ¿ ÿ)¿ ÿj¿ ÿk¿ ÿw¿ ÿ¶¿ ÿ∫¿ ÿ€¿ ÿ˚¿ Ÿ¿ Ÿ>¿ Ÿ`¿ ŸÅ¿ Ÿ¢¿ Ÿ¬¿ ŸÂ¿ ⁄¿ ⁄*¿ ⁄L¿ ⁄s¿ ⁄ô¿ ⁄¿¿ ⁄Ê¿ €¿ €5¿ €Y¿ €|¿ €¢¿ €«¿ €Õ¿ €—¿ €“¿ €ﬁ¿ ‹¿ ‹;¿ ‹Y¿ ‹}¿ ‹ü¿ ‹À¿ ‹Á¿ ‹ˇ¿ ›0¿ ›7¿ ›;¿ ›<¿ ›H¿ ›ö¿ ›´¿ › ¿ ›„¿ ﬁ ¿ ﬁ-¿ ﬁP¿ ﬁv¿ ﬁz¿ ﬁ|¿ ﬁ}¿ ﬁ®¿ ﬁΩ¿ ﬁ‡¿ ﬁÔ¿ ﬁˇ¿ ﬂ¿ ﬂ*¿ ﬂJ¿ ﬂP¿ ﬂQ¿ ﬂo¿ ﬂÖ¿ ﬂü¿ ﬂ∂¿ ﬂ‚¿ ‡¿ ‡¿ ‡¿ ‡9¿ ‡\¿ ‡p¿ ‡é¿ ‡∂¿ ‡ÿ¿ ·¿ · ¿ ·E¿ ·m¿ ·∫¿ ·≈¿ ·Œ¿ ·’¿ ·Ÿ¿ ·€¿ ·‹¿ ‚¿ ‚¿ ‚h¿ ‚∑¿ „¿ „M¿ „Q¿ „ò¿ „ú¿ „Î¿ ‰¿ ‰!¿ ‰r¿ ‰Ω¿ ‰Ÿ¿ ‰›¿ ‰Î¿ ‰Ô¿ Â7¿ Âr¿ Âº¿ ÂŸ¿ Ê¿ ÊI¿ Êb¿ Êh¿ Êπ¿ Ê»¿ Ê·¿ Ê¿ Á¿ Á"¿ Á6¿ ÁR¿ Án¿ Áã¿ Á•¿ Áø¿ Áœ¿ Á’¿ Á÷¿ Ë¿ Ë¿ Ëg¿ Ëõ¿ Ëø¿ Ë¿¿ È¿ ÈH¿ ÈN¿ Èñ¿ È»¿ ÈŒ¿ Í¿ ÍE¿ Íc¿ Íd¿ Í©¿ Í«¿ Í»¿ Î¿ Î=¿ ÎC¿ Îê¿ Î·¿ Ï/¿ ÏÄ¿ Ïœ¿ Ì¿ Ìh¿ Ìá¿ Ìú¿ Ì ¿ ÌÀ¿ ÌÙ¿ Ì˙¿ ÓJ¿ ÓX¿ Ó^¿ Ów¿ Ó}¿ Óç¿ Óì¿ Óﬂ¿ Ô0¿ Ô@¿ ÔX¿ ÔY¿ Ô°¿ Ôß¿ ÔÊ¿ /¿ e¿ k¿ Ñ¿ ù¿ û¿ È¿ Ô¿ Ò>¿ Òé¿ Òö¿ Ò†¿ ÒÏ¿ Ú;¿ Úx¿ Ú~¿ Úó¿ Ú≠¿ ÚÆ¿ Ú÷¿ Ú‹¿ Û,¿ Û8¿ Û>¿ ÛW¿ Ûm¿ Ûn¿ Ûû¿ Û§¿ ÛÁ¿ Û˛¿ Ûˇ¿ ÙK¿ Ùk¿ Ùq¿ Ù¥¿ ı¿ ı¿ ı¿ ıT¿ ıU¿ ıü¿ ıÌ¿ ˆ9¿ ˆ~¿ ˆ£¿ ˆ©¿ ˆÊ¿ ˜¿ ˜Å¿ ˜ü¿ ˜£¿ ˜§¿ ˜∞¿ ˜ı¿ ¯ ¿ ¯t¿ ¯‘¿ ˘¿ ˘s¿ ˘∂¿ ˘∫¿ ˘º¿ ˘Ω¿ ˙¿ ˙Q¿ ˙â¿ ˙√¿ ˙˚¿ ˚I¿ ˚ñ¿ ˚‰¿ ¸D¿ ¸§¿ ¸•¿ ¸±¿ ¸∆¿ ¸›¿ ¸ﬁ¿ ˝P¿ ˝¶¿ ˝–¿ ˝—¿ ˛¿ ˛+¿ ˛>¿ ˛q¿ ˛x¿ ˛±¿ ˛‡¿ ˇ¿ ˇ(¿ ˇW¿ ˇ^¿ ˇ_¿ ˇí¿ ˇ∏¿ ˇÀ¿ ˇ“¿ ˇ÷¿ ˇ◊¿ ˇ„¿ ¿ '¿ H¿ L¿ M¿ Y¿ l¿ î¿ ª¿ ’¿ Í¿ Ó¿ Ô¿¿¿U¿]¿a¿b¿ã¿¿¿B¿l¿æ¿ ¿&¿I¿ï¿ô¿ö¿¶¿”¿Û¿"¿E¿K¿L¿√¿ƒ¿¿?¿∏¿‰¿Û¿¿'¿-¿.¿b¿ù¿û¿ ¿¿4¿I¿O¿S¿T¿å¿π¿¿0¿U¿[¿p¿ö¿†¿µ¿·¿Á¿	¿	'¿	-¿	¿	ï¿
¿
[¿
a¿
z¿
~¿
¿
À¿¿;¿A¿i¿Ω¿√¿¿¿¿F¿¶¿«¿Õ¿4¿8¿9¿Ö¿÷¿8¿Ü¿ä¿ã¿›¿3¿õ¿Ô¿Û¿Ù¿F¿ú¿¿X¿\¿]¿ô¿‚¿3¿D¿a¿â¿œ¿¿ ¿!¿a¿™¿´¿ı¿2¿â¿Ú¿Û¿V¿∫¿ª¿Á¿¿!¿5¿Q¿U¿V¿ü¿‹¿2¿ö¿õ¿˝¿`¿a¿ç¿¨¿«¿‹¿‡¿·¿:¿©¿Ê¿?¿E¿¨¿≠¿¿Ñ¿Ö¿±¿–¿Î¿
¿¿#¿$¿v¿«¿¿!¿"¿s¿√¿Ë¿Ï¿Ì¿¿2¿i¿ï¿¬¿Ï¿Û¿˜¿¯¿˘¿O¿±¿ÿ¿Ÿ¿ ¿ 1¿ 7¿ 8¿ h¿ }¿ É¿ Ñ¿ ¶¿ ∆¿ Ê¿!L¿!W¿!f¿!Ü¿!‰¿!Ô¿!˜¿!˝¿"¿"%¿"E¿"{¿"é¿"„¿#¿#H¿#Z¿#¿#ä¿#ì¿#ô¿#ù¿#û¿#™¿#—¿$¿$.¿$ü¿$†¿$Ï¿%,¿%-¿%w¿%©¿%Ì¿&'¿&t¿&î¿&ß¿&π¿&”¿'¿'G¿'e¿'ê¿'ô¿'†¿'°¿'∫¿'Ÿ¿((¿(D¿(ô¿(¶¿(Ù¿(˙¿)1¿)2¿)a¿)w¿)é¿)ª¿)¿*¿*;¿*B¿*C¿*®¿*◊¿*ı¿+¿+?¿+n¿+ó¿+¿¿+‰¿,¿,K¿,e¿,ê¿,≥¿,‡¿-¿-¿-¿-#¿-*¿-+¿-Ç¿-Ÿ¿-⁄¿-¸¿.I¿.W¿.Ê¿.Á¿/¿/ ¿/X¿/¿/Â¿0>¿0l¿0ê¿0ö¿0®¿0©¿0Œ¿0‚¿1¿1A¿1ß¿2 ¿2.¿2R¿2\¿2j¿2k¿2ü¿2∏¿2‰¿2˙¿3¿3	¿3
¿3J¿3á¿3à¿3¬¿3’¿3ˇ¿4¿4W¿4y¿4ö¿4”¿4Ò¿5 ¿5%¿52¿5=¿5F¿5G¿5ç¿5õ¿5µ¿5–¿5Ï¿6¿69¿6v¿6≤¿6ÿ¿7¿7E¿7X¿7i¿7ç¿7∞¿7Ò¿8¿8"¿8H¿8s¿8†¿8Ì¿9¿9(¿9;¿9]¿9ç¿9†¿9±¿9¿¿9Õ¿9ÿ¿9·¿9‚¿:(¿:6¿:P¿:k¿:á¿:≥¿:‘¿;¿;M¿;s¿;©¿;‡¿;Û¿<¿<*¿<O¿<í¿<¥¿<«¿<Ô¿=¿=K¿=ö¿=¬¿=Ÿ¿=Ó¿>¿>D¿>Y¿>l¿>}¿>å¿>ô¿>§¿>•¿>“¿>Ó¿?¿?P¿?Å¿?†¿?«¿?˛¿@-¿@4¿@5¿@J¿@p¿@î¿@Â¿A ¿A¿A8¿AM¿Ap¿Aˆ¿B!¿B[¿Bf¿Bo¿Bu¿Bv¿B≈¿BÌ¿C1¿Cï¿Cñ¿Cª¿C·¿D ¿D9¿DZ¿Dû¿D¬¿E¿Eâ¿E±¿E˘¿F5¿Fu¿FÑ¿F“¿G¿Gb¿G™¿G‰¿H"¿H*¿H7¿HX¿Hû¿H⁄¿I¿I¿I¿IL¿Ik¿Iì¿IÓ¿J ¿Jd¿J¢¿J∫¿JŸ¿K¿KB¿Kr¿KÜ¿Kú¿K≤¿K∆¿Kﬁ¿Kˆ¿L¿L6¿LX¿Lr¿Lè¿Lò¿Lº¿Lﬁ¿M¿M-¿ML¿MS¿MT¿M¬¿M·¿M˛¿N ¿N:¿NC¿NI¿N_¿Nc¿Ne¿Nf¿N¨¿N√¿N«¿O¿O[¿O®¿O¨¿O¿¿P¿P\¿P©¿P˙¿Q@¿QD¿Q†¿Q§¿Q¸¿R¿R¿R$¿Rj¿R∂¿R˙¿R˛¿Sd¿Sh¿S¿¿S–¿S‘¿SË¿T7¿TÅ¿T»¿TÃ¿U.¿U2¿Uä¿Uö¿Uû¿U≤¿U˚¿VL¿VÉ¿Vá¿VÒ¿Vı¿WM¿W]¿Wa¿Wu¿WÀ¿X¿XA¿XE¿X¨¿Xº¿X¿¿X‘¿Y*¿Y~¿Yø¿Y√¿Z*¿Z:¿Z>¿ZL¿ZP¿Zé¿Z®¿ZÛ¿[¿[d¿[Ç¿[ç¿[•¿[Ì¿\¿\ ¿\m¿\º¿]¿]*¿]0¿]n¿]t¿]Ω¿]◊¿]Ê¿]˙¿^
¿^¿^3¿^P¿^e¿^{¿^î¿^ß¿^ª¿^◊¿^Ó¿_	¿_¿_-¿_B¿_Z¿_z¿_õ¿_±¿_√¿_‹¿_Ò¿`¿`"¿`7¿`M¿`g¿`|¿`ç¿`¢¿`∏¿`“¿`Ú¿a¿a¿a1¿aB¿aV¿ak¿aÄ¿añ¿aÆ¿aÀ¿a‰¿a¸¿b¿b&¿bD¿ba¿bw¿bÂ¿cW¿c…¿d7¿d8¿dÑ¿dä¿d‘¿d⁄¿e	¿e-¿eI¿ei¿eä¿eû¿e∫¿e”¿eÁ¿e¸¿f¿f5¿fN¿fb¿f{¿fê¿f©¿f√¿fÂ¿fˇ¿g¿g8¿gT¿gt¿gâ¿g¢¿gº¿gŸ¿gÒ¿h¿h5¿hO¿he¿h¿hö¿hπ¿hﬁ¿hÙ¿i¿i(¿iC¿ib¿iá¿iû¿iπ¿i’¿i¿j¿j/¿jM¿jj¿jç¿j∞¿jÀ¿jÃ¿k¿k*¿k0¿kz¿k∆¿kŸ¿kﬂ¿l¿l¿li¿l≠¿lÎ¿m¿m¿m6¿mL¿mM¿ml¿mr¿mµ¿m˜¿n#¿n=¿n>¿nt¿nz¿n≥¿o ¿oM¿oö¿oÌ¿p=¿pT¿pi¿po¿p»¿q¿q ¿q6¿qá¿q◊¿q›¿r=¿rO¿rU¿rë¿r®¿r©¿r›¿r„¿s¿s¿sl¿s®¿s√¿sƒ¿t¿tR¿tl¿tr¿t∫¿u¿u-¿u3¿uÜ¿uÕ¿u”¿v ¿vK¿vQ¿vê¿v÷¿w¿w¿w3¿wÄ¿wß¿w≠¿x ¿xL¿x_¿xe¿x—¿x„¿x¯¿y¿y¿y^¿yß¿y„¿yÈ¿z6¿z`¿zf¿z∂¿z˝¿{)¿{/¿{X¿{^¿{ù¿{„¿|$¿|*¿|@¿|ç¿|¥¿|∫¿|˝¿}N¿}t¿}z¿}Ô¿~¿~¿~=¿~>¿~é¿~≥¿~π¿¿R¿Ö¿°¿¢¿œ¿’¿Ä¿Äe¿Äë¿Ä±¿Ä≤¿ÄÒ¿Ä˜¿ÅA¿Åv¿Å|¿Åæ¿Åı¿Å˚¿Ç¿Ç¿ÇS¿Çp¿Çq¿Ç∞¿Ç∂¿É¿ÉT¿É°¿Éº¿É÷¿É◊¿Ñ¿Ñ¿ÑO¿Ññ¿Ñ¬¿Ñ»¿Ö¿Ö^¿Öò¿Öû¿ÖÎ¿Ü¿Ü4¿Ü5¿Üd¿Üj¿Ü≥¿Üﬁ¿á¿á	¿áF¿áL¿áã¿áë¿á”¿à(¿àm¿àà¿àâ¿àœ¿à’¿â¿âd¿âà¿ââ¿â›¿â„¿ä<¿äB¿ä~¿äï¿äñ¿äﬂ¿äÂ¿ã3¿ãD¿ãJ¿ãî¿ã ¿ã–¿å¿å#¿å_¿åz¿å{¿åπ¿åı¿å˚¿çH¿çs¿çy¿ç∫¿é¿éQ¿éö¿é®¿éΩ¿é‹¿é›¿è¿è!¿èj¿èü¿è•¿èÁ¿ê¿ê#¿ê3¿ê9¿ê}¿êô¿êö¿ê„¿ë¿ë!¿ës¿ë¡¿ëÌ¿ëÛ¿íD¿íj¿íp¿í¬¿íÁ¿í¸¿ì¿ìL¿ìR¿ìb¿ìh¿ìµ¿ì”¿î	¿î
¿îT¿îî¿îö¿îÈ¿ï3¿ïÅ¿ïí¿ïò¿ïÈ¿ñ¿ñ¿ñ¿ñg¿ñm¿ñ}¿ñÉ¿ñ‘¿ñÂ¿ó¿ó¿óy¿óá¿óç¿ó¶¿óΩ¿óæ¿óˆ¿ó¸¿òB¿òH¿òï¿ò•¿ò´¿òˆ¿ò¸¿ôL¿ôô¿ôÍ¿ö;¿öâ¿ö’¿ö€¿õ&¿õi¿õ≤¿õﬁ¿õﬂ¿ú!¿ú'¿úu¿ú{¿ú ¿úÂ¿úÊ¿ù0¿ù~¿ùÑ¿ù’¿û!¿û4¿û:¿ûà¿û“¿ü!¿üq¿üº¿üœ¿ü’¿ü„¿ü˛¿†>¿†x¿†Ä¿†ä¿†ê¿†÷¿†‹¿°8¿°N¿°T¿°j¿°√¿°Û¿°˘¿¢_¿¢q¿¢w¿¢á¿¢ç¿¢÷¿£¿£T¿£ó¿£‰¿§¿§1¿§2¿§]¿§c¿§≥¿§π¿•¿•T¿•¢¿•Æ¿•¥¿• ¿¶¿¶g¿¶m¿¶¨¿¶Ÿ¿¶ﬂ¿ß*¿ß6¿ß<¿ßÆ¿ß¿¿ßÔ¿ß¿®-¿®3¿®¿®Õ¿©¿©(¿©.¿©l¿©r¿©º¿©¬¿©“¿©ÿ¿™¿™,¿™-¿™o¿™u¿™∆¿´	¿´¿´^¿´ú¿´¢¿´¿´ˆ¿¨¿¨¿¨L¿¨h¿¨i¿¨ñ¿¨ú¿¨Â¿≠,¿≠X¿≠^¿≠ä¿≠ê¿≠†¿≠¶¿≠Á¿Æ¿Æ¿Æ/¿Æ5¿ÆS¿ÆY¿Æ¢¿Æ‰¿Ø¿Ø0¿Ø1¿Øz¿Ø«¿ØÕ¿∞¿∞j¿∞}¿∞É¿∞—¿±¿±j¿±µ¿≤¿≤¿≤!¿≤/¿≤J¿≤à¿≤¡¿≤…¿≤”¿≤Ÿ¿≥%¿≥i¿≥ß¿≥Õ¿≥”¿¥/¿¥E¿¥K¿¥a¿¥∫¿¥Í¿¥¿µV¿µh¿µn¿µ~¿µÑ¿µÕ¿∂¿∂K¿∂ç¿∂⁄¿∑¿∑'¿∑(¿∑d¿∑j¿∑∫¿∏¿∏W¿∏]¿∏õ¿∏°¿∏Ï¿∏Ú¿π¿π¿πC¿π[¿π\¿πù¿π£¿πÙ¿∫7¿∫=¿∫å¿∫ ¿∫–¿ª¿ª%¿ª5¿ª;¿ªz¿ªñ¿ªó¿ªƒ¿ª ¿º¿ºa¿ºÜ¿ºå¿º∏¿ºæ¿ºŒ¿º‘¿Ω¿Ω4¿Ω5¿Ω_¿Ωe¿ΩÉ¿Ωâ¿Ω“¿æ¿æ@¿æ`¿æa¿æå¿æí¿æ‚¿æË¿ø7¿øÉ¿ø—¿ø›¿ø„¿¿0¿¿<¿¿B¿¿X¿¿¶¿¿ı¿¿˚¿¡:¿¡g¿¡m¿¡∏¿¡ƒ¿¡ ¿¬<¿¬N¿¬}¿¬~¿¬¿¿¬∆¿√¿√¿√%¿√t¿√z¿√«¿√Ù¿ƒ¿ƒ¿ƒ`¿ƒ©¿ƒ∏¿ƒ—¿ƒ“¿≈ ¿≈¿≈P¿≈ó¿≈√¿≈…¿≈˜¿∆¿∆¿∆^¿∆d¿∆µ¿∆÷¿∆‹¿«-¿«3¿«|¿«Õ¿»¿»j¿»¿»Ö¿»Æ¿»ƒ¿»≈¿…¿…
¿…[¿…|¿…Ç¿…ª¿…„¿…È¿ /¿ I¿ J¿ ö¿ †¿ ⁄¿À¿À	¿ÀW¿Àü¿À„¿Ã¿Ã#¿Ãi¿ÃÑ¿ÃÖ¿Ã–¿Ã¯¿Ã˛¿ÕJ¿Õr¿Õx¿Õ«¿Õ˙¿Œ ¿ŒC¿ŒI¿Œè¿Œ™¿Œ´¿Œ˝¿œ¿œ¿œ.¿œ4¿œá¿œü¿œ˚¿–N¿–£¿–„¿—+¿—n¿—®¿—Ù¿“&¿“w¿“≠¿“˙¿”,¿”w¿”©¿”À¿”Ã¿‘¿‘3¿‘9¿‘I¿‘O¿‘¢¿‘∫¿’¿’i¿’æ¿’˛¿÷F¿÷â¿÷√¿◊¿◊D¿◊ï¿◊À¿ÿ¿ÿJ¿ÿï¿ÿ«¿ÿÎ¿ÿÏ¿Ÿ7¿ŸO¿ŸU¿Ÿe¿Ÿk¿Ÿæ¿Ÿ÷¿⁄2¿⁄Ö¿⁄⁄¿€¿€b¿€•¿€ﬂ¿‹*¿‹`¿‹¨¿‹ﬁ¿›+¿›]¿›®¿›⁄¿ﬁ¿ﬁ¿ﬁQ¿ﬁi¿ﬁo¿ﬁ¿ﬁÖ¿ﬁ›¿ﬂ9¿ﬂå¿ﬂ·¿‡!¿‡i¿‡¨¿‡Ê¿·1¿·g¿·≥¿·Â¿‚6¿‚l¿‚∑¿‚È¿„¿„¿„[¿„s¿„y¿„â¿„è¿„Á¿‰C¿‰ñ¿‰Î¿Â+¿Âs¿Â∂¿Â¿Ê;¿Êq¿ÊΩ¿ÊÔ¿Á@¿Áv¿Á√¿Áı¿Ë¿Ë¿Ëc¿Ëi¿Ë§¿Ë¯¿ÈL¿ÈR¿È¶¿È˜¿ÍI¿Íó¿Íﬂ¿ÍÂ¿Î1¿Îu¿Îµ¿Î˙¿Ï¿Ï%¿Ïr¿Ïè¿Ïï¿Ï·¿Ì3¿Ì~¿Ì¡¿Ìˇ¿Ó9¿Ó?¿ÓÜ¿Ó—¿Ó◊¿ÓÁ¿ÓÌ¿Ô'¿Ôm¿Ô°¿ÔÈ¿,¿I¿J¿ò¿€¿·¿Ò	¿Ò¿Ò ¿ÒN¿ÒT¿Òl¿Òr¿Òº¿Ò·¿Ò‚¿Ú-¿Ú}¿Ú∆¿ÚÃ¿ÚÂ¿Û¿Û¿ÛJ¿ÛP¿Ûû¿ÛÍ¿Ù1¿Ù|¿Ùâ¿Ùè¿Ù“¿ı¿ıU¿ıÄ¿ı•¿ı¶¿ıÛ¿ˆ¿ˆ)¿ˆ;¿ˆQ¿ˆd¿ˆ{¿ˆñ¿ˆπ¿ˆ—¿ˆÌ¿˜¿˜¿˜6¿˜\¿˜|¿˜ì¿˜¶¿˜Ω¿˜ÿ¿˜¿¯"¿¯V¿¯m¿¯Ä¿¯®¿¯¿¿¯‘¿¯Ï¿˘¿˘3¿˘O¿˘g¿˘{¿˘ì¿˘Ø¿˘À¿˘ˆ¿˙¿˙$¿˙A¿˙S¿˙i¿˙Ä¿˙ó¿˙µ¿˙’¿˙˙¿˚¿˚;¿˚T¿˚g¿˚à¿˚¶¿˚«¿˚Œ¿˚Í¿¸	¿¸7¿¸Y¿¸á¿¸∏¿˝¿˝2¿˝f¿˝§¿˝œ¿˝˝¿˛C¿˛z¿˛Ω¿˛ﬂ¿ˇ¿ˇ>¿ˇx¿ˇ ¿ ¿ S¿ {¿ ∏¿ È¿¿?¿s¿≥¿¿6¿[¿å¿¿¿ ¿R¿z¿Æ¿Â¿
¿8¿i¿ö¿Œ¿¿Q¿é¿»¿Ì¿¿a¿™¿ﬁ¿Â¿È¿Í¿6¿z¿Ä¿À¿˚¿9¿N¿Ä¿ ¿ˇ¿	>¿	m¿	±¿	„¿
¿
q¿
«¿
¿.¿c¿í¿«¿¿=¿~¿∂¿‹¿¿=¿o¿§¿ﬂ¿)¿g¿¢¿»¿¿G¿N¿R¿S¿_¿Ç¿§¿∑¿Ω¿È¿˝¿¿'¿E¿m¿ç¿µ¿ﬂ¿¿C¿o¿°¿«¿Ô¿'¿U¿ã¿´¿”¿˝¿-¿m¿Ø¿”¿¿1¿[¿è¿±¿€¿¿G¿q¿•¿«¿Ò¿¿]¿Å¿≠¿€¿˝¿%¿O¿y¿•¿’¿¿A¿q¿ì¿∑¿Û¿-¿Z¿^¿_¿k¿Ä¿¨¿∏¿…¿÷¿Á¿¿¿%¿8¿N¿^¿o¿à¿ú¿¥¿¡¿“¿‰¿˘¿¿4¿C¿Y¿l¿z¿ã¿ù¿Ø¿¡¿ÿ¿Ê¿¯¿¿(¿:¿Q¿_¿q¿Ñ¿°¿∞¿√¿◊¿Í¿ˇ¿¿/¿D¿R¿a¿|¿ñ¿©¿∞¿”¿◊¿ÿ¿‰¿˙¿)¿P¿Ü¿∞¿Ë¿;¿v¿Ω¿Ú¿ 3¿ Ä¿ ¨¿ ‰¿!¿!c¿!Ω¿"¿"K¿"ê¿"Õ¿#¿#N¿#{¿#¥¿#¿$J¿$É¿$À¿$¯¿%1¿%m¿%«¿%˜¿&3¿&r¿&ù¿&”¿'¿'E¿'Å¿'√¿(¿(Y¿(õ¿(»¿(Ó¿)B¿)ì¿)œ¿)÷¿*¿*¿*¿*¿*O¿*S¿*£¿*Í¿+6¿+F¿+J¿+î¿+À¿+÷¿,¿,G¿,z¿,ô¿,Æ¿,À¿,·¿,˙¿-¿-)¿->¿-V¿-ì¿-”¿-Ì¿.¿.$¿.8¿.N¿.h¿.~¿.ò¿.Ø¿.»¿.‹¿.¸¿/¿/)¿/>¿/T¿/l¿/â¿/¢¿/∫¿/À¿/¿0¿0¿0¿0H¿0g¿0h¿0´¿0“¿0”¿1¿1¿1[¿1¢¿1Œ¿1Ó¿1Ô¿2>¿2D¿2ì¿2”¿2Ÿ¿3¿3R¿3X¿3h¿3n¿3¿¿3›¿3ﬁ¿4¿4¿4f¿4≠¿4Ÿ¿4ﬂ¿5¿5l¿5º¿5 ¿5–¿6¿6H¿6f¿6g¿6Ω¿6·¿6‚¿7¿7<¿7=¿7ã¿7ë¿7‚¿8¿8%¿8g¿8ù¿8£¿8≥¿8π¿9¿9)¿9*¿9p¿9v¿9¶¿9€¿9‹¿:#¿:)¿:[¿:í¿:ì¿:·¿:˝¿;¿;¿;2¿;3¿;k¿;q¿;±¿;˜¿<<¿<|¿<¡¿<Ê¿<Ï¿=9¿={¿=î¿=¿¿=¡¿>¿>	¿>O¿>ê¿>™¿>´¿>‚¿>Ë¿?+¿?m¿?ô¿?ü¿?’¿?Ô¿?¿@-¿@3¿@|¿@√¿@Ô¿@ı¿A!¿AA¿AB¿A¿AÖ¿AŒ¿B¿B<¿BB¿Bx¿Bò¿Bô¿B÷¿B‹¿C%¿Cg¿Cì¿Cô¿C≈¿CÂ¿CÊ¿D#¿D)¿Dr¿D¥¿D‡¿DÊ¿E¿E<¿E=¿E{¿EÅ¿EÀ¿F¿F>¿FD¿Fr¿Fì¿Fî¿FŸ¿Fﬂ¿G¿G6¿G<¿GÇ¿G√¿GÌ¿GÛ¿H¿H1¿H2¿HÄ¿HÜ¿H∆¿HÃ¿I¿IS¿I}¿Ió¿Iò¿I‚¿J¿J¿JR¿J}¿J~¿JŒ¿K ¿K¿KI¿KO¿Kï¿K÷¿L ¿L¿L¿Ld¿Lü¿L•¿LË¿LÓ¿M4¿Mu¿Mü¿M•¿Mı¿N¿N¿Nc¿N~¿NÑ¿Nî¿Nö¿NÌ¿O¿Oa¿O¥¿P	¿PI¿Pë¿P‘¿Q¿QZ¿Qå¿Q›¿R¿R`¿Rí¿R›¿S¿S1¿S2¿SÅ¿Sô¿Sü¿SØ¿Sµ¿T¿T ¿T|¿Tœ¿U$¿Ud¿U¨¿UÔ¿V)¿Vt¿V™¿V˚¿W1¿W~¿W∞¿W˚¿X-¿XQ¿XR¿Xù¿Xµ¿Xª¿XÀ¿X—¿Y$¿Y<¿Yò¿YÎ¿Z@¿ZÄ¿Z»¿[¿[E¿[ê¿[∆¿\¿\D¿\ë¿\√¿]¿]@¿]i¿]j¿]∑¿]œ¿]’¿]Â¿]Î¿^C¿^ü¿^Ú¿_G¿_á¿_œ¿`¿`L¿`ó¿`Õ¿a¿aK¿aú¿a“¿b¿bO¿bt¿bu¿b¡¿bŸ¿bﬂ¿bÔ¿bı¿cM¿c©¿c¸¿dQ¿dë¿dŸ¿e¿eV¿e°¿e◊¿f#¿fU¿f¶¿f‹¿g)¿g[¿g¿gÄ¿g…¿gœ¿h
¿h^¿h≤¿h∏¿i¿iH¿ià¿iÕ¿iÚ¿i¯¿jE¿jb¿jh¿j¥¿k¿kQ¿kî¿k“¿l¿l¿lY¿l§¿l™¿l∫¿l¿¿l˙¿m@¿mt¿mº¿mˇ¿n¿n¿nh¿n∏¿o¿o"¿o#¿oe¿ok¿oπ¿p¿pL¿pó¿p§¿p™¿pÔ¿q¿q ¿q0¿q6¿qÑ¿qû¿q√¿qƒ¿r¿r&¿rH¿rc¿rÜ¿r¢¿rª¿r’¿rı¿s¿s(¿sZ¿sé¿s°¿s…¿s‡¿sˆ¿t¿t.¿tJ¿tf¿tÉ¿tï¿t´¿t“¿tÒ¿u¿u¿u=¿u]¿uÇ¿u£¿u√¿u‹¿u˙¿v¿v"¿vC¿vt¿vΩ¿vÒ¿w.¿w\¿wü¿w–¿x
¿x\¿x±¿xŸ¿y¿y2¿yf¿yö¿y⁄¿z¿zN¿zÖ¿z™¿zÿ¿{*¿{d¿{ï¿{∆¿{˙¿|4¿|}¿|∫¿|Ù¿}¿}b¿}ñ¿}ù¿}°¿}¢¿}Ò¿~A¿~e¿~k¿~√¿¿"¿v¿∆¿Ä¿Ä9¿ÄL¿ÄR¿Äg¿Ä®¿Å¿ÅE¿Åí¿Å–¿Ç#¿Çd¿ÇÆ¿Ç˚¿É9¿É}¿ÉÕ¿Ñ¿Ña¿Ñ®¿ÑÊ¿ÖH¿Öí¿Ö”¿Ü¿ÜX¿Ü¢¿Ü˚¿áH¿áí¿á«¿à¿à¿à¿à¿à#¿àF¿àV¿àn¿à¿àì¿à¢¿à≤¿à≈¿à‡¿à¸¿â	¿â¿â.¿â=¿âN¿âc¿ât¿ââ¿âõ¿âß¿â∏¿â…¿âÊ¿â˚¿ä¿ä¿ä2¿äG¿äa¿äw¿äå¿äö¿ä¥¿ä«¿äﬂ¿äÊ¿äÎ¿äÏ¿ä¯¿ã¿ã=¿ãP¿ãV¿ãÇ¿ãñ¿ãú¿ã≈¿ãÔ¿å)¿åU¿åá¿åØ¿åÂ¿ç¿ç?¿çc¿çï¿ç¡¿çÈ¿é¿éI¿éu¿é©¿é◊¿è¿èY¿è{¿è£¿è„¿ê¿ê=¿êg¿êì¿ê√¿ê˝¿ë/¿ë_¿ëÅ¿ëª¿ëÁ¿í¿í¿í¿í+¿íp¿íõ¿í·¿ìV¿ì„¿î[¿î…¿ï;¿ï¡¿ñ6¿ñ°¿óC¿óÈ¿òP¿ò⁄¿ôM¿ôª¿ö;¿ö≥¿õ3¿õ´¿ú&¿úä¿úÎ¿ùÇ¿û¿ûe¿û…¿üC¿ü»¿†W¿†⁄¿°Z¿°≈¿¢M¿¢ ¿¢Œ¿¢–¿¢—¿£¿£@¿£Q¿£R¿£p¿£q¿£}¿£‹¿§¿§O¿§U¿§è¿§ï¿§ñ¿§¢¿•¿•5¿•u¿•{¿•µ¿•ª¿•º¿•»¿¶0¿¶c¿¶£¿¶©¿¶Ÿ¿ß¿ß#¿ßU¿ßõ¿ß°¿ß€¿ß·¿ß‚¿ßÓ¿®O¿®Å¿®¥¿©¿©¿©¿©\¿©b¿©c¿©o¿©œ¿™¿™4¿™Ö¿™ã¿™„¿™È¿™Í¿™ˆ¿´M¿´Ä¿´û¿´Ω¿´Î¿¨	¿¨3¿¨R¿¨}¿¨Ö¿¨ã¿¨®¿¨≈¿¨Ò¿≠-¿≠j¿≠p¿≠v¿≠w¿≠É¿≠⁄¿Æ8¿Æf¿Æl¿Æû¿Æ“¿Æÿ¿Ø¿Ø ¿Ø?¿Ø\¿Ø{¿ØÅ¿Øá¿Øà¿Øî¿ØÒ¿∞O¿∞}¿∞É¿∞µ¿∞È¿∞Ô¿±¿±7¿±V¿±s¿±í¿±ò¿±û¿±ü¿±´¿≤¿≤f¿≤î¿≤ö¿≤Ã¿≥ ¿≥¿≥2¿≥N¿≥m¿≥ä¿≥©¿≥Ø¿≥µ¿≥∑¿≥∏¿≥Ì¿≥Ó¿¥1¿¥u¿¥ù¿¥–¿¥—¿µ¿µ;¿µJ¿µK¿µi¿µj¿µ¨¿µÌ¿µÓ¿µ˙¿∂Y¿∂å¿∂Ã¿∂“¿∑¿∑¿∑¿∑¿∑v¿∑©¿∑€¿∑·¿∏¿∏
¿∏¿∏¿∏Ñ¿∏∑¿∏¸¿π¿π2¿πf¿π¢¿π™¿πﬁ¿∫¿∫#¿∫R¿∫X¿∫ä¿∫Ω¿∫√¿∫ı¿ª2¿ª8¿ªp¿ªx¿ªy¿ªÖ¿ªÍ¿º¿ºb¿ºh¿ºò¿ºÃ¿Ω¿Ω¿ΩD¿ΩÅ¿Ωâ¿Ω∏¿Ωæ¿Ω¿æ#¿æ)¿æ[¿æò¿æû¿æÕ¿æ”¿æ‘¿æ‡¿ø¿ø¿ø!¿ø~¿ø£¿ø©¿ø™¿ø∂¿¿¿¿F¿¿x¿¿~¿¿Æ¿¿ ¿¿–¿¿ı¿¿˚¿¿¸¿¡¿¡h¿¡≥¿¡Ê¿¬3¿¬9¿¬i¿¬ù¿¬·¿¬È¿√¿√V¿√^¿√ï¿√õ¿√Õ¿ƒ¿ƒ¿ƒG¿ƒÄ¿ƒÜ¿ƒ∆¿ƒÃ¿ƒÕ¿ƒŸ¿≈A¿≈å¿≈ø¿∆¿∆¿∆B¿∆v¿∆∫¿∆¬¿∆ˆ¿«/¿«7¿«n¿«t¿«¶¿«Ë¿«Ó¿» ¿»Y¿»_¿»ü¿»•¿»¶¿»≤¿…¿…^¿…ë¿…ﬁ¿…‰¿ $¿ *¿ +¿ 7¿ ó¿ ‚¿À¿À¿À¿À ¿ÀS    _kTransitionDuration_kTransitionCurve_kFinalLabelScale_kHintFadeTransitionDuration_InputBorderGap_InputBorderTween_InputBorderPainter_BorderContainer_BorderContainerState_Shaker_HelperError_HelperErrorStateFloatingLabelBehaviorFloatingLabelAlignment_DecorationSlot_Decoration_RenderDecorationLayout_RenderDecoration
_Decorator
_AffixTextInputDecorator_InputDecoratorStateInputDecorationInputDecorationTheme_InputDecoratorDefaultsM2_InputDecoratorDefaultsM3 ‚º