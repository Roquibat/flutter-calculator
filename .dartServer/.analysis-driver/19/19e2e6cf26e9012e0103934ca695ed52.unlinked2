x_stateonForcePressStartonForcePressEndonSingleTapUponUserTapAlwaysCalled	onUserTaponSingleLongTapStartmagnifierConfiguration
controller	focusNode
decorationkeyboardTypetextInputActiontextCapitalizationstyle
strutStyle	textAligntextAlignVerticaltextDirection	autofocusstatesControllerobscuringCharacterobscureTextautocorrectsmartDashesTypesmartQuotesTypeenableSuggestionsmaxLinesminLinesexpandsreadOnlytoolbarOptions
showCursornoMaxLength	maxLengthmaxLengthEnforcement	onChangedonEditingCompleteonSubmittedonAppPrivateCommandinputFormattersenabledcursorWidthcursorHeightcursorRadiuscursorOpacityAnimatescursorColorcursorErrorColorselectionHeightStyleselectionWidthStylekeyboardAppearancescrollPaddingenableInteractiveSelectionselectionControlsdragStartBehaviorselectionEnabledonTaponTapAlwaysCalledonTapOutsidemouseCursorbuildCounterscrollPhysicsscrollControllerautofillHintsclipBehaviorrestorationIdscribbleEnabledenableIMEPersonalizedLearningcontentInsertionConfigurationcontextMenuBuildercanRequestFocusundoController_defaultContextMenuBuilderspellCheckConfigurationmaterialMisspelledTextStyle*defaultSpellCheckSuggestionsToolbarBuilder#inferAndroidSpellCheckConfigurationcreateStatedebugFillProperties_controller_effectiveController
_focusNode_effectiveFocusNode_effectiveMaxLengthEnforcement_isHoveringneedsCounter_showSelectionHandles _selectionGestureDetectorBuilderforcePressEnablededitableTextKey
_isEnabled_currentLength_hasIntrinsicError	_hasError_errorColor_getEffectiveDecoration	initState_canRequestFocusdidChangeDependenciesdidUpdateWidgetrestoreState_registerController_createLocalControllerdispose_editableText_requestKeyboard_shouldShowSelectionHandles_handleFocusChanged_handleSelectionChanged_handleSelectionHandleTapped_handleHover_internalStatesController_handleStatesControllerChange_statesController_initStatesController
autofillIdautofilltextInputConfiguration_getInputStyleForStatebuild	InputCounterWidgetBuilder)_TextFieldSelectionGestureDetectorBuilder	TextField_TextFieldState_m2StateInputStyle_m2CounterErrorStyle_m3StateInputStyle_m3InputStyle_m3CounterErrorStyleÅÅBoxHeightStyleBoxWidthStyleiOSHorizontalOffsetSmartDashesTypeSmartQuotesTypeTextCapitalizationTextInputActionTextInputTypebuildCounterWidgetBuildContextintbool#TextSelectionGestureDetectorBuilderstatedelegateoverridevoidForcePressDetailsonForcePressStartselectionEnabledshouldShowSelectionToolbareditableTextshowToolbarTapDragUpDetailsonSingleTapUp_requestKeyboardwidgetonTapAlwaysCalledonTapcallLongPressStartDetailsonSingleLongTapStartThemeofcontextplatformTargetPlatformiOSmacOSandroidfuchsialinuxwindowsFeedbackforLongPressMaterialForm	FormFieldTextFormFieldEditableTextAutomaticKeepAliveClientMixinwantKeepAliveTextEditingControllerdisposeInputDecorationOutlineInputBordertextInputDecoratorStatefulWidgetnoMaxLengthMaxLengthEnforcementnone LengthLimitingTextInputFormattertight	TextAlignstart
DeprecatedallDragStartBehaviorStringCliphardEdgelengthdisabledenabled	identicalnewline	multilineCupertinoTextMagnifierTextMagnifierTextMagnifierConfiguration	FocusNode
FocusScopedone	TextTheme	bodyLarge	ThemeDatauseMaterial3titleMediumdisabledColor	TextStyle
StrutStyleTextAlignVerticalTextDirectionMaterialStatehoverederrorfocusedMaterialStatesControllervalueStatesetStateMaterialStatePropertyupdateToolbarOptions
errorStyleValueChangedVoidCallbacknextpreviousAppPrivateCommandCallbackListTextInputFormatterdoubleRadiusDefaultSelectionStylecursorColorCupertinoThemeDataprimaryColorColorSchemeprimarycolorSchemeColorcolor
brightness
Brightness
EdgeInsetsTextSelectionControlsGestureDetectorListenerGestureTapCallback	TapRegionTapRegionCallbackresolveMaterialStateMouseCursortextableMouseCursorcountercounterText	SemanticsTextsemanticsLabelScrollPhysicsScrollControllerIterableRestorableTextEditingControllerRestorationBucketRestorationScopeRestorationManagerContentInsertionConfigurationAdaptiveTextSelectionToolbarEditableTextContextMenuBuilderUndoHistoryControllerEditableTextStateeditableTextStateSpellCheckConfigurationmisspelledTextStyleCupertinoTextFieldcupertinoMisspelledTextStyle
decorationTextDecoration	underlinedecorationColorColorsreddecorationStyleTextDecorationStylewavy#spellCheckSuggestionsToolbarBuilder*defaultSpellCheckSuggestionsToolbarBuildervisibleForTestingdefaultTargetPlatform%CupertinoSpellCheckSuggestionsToolbarSpellCheckSuggestionsToolbarcopyWithmaterialMisspelledTextStyleDiagnosticPropertiesBuilderdebugFillPropertiesaddDiagnosticsPropertydefaultValueEnumPropertyIntPropertyDoublePropertyColorPropertyEdgeInsetsGeometryFlagPropertyifFalseallowedMimeTypes!kDefaultContentInsertionMimeTypesRestorationMixin+TextSelectionGestureDetectorBuilderDelegateAutofillClient
controller	focusNodemaxLengthEnforcementgetDefaultMaxLengthEnforcement	maxLength	GlobalKey
charactersrestorePending	errorTextcursorErrorColorMaterialLocalizationsapplyDefaultsinputDecorationThemehintMaxLinesmaxLineshasFocuscurrentLength	isFocused	container
liveRegionchildclamp remainingTextFieldCharacterCountcounterStylesemanticCounterText	initStatecanRequestFocusaddListenerNavigationMode
MediaQuerymaybeNavigationModeOftraditionaldirectionaldidChangeDependenciesdidUpdateWidgetunregisterFromRestorationremoveListenerreadOnly	selectionisCollapsedstatesControllerregisterForRestorationTextEditingValue	fromValuerestorationIdcurrentStaterequestKeyboardSelectionChangedCausekeyboard	longPressscribble
isNotEmptyTextSelectionbringIntoViewextentdraghideToolbartoggleToolbar
autofillIdautofillTextInputConfigurationautofillHintstoListgrowableAutofillConfigurationuniqueIdentifiercurrentEditingValuehintTexttextInputConfigurationautofillConfiguration	resolveAsmergedebugCheckHasMaterial"debugCheckHasMaterialLocalizationsdebugCheckHasDirectionalitystyleinheritfontSizetextBaseline	textThemekeyboardAppearanceinputFormattersinferIOSSpellCheckConfigurationspellCheckConfiguration#inferAndroidSpellCheckConfigurationselectionControlscursorOpacityAnimatesOffsetcursorRadiusCupertinoTheme$cupertinoTextSelectionHandleControlscupertinoThemeselectionColorwithOpacitycirculardevicePixelRatioOf+cupertinoDesktopTextSelectionHandleControlsrequestFocusunfocus#materialTextSelectionHandleControls"desktopTextSelectionHandleControlsRepaintBoundaryUnmanagedRestorationScopebucketkeytoolbarOptions
showCursorshowSelectionHandlesundoControllerkeyboardTypetextInputActiontextCapitalization
strutStyle	textAligntextDirection	autofocusobscuringCharacterobscureTextautocorrectsmartDashesTypesmartQuotesTypeenableSuggestionsminLinesexpands	onChangedonSelectionChangedonEditingCompleteonSubmittedonAppPrivateCommandonSelectionHandleTappedonTapOutsiderendererIgnoresPointermouseCursordefercursorWidthcursorHeightselectionHeightStyleselectionWidthStylecursorOffsetpaintCursorAboveTextbackgroundCursorColorCupertinoColorsinactiveGrayscrollPaddingenableInteractiveSelectiondragStartBehaviorscrollControllerscrollPhysicsautofillClientautocorrectionTextRectColorclipBehaviorscribbleEnabledenableIMEPersonalizedLearningcontentInsertionConfigurationcontextMenuBuildermagnifierConfigurationadaptiveMagnifierConfigurationAnimatedBuilder	animation
Listenablebuilder	baseStyletextAlignVertical
isHoveringisEmptyMouseRegioncursoronEnterPointerEnterEventonExitPointerExitEventTextFieldTapRegionIgnorePointerignoringmaxValueLengthcurrentValueLengthisValid	collapsedoffsetonDidGainAccessibilityFocusonDidLoseAccessibilityFocusbuildGestureDetectorbehaviorHitTestBehaviortranslucentMaterialStateTextStyleresolveWithSetstatescontains	bodySmall#TextSelectionGestureDetectorBuilderStatefulWidgetStateRestorationMixin+TextSelectionGestureDetectorBuilderDelegateAutofillClientî† 0/ÓíÃ:=ûûUŸÊò É†É˘SmartDashesTypeSmartQuotesTypeTextCapitalizationTextInputActionTextInputType Éypackage:flutter/services.dartÄºÄﬁBoxHeightStyleBoxWidthStyle Ä¶  Ä∂uiÄπdart:ui  Ä‚  package:flutter/cupertino.dart  Å  package:flutter/foundation.dart  Å5  package:flutter/gestures.dart  Å]  package:flutter/rendering.dart  ÅÜ  package:flutter/services.dart  ÅØ  $adaptive_text_selection_toolbar.dart  Åﬁ  color_scheme.dart  Å˙  colors.dart  Ç  
debug.dart  Ç%  desktop_text_selection.dart  ÇK  feedback.dart  Çc  input_decorator.dart  ÇÇ  magnifier.dart  Çõ  material_localizations.dart  Ç¡  material_state.dartÇ¸ÉiOSHorizontalOffset Çﬂ  selectable_text.dart  É  $spell_check_suggestions_toolbar.dart  ÉF  text_selection.dart  Éd  
theme.dart    	dart:core¿ Ç* ¿Ü\ <ÄÜÄ§Ä•Ä‡Ä·Å
Å4Å\ÅÖÅ≠ÅÆÅ›Å˘ÇÇ$ÇJÇbÇÅÇöÇ¿ÇﬁÉÉEÉcÉxÉyÉ˚É¸ÑÑ2ÑQÑRÑãÑ¡ÑÏÖÖ=Ö[Ö£ÖæÜÜYÜtÜxÜyÜ◊áá)á@á_á`áÄáÅáçá√áÈà,àNàTàXàYàeàôàÆà≤à≥àøàââ1â5â6âBâáâàâîâ©â âŒâœâ€ääAäfäôä∫ä›äÓãã8ã[ãÄã±ãπãøã√ã≈ã∆ãËãÏå=åWå[å´å˘çEçkçoç¥ééQéüéÀéœèèoèπêêSêWêßê€êﬂë.ëRëVëèë‹í-í}íãíûí¢íˆìFìYì]ìsìwìãì€î,îBîFîìî£îßîΩî¡ïï]ï|ïÄïîï‰ïÚïˆñCñSñWñãñèñ€ñ˜ñ˚óJóïóÊò2ò@òDòîò‘òÿôô@ôDôâôŸö(ö7ö;öwö{ö≥ö∑öÀõõ;õ?õåõúõ†õÆõ≤õÛúBúrú¡ùùYùkù´ûû~ûÏüDümüôüüüÒ†'†-†}†Ã†ÿ†ﬁ°,°|°´°±°˚¢F¢è¢⁄£#£d£≠£≥£¯§2§U§©§•6•<•ç•Ÿ¶$¶4¶:¶â¶Ω¶√ßß`ßØßµß≈ßÀ®®Z®n®}®í®¶®ø®Ó©©)©`©p©Ö©´©«©ﬂ©˙™™6™q™w™ê™•™¡™‹™ˇ´´:´`´Ü´©´¿´”´Ì¨¨ ¨4¨P¨f¨Ñ¨û¨∞¨Ã¨„¨˙≠≠0≠K≠Ñ≠ª≠ÿÆÆCÆiÆÖÆïÆπÆ–ÆÊÆ˝ØØ0Ø[ØÉØ™Ø¬Ø„∞∞L∞m∞è∞∞∞ﬂ±O±ø±≤!≤0≤}≤±≤ª≤ ≥≥L≥V≥¨¥¥â¥ò¥Ÿ¥Ûµ*µúµ¶∂∂k∂l∂∂∂º∂Î∂Ò∑=∑C∑í∑„∏9∏?∏U∏Æ∏¥π
ππXπYππÖπÕπ¯π˘∫+∫1∫|∫¡∫«ªªPªVªdªúª¶ª¨ªËªÓº<ºVº\ºjºÆº∏ºæº˙Ω ΩΩΩaΩÑΩäΩ⁄æ(æoæ∂æÚø4ø}øÉø”¿ @%¿ @C¿ @D¿ @x¿ @~¿ @»¿ A¿ A¿ AV¿ A¶¿ AÀ¿ AÃ¿ B¿ B)¿ B*¿ Bf¿ Bü¿ B•¿ BÊ¿ C,¿ CA¿ Ck¿ Cl¿ C´¿ C⁄¿ C€¿ D¿ D¿ D^¿ Dd¿ D∏¿ E¿ E¿ EZ¿ Eß¿ E›¿ E˜¿ E¯¿ F/¿ FO¿ FP¿ FÜ¿ F£¿ F§¿ FÂ¿ G¿ G¿ GN¿ Gt¿ Gu¿ G´¿ G√¿ Gƒ¿ H¿ Hf¿ H†¿ H¶¿ H‹¿ I¿ Il¿ I®¿ I⁄¿ I‡¿ J.¿ JÄ¿ J”¿ K¿ Ke¿ K¿¿ L¿ Lh¿ Lí¿ L∆¿ L«¿ M¿ M)¿ M*¿ Mb¿ M|¿ M}¿ Mµ¿ Mœ¿ M–¿ N¿ N@¿ NA¿ Nà¿ N±¿ N≤¿ N˚¿ O¿ O¿ OQ¿ O¢¿ O∑¿ OŒ¿ Oœ¿ P¿ PU¿ Pj¿ PÅ¿ PÇ¿ P∂¿ PÃ¿ PÕ¿ Q¿ Q¿ Q¿ QB¿ QH¿ Qò¿ Q‡¿ R¿ R ¿ RI¿ RÇ¿ RÜ¿ RÆ¿ RØ¿ RÊ¿ S ¿ S¿ SL¿ Sz¿ Sü¿ S†¿ SÔ¿ T¿ T¿ TI¿ Tó¿ TÂ¿ U:¿ U@¿ UÖ¿ Uø¿ U‚¿ UË¿ V<¿ VÉ¿ Vâ¿ V€¿ W*¿ W{¿ WÃ¿ W“¿ X¿ X4¿ X:¿ Xâ¿ Xÿ¿ Y&¿ Y?¿ YE¿ Yê¿ Y®¿ Y©¿ YË¿ YÓ¿ Z:¿ Z@¿ ZÉ¿ Z∑¿ Z∏¿ ZÓ¿ ZÙ¿ [¿ [
¿ [J¿ [ê¿ [Ω¿ [˝¿ \&¿ \'¿ \e¿ \é¿ \è¿ \«¿ \Õ¿ \›¿ \„¿ ])¿ ]y¿ ]ú¿ ]«¿ ]»¿ ^¿ ^@¿ ^A¿ ^}¿ ^∞¿ ^±¿ ^ˆ¿ _¿ _$¿ _a¿ _ã¿ _¢¿ _£¿ _€¿ _˜¿ _¯¿ `1¿ `O¿ `P¿ `â¿ `ß¿ `®¿ `Í¿ a¿ a¿ a/¿ a5¿ aÄ¿ aë¿ aó¿ aÃ¿ b¿ b]¿ b®¿ bÌ¿ c	¿ c
¿ cW¿ c]¿ cõ¿ c‹¿ d¿ d3¿ d4¿ d~¿ dÑ¿ d√¿ dÛ¿ dÙ¿ e>¿ eD¿ eÇ¿ e∞¿ e±¿ e◊¿ e›¿ f¿ f¿ fJ¿ fr¿ fs¿ f≠¿ fœ¿ f–¿ g¿ g@¿ gA¿ g¿ g±¿ g≤¿ gÓ¿ h¿ h¿ hY¿ hî¿ hï¿ h»¿ h¸¿ i¿ iS¿ i¢¿ iÚ¿ j¿ j¿ jn¿ j¶¿ j¨¿ jˆ¿ k¿ k¿ k[¿ kâ¿ kè¿ k÷¿ l¿ l+¿ l1¿ lÉ¿ lè¿ l≤¿ l≥¿ lÈ¿ lÔ¿ m>¿ mâ¿ m©¿ m™¿ m„¿ mÈ¿ mˇ¿ nK¿ nõ¿ nÿ¿ nﬁ¿ o.¿ oY¿ o_¿ o∏¿ o ¿ o–¿ o‡¿ oÊ¿ p#¿ pL¿ pM¿ pô¿ pß¿ p≠¿ pÔ¿ qA¿ qG¿ qg¿ qâ¿ q´¿ qŒ¿ q‘¿ r&¿ r,¿ rz¿ r ¿ s¿ s4¿ sV¿ sW¿ s†¿ s¶¿ s¿ t?¿ tè¿ tï¿ t€¿ u(¿ ur¿ ux¿ ué¿ uú¿ u≤¿ u–¿ u⁄¿ v ¿ v#¿ vF¿ vP¿ vZ¿ vo¿ v§¿ v—¿ v‹¿ v‰¿ vÓ¿ w ¿ w¿ wW¿ wp¿ w°¿ w¢¿ w‹¿ x¿ x¿ x@¿ xl¿ xm¿ xß¿ xÎ¿ y¿ y¿ yK¿ yQ¿ yt¿ yè¿ yê¿ yÀ¿ z¿ z¿ ze¿ z≤¿ {¿ {Q¿ {|¿ {Ç¿ {œ¿ | ¿ |&¿ |6¿ |<¿ |â¿ |õ¿ |∞¿ |œ¿ |–¿ }¿ }*¿ }+¿ }Ä¿ }¨¿ }≠¿ }˜¿ ~=¿ ~>¿ ~}¿ ~É¿ ~À¿ ~—¿ ~·¿ ~Á¿ +¿ g¿ h¿ Ø¿ µ¿ ˝¿ ÄL¿ Äê¿ ÄÆ¿ ÄØ¿ ÄÂ¿ Å¿ Å¿ Å}¿ Å≥¿ Åﬂ¿ ÅÊ¿ ÅÍ¿ ÅÎ¿ Ç/¿ Ç5¿ ÇÖ¿ Ç—¿ É¿ É¿ É[¿ Éa¿ Éq¿ É¡¿ ÉÊ¿ Ñ7¿ Ñv¿ Ñ≠¿ Ñº¿ ÑË¿ Ö¿ Ö<¿ ÖC¿ ÖD¿ Öç¿ Öì¿ Ö‚¿ Ü¿ Ü¿ Ü¿ Üb¿ Üx¿ Üƒ¿ á¿ á\¿ á¶¿ áª¿ á˜¿ à¿ à:¿ à@¿ àe¿ àÑ¿ à•¿ àË¿ â¿ â#¿ âF¿ âi¿ âä¿ â≠¿ âÁ¿ ä¿ ä"¿ ä(¿ ä,¿ ä-¿ ä}¿ ä«¿ ä◊¿ ã¿ ãI¿ ãO¿ ãm¿ ã≥¿ ãÍ¿ ã¿ å¿ åP¿ åÇ¿ å≠¿ åÁ¿ ç*¿ ç1¿ ç5¿ ç6¿ çB¿ çy¿ çz¿ çÜ¿ çÀ¿ çˆ¿ éd¿ éƒ¿ è:¿ èë¿ ê¿ êÑ¿ ê‹¿ ë8¿ ë¶¿ í¿ íe¿ ì¿ ì≥¿ î¿ îf¿ î±¿ ï	¿ ïV¿ ï–¿ ñ;¿ ñ¬¿ ó&¿ óû¿ ò¿ òV¿ ò¨¿ ô¿ ôÇ¿ ô’¿ ö2¿ ö•¿ õ,¿ õÆ¿ ú*¿ úü¿ ù¿ ùu¿ ù‹¿ û_¿ ûÈ¿ üÎ¿ üÔ¿ üÒ¿ üÚ¿ †Ä¿ †∞¿ °¿ °¿ °'¿ °Ä¿ °Å¿ °⁄¿ ¢>¿ ¢?¿ ¢[¿ ¢\¿ ¢ê¿ ¢±¿ ¢‡¿ ¢·¿ £¿ £¿ £[¿ £\¿ £ñ¿ £¢¿ £¡¿ £¬¿ £Œ¿ §%¿ §&¿ §2¿ §j¿ §´¿ §¨¿ §¸¿ §˝¿ •L¿ •M¿ •ä¿ •ƒ¿ ¶¿ ¶~¿ ¶Á¿ ¶Ë¿ ß`¿ ßa¿ ß‰¿ ßÂ¿ ®¿ ®f¿ ®ô¿ ®¯¿ ©-¿ ©>¿ ©[¿ ©•¿ ©Æ¿ ©Ø¿ ©ˇ¿ ™Y¿ ™{¿ ™Å¿ ™Ç¿ ™Ã¿ ™·¿ ´¿ ´;¿ ´n¿ ´ò¿ ´”¿ ¨¿ ¨¿ ¨C¿ ¨h¿ ¨Ü¿ ¨è¿ ¨ﬂ¿ ≠¿ ≠¿ ≠9¿ ≠Z¿ ≠y¿ ≠Ñ¿ ≠å¿ ≠…¿ ≠œ¿ ≠–¿ ≠Ù¿ Æ¿ Æ1¿ Æ2¿ Æ]¿ ÆÇ¿ ÆÉ¿ Æ¥¿ Æ’¿ Ø ¿ Ø-¿ Øä¿ Ø·¿ ØÁ¿ ØË¿ ∞¿ ∞1¿ ∞i¿ ∞û¿ ±¿ ±&¿ ±X¿ ±a¿ ±g¿ ±h¿ ±ë¿ ±±¿ ±·¿ ±Ë¿ ±Ï¿ ±Ì¿ ±˘¿ ≤¿ ≤%¿ ≤Ñ¿ ≤©¿ ≤…¿ ≤œ¿ ≥¿ ≥Y¿ ≥v¿ ≥z¿ ≥{¿ ≥ô¿ ¥¿ ¥¿ ¥=¿ ¥r¿ ¥ô¿ ¥Æ¿ ¥¥¿ ¥∏¿ ¥π¿ ¥≈¿ ¥Ê¿ µ	¿ µE¿ µI¿ µJ¿ µV¿ µÑ¿ µ™¿ µÔ¿ ∂*¿ ∂v¿ ∂•¿ ∂√¿ ∂›¿ ∂„¿ ∂‰¿ ∑¿ ∑g¿ ∑±¿ ∑∑¿ ∑∏¿ ∑Ù¿ ∑ı¿ ∏T¿ ∏å¿ ∏æ¿ ∏∆¿ ∏Ã¿ ∏Õ¿ π¿ πS¿ πó¿ πÏ¿ ∫,¿ ∫9¿ ∫ä¿ ∫∑¿ ∫Â¿ ª¿ ª¿ ª6¿ ª<¿ ª@¿ ªA¿ ªM¿ ªñ¿ ªµ¿ ª“¿ ªÿ¿ ª‹¿ ª›¿ ª¸¿ º¿ ºU¿ ºY¿ ºZ¿ ºï¿ º∂¿ º÷¿ Ω¿ Ω>¿ ΩY¿ Ωv¿ Ω|¿ ΩÄ¿ ΩÅ¿ Ωç¿ Ω¬¿ Ω√¿ Ωœ¿ Ω‚¿ æ¿ æ:¿ æV¿ æõ¿ æ≈¿ æ⁄¿ æﬁ¿ æﬂ¿ ø'¿ ø(¿ øD¿ øj¿ øn¿ øo¿ ø≤¿ ¿ ¿ ¿@¿ ¿à¿ ¿ú¿ ¿¢¿ ¿£¿ ¿÷¿ ¿Í¿ ¿¿ ¿Ò¿ ¡:¿ ¡N¿ ¡T¿ ¡U¿ ¡l¿ ¡Ä¿ ¡Ü¿ ¡á¿ ¡Ê¿ ¡˘¿ ¡ˇ¿ ¬ ¿ ¬0¿ ¬C¿ ¬I¿ ¬J¿ ¬\¿ ¬`¿ ¬a¿ ¬Ä¿ ¬í¿ ¬ﬁ¿ ¬Ú¿ ¬˙¿ √M¿ √Q¿ √R¿ √™¿ √¯¿ ƒ5¿ ƒI¿ ƒÉ¿ ƒç¿ ƒì¿ ƒî¿ ƒæ¿ ƒ›¿ ƒ˛¿ ≈¿ ≈B¿ ≈e¿ ≈à¿ ≈¿¿ ≈˙¿ ∆¿ ∆
¿ ∆¿ ∆5¿ ∆T¿ ∆w¿ ∆ö¿ ∆©¿ ∆ ¿ ∆Î¿ «¿ «A¿ «i¿ «s¿ «y¿ «}¿ «~¿ «∫¿ «‚¿ »¿ »>¿ »D¿ »H¿ »I¿ »n¿ »ë¿ »•¿ »≈¿ »œ¿ …¿ …¿ …¿ …¿ …?¿ …v¿ …w¿ …†¿ …‰¿ …˙¿ …˛¿ …ˇ¿  j¿  k¿  å¿  ∑¿  ı¿  ˚¿ À>¿ ÀÄ¿ À”¿ Ã¿ ÃS¿ ÃW¿ ÃX¿ ÃÇ¿ Ãé¿ Ãƒ¿ Ã≈¿ Ã—¿ Õ0¿ Õ1¿ Õ=¿ Õs¿ Õ ¿ Œ¿ Œ7¿ Œ_¿ Œá¿ Œ¬¿ œ¿ œ¿ œA¿ œB¿ œ´¿ œØ¿ œ◊¿ œÿ¿ –¿ –=¿ –Í¿ —O¿ —{¿ —¿ —Ä¿ —å¿ —≥¿ —ﬂ¿ “¿ “J¿ “V¿ “ê¿ “·¿ ”$¿ ”+¿ ”,¿ ”[¿ ”Ø¿ ‘¿ ‘±¿ ’
¿ ’M¿ ’Ç¿ ’»¿ ’Í¿ ÷¿ ÷8¿ ÷T¿ ÷î¿ ÷ü¿ ÷¶¿ ÷ß¿ ÷ˆ¿ ◊G¿ ◊à¿ ◊√¿ ◊Ë¿ ÿ¿ ÿ(¿ ÿJ¿ ÿä¿ ÿ∏¿ ÿ«¿ ÿÍ¿ Ÿ¿ Ÿ.¿ ŸQ¿ Ÿ¢¿ ŸÃ¿ Ÿ◊¿ Ÿ›¿ Ÿﬁ¿ ⁄+¿ ⁄P¿ ⁄ê¿ ⁄™¿ ⁄«¿ ⁄Á¿ €¿ €?¿ €r¿ €•¿ €¶¿ €ƒ¿ €„¿ ‹1¿ ‹S¿ ‹õ¿ ‹¿¿ ‹Ë¿ ›i¿ ›“¿ ﬁ¿ ﬁg¿ ﬁù¿ ﬁû¿ ﬁø¿ ﬂ¿ ﬂ0¿ ﬂ¿ ﬂ§¿ ﬂÕ¿ ‡N¿ ‡∑¿ ‡Ï¿ ·L¿ ·{¿ ·”¿ ‚)¿ ‚Y¿ ‚e¿ ‚p¿ ‚ü¿ ‚»¿ ‚”¿ ‚‘¿ ‚˜¿ „¿ „=¿ „Ñ¿ „™¿ „”¿ ‰R¿ ‰π¿ ‰∫¿ ‰€¿ ‰˛¿ ÂD¿ Âj¿ Âì¿ Ê¿ Êy¿ Ê®¿ Á ¿ ÁV¿ ÁÜ¿ Áí¿ Áù¿ ÁÃ¿ Áı¿ Ë ¿ Ë¿ Ë$¿ ËG¿ Ëç¿ Ë≥¿ Ë‹¿ È[¿ È¬¿ ÈÒ¿ ÍI¿ Íü¿ Íœ¿ Í€¿ ÍÊ¿ Î¿ Î>¿ ÎI¿ ÎO¿ ÎP¿ Ît¿ Îú¿ Î¥¿ Î—¿ ÎÒ¿ Ï%¿ ÏV¿ Ï¿ Ï∂¿ Ïÿ¿ Ï¯¿ Ì)¿ ÌV¿ Ìâ¿ Ì¬¿ Ì⁄¿ Ó¿ Ó*¿ ÓY¿ ÓÄ¿ Óπ¿ Ó‰¿ Ô¿ ÔB¿ Ôu¿ Ô¨¿ Ô—¿ Ôˆ¿ ¿ h¿ Æ¿ Ò¿ Ò*¿ Òa¿ Òò¿ Ò√¿ Ò˛¿ Ú?¿ Úl¿ Úì¿ Úª¿ Û	¿ Û4¿ Ûa¿ Ûá¿ Û´¿ ÛË¿ Ù#¿ Ù[¿ ÙÅ¿ Ù∑¿ Ùˆ¿ ı%¿ ıW¿ ı†¿ ı◊¿ ˆ¿ ˆ;¿ ˆ[¿ ˆü¿ ˆÃ¿ ˆÒ¿ ˜$¿ ˜s¿ ˜¬¿ ˜˚¿ ¯7¿ ¯®¿ ¯≥¿ ¯º¿ ¯√¿ ¯ƒ¿ ¯È¿ ˘¿ ˘T¿ ˘ç¿ ˘Æ¿ ˘·¿ ˙¿ ˙/¿ ˙h¿ ˙ç¿ ˙∏¿ ˙Ï¿ ˚¿ ˚+¿ ˚8¿ ˚C¿ ˚Y¿ ˚b¿ ˚h¿ ˚√¿ ¸¿ ¸!¿ ¸(¿ ¸)¿ ¸Q¿ ¸ò¿ ¸∫¿ ¸Ÿ¿ ˝¿ ˝¿ ˝>¿ ˝D¿ ˝E¿ ˝]¿ ˝Å¿ ˝¡¿ ˛ ¿ ˛!¿ ˛?¿ ˛`¿ ˛Ç¿ ˛√¿ ˇ ¿ ˇ ¿ ˇY¿ ˇç¿ ˇ¬¿ ¿ {¿ è¿ µ¿ »¿¿d¿Ç¿ì¿¢¿Ï¿!¿=¿L¿Y¿d¿m¿t¿x¿z¿{¿Û¿ ¿Q¿É¿á¿∆¿ ¿À¿¿b¿c¿ì¿î¿◊¿¿C¿v¿w¿Ô¿ ¿~¿Ç¿À¿œ¿–¿)¿*¿b¿¡¿¬¿    Ä•Ä∫ÄºÄﬁÄ·  Å
  Å4  Å\  ÅÖ  ÅÆ  Å›  Å˘  Ç  Ç$  ÇJ  Çb  ÇÅ  Çö  Ç¿  Çﬁ Ç¸ÉÉ  ÉE  Éc  ÉyÉ†É˘ ÜyÖKÜ  ÜŸÄÖ ÜŸá á	á#  	á7á0á9áGáLá\áUáMáWábáx  â8NâM   â8â9áÉÄ‘áî  á¶áπ  áÉáÑà[Vàl  à|àè  à[à\àµà∆  à‘àÊ  àµà∂âäCâõ   âäâãâ—ÅÒâ‚  â˜ä  â—â“ ã∆¿ î*üJìá/// A Material Design text field.
///
/// A text field lets the user enter text, either with hardware keyboard or with
/// an onscreen keyboard.
///
/// The text field calls the [onChanged] callback whenever the user changes the
/// text in the field. If the user indicates that they are done typing in the
/// field (e.g., by pressing a button on the soft keyboard), the text field
/// calls the [onSubmitted] callback.
///
/// To control the text that is displayed in the text field, use the
/// [controller]. For example, to set the initial value of the text field, use
/// a [controller] that already contains some text. The [controller] can also
/// control the selection and composing region (and to observe changes to the
/// text, selection, and composing region).
///
/// By default, a text field has a [decoration] that draws a divider below the
/// text field. You can use the [decoration] property to control the decoration,
/// for example by adding a label or an icon. If you set the [decoration]
/// property to null, the decoration will be removed entirely, including the
/// extra padding introduced by the decoration to save space for the labels.
///
/// If [decoration] is non-null (which is the default), the text field requires
/// one of its ancestors to be a [Material] widget.
///
/// To integrate the [TextField] into a [Form] with other [FormField] widgets,
/// consider using [TextFormField].
///
/// {@template flutter.material.textfield.wantKeepAlive}
/// When the widget has focus, it will prevent itself from disposing via its
/// underlying [EditableText]'s [AutomaticKeepAliveClientMixin.wantKeepAlive] in
/// order to avoid losing the selection. Removing the focus will allow it to be
/// disposed.
/// {@endtemplate}
///
/// Remember to call [TextEditingController.dispose] of the [TextEditingController]
/// when it is no longer needed. This will ensure we discard any resources used
/// by the object.
///
/// ## Obscured Input
///
/// {@tool dartpad}
/// This example shows how to create a [TextField] that will obscure input. The
/// [InputDecoration] surrounds the field in a border using [OutlineInputBorder]
/// and adds a label.
///
/// ** See code in examples/api/lib/material/text_field/text_field.0.dart **
/// {@end-tool}
///
/// ## Reading values
///
/// A common way to read a value from a TextField is to use the [onSubmitted]
/// callback. This callback is applied to the text field's current value when
/// the user finishes editing.
///
/// {@tool dartpad}
/// This sample shows how to get a value from a TextField via the [onSubmitted]
/// callback.
///
/// ** See code in examples/api/lib/material/text_field/text_field.1.dart **
/// {@end-tool}
///
/// {@macro flutter.widgets.EditableText.lifeCycle}
///
/// For most applications the [onSubmitted] callback will be sufficient for
/// reacting to user input.
///
/// The [onEditingComplete] callback also runs when the user finishes editing.
/// It's different from [onSubmitted] because it has a default value which
/// updates the text controller and yields the keyboard focus. Applications that
/// require different behavior can override the default [onEditingComplete]
/// callback.
///
/// Keep in mind you can also always read the current string from a TextField's
/// [TextEditingController] using [TextEditingController.text].
///
/// ## Handling emojis and other complex characters
/// {@macro flutter.widgets.EditableText.onChanged}
///
/// In the live Dartpad example above, try typing the emoji üë®‚Äçüë©‚Äçüë¶
/// into the field and submitting. Because the example code measures the length
/// with `value.characters.length`, the emoji is correctly counted as a single
/// character.
///
/// {@macro flutter.widgets.editableText.showCaretOnScreen}
///
/// {@macro flutter.widgets.editableText.accessibility}
///
/// {@tool dartpad}
/// This sample shows how to style a text field to match a filled or outlined
/// Material Design 3 text field.
///
/// ** See code in examples/api/lib/material/text_field/text_field.2.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TextFormField], which integrates with the [Form] widget.
///  * [InputDecorator], which shows the labels and other visual elements that
///    surround the actual text editing widget.
///  * [EditableText], which is the raw text editing control at the heart of a
///    [TextField]. The [EditableText] widget is rarely used directly unless
///    you are implementing an entirely different design language, such as
///    Cupertino.
///  * <https://material.io/design/components/text-fields.html>
///  * Cookbook: [Create and style a text field](https://flutter.dev/docs/cookbook/forms/text-input)
///  * Cookbook: [Handle changes to a text field](https://flutter.dev/docs/cookbook/forms/text-field-changes)
///  * Cookbook: [Retrieve the value of a text field](https://flutter.dev/docs/cookbook/forms/retrieve-input)
///  * Cookbook: [Focus and text fields](https://flutter.dev/docs/cookbook/forms/focus) üoñ˚ ®b®kàî/// Creates a Material Design text field.
///
/// If [decoration] is non-null (which is the default), the text field requires
/// one of its ancestors to be a [Material] widget.
///
/// To remove the decoration entirely (including the extra padding introduced
/// by the decoration to save space for the labels), set the [decoration] to
/// null.
///
/// The [maxLines] property can be set to null to remove the restriction on
/// the number of lines. By default, it is one, meaning this is a single-line
/// text field. [maxLines] must not be zero.
///
/// The [maxLength] property is set to null by default, which means the
/// number of characters allowed in the text field is not restricted. If
/// [maxLength] is set a character counter will be displayed below the
/// field showing how many characters have been entered. If the value is
/// set to a positive integer it will also display the maximum allowed
/// number of characters to be entered. If the value is set to
/// [TextField.noMaxLength] then only the current length is displayed.
///
/// After [maxLength] characters have been input, additional input
/// is ignored, unless [maxLengthEnforcement] is set to
/// [MaxLengthEnforcement.none].
/// The text field enforces the length with a [LengthLimitingTextInputFormatter],
/// which is evaluated after the supplied [inputFormatters], if any.
/// The [maxLength] value must be either null or greater than zero.
///
/// If [maxLengthEnforcement] is set to [MaxLengthEnforcement.none], then more
/// than [maxLength] characters may be entered, and the error counter and
/// divider will switch to the [decoration].errorStyle when the limit is
/// exceeded.
///
/// The text cursor is not shown if [showCursor] is false or if [showCursor]
/// is null (the default) and [readOnly] is true.
///
/// The [selectionHeightStyle] and [selectionWidthStyle] properties allow
/// changing the shape of the selection highlighting. These properties default
/// to [ui.BoxHeightStyle.tight] and [ui.BoxWidthStyle.tight], respectively.
///
/// See also:
///
///  * [maxLength], which discusses the precise meaning of "number of
///    characters" and how it may differ from the intuitive meaning.A®r	®y  ®Å®á  ®ñ®ú  ®™®∞  ®√)®…  ®Ú©  ©©  ©-1©3  ©d
©j  ©t©z  ©â ©è  ©Ø©µ  ©À©—  ©„©È  ©˛Äê™Å  ™î™ö  ™©™Ø  ™≈™À  ™‡™Ê  ´´	  ´!´'  ´> ´P  ´d ´v  ´ä´ê  ´≠´≥  ´ƒ´   ´◊´›  ´Ò´˜  ¨¨  ¨$¨*  ¨8¨>  ¨T¨Z  ¨j¨p  ¨à¨é  ¨¢¨®  ¨¥¨∫  ¨–¨÷  ¨Á¨Ì  ¨˛≠  ≠≠$  ≠4≠:  ≠O3≠U  ≠à1≠é  ≠ø≠≈  ≠‹/≠‚  Æ0Æ  ÆG ÆN  ÆmÆs  Æâ
Æè  ÆôÆü  ÆΩÆ√  Æ‘Æ⁄  ÆÍÆ  ØØ  ØØ"  Ø4%Ø:  Ø_"Øe  Øá!Øç  ØÆØ¥  Ø∆ØÃ  ØÁ)ØÌ  ∞4∞  ∞P∞V  ∞q∞w  ∞ì∞ô  ÄÌ®’®€®Í®Î©G©Y©Z©ö©£©§©Û©˛©ˇ™	™u™™<™∫™˙´´4´£´Ω´Ê¨«≠k≠m≠n≠|≠}≠£≠•≠¶≠≥≠¥≠Ò≠˜ÆÆÆÆ
ÆÆ*Æ;Æ<Æ≤ØIØWØXØOØVØPØõØüØ†Ø›∞∞0∞g∞∑∞Ω∞‹∞ÿ∞æ∞–∞—∞€∞ˆ∞Ê±∞¯±±L±±3±±±)±*±5±D±E±f±V±x±h±{±º±à±£±|±ä±ô±ö±•±¥±µ±∆±Ã±Ì±ﬁ±÷±Õ±Ÿ±Í±·±Ï±˜±˝≤≤≤±˛≤
≤≤≤≤(≤.≤{≤∏≤b≤L≤9≤J≤C≤:≤F≤O≤`≤Y≤P≤\≤e≤z≤o≤f≤r≤Ü≤¬≤»≥≥S≤‹≤”≤‘≤ﬂ≥≤Ò≤È≤‡≤Ï≤˝≤Ù≥ ≥≥]≥c≥Å≥©≥q≥d≥e≥}≥t≥Ä≥É≥≥≥π¥≥Ú≥Ã≥ƒ≥∫≥«≥Ÿ≥œ≥‹≥Â≥Ê≥ˇ≥ı¥¥ê¥ñµ(µ£¥¥÷¥°¥¢¥´¥‘¥¨¥Ω¥Ã¥Õ¥Î¥‚¥Ó¥¸¥˝µµ'µµµ"µ#µ3µ∫µ≠µ…µºµÃ∂	µ€µµ÷µÕµŸµ›µÍµÎµÚµˇ∂ ∂.∂∂K∂0∂N∂h∂Y∂O∂P∂\∂]B∂nÇËπ@Çë/// {@macro flutter.widgets.magnifier.TextMagnifierConfiguration.intro}
///
/// {@macro flutter.widgets.magnifier.intro}
///
/// {@macro flutter.widgets.magnifier.TextMagnifierConfiguration.details}
///
/// By default, builds a [CupertinoTextMagnifier] on iOS and [TextMagnifier]
/// on Android, and builds nothing on all other platforms. If it is desired to
/// suppress the magnifier, consider passing [TextMagnifierConfiguration.disabled].
///
/// {@tool dartpad}
/// This sample demonstrates how to customize the magnifier that this text field uses.
///
/// ** See code in examples/api/lib/widgets/text_magnifier/text_magnifier.0.dart **
/// {@end-tool} π[ÄõπÏm/// Controls the text being edited.
///
/// If null, this widget will create its own [TextEditingController]. π˚ÜF¿ @8Öﬂ/// Defines the keyboard focus for this widget.
///
/// The [focusNode] is a long-lived object that's typically managed by a
/// [StatefulWidget] parent. See [FocusNode] for more information.
///
/// To give the keyboard focus to this widget, provide a [focusNode] and then
/// use the current [FocusScope] to request the focus:
///
/// ```dart
/// FocusScope.of(context).requestFocus(myFocusNode);
/// ```
///
/// This happens automatically when the widget is tapped.
///
/// To be notified when the widget gains or loses the focus, add a listener
/// to the [focusNode]:
///
/// ```dart
/// myFocusNode.addListener(() { print(myFocusNode.hasFocus); });
/// ```
///
/// If null, this widget will create its own [FocusNode].
///
/// ## Keyboard
///
/// Requesting the focus will typically cause the keyboard to be shown
/// if it's not showing already.
///
/// On Android, the user can hide the keyboard - without changing the focus -
/// with the system back button. They can restore the keyboard's visibility
/// by tapping on a text field. The user might hide the keyboard and
/// switch to a physical keyboard, or they might just need to get it
/// out of the way for a moment, to expose something it's
/// obscuring. In this case requesting the focus again will not
/// cause the focus to change, and will not make the keyboard visible.
///
/// This widget builds an [EditableText] and will ensure that the keyboard is
/// showing when it is tapped by calling [EditableTextState.requestKeyboard()]. ¿ @FÅÉ¿ AøÅS/// The decoration to show around the text field.
///
/// By default, draws a horizontal line under the text field but can be
/// configured to show an icon, label, hint text, and error text.
///
/// Specify null to remove the decoration entirely (including the
/// extra padding introduced by the decoration to save space for the labels). ¿ AŒY¿ B6/// {@macro flutter.widgets.editableText.keyboardType} ¿ B,Å=¿ CZÅ
/// {@template flutter.widgets.TextField.textInputAction}
/// The type of action button to use for the keyboard.
///
/// Defaults to [TextInputAction.newline] if [keyboardType] is
/// [TextInputType.multiline] and [TextInputAction.done] otherwise.
/// {@endtemplate} ¿ Cnj¿ C∆</// {@macro flutter.widgets.editableText.textCapitalization} ¿ C›Ç¿ EÅÌ/// The style to use for the text being edited.
///
/// This text style is also used as the base style for the [decoration].
///
/// If null, [TextTheme.bodyLarge] will be used. When the text field is disabled,
/// [TextTheme.bodyLarge] with an opacity of 0.38 will be used instead.
///
/// If null and [ThemeData.useMaterial3] is false, [TextTheme.titleMedium] will
/// be used. When the text field is disabled, [TextTheme.titleMedium] with
/// [ThemeData.disabledColor] will be used instead. ¿ E˙S¿ FC4/// {@macro flutter.widgets.editableText.strutStyle} ¿ FRO¿ Fò3/// {@macro flutter.widgets.editableText.textAlign} ¿ F¶k¿ G >/// {@macro flutter.material.InputDecorator.textAlignVertical} ¿ G\¿ Ge7/// {@macro flutter.widgets.editableText.textDirection} ¿ GwJ¿ G∏3/// {@macro flutter.widgets.editableText.autofocus} ¿ G∆Ñ˛¿ L¥Ñß/// Represents the interactive "state" of this widget in terms of a set of
/// [MaterialState]s, including [MaterialState.disabled], [MaterialState.hovered],
/// [MaterialState.error], and [MaterialState.focused].
///
/// Classes based on this one can provide their own
/// [MaterialStatesController] to which they've added listeners.
/// They can also update the controller's [MaterialStatesController.value]
/// however, this may only be done when it's safe to call
/// [State.setState], like in an event handler.
///
/// The controller's [MaterialStatesController.value] represents the set of
/// states that a widget's visual properties, typically [MaterialStateProperty]
/// values, are resolved against. It is _not_ the intrinsic state of the widget.
/// The widget is responsible for ensuring that the controller's
/// [MaterialStatesController.value] tracks its intrinsic state. For example
/// one cannot request the keyboard focus for a widget by adding [MaterialState.focused]
/// to its controller. When the widget gains the or loses the focus it will
/// [MaterialStatesController.update] its controller's [MaterialStatesController.value]
/// and notify listeners of the change. ¿ L…^¿ M</// {@macro flutter.widgets.editableText.obscuringCharacter} ¿ M,N¿ Mo5/// {@macro flutter.widgets.editableText.obscureText} ¿ MN¿ M¬5/// {@macro flutter.widgets.editableText.autocorrect} ¿ M“l¿ N/D/// {@macro flutter.services.TextInputConfiguration.smartDashesType} ¿ NCl¿ N†D/// {@macro flutter.services.TextInputConfiguration.smartQuotesType} ¿ N¥e¿ OF/// {@macro flutter.services.TextInputConfiguration.enableSuggestions} ¿ OÄÆ¿ OƒÄî/// {@macro flutter.widgets.editableText.maxLines}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ O—ÄÆ¿ PwÄî/// {@macro flutter.widgets.editableText.minLines}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ PÑF¿ P√1/// {@macro flutter.widgets.editableText.expands} ¿ PœH¿ Q2/// {@macro flutter.widgets.editableText.readOnly} ¿ QÅê¿ RûÄÏ/// Configuration of toolbar options.
///
/// If not set, select all and paste will default to be enabled. Copy and cut
/// will be disabled if [obscureText] is true. If [readOnly] is true,
/// paste and cut will be disabled regardless.¿ R¿ R¿ R¿ RÑ¿ R$¿ RM¿ R±M¿ RÙ4/// {@macro flutter.widgets.editableText.showCursor} ¿ SÄö¿ Sçt/// If [maxLength] is set to this value, only the "current input length"
/// part of the character counter is shown.¿ Sõ¿ Sú¿ S¢Ü¿ YùÖµ/// The maximum number of characters (Unicode grapheme clusters) to allow in
/// the text field.
///
/// If set, a character counter will be displayed below the
/// field showing how many characters have been entered. If set to a number
/// greater than 0, it will also display the maximum number allowed. If set
/// to [TextField.noMaxLength] then only the current character count is displayed.
///
/// After [maxLength] characters have been input, additional input
/// is ignored, unless [maxLengthEnforcement] is set to
/// [MaxLengthEnforcement.none].
///
/// The text field enforces the length with a [LengthLimitingTextInputFormatter],
/// which is evaluated after the supplied [inputFormatters], if any.
///
/// This value must be either null, [TextField.noMaxLength], or greater than 0.
/// If null (the default) then there is no limit to the number of characters
/// that can be entered. If set to [TextField.noMaxLength], then no limit will
/// be enforced, but the number of characters entered will still be displayed.
///
/// Whitespace characters (e.g. newline, space, tab) are included in the
/// character count.
///
/// If [maxLengthEnforcement] is [MaxLengthEnforcement.none], then more than
/// [maxLength] characters may be entered, but the error counter and divider
/// will switch to the [decoration]'s [InputDecoration.errorStyle] when the
/// limit is exceeded.
///
/// {@macro flutter.services.lengthLimitingTextInputFormatter.maxLength} ¿ Y´Å
¿ Z°Äœ/// Determines how the [maxLength] limit should be enforced.
///
/// {@macro flutter.services.textFormatter.effectiveMaxLengthEnforcement}
///
/// {@macro flutter.services.textFormatter.maxLengthEnforcement} ¿ Z∫Åj¿ \Å4/// {@macro flutter.widgets.editableText.onChanged}
///
/// See also:
///
///  * [inputFormatters], which are called before [onChanged]
///    runs and can validate and change ("format") the input value.
///  * [onEditingComplete], [onSubmitted]:
///    which are more specialized input change notifications. ¿ \)c¿ \{;/// {@macro flutter.widgets.editableText.onEditingComplete} ¿ \ëÅ4¿ ]∫Ä˛/// {@macro flutter.widgets.editableText.onSubmitted}
///
/// See also:
///
///  * [TextInputAction.next] and [TextInputAction.previous], which
///    automatically shift the focus to the next/previous focusable item when
///    the user is done editing. ¿ ] t¿ ^+=/// {@macro flutter.widgets.editableText.onAppPrivateCommand} ¿ ^Ck¿ ^ü9/// {@macro flutter.widgets.editableText.inputFormatters} ¿ ^≥ÄÌ¿ _ôÄœ/// If false the text field is "disabled": it ignores taps and its
/// [decoration] is rendered in grey.
///
/// If non-null this property overrides the [decoration]'s
/// [InputDecoration.enabled] property. ¿ _•P¿ _Í5/// {@macro flutter.widgets.editableText.cursorWidth} ¿ _˙S¿ `A6/// {@macro flutter.widgets.editableText.cursorHeight} ¿ `RS¿ `ô6/// {@macro flutter.widgets.editableText.cursorRadius} ¿ `™c¿ `¯?/// {@macro flutter.widgets.editableText.cursorOpacityAnimates} ¿ aÅı¿ b¸Å»/// The color of the cursor.
///
/// The cursor indicates the current location of text insertion point in
/// the field.
///
/// If this is null it will default to the ambient
/// [DefaultSelectionStyle.cursorColor]. If that is null, and the
/// [ThemeData.platform] is [TargetPlatform.iOS] or [TargetPlatform.macOS]
/// it will use [CupertinoThemeData.primaryColor]. Otherwise it will use
/// the value of [ColorScheme.primary] of [ThemeData.colorScheme]. ¿ cÅ%¿ d!Ä˝/// The color of the cursor when the [InputDecorator] is showing an error.
///
/// If this is null it will default to [TextStyle.color] of
/// [InputDecoration.errorStyle]. If that is null, it will use
/// [ColorScheme.error] of [ThemeData.colorScheme]. ¿ d6Äª¿ d›Äà/// Controls how tall the selection highlight boxes are computed to be.
///
/// See [ui.BoxHeightStyle] for details on available styles. ¿ dˆÄ∏¿ eõÄá/// Controls how wide the selection highlight boxes are computed to be.
///
/// See [ui.BoxWidthStyle] for details on available styles. ¿ e≥ÄΩ¿ f^Äé/// The appearance of the keyboard.
///
/// This setting is only honored on iOS devices.
///
/// If unset, defaults to [ThemeData.brightness]. ¿ fuX¿ f¿7/// {@macro flutter.widgets.editableText.scrollPadding} ¿ f“l¿ g$D/// {@macro flutter.widgets.editableText.enableInteractiveSelection} ¿ gCl¿ gû;/// {@macro flutter.widgets.editableText.selectionControls} ¿ g¥e¿ h9/// {@macro flutter.widgets.scrollable.dragStartBehavior} ¿ hóÑ¿ l´ÉÀ/// {@template flutter.material.textfield.onTap}
/// Called for the first tap in a series of taps.
///
/// The text field builds a [GestureDetector] to handle input events like tap,
/// to trigger focus requests, to move the caret, adjust the selection, etc.
/// Handling some of those events by wrapping the text field with a competing
/// GestureDetector is problematic.
///
/// To unconditionally handle taps, without interfering with the text field's
/// internal gesture detector, provide this callback.
///
/// If the text field is created with [enabled] false, taps will not be
/// recognized.
///
/// To be notified when the text field gains or loses the focus, provide a
/// [focusNode] and add a listener to that.
///
/// To listen to arbitrary pointer events without competing with the
/// text field's internal gesture detector, use a [Listener].
/// {@endtemplate}
///
/// If [onTapAlwaysCalled] is enabled, this will also be called for consecutive
/// taps. ¿ lµÄÚ¿ mñÄÕ/// Whether [onTap] should be called for every tap.
///
/// Defaults to false, so [onTap] is only called for each distinct tap. When
/// enabled, [onTap] is called for every tap including consecutive taps. ¿ m¨Çû¿ p>ÇX/// {@macro flutter.widgets.editableText.onTapOutside}
///
/// {@tool dartpad}
/// This example shows how to use a `TextFieldTapRegion` to wrap a set of
/// "spinner" buttons that increment and decrement a value in the [TextField]
/// without causing the text field to lose keyboard focus.
///
/// This example includes a generic `SpinnerField<T>` class that you can copy
/// into your own project and customize.
///
/// ** See code in examples/api/lib/widgets/tap_region/text_field_tap_region.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TapRegion] for how the region group is determined. ¿ pOÉ¿ sIÇƒ/// The cursor for a mouse pointer when it enters or is hovering over the
/// widget.
///
/// If [mouseCursor] is a [MaterialStateProperty<MouseCursor>],
/// [MaterialStateProperty.resolve] is used for the following [MaterialState]s:
///
///  * [MaterialState.error].
///  * [MaterialState.hovered].
///  * [MaterialState.focused].
///  * [MaterialState.disabled].
///
/// If this property is null, [MaterialStateMouseCursor.textable] will be used.
///
/// The [mouseCursor] is the only property of [TextField] that controls the
/// appearance of the mouse pointer. All other properties related to "cursor"
/// stand for the text cursor, which is usually a blinking vertical line at
/// the editing position. ¿ sYÑF¿ wìÉ‹/// Callback that generates a custom [InputDecoration.counter] widget.
///
/// See [InputCounterWidgetBuilder] for an explanation of the passed in
/// arguments. The returned widget will be placed below the line in place of
/// the default widget built when [InputDecoration.counterText] is specified.
///
/// The returned widget will be wrapped in a [Semantics] widget for
/// accessibility, but it also needs to be accessible itself. For example,
/// if returning a Text widget, set the [Text.semanticsLabel] property.
///
/// {@tool snippet}
/// ```dart
/// Widget counter(
///   BuildContext context,
///   {
///     required int currentLength,
///     required int? maxLength,
///     required bool isFocused,
///   }
/// ) {
///   return Text(
///     '$currentLength of $maxLength characters',
///     semanticsLabel: 'character count',
///   );
/// }
/// ```
/// {@end-tool}
///
/// If buildCounter returns null, then no counter and no Semantics widget will
/// be created at all. ¿ w§\¿ wÛ7/// {@macro flutter.widgets.editableText.scrollPhysics} ¿ xe¿ xZ:/// {@macro flutter.widgets.editableText.scrollController} ¿ xoÄ£¿ yy/// {@macro flutter.widgets.editableText.autofillHints}
/// {@macro flutter.services.AutofillConfiguration.autofillHints} ¿ yv¿ yÅX/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge]. ¿ yíÉ;¿ |¿Ç˝/// {@template flutter.material.textfield.restorationId}
/// Restoration ID to save and restore the state of the text field.
///
/// If non-null, the text field will persist and restore its current scroll
/// offset and - if no [controller] has been provided - the content of the
/// text field. If a [controller] has been provided, it is the responsibility
/// of the owner of that controller to persist and restore it, e.g. by using
/// a [RestorableTextEditingController].
///
/// The state of this widget is persisted in a [RestorationBucket] claimed
/// from the surrounding [RestorationScope] using the provided restoration ID.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.
/// {@endtemplate} ¿ |“V¿ }9/// {@macro flutter.widgets.editableText.scribbleEnabled} ¿ }-}¿ }çR/// {@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning} ¿ }ØÄå¿ ~G/// {@macro flutter.widgets.editableText.contentInsertionConfiguration} ¿ ~@Å%¿ SÄﬁ/// {@macro flutter.widgets.EditableText.contextMenuBuilder}
///
/// If not provided, will build a default menu based on the platform.
///
/// See also:
///
///  * [AdaptiveTextSelectionToolbar], which is built by default. ¿ jÅB¿ ÄùÅ/// Determine whether this text field can request the primary focus.
///
/// Defaults to true. If false, the text field will not request focus
/// when tapped, or when its context menu is displayed. If false it will not
/// be possible to move the focus to the text field with tab key. ¿ Ä±a¿ Å3/// {@macro flutter.widgets.undoHistory.controller} ¿ ÅÌÅ¿ ÇÚÄ›/// {@macro flutter.widgets.EditableText.spellCheckConfiguration}
///
/// If [SpellCheckConfiguration.misspelledTextStyle] is not specified in this
/// configuration, then [materialMisspelledTextStyle] is used by default. ¿ ÉÇ3¿ ÑèÅ[/// The [TextStyle] used to indicate misspelled words in the Material style.
///
/// See also:
///  * [SpellCheckConfiguration.misspelledTextStyle], the style configured to
///    mark misspelled words with.
///  * [CupertinoTextField.cupertinoMisspelledTextStyle], the style configured
///    to mark misspelled words with in the Cupertino style.¿ Ñ±¿ Ñ∫¿ Ö@¿ ÑÃ¿ Ñ¬¿ ÑŒ¿ Ñ‹¿ Ñ›¿ Ñ˝¿ ÑÓ¿ Ñˇ¿ Ö¿ Ö¿ Ö ¿ Ö¿ Ö"¿ Ö5¿ Ö6¿ hu¿ hd:/// {@macro flutter.widgets.editableText.selectionEnabled}   ¿ ÅÄ“¿ Å%  ¿ Å@¿ ÅN  ¿ ÅV#¿ Åi   ¿ ÖFÑÂ¿ áÀÇI/// Default builder for [TextField]'s spell check suggestions toolbar.
///
/// On Apple platforms, builds an iOS-style toolbar. Everywhere else, builds
/// an Android-style toolbar.
///
/// See also:
///  * [spellCheckConfiguration], where this is typically specified for
///    [TextField].
///  * [SpellCheckConfiguration.spellCheckSuggestionsToolbarBuilder], the
///    parameter for which this is the default value for [TextField].
///  * [CupertinoTextField.defaultSpellCheckSuggestionsToolbarBuilder], which
///    is like this but specifies the default for [CupertinoTextField]. ¿ á˚¿ à	  ¿ à#¿ à(  ¿ á®¿ á©¿ ä/É¿ ä¯Ä£/// Returns a new [SpellCheckConfiguration] where the given configuration has
/// had any missing values replaced with their defaults for the Android
/// platform. ¿ ã!&¿ ã;   ¿ ç8@¿ çU   ¿ ç8¿ ç9¿ ç|ír¿ çç  ¿ ç°&¿ çæ  ¿ ç|¿ ç} ¿ üÚ¿ bá¿ ü¯   ¿ †Ç,¿ †£  ¿ °¿ °  ¿ ¢A¿ ¢F ¿ ¢T¿ ¢„"¿ ¢Ë ¿ £ ¿ £
O¿ £9  ¿ £ò'¿ £Æ ¿ £ò¿ £ô¿ £ƒ_¿ £Û ¿ £ƒ¿ £≈¿ §¿ §¿ § ¿ §¿ §!¿ §"¿ …A3¿ …[  ¿ †≤Z¿ †Ã    ¿ °)V¿ °7    ¿ °ÉÄ∫¿ °ú    ¿ ¢^ÄÅ¿ ¢g    ¿ §(A¿ §=   ¿ §(¿ §)¿ §ÆM¿ §∑    ¿ §ˇL¿ •    ¿ •OÅó¿ •X    ¿ ¶Íu¿ ¶Û    ¿ ßcÄÄ¿ ßm    ¿ ≥}Å:¿ ≥Ü    ¿ ΩÉ>¿ Ωõ   ¿ ΩÉ¿ ΩÑ¿ æ·E¿ æ¯    ¿  h¿      ¿ ÃÑ?¿ Ãõ   ¿ ÃÑ¿ ÃÖ¿ Õ3Ç{¿ ÕZ   ¿ Õ3¿ Õ4¿ ßÁä¿ ß˜    ¿ ±ÔÅä¿ ≤    ¿ ±Ô¿ ±¿ ¥ªÄç¿ ¥Ã   ¿ ¥ª¿ ¥º¿ µLÖÛ¿ µ]  ¿ µm¿ µx  ¿ µL¿ µM¿ ªCÄò¿ ªT  ¿ ªa¿ ªu  ¿ ª¿ ªÖ  ¿ ªC¿ ªD¿ ªﬂy¿ ª‰    ¿ º\Å#¿ ºa  ¿ ºy¿ ºå   ¿ Ω≈Å¿ Ω÷   ¿ Ω≈¿ Ω∆¿ ø*C¿ ø/    ¿ øqÇÓ¿ øv  ¿ øí¿ ø™   ¿ ¬cÄÌ¿ ¬h    ¿ √TÑ(¿ √Y  ¿ √q¿ √Ä  ¿ √ä¿ √¢   ¿ «ÄÄ«¿ «¡9/// Toggle the toolbar when a selection handle is tapped.   ¿ »KÄ—¿ »P  ¿ »]¿ »c   ¿ …yÄÑ¿ …~    ¿  mÅÈ¿  r    ¿ Ã«h¿ Ãÿ  ¿ Ã· ¿ ÃÛ  ¿ Ã«¿ Ã»¿ œ⁄Å§¿ œ‰  ¿ œ˚¿ –   ¿ —Ç∞ı¿ —ï  ¿ —õ¿ —©  ¿ —Ç¿ —É      ¿{ÅN¿Ü  ¿ô¿ß   ¿ÀÄñ¿’  ¿Í¿¯   ¿wÅW¿Ç  ¿ï¿£   ¿–X¿⁄  ¿Ë¿ˆ   ¿*Äñ¿4  ¿I¿W    ÑRÇ%Ñì8/// Signature for the [TextField.buildCounter] callback.  ÑÓÑ¸  Ö?ÖM  Ö•Ö¥  Ü[Üj       Ü\ <ÄÜÄ§Ä•Ä‡Ä·Å
Å4Å\ÅÖÅ≠ÅÆÅ›Å˘ÇÇ$ÇJÇbÇÅÇöÇ¿ÇﬁÉÉEÉcÉxÉyÉ˚É¸ÑÑ2ÑQÑRÑãÑ¡ÑÏÖÖ=Ö[Ö£ÖæÜÜYÜtÜxÜyÜ◊áá)á@á_á`áÄáÅáçá√áÈà,àNàTàXàYàeàôàÆà≤à≥àøàââ1â5â6âBâáâàâîâ©â âŒâœâ€ääAäfäôä∫ä›äÓãã8ã[ãÄã±ãπãøã√ã≈ã∆ãËãÏå=åWå[å´å˘çEçkçoç¥ééQéüéÀéœèèoèπêêSêWêßê€êﬂë.ëRëVëèë‹í-í}íãíûí¢íˆìFìYì]ìsìwìãì€î,îBîFîìî£îßîΩî¡ïï]ï|ïÄïîï‰ïÚïˆñCñSñWñãñèñ€ñ˜ñ˚óJóïóÊò2ò@òDòîò‘òÿôô@ôDôâôŸö(ö7ö;öwö{ö≥ö∑öÀõõ;õ?õåõúõ†õÆõ≤õÛúBúrú¡ùùYùkù´ûû~ûÏüDümüôüüüÒ†'†-†}†Ã†ÿ†ﬁ°,°|°´°±°˚¢F¢è¢⁄£#£d£≠£≥£¯§2§U§©§•6•<•ç•Ÿ¶$¶4¶:¶â¶Ω¶√ßß`ßØßµß≈ßÀ®®Z®n®}®í®¶®ø®Ó©©)©`©p©Ö©´©«©ﬂ©˙™™6™q™w™ê™•™¡™‹™ˇ´´:´`´Ü´©´¿´”´Ì¨¨ ¨4¨P¨f¨Ñ¨û¨∞¨Ã¨„¨˙≠≠0≠K≠Ñ≠ª≠ÿÆÆCÆiÆÖÆïÆπÆ–ÆÊÆ˝ØØ0Ø[ØÉØ™Ø¬Ø„∞∞L∞m∞è∞∞∞ﬂ±O±ø±≤!≤0≤}≤±≤ª≤ ≥≥L≥V≥¨¥¥â¥ò¥Ÿ¥Ûµ*µúµ¶∂∂k∂l∂∂∂º∂Î∂Ò∑=∑C∑í∑„∏9∏?∏U∏Æ∏¥π
ππXπYππÖπÕπ¯π˘∫+∫1∫|∫¡∫«ªªPªVªdªúª¶ª¨ªËªÓº<ºVº\ºjºÆº∏ºæº˙Ω ΩΩΩaΩÑΩäΩ⁄æ(æoæ∂æÚø4ø}øÉø”¿ @%¿ @C¿ @D¿ @x¿ @~¿ @»¿ A¿ A¿ AV¿ A¶¿ AÀ¿ AÃ¿ B¿ B)¿ B*¿ Bf¿ Bü¿ B•¿ BÊ¿ C,¿ CA¿ Ck¿ Cl¿ C´¿ C⁄¿ C€¿ D¿ D¿ D^¿ Dd¿ D∏¿ E¿ E¿ EZ¿ Eß¿ E›¿ E˜¿ E¯¿ F/¿ FO¿ FP¿ FÜ¿ F£¿ F§¿ FÂ¿ G¿ G¿ GN¿ Gt¿ Gu¿ G´¿ G√¿ Gƒ¿ H¿ Hf¿ H†¿ H¶¿ H‹¿ I¿ Il¿ I®¿ I⁄¿ I‡¿ J.¿ JÄ¿ J”¿ K¿ Ke¿ K¿¿ L¿ Lh¿ Lí¿ L∆¿ L«¿ M¿ M)¿ M*¿ Mb¿ M|¿ M}¿ Mµ¿ Mœ¿ M–¿ N¿ N@¿ NA¿ Nà¿ N±¿ N≤¿ N˚¿ O¿ O¿ OQ¿ O¢¿ O∑¿ OŒ¿ Oœ¿ P¿ PU¿ Pj¿ PÅ¿ PÇ¿ P∂¿ PÃ¿ PÕ¿ Q¿ Q¿ Q¿ QB¿ QH¿ Qò¿ Q‡¿ R¿ R ¿ RI¿ RÇ¿ RÜ¿ RÆ¿ RØ¿ RÊ¿ S ¿ S¿ SL¿ Sz¿ Sü¿ S†¿ SÔ¿ T¿ T¿ TI¿ Tó¿ TÂ¿ U:¿ U@¿ UÖ¿ Uø¿ U‚¿ UË¿ V<¿ VÉ¿ Vâ¿ V€¿ W*¿ W{¿ WÃ¿ W“¿ X¿ X4¿ X:¿ Xâ¿ Xÿ¿ Y&¿ Y?¿ YE¿ Yê¿ Y®¿ Y©¿ YË¿ YÓ¿ Z:¿ Z@¿ ZÉ¿ Z∑¿ Z∏¿ ZÓ¿ ZÙ¿ [¿ [
¿ [J¿ [ê¿ [Ω¿ [˝¿ \&¿ \'¿ \e¿ \é¿ \è¿ \«¿ \Õ¿ \›¿ \„¿ ])¿ ]y¿ ]ú¿ ]«¿ ]»¿ ^¿ ^@¿ ^A¿ ^}¿ ^∞¿ ^±¿ ^ˆ¿ _¿ _$¿ _a¿ _ã¿ _¢¿ _£¿ _€¿ _˜¿ _¯¿ `1¿ `O¿ `P¿ `â¿ `ß¿ `®¿ `Í¿ a¿ a¿ a/¿ a5¿ aÄ¿ aë¿ aó¿ aÃ¿ b¿ b]¿ b®¿ bÌ¿ c	¿ c
¿ cW¿ c]¿ cõ¿ c‹¿ d¿ d3¿ d4¿ d~¿ dÑ¿ d√¿ dÛ¿ dÙ¿ e>¿ eD¿ eÇ¿ e∞¿ e±¿ e◊¿ e›¿ f¿ f¿ fJ¿ fr¿ fs¿ f≠¿ fœ¿ f–¿ g¿ g@¿ gA¿ g¿ g±¿ g≤¿ gÓ¿ h¿ h¿ hY¿ hî¿ hï¿ h»¿ h¸¿ i¿ iS¿ i¢¿ iÚ¿ j¿ j¿ jn¿ j¶¿ j¨¿ jˆ¿ k¿ k¿ k[¿ kâ¿ kè¿ k÷¿ l¿ l+¿ l1¿ lÉ¿ lè¿ l≤¿ l≥¿ lÈ¿ lÔ¿ m>¿ mâ¿ m©¿ m™¿ m„¿ mÈ¿ mˇ¿ nK¿ nõ¿ nÿ¿ nﬁ¿ o.¿ oY¿ o_¿ o∏¿ o ¿ o–¿ o‡¿ oÊ¿ p#¿ pL¿ pM¿ pô¿ pß¿ p≠¿ pÔ¿ qA¿ qG¿ qg¿ qâ¿ q´¿ qŒ¿ q‘¿ r&¿ r,¿ rz¿ r ¿ s¿ s4¿ sV¿ sW¿ s†¿ s¶¿ s¿ t?¿ tè¿ tï¿ t€¿ u(¿ ur¿ ux¿ ué¿ uú¿ u≤¿ u–¿ u⁄¿ v ¿ v#¿ vF¿ vP¿ vZ¿ vo¿ v§¿ v—¿ v‹¿ v‰¿ vÓ¿ w ¿ w¿ wW¿ wp¿ w°¿ w¢¿ w‹¿ x¿ x¿ x@¿ xl¿ xm¿ xß¿ xÎ¿ y¿ y¿ yK¿ yQ¿ yt¿ yè¿ yê¿ yÀ¿ z¿ z¿ ze¿ z≤¿ {¿ {Q¿ {|¿ {Ç¿ {œ¿ | ¿ |&¿ |6¿ |<¿ |â¿ |õ¿ |∞¿ |œ¿ |–¿ }¿ }*¿ }+¿ }Ä¿ }¨¿ }≠¿ }˜¿ ~=¿ ~>¿ ~}¿ ~É¿ ~À¿ ~—¿ ~·¿ ~Á¿ +¿ g¿ h¿ Ø¿ µ¿ ˝¿ ÄL¿ Äê¿ ÄÆ¿ ÄØ¿ ÄÂ¿ Å¿ Å¿ Å}¿ Å≥¿ Åﬂ¿ ÅÊ¿ ÅÍ¿ ÅÎ¿ Ç/¿ Ç5¿ ÇÖ¿ Ç—¿ É¿ É¿ É[¿ Éa¿ Éq¿ É¡¿ ÉÊ¿ Ñ7¿ Ñv¿ Ñ≠¿ Ñº¿ ÑË¿ Ö¿ Ö<¿ ÖC¿ ÖD¿ Öç¿ Öì¿ Ö‚¿ Ü¿ Ü¿ Ü¿ Üb¿ Üx¿ Üƒ¿ á¿ á\¿ á¶¿ áª¿ á˜¿ à¿ à:¿ à@¿ àe¿ àÑ¿ à•¿ àË¿ â¿ â#¿ âF¿ âi¿ âä¿ â≠¿ âÁ¿ ä¿ ä"¿ ä(¿ ä,¿ ä-¿ ä}¿ ä«¿ ä◊¿ ã¿ ãI¿ ãO¿ ãm¿ ã≥¿ ãÍ¿ ã¿ å¿ åP¿ åÇ¿ å≠¿ åÁ¿ ç*¿ ç1¿ ç5¿ ç6¿ çB¿ çy¿ çz¿ çÜ¿ çÀ¿ çˆ¿ éd¿ éƒ¿ è:¿ èë¿ ê¿ êÑ¿ ê‹¿ ë8¿ ë¶¿ í¿ íe¿ ì¿ ì≥¿ î¿ îf¿ î±¿ ï	¿ ïV¿ ï–¿ ñ;¿ ñ¬¿ ó&¿ óû¿ ò¿ òV¿ ò¨¿ ô¿ ôÇ¿ ô’¿ ö2¿ ö•¿ õ,¿ õÆ¿ ú*¿ úü¿ ù¿ ùu¿ ù‹¿ û_¿ ûÈ¿ üÎ¿ üÔ¿ üÒ¿ üÚ¿ †Ä¿ †∞¿ °¿ °¿ °'¿ °Ä¿ °Å¿ °⁄¿ ¢>¿ ¢?¿ ¢[¿ ¢\¿ ¢ê¿ ¢±¿ ¢‡¿ ¢·¿ £¿ £¿ £[¿ £\¿ £ñ¿ £¢¿ £¡¿ £¬¿ £Œ¿ §%¿ §&¿ §2¿ §j¿ §´¿ §¨¿ §¸¿ §˝¿ •L¿ •M¿ •ä¿ •ƒ¿ ¶¿ ¶~¿ ¶Á¿ ¶Ë¿ ß`¿ ßa¿ ß‰¿ ßÂ¿ ®¿ ®f¿ ®ô¿ ®¯¿ ©-¿ ©>¿ ©[¿ ©•¿ ©Æ¿ ©Ø¿ ©ˇ¿ ™Y¿ ™{¿ ™Å¿ ™Ç¿ ™Ã¿ ™·¿ ´¿ ´;¿ ´n¿ ´ò¿ ´”¿ ¨¿ ¨¿ ¨C¿ ¨h¿ ¨Ü¿ ¨è¿ ¨ﬂ¿ ≠¿ ≠¿ ≠9¿ ≠Z¿ ≠y¿ ≠Ñ¿ ≠å¿ ≠…¿ ≠œ¿ ≠–¿ ≠Ù¿ Æ¿ Æ1¿ Æ2¿ Æ]¿ ÆÇ¿ ÆÉ¿ Æ¥¿ Æ’¿ Ø ¿ Ø-¿ Øä¿ Ø·¿ ØÁ¿ ØË¿ ∞¿ ∞1¿ ∞i¿ ∞û¿ ±¿ ±&¿ ±X¿ ±a¿ ±g¿ ±h¿ ±ë¿ ±±¿ ±·¿ ±Ë¿ ±Ï¿ ±Ì¿ ±˘¿ ≤¿ ≤%¿ ≤Ñ¿ ≤©¿ ≤…¿ ≤œ¿ ≥¿ ≥Y¿ ≥v¿ ≥z¿ ≥{¿ ≥ô¿ ¥¿ ¥¿ ¥=¿ ¥r¿ ¥ô¿ ¥Æ¿ ¥¥¿ ¥∏¿ ¥π¿ ¥≈¿ ¥Ê¿ µ	¿ µE¿ µI¿ µJ¿ µV¿ µÑ¿ µ™¿ µÔ¿ ∂*¿ ∂v¿ ∂•¿ ∂√¿ ∂›¿ ∂„¿ ∂‰¿ ∑¿ ∑g¿ ∑±¿ ∑∑¿ ∑∏¿ ∑Ù¿ ∑ı¿ ∏T¿ ∏å¿ ∏æ¿ ∏∆¿ ∏Ã¿ ∏Õ¿ π¿ πS¿ πó¿ πÏ¿ ∫,¿ ∫9¿ ∫ä¿ ∫∑¿ ∫Â¿ ª¿ ª¿ ª6¿ ª<¿ ª@¿ ªA¿ ªM¿ ªñ¿ ªµ¿ ª“¿ ªÿ¿ ª‹¿ ª›¿ ª¸¿ º¿ ºU¿ ºY¿ ºZ¿ ºï¿ º∂¿ º÷¿ Ω¿ Ω>¿ ΩY¿ Ωv¿ Ω|¿ ΩÄ¿ ΩÅ¿ Ωç¿ Ω¬¿ Ω√¿ Ωœ¿ Ω‚¿ æ¿ æ:¿ æV¿ æõ¿ æ≈¿ æ⁄¿ æﬁ¿ æﬂ¿ ø'¿ ø(¿ øD¿ øj¿ øn¿ øo¿ ø≤¿ ¿ ¿ ¿@¿ ¿à¿ ¿ú¿ ¿¢¿ ¿£¿ ¿÷¿ ¿Í¿ ¿¿ ¿Ò¿ ¡:¿ ¡N¿ ¡T¿ ¡U¿ ¡l¿ ¡Ä¿ ¡Ü¿ ¡á¿ ¡Ê¿ ¡˘¿ ¡ˇ¿ ¬ ¿ ¬0¿ ¬C¿ ¬I¿ ¬J¿ ¬\¿ ¬`¿ ¬a¿ ¬Ä¿ ¬í¿ ¬ﬁ¿ ¬Ú¿ ¬˙¿ √M¿ √Q¿ √R¿ √™¿ √¯¿ ƒ5¿ ƒI¿ ƒÉ¿ ƒç¿ ƒì¿ ƒî¿ ƒæ¿ ƒ›¿ ƒ˛¿ ≈¿ ≈B¿ ≈e¿ ≈à¿ ≈¿¿ ≈˙¿ ∆¿ ∆
¿ ∆¿ ∆5¿ ∆T¿ ∆w¿ ∆ö¿ ∆©¿ ∆ ¿ ∆Î¿ «¿ «A¿ «i¿ «s¿ «y¿ «}¿ «~¿ «∫¿ «‚¿ »¿ »>¿ »D¿ »H¿ »I¿ »n¿ »ë¿ »•¿ »≈¿ »œ¿ …¿ …¿ …¿ …¿ …?¿ …v¿ …w¿ …†¿ …‰¿ …˙¿ …˛¿ …ˇ¿  j¿  k¿  å¿  ∑¿  ı¿  ˚¿ À>¿ ÀÄ¿ À”¿ Ã¿ ÃS¿ ÃW¿ ÃX¿ ÃÇ¿ Ãé¿ Ãƒ¿ Ã≈¿ Ã—¿ Õ0¿ Õ1¿ Õ=¿ Õs¿ Õ ¿ Œ¿ Œ7¿ Œ_¿ Œá¿ Œ¬¿ œ¿ œ¿ œA¿ œB¿ œ´¿ œØ¿ œ◊¿ œÿ¿ –¿ –=¿ –Í¿ —O¿ —{¿ —¿ —Ä¿ —å¿ —≥¿ —ﬂ¿ “¿ “J¿ “V¿ “ê¿ “·¿ ”$¿ ”+¿ ”,¿ ”[¿ ”Ø¿ ‘¿ ‘±¿ ’
¿ ’M¿ ’Ç¿ ’»¿ ’Í¿ ÷¿ ÷8¿ ÷T¿ ÷î¿ ÷ü¿ ÷¶¿ ÷ß¿ ÷ˆ¿ ◊G¿ ◊à¿ ◊√¿ ◊Ë¿ ÿ¿ ÿ(¿ ÿJ¿ ÿä¿ ÿ∏¿ ÿ«¿ ÿÍ¿ Ÿ¿ Ÿ.¿ ŸQ¿ Ÿ¢¿ ŸÃ¿ Ÿ◊¿ Ÿ›¿ Ÿﬁ¿ ⁄+¿ ⁄P¿ ⁄ê¿ ⁄™¿ ⁄«¿ ⁄Á¿ €¿ €?¿ €r¿ €•¿ €¶¿ €ƒ¿ €„¿ ‹1¿ ‹S¿ ‹õ¿ ‹¿¿ ‹Ë¿ ›i¿ ›“¿ ﬁ¿ ﬁg¿ ﬁù¿ ﬁû¿ ﬁø¿ ﬂ¿ ﬂ0¿ ﬂ¿ ﬂ§¿ ﬂÕ¿ ‡N¿ ‡∑¿ ‡Ï¿ ·L¿ ·{¿ ·”¿ ‚)¿ ‚Y¿ ‚e¿ ‚p¿ ‚ü¿ ‚»¿ ‚”¿ ‚‘¿ ‚˜¿ „¿ „=¿ „Ñ¿ „™¿ „”¿ ‰R¿ ‰π¿ ‰∫¿ ‰€¿ ‰˛¿ ÂD¿ Âj¿ Âì¿ Ê¿ Êy¿ Ê®¿ Á ¿ ÁV¿ ÁÜ¿ Áí¿ Áù¿ ÁÃ¿ Áı¿ Ë ¿ Ë¿ Ë$¿ ËG¿ Ëç¿ Ë≥¿ Ë‹¿ È[¿ È¬¿ ÈÒ¿ ÍI¿ Íü¿ Íœ¿ Í€¿ ÍÊ¿ Î¿ Î>¿ ÎI¿ ÎO¿ ÎP¿ Ît¿ Îú¿ Î¥¿ Î—¿ ÎÒ¿ Ï%¿ ÏV¿ Ï¿ Ï∂¿ Ïÿ¿ Ï¯¿ Ì)¿ ÌV¿ Ìâ¿ Ì¬¿ Ì⁄¿ Ó¿ Ó*¿ ÓY¿ ÓÄ¿ Óπ¿ Ó‰¿ Ô¿ ÔB¿ Ôu¿ Ô¨¿ Ô—¿ Ôˆ¿ ¿ h¿ Æ¿ Ò¿ Ò*¿ Òa¿ Òò¿ Ò√¿ Ò˛¿ Ú?¿ Úl¿ Úì¿ Úª¿ Û	¿ Û4¿ Ûa¿ Ûá¿ Û´¿ ÛË¿ Ù#¿ Ù[¿ ÙÅ¿ Ù∑¿ Ùˆ¿ ı%¿ ıW¿ ı†¿ ı◊¿ ˆ¿ ˆ;¿ ˆ[¿ ˆü¿ ˆÃ¿ ˆÒ¿ ˜$¿ ˜s¿ ˜¬¿ ˜˚¿ ¯7¿ ¯®¿ ¯≥¿ ¯º¿ ¯√¿ ¯ƒ¿ ¯È¿ ˘¿ ˘T¿ ˘ç¿ ˘Æ¿ ˘·¿ ˙¿ ˙/¿ ˙h¿ ˙ç¿ ˙∏¿ ˙Ï¿ ˚¿ ˚+¿ ˚8¿ ˚C¿ ˚Y¿ ˚b¿ ˚h¿ ˚√¿ ¸¿ ¸!¿ ¸(¿ ¸)¿ ¸Q¿ ¸ò¿ ¸∫¿ ¸Ÿ¿ ˝¿ ˝¿ ˝>¿ ˝D¿ ˝E¿ ˝]¿ ˝Å¿ ˝¡¿ ˛ ¿ ˛!¿ ˛?¿ ˛`¿ ˛Ç¿ ˛√¿ ˇ ¿ ˇ ¿ ˇY¿ ˇç¿ ˇ¬¿ ¿ {¿ è¿ µ¿ »¿¿d¿Ç¿ì¿¢¿Ï¿!¿=¿L¿Y¿d¿m¿t¿x¿z¿{¿Û¿ ¿Q¿É¿á¿∆¿ ¿À¿¿b¿c¿ì¿î¿◊¿¿C¿v¿w¿Ô¿ ¿~¿Ç¿À¿œ¿–¿)¿*¿b¿¡¿¬¿    )_TextFieldSelectionGestureDetectorBuilder	TextField_TextFieldState_m2StateInputStyle_m2CounterErrorStyle_m3StateInputStyle_m3InputStyle_m3CounterErrorStyle ?