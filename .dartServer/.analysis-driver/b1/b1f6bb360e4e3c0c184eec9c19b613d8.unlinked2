ÅOcompositeCallbackenabledcreateRenderObjectupdateRenderObject_cancelCallback_enabledpainttextvaluebuildTextSpan	selectionclearclearComposingisSelectionWithinTextBounds _isSelectionWithinComposingRangeemptycopycutpaste	selectAllonContentInsertedallowedMimeTypesiOSBlinkingCaretKeyFramestimemaxDuration
_keyFramesdxisDone_lastKeyFrameIndexx
controller	focusNodeobscuringCharacterobscureTexttextHeightBehaviortextWidthBasisreadOnly	forceLinetoolbarOptionsshowSelectionHandles
showCursorautocorrectsmartDashesTypesmartQuotesTypeenableSuggestionsstyleundoController
strutStyle_strutStyle	textAligntextDirectiontextCapitalizationlocaletextScaleFactor
textScalercursorColorautocorrectionTextRectColorbackgroundCursorColormaxLinesminLinesexpands	autofocusselectionColorselectionControlskeyboardTypetextInputAction	onChangedonEditingCompleteonSubmittedonAppPrivateCommandonSelectionChangedonSelectionHandleTappedonTapOutsideinputFormattersmouseCursorrendererIgnoresPointercursorWidthcursorHeightcursorRadiuscursorOpacityAnimatescursorOffsetpaintCursorAboveTextselectionHeightStyleselectionWidthStylekeyboardAppearancescrollPaddingenableInteractiveSelectiondebugDeterministicCursordragStartBehaviorscrollControllerscrollPhysicsscribbleEnabledselectionEnabledautofillHintsautofillClientclipBehaviorrestorationIdscrollBehaviorenableIMEPersonalizedLearningcontentInsertionConfigurationcontextMenuBuilderspellCheckConfigurationmagnifierConfiguration_userSelectionEnabledgetEditableButtonItems_inferKeyboardTypecreateStatedebugFillProperties_cursorTimer_cursorBlinkOpacityController$_backingCursorBlinkOpacityController_iosBlinkCursorSimulation_cursorVisibilityNotifier_editableKeyclipboardStatus_liveTextInputStatus_textInputConnection_hasInputConnection_selectionOverlay_scrollableKey_internalScrollController_scrollController_toolbarLayerLink_startHandleLayerLink_endHandleLayerLink_didAutoFocus_currentAutofillScopecurrentAutofillScope_effectiveAutofillClient_spellCheckConfiguration_stylespellCheckEnabledspellCheckResults_spellCheckResultsReceived_processTextService_processTextActions_shouldCreateInputConnection_floatingCursorResetTime_floatingCursorResetController_lastOrientationwantKeepAlive_cursorColor
cutEnabledcopyEnabledpasteEnabledselectAllEnabledlookUpEnabledsearchWebEnabledshareEnabledliveTextInputEnabled_onChangedClipboardStatus_onChangedLiveTextInputStatus%_textEditingValueforTextLayoutMetricscopySelectioncutSelection_allowPaste	pasteText
_pasteTextlookUpSelectionsearchWebForSelectionshareSelection_startLiveTextInputfindSuggestionSpanAtCursorIndex_inferSpellCheckConfigurationbuttonItemsForToolbarOptions_getGlyphHeightscontextMenuAnchorscontextMenuButtonItems _textProcessingActionButtonItems	initState_initProcessTextActions_tickersEnableddidChangeDependenciesdidUpdateWidgetdispose _lastKnownRemoteTextEditingValuecurrentTextEditingValueupdateEditingValue_checkNeedsAdjustAffinityperformActionperformPrivateCommandinsertContent_startCaretCenter_lastTextPosition_pointOffsetOrigin_lastBoundedOffset_floatingCursorOffsetupdateFloatingCursor_onFloatingCursorResetTick_finalizeEditing_batchEditDepthbeginBatchEditendBatchEdit!_updateRemoteEditingValueIfNeeded_value	_hasFocus_isMultiline_getOffsetToRevealCaret_needsAutofill_openInputConnection_closeInputConnectionIfNeeded#_openOrCloseInputConnectionIfNeeded_restartConnectionScheduled_scheduleRestartConnection_restartConnectionIfNeededdidChangeInputControlconnectionClosed_nextFocusChangeIsInternal_flagInternalFocus_unflagInternalFocusrequestKeyboard(_updateOrDisposeSelectionOverlayIfNeeded_onEditableScroll_createSelectionOverlay_handleSelectionChanged_caretAnimationDuration_caretAnimationCurve_showCaretOnScreenScheduled_scheduleShowCaretOnScreen_lastBottomViewInsetdidChangeMetrics_performSpellCheck_formatAndSetValue_bringIntoViewBySelectionState_onCursorColorTick_showBlinkingCursorcursorCurrentlyVisiblecursorBlinkIntervalselectionOverlay_obscureShowCharTicksPending_obscureLatestCharIndex_startCursorBlink_onCursorTick_stopCursorBlink_startOrStopCursorTimerIfNeeded_didChangeTextEditingValue_handleFocusChanged_adjustedSelectionWhenFocused_compositeCallback_updateSizeAndTransform#_schedulePeriodicPostFrameCallbacks_scribbleCacheKey_updateSelectionRects_updateComposingRectIfNeeded_updateCaretRectIfNeeded_textDirectionrenderEditabletextEditingValue_devicePixelRatiouserUpdateTextEditingValuebringIntoViewshowToolbarhideToolbartoggleToolbar showSpellCheckSuggestionsToolbarshowMagnifierhideMagnifier_placeholderLocationinsertTextPlaceholderremoveTextPlaceholderperformSelector
autofillIdtextInputConfigurationautofill_currentPromptRectRangeshowAutocorrectionPromptRect_semanticsOnCopy_semanticsOnCut_semanticsOnPaste_moveBeyondTextBoundary_moveToTextBoundary_characterBoundary_nextWordBoundary
_linebreak_paragraphBoundary_documentBoundary_makeOverridable_transposeCharacters_transposeCharactersAction_replaceText_replaceTextAction_scrollToDocumentBoundary_scroll_extendSelectionByPage_updateSelection_updateSelectionAction_verticalSelectionUpdateAction_hideToolbarIfVisible_defaultOnTapOutside_actionsbuild
inlineSpanstartHandleLayerLinkendHandleLayerLinkhasFocusoffsettextSelectionDelegatedevicePixelRatiopromptRectRangepromptRectColorstructStyleplaceholdersizecomparechildeditableKeyupdateSelectionRects_nextElementIdentifier_elementIdentifierelementIdentifieronScribbleFocusisInScribbleRectbounds_text_breaksSurrogatePairgetLeadingTextBoundaryAtgetTrailingTextBoundaryAtstategetTextBoundary_applyTextBoundaryinvokeisActionEnabledignoreNonCollapsedSelectionisExpandextentAtIndexapplyTextBoundaryNEWLINE_CODE_UNIT_isAtWordwrapUpstream_isAtWordwrapDownstream_verticalMovementRun_runSelection(stopCurrentVerticalRunIfSelectionChangesstartendupdateSelectionChangedCallbackAppPrivateCommandCallbackEditableTextContextMenuBuilder_ApplyTextBoundary_kCursorBlinkHalfPeriod"_kObscureShowLatestCharCursorTicks!kDefaultContentInsertionMimeTypes_CompositionCallback_RenderCompositionCallbackTextEditingControllerToolbarOptionsContentInsertionConfiguration	_KeyFrame_DiscreteKeyFrameSimulationEditableTextEditableTextState	_Editable_ScribbleCacheKey_ScribbleFocusable_ScribbleFocusableState_ScribblePlaceholder_CodePointBoundary_DeleteTextAction_UpdateTextSelectionAction$_UpdateTextSelectionVerticallyAction_SelectAllAction_CopySelectionAction_GlyphHeights_WebClipboardStatusNotifierÉn	TextStyleCharacterRangeStringCharactersDragStartBehaviorKeyboardInsertedContentSelectionChangedCauseSmartDashesTypeSmartQuotesTypeTextEditingValueTextInputTypeTextSelectionvoidStringMapdynamic"SelectableRegionContextMenuBuilderSelectableRegionWidgetBuildContextTextPositionboolTextBoundaryDurationmillisecondsintListSingleChildRenderObjectWidgetCompositionCallbackoverrideRenderObjectupdateRenderObjectcompositeCallbackenabledRenderProxyBoxVoidCallbackcallmarkNeedsPaintPaintingContextOffsetaddCompositionCallbackpaintTextInputFormatterdispose	TextFieldValueNotifieremptytext	composingisValidisComposingRangeValidnotifyListenerscopyWith	selection	collapsedoffset	TextRangevalueTextSpanwithComposingstylemerge
decorationTextDecoration	underlinechildren
textBefore
textInside	textAfterFlutterErrorisCollapsedstartlengthend
DeprecatedreadOnlycontentInsertionConfiguration
isNotEmptyValueChangeddouble
Simulation_iOSBlinkingCaretKeyFrameslasttimei	TextInputCupertinoTextFieldTextInputActiondoneAutomaticKeepAliveClientMixinwantKeepAliveFormIntentActionActionsinvokemaybeInvoke	ShortcutsoverridableDeleteCharacterIntentDeleteToNextWordBoundaryIntentextentDeleteToLineBreakIntentbaseSelectAllTextIntent%DoNothingAndStopPropagationTextIntentReplaceTextIntentUpdateSelectionIntentCopySelectionTextIntentPasteTextIntent#TextSelectionGestureDetectorBuilderSemanticsServiceannounceStatefulWidget	multiline
StrutStyle	TextAlignTextWidthBasisparentTextCapitalizationnoneBoxHeightStyletightBoxWidthStyleall
BrightnesslightCliphardEdgeTextMagnifierConfigurationdisabledTextSelectionHandleControls	selectAllpastecopycutmisspelledTextStyleautofillHintsmaxLinesFilteringTextInputFormattersingleLineFormatterIterable	FocusNodeTextHeightBehaviorUndoHistoryControllerforceStrutHeightinheritFromTextStylefromTextStyleTextDirectionltrrtlDirectionalityRenderEditablelocaleLocaleMediaQueryDatatextScaleFactor
MediaQuery
TextScalerColorCupertinoThemeDataprimaryColorCupertinoColorsinactiveGrayTextFormFieldExpandedSizedBoxDefaultSelectionStyleTextSelectionThemeDataselectionColorTextSelectionControlsbuildToolbar	ThemeDataplatformaddListener
ListenableTextInputClientperformPrivateCommandTextFieldTapRegionunfocusPointerDownEvent	TapRegionTapRegionCallbackSystemMouseCursorsMouseCursorignorePointerpreferredLineHeightRadius
Scrollable
EdgeInsetsScrollController
controllerScrollPhysicsphysicsScrollBehaviorselectionEnabledAutofillClientAutofillScopeAutofillHintsnameemailemailAddressRestorationBucketRestorationScopeRestorableTextEditingControllerRestorationManager	ScrollbarScrollConfigurationonContentInsertedallowedMimeTypesAdaptiveTextSelectionToolbargetAdaptiveButtonsContextMenuButtonItemBrowserContextMenuSpellCheckServiceDefaultSpellCheckServiceSpellCheckConfigurationcontextMenuButtonItemsgetSelectableButtonItemsbuttonItemsClipboardStatusonPasteclipboardStatusunknowndefaultTargetPlatformTargetPlatformandroidaddAllonCut	onPressedtypeContextMenuButtonTypeonCopyonShareshareonSelectAllonLookUplookUponSearchWeb	searchWebonLiveTextInputaddliveTextInputisEmptyfirstkIsWebiOSmacOSaddressCityaddressCityAndStateaddressStatecountryNamecreditCardNumbernumber
familyNamefullStreetAddress	givenNamejobTitlelocation
middleName
namePrefix
nameSuffixnewPasswordnewUsernamenicknameoneTimeCodeorganizationNamepassword
postalCodestreetAddressLine1streetAddressLine2sublocalitytelephoneNumberurlusernameiOSKeyboardTypefuchsialinuxwindowsstreetAddressbirthdaydatetimebirthdayDaybirthdayMonthbirthdayYearcountryCodecreditCardExpirationDatecreditCardExpirationDaycreditCardExpirationMonthcreditCardExpirationYearcreditCardFamilyNamecreditCardGivenNamecreditCardMiddleNamecreditCardNamecreditCardSecurityCodecreditCardTypegenderimpplanguagemiddleInitialphotopostalAddresspostalAddressExtendedpostalAddressExtendedPostalCodestreetAddressLevel1streetAddressLevel2streetAddressLevel3streetAddressLevel4streetAddressLine3phonetelephoneNumberAreaCodetelephoneNumberCountryCodetelephoneNumberDevicetelephoneNumberExtensiontelephoneNumberLocaltelephoneNumberLocalPrefixtelephoneNumberLocalSuffixtelephoneNumberNationaltransactionAmountnumberWithOptionsdecimaltransactionCurrencyDiagnosticPropertiesBuilderdebugFillPropertiesDiagnosticsPropertydefaultValueEnumPropertyIntPropertyStateWidgetsBindingObserverTickerProviderStateMixinTextSelectionDelegateTimerAnimationControllervsynciOSBlinkingCaret	GlobalKeyClipboardStatusNotifierLiveTextLiveTextInputStatusNotifierTextInputConnectionattachedTextSelectionOverlaywidgetscrollController	LayerLinkAutofillGroupStateautofillClientvisibleForTestingspellCheckEnabledSpellCheckResultssuggestionSpansProcessTextServiceDefaultProcessTextServiceProcessTextActionOrientation	focusNodehasFocusmincursorColoralphawithOpacityselectionControlstoolbarOptionsobscureText	pasteableenableInteractiveSelectiontrimLiveTextInputStatussetStatecurrentContext
StateError	ClipboardsetDataClipboardDatatoolbarupdateSchedulerBindinginstanceaddPostFrameCallbackmounted
debugLabelFuturegetData
kTextPlainmax
baseOffsetextentOffsetreplacedSystemChannelsinvokeMethodstartLiveTextInputSuggestionSpanSpellCheckSuggestionsToolbarrangefloorspellCheckServiceWidgetsBindingplatformDispatchernativeSpellCheckServiceDefinedreportErrorFlutterErrorDetails	exceptionlibrarystack
StackTracecurrent
InlineSpantoPlainText
charactersRectgetRectForComposingRangeheightTextSelectionToolbarAnchorslastSecondaryTapDownPositionprimaryAnchorTextSelectionPointgetEndpointsForSelectionfromSelection	renderBoxstartGlyphHeightendGlyphHeightselectionEndpointsgetEditableButtonItemsSelectableRegionStatelabelactionprocessTextActionid	initState
showCursorspellCheckConfigurationclearqueryTextActionsdidChangeDependencies
boldTextOfcontext
fontWeight
FontWeightboldAutofillGroupmaybeOf
unregisterregister	autofocushasSize
FocusScopeof
TickerModeorientationOfdidUpdateWidgetremoveListenerhandlesVisibleshowSelectionHandles
autofillIdupdateKeepAliveupdateConfigtextInputConfigurationsetStyle
fontFamilyfontSizetextDirection	textAligncanPastecancelremoveObserverFocusManagersetEditingStateaffinityscribbleInProgressscribble
forcePresskeyboardbrieflyShowPasswordresetCharTickswithAnimationnewlineshouldUnfocusgonextprevioussearchsendcontinueActionemergencyCalljoinrouteunspecifiedonAppPrivateCommandcontainsmimeTypeRawFloatingCursorPointstateFloatingCursorDragStateStartisAnimatingstopstartLocationshouldResetOrigincurrentTextPositionstartCaretCentergetLocalRectForCaretcenter$calculateBoundedFloatingCursorOffsetsetFloatingCursorUpdatecenteredPointrawCursorOffsetgetPositionForPointlocalToGlobalEnd	animateTodurationcurveCurves
decelerate
centerLeftisCompletedfromPosition
lerpDoubledxdyresetLerpValuepragmaonEditingCompleteErrorDescriptionclearComposing	nextFocuspreviousFocusonSubmittedRevealedOffsetpositionallowImplicitScrollingrectSizesizewidthclampDoublerightleft
fromCenterbottomtopminScrollExtentmaxScrollExtentshiftautofillConfigurationattachshowrequestAutofillcloseconsumeKeyboardTokenscheduleMicrotaskcurrentAutofillScopeTextInputControlhideconnectionClosedReceivedrequestFocusupdateForScrollcontextMenuBuilderdebugRequiredFortoolbarLayerLinkstartHandleLayerLinkendHandleLayerLinkrenderObjectselectionDelegatedragStartBehavioronSelectionHandleTappedmagnifierConfigurationisSelectionWithinTextBounds	doubleTapdrag	longPresstapshowHandlesonSelectionChangedCurvefastOutSlowInfindRenderObject
hasClientsscrollPaddinggetHandleSizekMinInteractiveDimensiongetHandleAnchorTextSelectionHandleTypeTextBoxgetBoxesForSelectiontoRectshowOnScreeninflateRectjumpToFlutterViewView
viewInsetsLocalizationsmaybeLocaleOffetchSpellCheckSuggestionsinputFormattersfold	formatterformatEditUpdatenewValueuserInteraction	onChangeddebugDeterministicCursorisActivecursorOpacityAnimatesanimateWithwhenCompleteperiodiczero(stopCurrentVerticalRunIfSelectionChangesaddObserverLayerElementdebugIsActiveMatrix4getTransformTosetEditableSizeAndTransformscribbleEnabledScrollDirectionuserScrollDirectionidle
textScalerlineartextScalerOf
inlineSpantextHeightBehaviorDefaultTextHeightBehaviorstructStyle
strutStyleplaceholderRenderComparisonforcelayoutcompareindexSelectionRectincludeSemanticsLabelsmoveNextpaintBoundsbounds	directionsetSelectionRectssetComposingRectsetCaretRectdevicePixelRatioOfshowToolbarhideHandlestoolbarIsVisiblehideToolbar#spellCheckSuggestionsToolbarBuilder showSpellCheckSuggestionsToolbarmagnifierIsVisibleupdateMagnifiershowMagnifierhideMagnifierintentForMacOSSelectorprimaryFocushashCodeTextInputConfigurationtoListgrowableAutofillConfigurationuniqueIdentifiercurrentEditingValue	inputTypekeyboardTypeautocorrectsmartDashesTypesmartQuotesTypeenableSuggestions_userSelectionEnabledinputActiontextInputActiontextCapitalizationkeyboardAppearanceenableIMEPersonalizedLearningcanCopy
handleCopycanCut	handleCuthandlePastegetTrailingTextBoundaryAtgetLeadingTextBoundaryAtTextAffinityupstream
downstreamCharacterBoundarywordBoundariesmoveByWordBoundaryLineBoundaryParagraphBoundaryDocumentBoundarydefaultActionTransposeCharactersIntentatmoveBack
expandNextcurrentCharactersstringBeforestringAfterstringBeforeLengthCallbackActiononInvokecurrentTextEditingValuereplacementRangereplacementTextcauseScrollToDocumentBoundaryIntentforwardScrollIntentScrollIncrementTypepageScrollPositionScrollableStatecurrentStateScrollActiongetDirectionalIncrementpixelsExtendSelectionByPageIntentAxisDirectiondownupnewSelectionDirectionalCaretMovementIntentObjectDismissIntentonTapOutsidekindPointerDeviceKindtouchmousestylusinvertedStylustrackpadUnimplementedErrorTypeDoNothingActionconsumesKeyDirectionalFocusIntentDirectionalFocusActionforTextField ExtendSelectionByCharacterIntentignoreNonCollapsedSelection'ExtendSelectionToNextWordBoundaryIntent,ExtendSelectionToNextParagraphBoundaryIntent ExtendSelectionToLineBreakIntent-ExtendSelectionVerticallyToAdjacentLineIntent-ExtendSelectionVerticallyToAdjacentPageIntent;ExtendSelectionToNextParagraphBoundaryOrCaretLocationIntent'ExtendSelectionToDocumentBoundaryIntent6ExtendSelectionToNextWordBoundaryOrCaretLocationIntent ExpandSelectionToLineBreakIntentisExpand'ExpandSelectionToDocumentBoundaryIntentextentAtIndexintentdebugCheckHasMediaQuerybuildchildkReleaseModeMouseRegioncursormouseCursoractionsUndoHistoryonTriggeredshouldChangeUndoStackoldValueundoStackModifierundoControllerFocusincludeSemanticskeyexcludeFromSemanticsaxisDirectionscrollPhysicsrestorationIdscrollBehavior
scrollbars
overscrollviewportBuilderViewportOffsetCompositedTransformTargetlink	SemanticseditableKeyupdateSelectionRectsbackgroundCursorColor	forceLineminLinesexpandsspellCheckToolbarIsVisiblemisspelledSelectionColortextWidthBasisobscuringCharacterrendererIgnoresPointercursorWidthcursorHeightcursorRadiuscursorOffsetselectionHeightStyleselectionWidthStylepaintCursorAboveTexttextSelectionDelegatedevicePixelRatiopromptRectRangepromptRectColorautocorrectionTextRectColorclipBehaviorSetreplaceRange	substringshrink&buildTextSpanWithSpellCheckSuggestionsbuildTextSpanMultiChildRenderObjectWidget
WidgetSpanextractFromInlineSpansetPromptRectRange	immutable	identical	compareToScribbleClienttoStringregisterScribbleElementunregisterScribbleElementselectPositionAtfromoverlaps	intersectHitTestResulthitTestInViewviewIdpathanyHitTestEntryentrytarget	RenderBoxMatrixUtilstransformRectfromLTWHTextPainterParagraphBuilder	noScalingPlaceholderDimensionsdebugAssertIsValid	pushStylegetTextStyleaddPlaceholder	alignmentpoprunesisHighSurrogate
codeUnitAtisLowSurrogateDirectionalTextEditingIntentContextAction_value_characterBoundaryrenderEditablegetLineAtOffsettextEditingValuecollapseSelectioncontinuesAtWrapexpandToextendTocollapseAtReversalVerticalCaretMovementRun%_textEditingValueforTextLayoutMetricsstartVerticalCaretMovementmoveByOffsetmovePreviouscutSelectioncopySelection
hasStringsSingleChildRenderObjectWidgetRenderProxyBoxValueNotifier
SimulationStatefulWidgetStateAutomaticKeepAliveClientMixinWidgetsBindingObserverTickerProviderStateMixinTextSelectionDelegateTextInputClientAutofillClientMultiChildRenderObjectWidgetScribbleClient
WidgetSpanTextBoundaryContextActionClipboardStatusNotifier‚Ë±êy‘5·¡Ûπj ÜBÜ«KeyboardInsertedContentSelectionChangedCauseSmartDashesTypeSmartQuotesTypeTextEditingValueTextInputTypeTextSelection Üpackage:flutter/services.dart,  Ä¶  
dart:async  Äª  ÄÕmathÄ–	dart:mathÄÌÄ˚ 	TextStyle Ä◊  ÄÁuiÄÍdart:uiÅ*ÅOCharacterRangeStringCharacters Äˇ  "package:characters/characters.dart  ÅR  package:flutter/foundation.dartÅ¢Å∏DragStartBehavior Å|  package:flutter/gestures.dart  Åª  package:flutter/rendering.dart  Å‰  package:flutter/scheduler.dart  Ç  package:flutter/services.dart  Ç6  actions.dart  ÇM  autofill.dart  Çe  automatic_keep_alive.dart  Çâ  
basic.dart  Çû  binding.dart  Çµ  constants.dart  ÇŒ  context_menu_button_item.dart  Çˆ  
debug.dart  É  default_selection_style.dart  É2  #default_text_editing_shortcuts.dart  É`  focus_manager.dart  É}  focus_scope.dart  Éò  focus_traversal.dart  É∑  framework.dart  É–  localizations.dart  ÉÌ  magnifier.dart  Ñ  media_query.dart  Ñ!  scroll_configuration.dart  ÑE  scroll_controller.dart  Ñf  scroll_physics.dart  ÑÑ  scroll_position.dart  Ñ£  scrollable.dart  ÑΩ  scrollable_helpers.dart  Ñﬂ  shortcuts.dart  Ñ¯  spell_check.dart  Ö  tap_region.dart  Ö-  	text.dart  ÖA  text_editing_intents.dart  Öe  text_selection.dart  ÖÉ  #text_selection_toolbar_anchors.dart  Ö±  ticker_provider.dart  Ö–  undo_history.dart  ÖÏ  	view.dart  Ü   widget_span.dart    	dart:core¿ôÍ ¿ö@ñ{ <ÄÜÄ§Ä•Ä∫Ä÷Ä˝Ä˛ÅQÅ{Å∫Å„ÇÇ4Ç5ÇLÇdÇàÇùÇ¥ÇÕÇıÉ
É1É_É|ÉóÉ∂ÉœÉÏÑÑ ÑDÑeÑÉÑ¢ÑºÑﬁÑ˜ÖÖ,Ö@ÖdÖÇÖ∞ÖœÖÎÖˇÜÜÜ…Ü Ü‚á ááánáìá¸á˝àJàßà®àÙââââ#âqâåâ∆âﬁäää	äVäëäÁäËã/ã~ã©ãÔãå;åbåîåïå‚åÊç/çpççéçùç≠çºçÃç€çﬁçﬂé"éâé∏éŒéœé€èèXè\èhè√è¯ê1êrêñêöêúêùê◊ëëëLëmënëéëßë∆ëﬂëÙíí1í[ísíyí}í~íäíƒí◊ì$ì*ìLìPìRìSìÄìÑì√îîaîØîºî¿ïïMïQï¢ïÔñ3ñ7ñÖñŒóólóµòòLòãò–ò‘ô!ôCôGôïôﬂôÛö?öäöÆö≤õõõ"õ0õ4õÖõ¨õˆú(ú÷ùùSùYù¶ù¥ùﬁû1û2ûåûíû÷ûˆü1ü?üëü·†2†\†e†ì†î†¬†„°4°Ç°œ¢¢¢P¢ú¢È££-£I£^£ö£º£√£«£»£‘£˝§	§N§ü§Ò•• •<•@•A•u•{•Ã¶¶x¶œß ßpßº®®®=®n®t®u®ﬁ© ©5©I©e©•©∑©ÿ™™™Z™c™j™n™o™î™ö™Í´´:´ã´Ÿ¨&¨d¨j¨ß¨Ó≠;≠b≠h≠∂≠„ÆÆGÆäÆêÆ≥ØØ$ØCØëØïØñØ∂Øº∞∞9∞?∞ê∞ﬁ±/±m±~±—±’±÷≤≤≤\≤ß≤µ≤ª≥≥Z≥´≥È¥¥;¥?¥@¥Ñ¥¬µµµµUµòµıµ˘µ˚µ¸∂*∂.∂|∂…∂›∂·∑5∑à∑î∑°∑»∑ˇ∏∏∏Q∏W∏ö∏©∏“πππ(π?πUπmπâπèπêπœ∫∫∫6∫<∫U∫h∫i∫ñ∫ú∫Ó∫Ùªªª ªOªUª©ªØª»ª‹ª›ººº0ºHºJºKºôºùºÏΩ9Ω\Ω`ΩnΩrΩ•ΩÀææælææÖæ¡ø
ø,øQøêøºøΩ¿ @¿ @6¿ @<¿ @é¿ @î¿ @™¿ @∞¿ @˝¿ A¿ A¿ A~¿ Aê¿ Añ¿ A¶¿ A¨¿ Aˆ¿ B7¿ B8¿ Bâ¿ BŸ¿ Bˇ¿ C¿ CU¿ CÄ¿ CÜ¿ C’¿ D!¿ D7¿ D=¿ Dg¿ Dm¿ DÉ¿ D—¿ D◊¿ E?¿ EQ¿ EW¿ Eg¿ Em¿ E∑¿ EÃ¿ EÛ¿ Eı¿ Eˆ¿ F8¿ FJ¿ Ft¿ Fü¿ FÁ¿ G¿ G/¿ GS¿ Gw¿ Gõ¿ Gø¿ G„¿ H¿ H+¿ HO¿ Ht¿ Hy¿ Hz¿ Hª¿ H–¿ HÊ¿ HË¿ HÈ¿ I ¿ IÉ¿ I∆¿ IÎ¿ J¿ J0¿ Jl¿ J©¿ J√¿ Jœ¿ JŸ¿ JÓ¿ K,¿ K-¿ KI¿ KJ¿ Kn¿ Ko¿ K{¿ Kö¿ Kõ¿ Kß¿ K⁄¿ K€¿ L'¿ LE¿ LF¿ LR¿ Ll¿ Lñ¿ Ló¿ LÊ¿ M0¿ MT¿ Mi¿ MÅ¿ M∑¿ N¿ N#¿ N:¿ N_¿ Nl¿ Nî¿ N≠¿ N≥¿ N¥¿ N˝¿ OK¿ Ot¿ O®¿ O‚¿ P ¿ P¿ P¿ P/¿ P5¿ P6¿ P\¿ Pç¿ Pë¿ Pì¿ Pî¿ P≤¿ P∂¿ Q¿ QN¿ Q\¿ Q`¿ Q™¿ Qı¿ R/¿ R3¿ RN¿ RR¿ R¢¿ RÛ¿ S=¿ SA¿ SÜ¿ Sä¿ S⁄¿ T%¿ T)¿ Tl¿ Tp¿ TÖ¿ Tâ¿ T‘¿ U#¿ UB¿ UF¿ Uî¿ U€¿ V&¿ Vt¿ V¡¿ W¿ WZ¿ W©¿ Wœ¿ W”¿ X
¿ X¿ X¿ Xp¿ Xå¿ Xê¿ X‹¿ Y)¿ YT¿ YX¿ Yô¿ Yù¿ YÍ¿ Z,¿ Z0¿ Zy¿ Z»¿ [¿ [¿ [¿ [m¿ [Ω¿ [·¿ [Â¿ \¿ \#¿ \o¿ \º¿ ] ¿ ]P¿ ]ó¿ ]π¿ ]Ω¿ ^¿ ^T¿ ^£¿ ^œ¿ ^”¿ _¿ _¿ `¿ `¨¿ aW¿ b2¿ c(¿ c,¿ cÉ¿ cá¿ dq¿ e[¿ f\¿ g[¿ h†¿ iü¿ j ¿ kı¿ l¡¿ l≈¿ lÚ¿ lˆ¿ m‡¿ n ¿ oà¿ p7¿ q~¿ r'¿ rÓ¿ sµ¿ tb¿ tü¿ t£¿ tπ¿ tΩ¿ u$¿ uã¿ v&¿ vÒ¿ wü¿ x¿ xº¿ x¿¿ xﬂ¿ x„¿ y2¿ y¿ y™¿ yÆ¿ y˛¿ zM¿ zõ¿ z∆¿ z ¿ {	¿ {4¿ {8¿ {á¿ {“¿ {÷¿ |¿ |j¿ |ù¿ |«¿ |⁄¿ |ﬁ¿ }¿ }L¿ }P¿ }ã¿ }è¿ }Ÿ¿ ~¿ ~:¿ ~>¿ ~Ñ¿ ~—¿ ¿ f¿ ±¿ ˘¿ ˝¿ Ä	¿ Ä+¿ ÄK¿ Äò¿ Ä†¿ Ä¶¿ ÄÆ¿ Ä≤¿ Ä≈¿ Ä…¿ Ä◊¿ Ä€¿ Å*¿ Åh¿ Åî¿ Åæ¿ Åƒ¿ Ç¿ Çb¿ Ç¢¿ Ç®¿ Ç˜¿ ÉH¿ ÉÖ¿ É–¿ É÷¿ Ñ%¿ ÑY¿ Ñj¿ Ñy¿ Ñó¿ Ñ¥¿ Ñœ¿ ÑÚ¿ Ö¿ Ö-¿ ÖS¿ Öy¿ Öú¿ Öµ¿ Ö—¿ Ö¿ Ü¿ Ü?¿ ÜW¿ Üh¿ Üy¿ Üö¿ á	¿ áE¿ áK¿ áe¿ áz¿ áë¿ á§¿ áæ¿ áŸ¿ áˆ¿ à'¿ àC¿ àY¿ àÄ¿ àô¿ àµ¿ à÷¿ à¿ â'¿ â;¿ âW¿ âm¿ âã¿ â®¿ â ¿ â·¿ ä¿ ä&¿ äO¿ äk¿ äÇ¿ äô¿ ä¡¿ äÿ¿ äˇ¿ ã8¿ ão¿ ã§¿ ã‘¿ å
¿ å0¿ åK¿ åc¿ åâ¿ åö¿ å≈¿ ç ¿ ç¿ ç*¿ çU¿ çn¿ çï¿ ç≠¿ ç∆¿ çÁ¿ é¿ é>¿ é[¿ é}¿ éƒ¿ é›¿ è¿ è|¿ èÏ¿ ê¿ ê,¿ êy¿ ê≠¿ ê∑¿ ê∆¿ ë¿ ëH¿ ëR¿ ë®¿ í¿ íï¿ í≠¿ í»¿ ì¿ ì:¿ ìd¿ ìí¿ ìΩ¿ ìÂ¿ î	¿ î!¿ î<¿ îk¿ îñ¿ îæ¿ î·¿ î¯¿ ï&¿ ïQ¿ ït¿ ïñ¿ ïæ¿ ï‚¿ ï¸¿ ñ¿ ñ8¿ ñâ¿ ñ»¿ ó3¿ ó=¿ ó^¿ ó ¿ óÒ¿ ò¿ òT¿ ò•¿ ò¥¿ ò“¿ òˇ¿ ô ¿ ô&¿ ôP¿ ôQ¿ ôà¿ ô•¿ ô¶¿ ôË¿ ö*¿ ö0¿ öW¿ ö]¿ öê¿ ö•¿ ö»¿ ö…¿ õ¿ õG¿ õM¿ õñ¿ õ‚¿ ú2¿ úE¿ úK¿ úd¿ úy¿ úì¿ úî¿ úæ¿ úÓ¿ úÔ¿ ù*¿ ùQ¿ ùR¿ ùä¿ ù±¿ ù∑¿ ùÛ¿ û>¿ ûD¿ û]¿ ûr¿ ûâ¿ ûä¿ ûÿ¿ ûﬁ¿ ü,¿ ü]¿ üc¿ ü{¿ üÅ¿ üë¿ üó¿ ü‡¿ ü¯¿ ü˘¿ †!¿ †'¿ †w¿ †∆¿ °¿ °;¿ °b¿ °c¿ °å¿ °í¿ °ﬁ¿ ¢.¿ ¢U¿ ¢[¿ ¢k¿ ¢q¿ ¢µ¿ ¢ÿ¿ ¢Ÿ¿ £¿ £1¿ £7¿ £â¿ £û¿ £§¿ £¥¿ £∫¿ §¿ §,¿ §-¿ §h¿ §ê¿ §ñ¿ §Æ¿ §√¿ §›¿ §ﬁ¿ •%¿ •N¿ •O¿ •ñ¿ •ø¿ •¿¿ ¶	¿ ¶)¿ ¶*¿ ¶]¿ ¶v¿ ¶w¿ ¶≥¿ ¶π¿ ß¿ ß0¿ ß1¿ ßk¿ ßü¿ ß•¿ ßÏ¿ ®/¿ ®s¿ ®æ¿ ©	¿ ©¿ ©[¿ ©§¿ ©¿ ©ˇ¿ ™¿ ™P¿ ™ì¿ ™ô¿ ´¿ ´V¿ ´k¿ ´q¿ ´∆¿ ¨¿ ¨X¿ ¨v¿ ¨ï¿ ¨€¿ ¨·¿ ≠¿ ≠¿ ≠:¿ ≠;¿ ≠t¿ ≠ß¿ ≠≠¿ ≠“¿ ≠Á¿ Æ¿ Æ¿ ÆB¿ Æh¿ Æn¿ Æ≥¿ Æ⁄¿ Æ‡¿ Ø.¿ Ø{¿ Ø…¿ ∞¿ ∞b¿ ∞r¿ ∞x¿ ∞∞¿ ∞≈¿ ∞Î¿ ∞Ï¿ ±.¿ ±u¿ ±è¿ ±ï¿ ±ﬂ¿ ≤¿ ≤¿ ≤G¿ ≤M¿ ≤]¿ ≤c¿ ≤µ¿ ≤ª¿ ≤–¿ ≤ˇ¿ ≥ ¿ ≥@¿ ≥x¿ ≥~¿ ≥≈¿ ¥¿ ¥¿ ¥U¿ ¥m¿ ¥n¿ ¥≠¿ ¥Û¿ µ¿ µ¿ µM¿ µS¿ µ§¿ µ√¿ µ…¿ ∂¿ ∂[¿ ∂p¿ ∂¿ ∂û¿ ∑¿ ∑E¿ ∑I¿ ∑j¿ ∑k¿ ∑¢¿ ∑¬¿ ∑√¿ ∑Ù¿ ∏¿ ∏¿ ∏N¿ ∏T¿ ∏ï¿ ∏Â¿ π>¿ πL¿ πR¿ πè¿ πï¿ π⁄¿ ∫¿ ∫¿ ∫X¿ ∫É¿ ∫â¿ ∫Œ¿ ∫Û¿ ∫Ù¿ ª,¿ ªz¿ ªÄ¿ ª–¿ º¿ º	¿ ºS¿ ºo¿ ºu¿ º√¿ Ω
¿ Ω[¿ ΩÉ¿ Ωâ¿ Ω⁄¿ æ+¿ æ|¿ æ∏¿ ææ¿ ø¿ øZ¿ øä¿ øê¿ ø‹¿ øÍ¿ ¿¿ ¿¿ ¿¿ ¿a¿ ¿±¿ ¿Ú¿ ¡ ¿ ¡&¿ ¡0¿ ¡6¿ ¡Å¿ ¡¬¿ ¡–¿ ¡Û¿ ¡˝¿ ¬¿ ¬R¿ ¬¿ ¬ç¿ ¬Ω¿ ¬«¿ ¬Õ¿ ¬›¿ ¬„¿ √(¿ √=¿ √é¿ √£¿ √∫¿ √ª¿ √Û¿ ƒC¿ ƒI¿ ƒô¿ ƒÃ¿ ƒ“¿ ≈$¿ ≈v¿ ≈|¿ ≈“¿ ≈ÿ¿ ∆)¿ ∆t¿ ∆Ü¿ ∆å¿ ∆›¿ «,¿ «L¿ «R¿ «¨¿ «˝¿ »¿ »¿ »h¿ »å¿ »ö¿ »∑¿ »¡¿ »«¿ …¿ …f¿ …¿ …ç¿ …º¿ …∆¿ …Ã¿ …‰¿ …Í¿ …˙¿   ¿  M¿  ò¿  ¥¿  …¿ À¿ À/¿ ÀF¿ ÀG¿ À~¿ À√¿ À…¿ Ã¿ ÃL¿ ÃR¿ Ãû¿ Ã¬¿ Ã»¿ Ã·¿ ÃÁ¿ Õ8¿ Õ¿ ÕÖ¿ Õ∏¿ Õ∆¿ Õ‹¿ Œ¿ Œ¿ Œ'¿ Œ<¿ ŒR¿ ŒS¿ Œå¿ ŒŸ¿ ŒË¿ ŒÓ¿ œ>¿ œé¿ œî¿ œ≠¿ œ¬¿ –¿ –-¿ –E¿ –F¿ –z¿ –Ä¿ –Œ¿ –Ì¿ –Û¿ —4¿ —Ñ¿ —œ¿ —Ó¿ —Ô¿ “0¿ “q¿ “w¿ “«¿ ”¿ ”\¿ ”©¿ ”Ï¿ ‘¿ ‘¿ ‘¿ ‘¿ ‘n¿ ‘∫¿ ‘Õ¿ ’¿ ’l¿ ’¢¿ ’‘¿ ’’¿ ÷¿ ÷I¿ ÷O¿ ÷è¿ ÷∫¿ ÷œ¿ ÷Û¿ ÷Ù¿ ◊3¿ ◊]¿ ◊^¿ ◊ó¿ ◊ÿ¿ ÿ¿ ÿ¿ ÿY¿ ÿ†¿ ÿ‰¿ Ÿ¿ Ÿ¿ ŸR¿ Ÿó¿ Ÿ¬¿ Ÿ»¿ ⁄¿ ⁄h¿ ⁄∑¿ ⁄Ω¿ ⁄”¿ €!¿ €h¿ €n¿ €Õ¿ €ﬂ¿ €Ù¿ €˙¿ ‹0¿ ‹i¿ ‹å¿ ‹€¿ ›'¿ ›r¿ ›†¿ ›¶¿ ›È¿ ﬁ.¿ ﬁv¿ ﬁ∆¿ ﬂ¿ ﬂ<¿ ﬂQ¿ ﬂW¿ ﬂg¿ ﬂm¿ ﬂ≠¿ ﬂÛ¿ ‡6¿ ‡v¿ ‡ƒ¿ ·¿ ·0¿ ·1¿ ·r¿ ·≈¿ ·‰¿ ·Í¿ ‚7¿ ‚_¿ ‚e¿ ‚¥¿ „¿ „ ¿ „&¿ „v¿ „≈¿ ‰¿ ‰D¿ ‰J¿ ‰ú¿ ‰±¿ ‰⁄¿ ‰€¿ Â¿ Âf¿ Âs¿ Ây¿ Â√¿ Ê¿ ÊW¿ Ê]¿ Ên¿ ÊΩ¿ Ê√¿ Ê—¿ Á¿ Á!¿ Á'¿ Áu¿ Áø¿ Ë¿ Ë5¿ ËJ¿ Ëu¿ Ëv¿ Ëπ¿ È ¿ È¿ ÈQ¿ Èa¿ Èg¿ È∂¿ ÈÌ¿ ÈÛ¿ Í¿ Í∑¿ Î¿ Î7¿ Î≈¿ Ï¿ ÏC¿ ÏX¿ Ïê¿ Ïë¿ Ï”¿ Ì"¿ Ì3¿ ÌH¿ Ì~¿ Ì¿ Ì«¿ Ìˆ¿ Ì˜¿ Ó3¿ ÓÇ¿ Ó®¿ ÓÆ¿ Óˇ¿ ÔN¿ Ôõ¿ ÔÈ¿ 9¿ k¿ q¿ ¬¿ Ò¿ ÒY¿ Òß¿ Ò˜¿ Ú¿ Ú¿ Új¿ Úµ¿ Û¿ ÛA¿ ÛV¿ Û\¿ Ûr¿ Ûæ¿ Ù¿ ÙK¿ ÙQ¿ Ù°¿ ÙÃ¿ Ù“¿ ı+¿ ı=¿ ıC¿ ıS¿ ıY¿ ıñ¿ ıø¿ ı¿¿ ıˇ¿ ˆ9¿ ˆ?¿ ˆç¿ ˆﬁ¿ ˜)¿ ˜z¿ ˜´¿ ˜±¿ ˜¡¿ ˜«¿ ¯¿ ¯X¿ ¯m¿ ¯†¿ ¯°¿ ¯Ì¿ ¯˚¿ ˘¿ ˘I¿ ˘O¿ ˘†¿ ˘¿ ˙?¿ ˙[¿ ˙}¿ ˙~¿ ˙«¿ ˚
¿ ˚¿ ˚X¿ ˚ß¿ ˚Ì¿ ˚Û¿ ¸B¿ ¸ì¿ ¸„¿ ˝¿ ˝¿ ˝`¿ ˝ï¿ ˝õ¿ ˝ƒ¿ ˝ ¿ ˝⁄¿ ˝‡¿ ˛(¿ ˛{¿ ˛ú¿ ˛¡¿ ˛¬¿ ˛˝¿ ˇ!¿ ˇ'¿ ˇ>¿ ˇD¿ ˇå¿ ˇŸ¿ %¿ u¿ ï¿ ™¿ ∆¿ «¿¿&¿,¿¿î¿≤¿≥¿Ô¿&¿,¿X¿m¿ã¿å¿—¿¿>¿D¿î¿∏¿Õ¿Ò¿Ú¿.¿L¿M¿ë¿¥¿µ¿ˇ¿¿D¿t¿u¿ø¿≈¿¿1¿2¿X¿^¿ë¿ó¿Ω¿‰¿Â¿"¿Ö¿ã¿Ô¿#¿ë¿	¿	¿	5¿	J¿	l¿	m¿	∑¿	˚¿
¿
¿
\¿
ö¿
Ÿ¿
ﬂ¿"¿h¿ë¿ó¿Ø¿ƒ¿Ì¿Ó¿;¿ä¿¢¿®¿¯¿¿"¿c¿ì¿î¿–¿˝¿˛¿>¿á¿ç¿»¿Œ¿Ò¿¿2¿3¿p¿∂¿º¿¿¿,¿A¿G¿í¿›¿Ù¿¿¿Z¿û¿§¿√¿…¿·¿ˆ¿¿¿U¿Å¿á¿ø¿Ë¿˝¿8¿9¿v¿»¿⁄¿‡¿/¿~¿¡¿¿@¿F¿î¿Ω¿√¿‰¿Í¿¿¿`¿î¿ö¿∏¿:¿å¿·¿7¿á¿ƒ¿ ¿Ì¿Û¿C¿î¿‡¿¿¿N¿T¿¢¿Ï¿Ú¿?¿è¿€¿)¿w¿«¿Õ¿¿h¿∂¿¿W¿h¿n¿π¿¿O¿U¿°¿º¿¬¿ ¿ ^¿ ¨¿ ˙¿!@¿!Æ¿!¥¿!…¿"¿"6¿"7¿"Ü¿"å¿"”¿#¿#?¿#@¿#v¿#|¿#ü¿#∫¿#ª¿#˝¿$¿$¿$d¿$©¿$Ø¿$˙¿%F¿%L¿%î¿%Ÿ¿&¿&¿&)¿&/¿&|¿&é¿&≠¿&Æ¿&Ê¿'1¿'7¿'Ñ¿'»¿'›¿'„¿((¿(w¿(ª¿(”¿(Ÿ¿)#¿)r¿)Ä¿)®¿)©¿)˛¿**¿*+¿*x¿*«¿*’¿*€¿+*¿+}¿+≠¿+≥¿,¿,N¿,å¿,í¿,®¿,Æ¿,˚¿-¿-¿-|¿-é¿-î¿-Ÿ¿.¿.m¿.î¿.ö¿.Á¿/7¿/U¿/j¿/∞¿/±¿/Û¿07¿0=¿0é¿0ÿ¿0ﬁ¿1,¿1?¿1E¿1ï¿1‰¿21¿2@¿2F¿2\¿2¨¿2Û¿2˘¿3]¿3o¿3u¿3ã¿3€¿3¯¿3˛¿4b¿4t¿4z¿4ä¿4‹¿5(¿5;¿5â¿5¡¿5Â¿64¿6{¿6ê¿6ñ¿6Ã¿7¿7	¿7P¿7ñ¿7ú¿7Î¿8'¿8-¿8w¿8«¿9¿9¿9e¿9z¿9¥¿9µ¿9ˇ¿:¿:4¿::¿:Ü¿:¡¿:¬¿;!¿;"¿;n¿;≠¿;≥¿<¿<¿<!¿<1¿<7¿<{¿<π¿=¿=I¿=ö¿=œ¿>¿>V¿>ü¿>›¿?¿?;¿?c¿?ç¿?ª¿?Ê¿@¿@>¿@p¿@w¿@À¿@Ã¿@˙¿AC¿Aí¿Aﬂ¿AÔ¿A¿B7¿Bî¿Bï¿BÃ¿BÁ¿C¿C&¿CS¿C`¿C|¿Cù¿Cº¿CÍ¿C˜¿D¿D5¿DU¿DÑ¿Dë¿D ¿DÎ¿E¿E:¿EG¿Eh¿Eâ¿E≠¿E‡¿EÌ¿F¿F,¿FM¿F}¿Fä¿F´¿FÃ¿F¿G#¿G0¿Gj¿Gã¿G´¿G⁄¿GÁ¿GÒ¿G˜¿G¯¿H#¿HF¿Hx¿Hú¿Hœ¿HŸ¿Hﬂ¿H‡¿H˝¿I¿I¿IK¿Iw¿I•¿I¡¿I»¿J¿JM¿JS¿JT¿Jä¿Jã¿J‹¿K/¿KÅ¿K’¿K‹¿L-¿L~¿Lµ¿L»¿LÔ¿M¿M3¿Mä¿M∆¿N#¿N`¿Nú¿NÚ¿O0¿Ok¿O≠¿OÁ¿PD¿P°¿P˛¿Q3¿Qê¿QÌ¿R)¿Re¿R¬¿S ¿S]¿Sñ¿S—¿T¿Tq¿TŒ¿U¿Uk¿U§¿U±¿U≤¿V ¿V&¿VG¿VS¿Vx¿Vù¿V¿¿VÂ¿Vˆ¿V˛¿W¿W¿W¿WD¿WJ¿WK¿Wû¿W›¿X$¿Xd¿Xõ¿X’¿Y¿YL¿YÑ¿Y∫¿Z¿ZG¿Zè¿Z÷¿[¿[S¿[í¿[À¿\¿\K¿\Ñ¿\º¿\Ò¿]6¿]g¿]õ¿]…¿]¸¿^/¿^k¿^£¿^ÿ¿_¿_<¿_q¿_ß¿_›¿`¿`F¿`Å¿`¥¿`‰¿a%¿an¿a∫¿aÒ¿b8¿b¿b∆¿c¿cS¿cô¿cﬂ¿d¿dY¿dú¿d‚¿e#¿eg¿eß¿eÌ¿f3¿fv¿fŒ¿g¿g9¿gl¿gs¿gt¿g∑¿gª¿gº¿g»¿h¿h¿h¿hT¿h¿hŸ¿i%¿iÖ¿iﬂ¿j>¿jÂ¿kå¿k˜¿l"¿l{¿l‡¿m7¿mö¿m‚¿n-¿nÖ¿n·¿oK¿o¿¿p,¿põ¿q¿q}¿r ¿r}¿rÛ¿s}¿t¿tÉ¿tÖ¿tÜ¿t¶¿uè¿u¶¿u‡¿v)¿v<¿vd¿vh¿v•¿w	¿w
¿w]¿wã¿wå¿wª¿wÙ¿xE¿xñ¿x„¿y'¿yM¿yp¿yq¿yß¿y≠¿yΩ¿z¿zI¿z~¿z¿z¨¿z˜¿z¯¿{#¿{$¿{T¿{É¿{˛¿{ˇ¿|2¿|i¿|û¿|ü¿|Ω¿|æ¿|Î¿|˜¿};¿}<¿}å¿}ç¿}∆¿}ﬂ¿}‡¿~'¿~-¿~r¿~Æ¿~¥¿~ƒ¿¿'¿z¿{¿®¿Æ¿ˇ¿Ä¿Äa¿Äb¿Ä†¿Ä¶¿ÄÌ¿Å<¿Åå¿Å¥¿Åµ¿Ç?¿Ç@¿Çó¿ÇÂ¿ÇÊ¿É/¿É|¿É}¿ÉÃ¿É⁄¿É‡¿Ñ.¿Ñ{¿ÑÅ¿ÑÃ¿Ö¿Ö¿Ö;¿Ö`¿ÖÇ¿Öº¿Ü¿Ü¿ÜO¿Üå¿Ü‹¿Ü›¿á¿á¿á6¿á7¿áC¿áz¿á{¿áñ¿à¿àH¿àL¿àM¿àY¿àq¿àµ¿â¿â¿â*¿âI¿â}¿âÅ¿âÇ¿âé¿âß¿âÎ¿ä+¿ä1¿äP¿äÑ¿äà¿äâ¿äï¿äØ¿äÛ¿ã1¿ã7¿ãS¿ãî¿ãò¿ãô¿ã•¿ã√¿å¿åá¿åç¿åé¿åπ¿å’¿å˚¿ç¿ç¿ç¿ç;¿ç\¿çr¿çë¿ç¡¿ç¯¿é¿é>¿é_¿éÇ¿é≤¿éË¿è;¿èA¿èE¿èF¿èR¿èm¿è§¿è∏¿èæ¿è›¿ê¿êf¿êj¿êk¿êw¿êï¿êÃ¿ê‡¿êÊ¿êÁ¿ë¿ë9¿ëè¿ëì¿ëî¿ë†¿ë∫¿ëﬂ¿í¿í!¿íD¿í{¿í’¿íˆ¿ì¿ì:¿ì]¿ìs¿ìy¿ì}¿ì~¿ìä¿ì¨¿ìı¿î¿î0¿î`¿îd¿îe¿îä¿îú¿îÊ¿îÓ¿îÚ¿îÛ¿ï¿ï.¿ï|¿ïÑ¿ïà¿ïâ¿ï»¿ñ¿ñ7¿ñm¿ñs¿ñî¿ñò¿ñô¿ñ∆¿ñ“¿ó¿óF¿ó}¿óã¿óë¿ó¿¿ò¿ò:¿òr¿òå¿òç¿ò¥¿ò’¿ò¯¿ô¿ô@¿ôQ¿ôv¿ôõ¿ô·¿ö¿ö%¿öP¿ö™¿öπ¿ö‰¿öÒ¿ö˘¿öˇ¿õ¿õ!¿õ"¿õN¿õZ¿õç¿õæ¿õÃ¿õ“¿ú¿úA¿úb¿úp¿úv¿úæ¿ù¿ù=¿ùá¿ù¬¿ùŸ¿û¿û¿û\¿ûq¿ûw¿ûï¿ûô¿ûö¿û≥¿ûˆ¿û˙¿û˚¿ü¿ü*¿üh¿üÄ¿üé¿üî¿üƒ¿üˇ¿†N¿†f¿†t¿†z¿†ù¿†°¿†¢¿†‡¿†¯¿°¿°¿°¿°Z¿°q¿°±¿¢¿¢^¿¢§¿¢´¿¢¨¿¢Ã¿£¿£¿£¿£M¿£ó¿£“¿£È¿§%¿§/¿§l¿§Å¿§á¿§ã¿§å¿§∞¿§º¿§Ï¿•¿•g¿•~¿•å¿•í¿•≤¿•”¿¶0¿¶9¿¶F¿¶M¿¶N¿¶Ä¿¶ß¿¶Ã¿¶Ì¿ß¿ß#¿ßF¿ßi¿ßé¿ßß¿ßØ¿ß÷¿ß˚¿® ¿®C¿®h¿®§¿®«¿®Ë¿®˘¿©¿©¿©¿©¿©1¿©d¿©j¿©ú¿©¢¿©‡¿™$¿™E¿™F¿™ú¿™ ¿™ÿ¿™ﬁ¿´¿´%¿´1¿´8¿´<¿´=¿´q¿´ß¿´≠¿´ﬂ¿´Â¿¨!¿¨J¿¨î¿¨µ¿¨”¿¨·¿¨Á¿¨Ë¿≠>¿≠Y¿≠ã¿≠ß¿≠µ¿≠æ¿≠ƒ¿≠»¿≠…¿Æ¿Æ9¿Æ?¿Æ}¿ÆÉ¿Æø¿ÆË¿Ø+¿ØL¿Øj¿Øx¿Ø~¿Ø¿Ø’¿Ø¿∞"¿∞:¿∞H¿∞Q¿∞W¿∞[¿∞\¿∞ñ¿∞∑¿∞≈¿∞À¿∞Í¿±¿±¿±G¿±\¿±b¿±f¿±g¿±¥¿±…¿±œ¿±ﬂ¿±Â¿≤-¿≤v¿≤±¿≤ˆ¿≥¿≥h¿≥∂¿≥Â¿≥¯¿≥˛¿≥ˇ¿¥T¿¥k¿¥ú¿¥≤¿¥≥¿¥Ÿ¿µ¿µ\¿µ¢¿µ£¿µÒ¿∂¿∂#¿∂U¿∂x¿∂Ä¿∂ç¿∂Ø¿∂∑¿∂Ω¿∂Œ¿∂“¿∂”¿∑¿∑!¿∑e¿∑ò¿∏¿∏T¿∏Ÿ¿πç¿π⁄¿∫'¿∫r¿∫•¿∫∑¿ª	¿ª-¿ªN¿ªu¿ª∆¿º¿º\¿º¨¿ºÂ¿ºˆ¿Ω¿ΩH¿ΩW¿Ωd¿Ωn¿ΩÉ¿Ωè¿Ω∆¿ΩÃ¿ΩÕ¿æ4¿æ8¿æ9¿æÑ¿æì¿æ–¿ø	¿ø¿øm¿øÆ¿ø‡¿øÛ¿ø˘¿¿¿¿I¿¿h¿¿Ç¿¿ª¿¿»¿¿Û¿¿˛¿¡,¿¡K¿¡e¿¡ü¿¡¨¿¡ÿ¿¡„¿¬¿¬2¿¬L¿¬Ç¿¬è¿¬º¿¬«¿¬ˇ¿√¿√8¿√n¿√{¿√¨¿√∑¿√æ¿√¬¿√√¿ƒ¿ƒ.¿ƒS¿ƒì¿ƒî¿ƒŸ¿≈#¿≈s¿≈ª¿∆
¿∆R¿∆{¿∆≠¿∆›¿«¿«_¿«{¿«Æ¿«ﬂ¿«Ë¿«Ó¿«Ô¿»4¿»ã¿»„¿…¿…;¿…C¿…ò¿…Ó¿ '¿ A¿ I¿ c¿ ≤¿ ˝¿À¿À¿À	¿ÀC¿ÀÅ¿Àñ¿Àú¿À¨¿À≤¿Ã¿Ã0¿Ãg¿Ã¶¿Ã–¿Õ¿Õ¿Õ$¿Õ%¿Õ`¿Õ†¿ÕÃ¿Œ¿Œ>¿Œ_¿Œã¿Œ≥¿Œ’¿Œ‹¿Œ‡¿Œ·¿œ-¿œi¿œo¿œ¿œÖ¿œ”¿–¿–l¿–Æ¿–˝¿—¿—d¿—ô¿—Õ¿“¿“i¿“§¿“ˆ¿”$¿”>¿”}¿”è¿”ß¿”Â¿”˜¿‘¿‘N¿‘`¿‘Ñ¿‘ø¿‘—¿‘Ô¿’0¿’B¿’f¿’≠¿’ø¿’€¿÷¿÷-¿÷Y¿÷û¿÷∞¿÷·¿÷Â¿÷Ê¿◊+¿◊z¿◊∫¿ÿ¿ÿ!¿ÿ'¿ÿ(¿ÿj¿ÿó¿ÿ¥¿ÿ“¿Ÿ%¿ŸN¿Ÿœ¿⁄(¿⁄n¿⁄¶¿⁄Ó¿€¿€ ¿€.¿€:¿€E¿€O¿€U¿€m¿€q¿€r¿€à¿€â¿€ï¿€™¿€¡¿‹¿‹C¿‹Ç¿‹π¿‹Ô¿›(¿›Ü¿›•¿›©¿›™¿›˚¿ﬁ ¿ﬁQ¿ﬁr¿ﬁ¿¿ﬁƒ¿ﬁ≈¿ﬂ¿ﬂ7¿ﬂV¿ﬂW¿ﬂc¿ﬂÑ¿ﬂß¿ﬂ®¿ﬂ‘¿‡¿‡7¿‡8¿‡â¿‡Ω¿‡Ú¿·"¿·c¿·i¿·j¿·ò¿·¥¿·Ô¿‚ ¿‚@¿‚~¿‚à¿‚∏¿‚æ¿‚ø¿„¿„=¿„l¿„ñ¿„∑¿„‘¿‰¿‰-¿‰5¿‰;¿‰<¿‰¶¿‰¥¿‰∫¿‰ª¿Â¿ÂM¿Âq¿Âó¿Â•¿Â´¿Â÷¿Â¸¿Ê5¿ÊQ¿ÊY¿Êñ¿Ê≠¿Êµ¿Êª¿Êø¿Ê¿¿ÊÃ¿Ê˝¿Á#¿ÁX¿Áü¿Á‡¿Ë¿Ë¿ËZ¿ËÉ¿Ëâ¿ËŒ¿Ëœ¿È¿Èi¿È™¿È∞¿È±¿È‰¿Í#¿Í\¿Íu¿Í{¿Í|¿ÍΩ¿Î!¿ÎY¿Î_¿Î`¿Îâ¿Î∞¿Î‚¿Ï6¿Ït¿Ï∏¿Ïÿ¿Ì¿Ì¿Ì¿ÌB¿Ìu¿Ì“¿Ì⁄¿Ì‡¿Ì·¿Ó ¿Ó9¿Óñ¿Óû¿Ó§¿Ó•¿Ó–¿Ô!¿Ô@¿Ôn¿Ôª¿Ô’¿Ôˆ¿¿G¿l¿ï¿æ¿Â¿¿¯¿˛¿ˇ¿Ò4¿Ò]¿Òc¿Òµ¿ÒÃ¿Ú	¿ÚH¿Úh¿Ún¿Úr¿Ús¿Ú¿Úí¿Úº¿ÚÔ¿Û1¿Û`¿Ûã¿Û∞¿Û“¿ÛÓ¿Ù¿Ù<¿Ùm¿Ùè¿Ù≠¿ÙÁ¿ı¿ıb¿ıá¿ı∆¿ıÂ¿ˆ¿ˆN¿ˆc¿ˆ±¿ˆµ¿ˆ∂¿ˆ€¿ˆ‹¿˜'¿˜-¿˜y¿˜Ω¿¯¿¯1¿¯7¿¯Ç¿¯µ¿¯Î¿¯Ï¿¯¯¿˘2¿˘3¿˘?¿˘s¿˘¿¿˙¿˙Y¿˙Z¿˙®¿˙…¿˙Ú¿˚ ¿˚¿˚¿˚3¿˚õ¿˚°¿˚¢¿˚Ω¿¸¿¸(¿¸c¿¸i¿¸ó¿¸ò¿¸≥¿¸ˇ¿˝9¿˝{¿˝â¿˝è¿˝ê¿˝‹¿˛¿˛(¿˛g¿˛ó¿˛∆¿ˇ¿ˇD¿ˇS¿ˇÉ¿ˇã¿ˇ¬¿ˇœ¿ˇˆ¿ E¿ ã¿ Â¿¿	¿/¿0¿k¿•¿¿_¿`¿√¿¿^¿d¿e¿ú¿Ï¿¿6¿<¿=¿å¿⁄¿'¿E¿z¿~¿¿∫¿¿-¿r¿´¿Ë¿Ï¿Ì¿˘¿(¿>¿b¿≠¿ı¿	¿&¿_¿i¿ä¿©¿ ¿Ô¿	¿	3¿	j¿	ï¿	ø¿	‡¿
¿
#¿
K¿
ñ¿
ﬂ¿¿¿!¿"¿.¿w¿´¿Ø¿∞¿º¿Ù¿\¿ß¿´¿¨¿ˆ¿¿¿e¿r¿ï¿ñ¿‡¿˛¿ˇ¿5¿S¿T¿•¿ı¿;¿î¿ï¿°¿›¿¿,¿\¿w¿°¿‹¿¿6¿@¿w¿®¿€¿,¿N¿y¿z¿°¿—¿˜¿@¿k¿ê¿⁄¿Î¿¿ô¿˜¿¿¿0¿‘¿¿e¿ê¿⁄¿=¿>¿°¿,¿å¿¥¿◊¿Ù¿,¿s¿™¿"¿,¿2¿6¿7¿]¿⁄¿¿y¿¬¿¿W¿°¿¡¿¬¿¿a¿∞¿ˇ¿C¿D¿ê¿÷¿¿`¿ì¿ ¿ Ö¿ ç¿ ≠¿ Õ¿ Ó¿!¿!¿!b¿!¬¿""¿"#¿"∞¿"∂¿"∫¿"ª¿"Ë¿#9¿#Ñ¿#∞¿#º¿#·¿$¿$:¿$Z¿$r¿$ê¿$‰¿$¿$¯¿%¿%C¿%ì¿%‘¿%˛¿&¿&3¿&X¿&Ñ¿&©¿&Ã¿&Û¿'¿'G¿'l¿'í¿'¿¿'Ë¿(¿(5¿(_¿(à¿(∂¿(¿¿(»¿(Œ¿(œ¿)¿)0¿)>¿)D¿)E¿)à¿)í¿)≤¿)”¿*¿*%¿*;¿*W¿*£¿*≠¿*≥¿*¥¿+¿+S¿+†¿+Õ¿,	¿,¿,a¿,±¿,ˇ¿-¿-&¿-J¿-P¿-T¿-U¿-p¿-q¿-¬¿.¿.¿.W¿.®¿.ƒ¿.ﬁ¿.¯¿.¸¿.˝¿/M¿/ö¿/†¿/Ì¿/˘¿0¿0+¿07¿0S¿0¢¿0©¿0“¿0÷¿0◊¿1¿1;¿1I¿1O¿1¿1π¿1«¿1Õ¿2¿27¿2;¿2<¿2v¿2ù¿2¬¿2∆¿2«¿2˙¿3+¿3,¿3y¿3»¿4¿4+¿40¿4|¿4Õ¿5¿5,¿5b¿5†¿5Î¿5Ò¿5Ú¿6%¿6H¿6e¿6f¿6¿6π¿6Â¿7¿7`¿7°¿7È¿8¿8¿8k¿8º¿8Ú¿9#¿9@¿9[¿9¶¿9Ø¿9∞¿9Ù¿:/¿:à¿:Ø¿:µ¿:∂¿;¿;¿;D¿;w¿;©¿;€¿;‚¿;„¿<+¿<à¿<å¿<ç¿<›¿<Ï¿=X¿=Y¿={¿=µ¿=’¿=˛¿>¿>¿>2¿>d¿>e¿>¥¿>˘¿?¿?¿?e¿?≤¿@¿@$¿@p¿@Œ¿A!¿AB¿Ao¿Aã¿Aü¿A»¿AÌ¿B¿B?¿Bf¿Bp¿Bñ¿B®¿Bƒ¿C¿C>¿Co¿Cw¿C¨¿Cπ¿C›¿C„¿CÁ¿CË¿D¿D0¿DU¿Dx¿Dß¿D«¿DÊ¿DÏ¿D¿DÒ¿E ¿E`¿E~¿Eõ¿E¬¿EÏ¿EÚ¿Eˆ¿E˜¿F#¿FI¿Fp¿F~¿FÑ¿F¨¿Fﬂ¿F„¿G.¿G3¿GÄ¿GÕ¿G¸¿H"¿HK¿Hå¿Hö¿H†¿H√¿H‰¿I¿I¿Iu¿Iﬁ¿J0¿JZ¿J[¿Jm¿J|¿Jé¿Jµ¿Jÿ¿Jˇ¿K&¿KK¿KS¿Kt¿K£¿Kß¿K®¿K©¿Kµ¿L¿L<¿LV¿Lp¿Lv¿Lz¿L{¿Lá¿L£¿L¬¿L˙¿M¿ML¿Mn¿Mt¿Mx¿My¿MΩ¿N	¿N¿NH¿NI¿Nñ¿N´¿N…¿N¿O-¿O1¿O2¿OR¿Oz¿O∫¿Oæ¿Oø¿O¯¿O˛¿PL¿Pö¿PË¿Q7¿QV¿Qq¿QÜ¿Q§¿Q±¿QÕ¿RA¿RG¿RK¿RL¿RÄ¿R•¿Rº¿RÁ¿Rˆ¿S¿S>¿SF¿SL¿SP¿SQ¿Sn¿Sò¿S∂¿S∫¿Sª¿SÓ¿TH¿Tê¿T∏¿T–¿TÂ¿U¿U0¿Uc¿Uí¿U∂¿UÈ¿V¿V;¿Vz¿VØ¿Væ¿V·¿W¿W¿W-¿W:¿WE¿WÇ¿Wâ¿Wä¿Wß¿W´¿W¨¿WŸ¿X1¿XÄ¿XŒ¿XÒ¿Y6¿YD¿YJ¿YK¿Yx¿Yy¿YΩ¿Z¿ZE¿ZÉ¿Z±¿Z∆¿Z◊¿[¿[*¿[W¿[É¿[Æ¿[‘¿[˛¿\¿\D¿\]¿\z¿\Ñ¿\ä¿\€¿\ˇ¿]¿],¿]S¿]ä¿]ô¿]ƒ¿]Ã¿^¿^;¿^A¿^é¿^µ¿^Ì¿^˜¿_0¿_Q¿_Ö¿_£¿_π¿_’¿`'¿`1¿`7¿`8¿`à¿`ø¿`Ó¿a	¿a¿a¿a¿aY¿a®¿aÍ¿aÎ¿b¿b¿b[¿bÇ¿bê¿bñ¿bæ¿c ¿c+¿cx¿c√¿c¿d>¿d_¿dö¿d»¿dÿ¿d‡¿d·¿e%¿e&¿et¿eÆ¿eË¿f"¿fl¿fô¿f“¿fÍ¿g¿g¿g]¿gy¿g®¿g¿¿gÕ¿h¿h1¿hg¿hÄ¿hã¿hì¿hî¿hœ¿h˘¿h˙¿i^¿i¨¿i≠¿iÃ¿j¿j1¿j[¿jj¿j«¿k¿kb¿kà¿kÆ¿k⁄¿kÎ¿l4¿l~¿là¿lê¿lë¿l¨¿l—¿l¿m¿mD¿mO¿mt¿m¨¿mŸ¿n ¿n¿n¿nQ¿nv¿nÆ¿nπ¿n¡¿nÔ¿nÛ¿nÙ¿o¿o¿o%¿oA¿oU¿oc¿oi¿oõ¿o’¿p¿pG¿p}¿p∏¿q¿qa¿qõ¿q£¿q©¿q‹¿q‡¿q·¿r¿r(¿rå¿rç¿rõ¿r√¿s¿s"¿s#¿sY¿sz¿sò¿s‡¿s·¿t¿t_¿to¿tw¿tx¿t∏¿tÂ¿u¿u:¿uX¿un¿uä¿uÕ¿u◊¿u›¿u·¿u‚¿v¿vÅ¿vØ¿vÈ¿wH¿wë¿wí¿w∫¿x¿x_¿xn¿xΩ¿y¿y\¿y¨¿yÊ¿yÚ¿z2¿zC¿z∏¿zÃ¿zÕ¿{$¿{N¿{X¿{{¿{±¿{—¿{È¿|¿|O¿|[¿|c¿|i¿|j¿|±¿|≤¿|ˇ¿}@¿}V¿}j¿}ª¿~¿~Y¿~i¿~Ö¿~°¿~÷¿¿D¿î¿ö¿∆¿Ó¿˙¿Ä'¿ÄJ¿ÄÄ¿Ä†¿Ä∏¿Ä÷¿Å¿Å"¿Å*¿Å0¿ÅD¿ÅH¿ÅI¿Å«¿ÅÏ¿Ç¿Ç,¿Çd¿Çó¿Ç≈¿Çœ¿Ç¿É¿É6¿ÉY¿Éå¿É–¿É˛¿ÑM¿Ñ}¿Ñâ¿Ñì¿Ñô¿Ñù¿Ñû¿Ñº¿Ö1¿ÖÑ¿Ü¿Ü¿Ü¿Üç¿Üé¿Ü€¿á¿á$¿ár¿ás¿á¡¿à¿à0¿àE¿àÑ¿àÖ¿àΩ¿à“¿â¿â¿â>¿â^¿â_¿â|¿âÌ¿ä¿ä¿ä¿ä;¿äI¿äO¿äk¿äö¿äÀ¿äŸ¿äﬂ¿ã¿ão¿ã|¿ãﬁ¿ã‰¿ãË¿ãÈ¿å¿å.¿åí¿åΩ¿å ¿å˘¿ç¿ç¿ç!¿ç"¿çJ¿çh¿ç∑¿çŒ¿éa¿én¿é±¿è¿è¿è{¿èÅ¿èÖ¿èÜ¿è¿¿èÔ¿ê¿ê$¿ê>¿êf¿êl¿êp¿êq¿êú¿êº¿ê÷¿ê˝¿ë¿ë¿ë"¿ë#¿ëI¿ë{¿ëœ¿í!¿íF¿íò¿í‹¿ì"¿ìc¿ìi¿ìí¿ìπ¿ìÈ¿î9¿îZ¿î°¿î¿îÙ¿îı¿ï¿ï?¿ïf¿ïñ¿ï´¿ï˘¿ñ*¿ñk¿ñâ¿ñ¬¿ñ ¿ó¿ó?¿óx¿óÄ¿óç¿ó¡¿ó˘¿óˇ¿ò¿ò¿ò¿òN¿òl¿òØ¿òË¿ô¿ôN¿ô^¿ô¿ôñ¿ô¿¿ô…¿ôı¿öI¿öê¿öñ¿ö¨¿ö∞¿ö±¿ö⁄¿õ¿õf¿õÖ¿õ¡¿õœ¿õ’¿õÍ¿ú¿ú9¿ú=¿ú>¿ú`¿úö¿úΩ¿úË¿ù+¿ùs¿ùw¿ùx¿ùª¿ù€¿ùÈ¿ùÔ¿û¿û0¿ûP¿ûÑ¿ûØ¿û„¿ûÍ¿ûÓ¿ü¿ü¿üL¿üû¿ü¨¿ü≤¿ü≥¿†¿†B¿†P¿†V¿†W¿†è¿†Ò¿°+¿°}¿°Õ¿°‘¿°’¿¢¿¢0¿¢S¿¢x¿¢ü¿£¿£¿£E¿£n¿£è¿£ñ¿£ó¿£≈¿£Â¿§1¿§m¿§{¿§Å¿§¶¿§ß¿§‡¿§˚¿•H¿•W¿•´¿•¿¶¿¶e¿¶¨¿¶˘¿ß¿ß¿ßB¿ß[¿ßò¿ßÁ¿®"¿®O¿®`¿®j¿®≥¿®‡¿©¿©:¿©ä¿©˜¿™¿™	¿™,¿™2¿™f¿™j¿™k¿™∂¿™ª¿´
¿´Y¿´Ç¿´á¿´¨¿´‘¿¨¿¨ ¿¨s¿¨π¿¨⁄¿≠¿≠k¿≠ƒ¿≠ ¿Æ¿Æ	¿Æ
¿ÆQ¿ÆV¿Æ£¿Æ¿Ø/¿Ø4¿ØÄ¿Øœ¿∞¿∞Q¿∞V¿∞¿∞£¿∞‚¿±¿±#¿±)¿±}¿±“¿≤¿≤	¿≤
¿≤d¿≤e¿≤ñ¿≤ú¿≤Î¿≥¿≥è¿≥ê¿≥ú¿≥œ¿≥–¿¥¿¥¿¥'¿¥Å¿¥≈¿µ¿µD¿µp¿µâ¿µ§¿µ€¿µ·¿µ‚¿∂2¿∂Å¿∂ ¿∂Ô¿∑¿∑5¿∑^¿∑ï¿∑ù¿∑´¿∑±¿∑≤¿∑Ô¿∑Û¿∑Ù¿∏ ¿∏.¿∏x¿∏ƒ¿∏≈¿∏¯¿π2¿π6¿π7¿πÄ¿πÜ¿π’¿∫¿∫%¿∫<¿∫ç¿∫›¿ª-¿ªx¿ªπ¿ªÈ¿ª˝¿º¿º¿º)¿º=¿ºC¿ºg¿ºÖ¿º´¿ºº¿º¿¿º¡¿ºÕ¿º˝¿Ω¿Ω?¿Ω`¿Ωü¿Ω”¿Ω˚¿æ¿æ¿æ¿æ3¿æe¿æ»¿æ…¿æˆ¿ø¿ø#¿ø8¿ø>¿øB¿øC¿øë¿ø∏¿ø‰¿¿0¿¿~¿¿´¿¿‰¿¡0¿¡K¿¡k¿¡Ü¿¡´¿¡“¿¬1¿¬|¿¬À¿¬ﬂ¿¬Â¿¬Ê¿¬Ú¿√>¿√~¿√¬¿√◊¿√ﬁ¿√ﬂ¿√ˆ¿ƒ¿ƒ@¿ƒj¿ƒù¿ƒ¥¿ƒ»¿ƒ’¿ƒ‡¿ƒÁ¿ƒ¯¿ƒ¸¿ƒ˝¿≈B¿≈j¿≈p¿≈∑¿≈ﬁ¿≈‰¿∆4¿∆\¿∆ä¿∆Ø¿∆Ω¿∆√¿∆ƒ¿∆ı¿«/¿«<¿«t¿«z¿«~¿«¿«´¿«ƒ¿«È¿«˜¿«˝¿«˛¿»/¿»Y¿»_¿»c¿»d¿»∞¿»ª¿»¿¿…¿…Q¿…r¿…s¿…¿…©¿…Ã¿…⁄¿…‡¿…·¿ ¿ ¿ %¿ &¿ 8¿ ã¿ ì¿ ó¿ ò¿ §¿ ≈¿À¿À¿À¿À¿À-¿ÀN¿ÀV¿ÀZ¿À[¿Àg¿Àï¿À÷¿À◊¿ÀÒ¿Ã3¿ÃW¿Ãá¿Ãè¿Ãï¿Ãô¿Ãö¿Ã¶¿Ã€¿Ã‹¿ÃË¿Õ¿Õu¿Õ√¿Õ‚¿Œ
¿Œ2¿Œj¿Œt¿Œú¿Œù¿Œ¿¿ŒÊ¿œ¿œ.¿œU¿œÑ¿œ≥¿œÊ¿–&¿–É¿–•¿–ƒ¿–Õ¿—¿—7¿—k¿—∂¿—˚¿“¿“X¿“_¿“c¿“d¿“p¿“∂¿“∑¿“„¿”	¿”
¿”¿”P¿”b¿”•¿”≠¿”±¿”≤¿”ˆ¿‘¿‘.¿‘r¿‘å¿‘›¿‘Í¿’¿’D¿’L¿’Z¿’^¿’_¿’¢¿’≈¿’⁄¿÷¿÷7¿÷Ü¿÷ì¿÷∂¿÷Î¿÷Û¿◊¿◊¿◊¿◊K¿◊n¿◊É¿◊«¿◊‚¿ÿ5¿ÿu¿ÿÇ¿ÿß¿ÿŸ¿ÿ·¿ÿÔ¿ÿÛ¿ÿÙ¿ŸF¿Ÿí¿ŸØ¿⁄¿⁄6¿⁄X¿⁄¨¿⁄ˇ¿€Q¿€ü¿€Ê¿‹¿‹¿‹¿‹b¿‹ò¿‹ù¿‹Í¿›9¿›á¿›—¿ﬁ4¿ﬁT¿ﬁo¿ﬁé¿ﬁ∞¿ﬁ›¿ﬂ¿ﬂ4¿ﬂ>¿ﬂé¿ﬂÀ¿‡¿‡C¿‡©¿‡ﬂ¿·¿·(¿·.¿·v¿·Æ¿·˙¿‚K¿‚í¿‚‹¿„%¿„8¿„¡¿‰¿‰¿‰¿‰o¿‰p¿‰Ó¿Âq¿ÂŸ¿Ê ¿Êe¿Êf¿Ê∞¿Á¿Á¿Á¿ÁO¿Áj¿Áp¿Áπ¿Á⁄¿Á‡¿Ë!¿Ëa¿Ëå¿Ëµ¿Ë‰¿ËÚ¿Ë¯¿Ë˘¿È¿ÈT¿Èê¿ÈÊ¿È˜¿Í¿Í#¿ÍP¿ÍV¿Íç¿Íé¿ÍÆ¿Í∆¿ÍÌ¿Î¿ÎP¿Îw¿Î£¿ÎÚ¿Î˝¿Ï¿Ï,¿Ï3¿Ï7¿ÏŒ¿Ïœ¿Ïˇ¿Ì-¿Ì|¿Ìõ¿Ìπ¿Ì¿¿Ì¯¿Ì˘¿ÓD¿Óë¿Ó‡¿Ó˚¿Ô¿Ô?¿ÔE¿ÔI¿Ô¿¿Ô¡¿¿1¿{¿ï¿‘¿·¿Ò¿Ò¿Ò¿Ò ¿Òe¿Ò{¿Ò°¿Ò‘¿Ò‚¿ÒË¿ÒÈ¿Ú)¿ÚI¿ÚÉ¿Úë¿Úó¿Úò¿ÚÈ¿Û-¿Û{¿Ûâ¿Ûè¿Ûê¿Û‰¿Ù7¿Ùc¿ÙÜ¿Ù¶¿Ù∆¿ÙÕ¿Ù˜¿ı¿ı¿ı6¿ı:¿ı;¿ıä¿ı¶¿ıÍ¿ˆ
¿ˆ¿ˆ¿ˆ¿ˆF¿ˆá¿ˆ¶¿ˆ≠¿˜¿˜D¿˜R¿˜f¿˜±¿˜Ÿ¿˜‚¿˜È¿¯)¿¯C¿¯Ñ¿¯î¿¯ú¿¯¬¿˘¿˘T¿˘™¿˘ﬂ¿˙¿˙M¿˙\¿˙ç¿˙∂¿˙ø¿˙Ã¿˙¸¿˚¿˚¿˚:¿˚y¿˚ ¿˚Ù¿¸$¿¸b¿¸q¿¸¢¿¸À¿¸‘¿¸⁄¿¸€¿˝¿˝$¿˝U¿˝{¿˝Ç¿˝Ü¿˝á¿˝ø¿˝À¿˛¿˛ß¿˛Æ¿˛∫¿ˇ¿ˇî¿ˇõ¿ˇú¿ˇÀ¿ˇÎ¿ :¿ N¿ U¿ Y¿ ‡¿ ·¿T¿¶¿ß¿ﬂ¿¿1¿D¿J¿v¿z¿{¿|¿∑¿Ω¿¿F¿è¿¨¿—¿Ù¿¿6¿Ñ¿“¿¿¿5¿_¿m¿ò¿ƒ¿¯¿%¿M¿{¿œ¿Ÿ¿˙¿¿>¿b¿h¿l¿m¿∑¿¿2¿e¿®¿˚¿¸¿	
¿	î¿
/¿
±¿
≤¿
œ¿ú¿¿˜¿‹¿ú¿¿f¿h¿A¿8¿√¿¿¿¿Ô¿È¿Í¿¸¿?¿ä¿¿¿_¿d¿e¿q¿ò¿∆¿¿¿M¿Ø¿È¿;¿ã¿í¿ì¿¥¿·¿¿&¿|¿∂¿“¿¿-¿L¿~¿¶¿‹¿/¿@¿ü¿“¿Ú¿¿¿-¿L¿^¿_¿ê¿ª¿Ë¿¿D¿s¿ø¿	¿-¿C¿r¿Õ¿)¿F¿a¿s¿t¿◊¿Ë¿ $¿ v¿  ¿!¿!T¿!—¿!‚¿"¿">¿"Z¿"á¿"∞¿"Ú¿#¿#<¿#j¿#ƒ¿#ı¿$&¿$e¿$ú¿$Ò¿%C¿%|¿%·¿&¿&6¿&K¿&û¿&‘¿'¿'+¿'g¿'°¿'ﬂ¿(¿(I¿(~¿(π¿(Ó¿)"¿)b¿)¿)´¿)⁄¿*#¿*h¿*°¿*Ã¿+¿+T¿+ó¿+–¿,¿,8¿,o¿,¶¿,€¿-¿-y¿-Ê¿.¿.\¿.ï¿.–¿/¿/|¿/ø¿0
¿0G¿0s¿0∆¿1¿1B¿1Å¿1œ¿2¿2k¿2∫¿3¿3I¿3ä¿3–¿4!¿4`¿4}¿4ò¿4±¿4»¿4›¿4¿5¿5¿5¿5(¿51¿58¿5<¿5=¿5q¿5w¿5º¿6¿6%¿6&¿6D¿6e¿6õ¿6Â¿71¿7M¿7í¿7 ¿7”¿89¿8ë¿8≤¿9¿9B¿9ë¿9õ¿9£¿9’¿9€¿:.¿:~¿:œ¿:È¿;R¿;≥¿</¿<>¿<¶¿<Æ¿<Î¿=4¿=O¿=ï¿=†¿=©¿=Ø¿=Ì¿>¿>f¿>∏¿?¿?a¿?b¿?¿¿?¡¿?ˆ¿@¿@)¿@9¿@p¿@å¿@ï¿@õ¿@ú¿@”¿@ˇ¿A¿A,¿AP¿AW¿A[¿A]¿A^¿Aï¿A£¿A≤¿A–¿AÈ¿B¿B7¿BM¿Bm¿Bã¿B®¿Bƒ¿B·¿C¿C¿C;¿CN¿Ci¿C~¿Có¿Cµ¿C“¿CÛ¿D¿D*¿DI¿Dc¿Då¿D´¿D¬¿DŸ¿D˘¿E!¿EZ¿Eë¿EΩ¿EÊ¿F
¿F$¿F>¿F^¿F∞¿F±¿F–¿F¿G¿G4¿GZ¿GÄ¿G®¿G¿¿G◊¿GÓ¿H¿H¿H2¿HR¿Hq¿Hê¿H≠¿H“¿HÍ¿I¿I'¿IW¿I~¿Iù¿I¬¿Iﬁ¿I¸¿J¿J7¿JZ¿Jä¿J∏¿J·¿K¿K7¿K[¿K{¿Kñ¿Kó¿K£¿Kﬂ¿K˙¿L¿L2¿Ld¿Lí¿L∆¿L‰¿M ¿M¿M4¿MN¿Mh¿MÄ¿Mû¿Mƒ¿M‚¿M˛¿N"¿N`¿NÇ¿Nò¿N≈¿NÛ¿O¿OA¿Og¿Oá¿O©¿OÀ¿OÌ¿P¿PQ¿PÅ¿Pø¿PÛ¿Q¿QE¿Qm¿Qè¿Qñ¿Qö¿Qõ¿Qß¿Qˆ¿R¿R!¿RC¿Rw¿Rß¿R›¿R˝¿S¿S7¿SS¿So¿Sã¿S•¿S≈¿SÌ¿T¿T+¿TQ¿Të¿Tµ¿TÕ¿T¸¿U,¿UT¿UÑ¿U¶¿U»¿UÏ¿V¿V4¿Vh¿Vö¿V⁄¿W¿W<¿Wp¿Wö¿Wæ¿WÎ¿WÔ¿WÒ¿WÚ¿W˝¿X¿X4¿XR¿Xo¿Xê¿XÆ¿X‘¿XÓ¿Y¿Y,¿YD¿YJ¿YK¿Yh¿Yç¿Y¨¿Y‹¿YÙ¿Z¿Z-¿Z@¿Z_¿Z`¿Zñ¿Z∏¿Z·¿ZÁ¿[!¿[c¿[ü¿\+¿\_¿\ù¿\€¿]¿]g¿]k¿]m¿]n¿]†¿]Ω¿]÷¿]Û¿^¿^:¿^U¿^[¿^\¿^r¿^è¿^Æ¿^Ÿ¿^Ô¿^¿^¸¿_B¿_D¿_E¿_°¿_˙¿_˚¿`¿`¿`3¿`M¿`è¿`ï¿`ô¿`ö¿`¶¿`›¿a¿a3¿au¿a{¿a|¿a¨¿aÍ¿a¿aÙ¿aı¿b¿b¿bP¿be¿bi¿bj¿b‹¿b›¿c¿c)¿c*¿c6¿cl¿cm¿cy¿c°¿c∆¿d!¿dD¿dH¿dI¿dU¿dz¿d§¿d—¿dÂ¿dÎ¿e¿e(¿e.¿eZ¿en¿et¿e¥¿eÊ¿fG¿fõ¿fü¿f†¿f¨¿f¿¿g¿g9¿gQ¿gW¿gè¿gˆ¿g˙¿g˚¿h¿h.¿hG¿hK¿hM¿hN¿h~¿hù¿h∑¿hœ¿h’¿h÷¿i3¿iF¿iG¿iS¿i¿i±¿iﬁ¿iÂ¿j¿j0¿jD¿jä¿jê¿j¨¿j€¿k¿k¿k#¿k7¿kL¿kR¿kV¿kX¿kY¿kö¿kû¿kÔ¿l:¿lÜ¿l…¿m¿mi¿mt¿mx¿m»¿mﬂ¿m„¿mÒ¿mı¿n:¿nr¿n√¿n˚¿o+¿oS¿oT¿oj¿ok¿oº¿oË¿p1¿px¿pª¿pø¿p¿¿pÃ¿p¸¿q%¿q8¿q>¿qW¿qg¿qm¿që¿q¨¿q≤¿qœ¿qÊ¿qÏ¿qÌ¿r¿r.¿rB¿rF¿rG¿rS¿rÑ¿rπ¿rÃ¿r“¿rÍ¿r˙¿s ¿s(¿sC¿sI¿sf¿s}¿sÉ¿sÑ¿s≤¿s…¿s·¿sÂ¿sÁ¿sË¿t9¿tî¿t‰¿tÂ¿u¿u7¿uf¿ug¿us¿u©¿uÂ¿v¿v¿v¿v;¿vÉ¿v«¿vÈ¿w3¿w\¿w¡¿x¿x¿x6¿xH¿xú¿x•¿x´¿x¨¿y¿y¿yE¿yf¿y ¿z¿z9¿z@¿z[¿zk¿z≈¿zÃ¿z–¿z—¿z›¿{5¿{7¿{8¿{û¿{º¿{Ã¿{Ê¿|¿|3¿|N¿|n¿|t¿|u¿|ñ¿|¿¿|◊¿|Û¿}$¿}R¿}S¿}~¿}¿}…¿}·¿~¿~B¿~Ñ¿~´¿~≤¿¿Z¿^¿_¿•¿ø¿˜¿Ä$¿Äh¿Äo¿Ä°¿Ä˛¿Å¿Å¿Å¿ÅE¿ÅÅ¿Å†¿Å°¿Ç ¿ÇW¿Çî¿Ç™¿É¿É-¿É7¿É=¿É>¿Éj¿Éπ¿É¿Ñ¿ÑO¿Ñn¿Ñè¿Ñö¿Ñ·¿Ö ¿Ö!¿ÖL¿ÖW¿Ö_¿Öe¿Öf¿Ü¿Üã¿Üˇ¿á-¿áß¿á®¿áË¿à[¿à–¿âD¿âH¿âI¿âU¿âì¿âï¿âñ¿ä¿ä:¿ä;¿ä\¿ä]¿äè¿äØ¿ä∞¿ä‰¿ã¿ã;¿ãg¿ãu¿ã{¿ãß¿ãı¿åR¿å∞¿ç¿ç2¿çU¿çq¿çw¿ç{¿ç|¿çà¿çª¿çÁ¿çË¿éG¿éó¿éª¿é…¿éœ¿é–¿è¿è%¿èA¿èG¿èH¿èç¿èÔ¿è¿êD¿ê¶¿êÚ¿ë ¿ë;¿ëù¿ë÷¿í¿í1¿í2¿íF¿íV¿í®¿íØ¿í·¿ì
¿ì.¿ì4¿ì8¿ì9¿ìE¿ìÉ¿ìÖ¿ìÜ¿ì ¿ìÍ¿ìÎ¿î¿î¿î¿îa¿î|¿îå¿î©¿îø¿ï¿ï#¿ï,¿ï3¿ï7¿ï8¿ïD¿ïÅ¿ïÉ¿ïÑ¿ï–¿ïÙ¿ïı¿ñ¿ñ¿ñ#¿ñl¿ñê¿ñ∏¿ñ≈¿ñÓ¿ñÙ¿ñ¯¿ñ˘¿ó¿ój¿ól¿óm¿ó®¿ó≥¿ó…¿ó·¿ó˙¿ò¿ò¿ò¿òB¿òX¿òY¿òÇ¿òñ¿òò¿òô¿ò◊¿ò¯¿ò¸¿ôG¿ôm¿ô±¿ôΩ¿ôÚ¿ôÛ¿ôˇ¿ö¿ö:¿ö>¿ö@    +Ä•  Ä∫Ä— Ä÷ÄÎÄÌÄ˚Ä˛ Å*ÅOÅQ  Å{ Å¢Å∏Å∫  Å„  Ç  Ç5  ÇL  Çd  Çà  Çù  Ç¥  ÇÕ  Çı  É
  É1  É_  É|  Éó  É∂  Éœ  ÉÏ  Ñ  Ñ   ÑD  Ñe  ÑÉ  Ñ¢  Ñº  Ñﬁ  Ñ˜  Ö  Ö,  Ö@  Öd  ÖÇ  Ö∞  Öœ  ÖÎ  Öˇ  ÜÜBÜ« çﬂÇºçÂ  é$d é*é> éAéP  ébéq  éyéÄ   éã+é•  é∫é≈   é—ÄäéÍ  é˝è  é—é“è^Å;èo  èÇèê  èò'è¥  è^è_ êùÇ¥ê£  êŸB êŸêÛ êÙê˙  ëë   ë+ë9  ëNë\  ëêëï ë†ëpëy    ë©Ä”ë≠  ëµëª   íÄÄœíë  íóí®  í∞íª  íÄíÅ ìS¢ßú‹âÇ/// A controller for an editable text field.
///
/// Whenever the user modifies a text field with an associated
/// [TextEditingController], the text field updates [value] and the controller
/// notifies its listeners. Listeners can then read the [text] and [selection]
/// properties to learn what the user has typed or how the selection has been
/// updated.
///
/// Similarly, if you modify the [text] or [selection] properties, the text
/// field will be notified and will update itself appropriately.
///
/// A [TextEditingController] can also be used to provide an initial value for a
/// text field. If you build a text field with a controller that already has
/// [text], the text field will use that text as its initial value.
///
/// The [value] (as well as [text] and [selection]) of this controller can be
/// updated from within a listener added to this controller. Be aware of
/// infinite loops since the listener will also be notified of the changes made
/// from within itself. Modifying the composing region from within a listener
/// can also have a bad interaction with some input methods. Gboard, for
/// example, will try to restore the composing region of the text if it was
/// modified programmatically, creating an infinite loop of communications
/// between the framework and the input method. Consider using
/// [TextInputFormatter]s instead for as-you-type text modification.
///
/// If both the [text] or [selection] properties need to be changed, set the
/// controller's [value] instead.
///
/// Remember to [dispose] of the [TextEditingController] when it is no longer
/// needed. This will ensure we discard any resources used by the object.
/// {@tool dartpad}
/// This example creates a [TextField] with a [TextEditingController] whose
/// change listener forces the entered text to be lower case and keeps the
/// cursor at the end of the input.
///
/// ** See code in examples/api/lib/widgets/editable_text/text_editing_controller.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TextField], which is a Material Design text field that can be controlled
///    with a [TextEditingController].
///  * [EditableText], which is a raw region of editable text that can be
///    controlled with a [TextEditingController].
///  * Learn how to use a [TextEditingController] in one of our [cookbook recipes](https://flutter.dev/docs/cookbook/forms/text-field-changes#2-use-a-texteditingcontroller). ùÅ ù∂ùÀÄè/// Creates a controller for an editable text field.
///
/// This constructor treats a null [text] argument as if it were the empty
/// string.ùŒù◊  ù‰ùÈû.ù˜ûùÔùÍùÚù˘û	û
ûû"û-û'û#û)û4Ç^üüüÄª/// Creates a controller for an editable text field from an initial [TextEditingValue].
///
/// This constructor treats a null [value] argument as if it were
/// [TextEditingValue.empty].üü+  &ü7ü=üè†büqüUüMüGüPüXüYü^ü_ühüiütüyüzüôüØü∞üµüÈüÍü˚üÏüÒüÚü¸†:†k†p†ê†w†q†z†ä†ã †ñL†œ+/// The current string the user is editing.   †ÂÇ·£Ç/// Setting this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this value should only be set between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.
///
/// This property can be set from a listener added to this
/// [TextEditingController]; however, one should not also set [selection]
/// in a separate statement. To change both the [text] and the [selection]
/// change the controller's [value]. ££#   £ Åu£⁄  £‡£Ú  £ £À™qÄ»´Äê/// The currently selected [text].
///
/// If the selection is collapsed, then this property gives the offset of the
/// cursor within the text.   ´<ÑX≠ÈÇê/// Setting this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this value should only be set between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.
///
/// This property can be set from a listener added to this
/// [TextEditingController]; however, one should not also set [text]
/// in a separate statement. To change both the [text] and the [selection]
/// change the controller's [value].
///
/// If the new selection is of non-zero length, or is outside the composing
/// range, the composing range is cleared. ≠ÛÆ   •CÖ*¶Ä¬/// Builds [TextSpan] from current editing value.
///
/// By default makes text in composing range appear as underlined. Descendants
/// can override this method to customize appearance of text. ¶&¶=  ¶E¶Q  ¶X¶g   ØòÇ<±tÅƒ/// Set the [value] to empty.
///
/// After calling this function, [text] will be the empty string and the
/// selection will be collapsed at zero offset.
///
/// Calling this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this method should only be called between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.   ±ÿÇf≥Å˛/// Set the composing region to an empty range.
///
/// The composing region is the range of text that is still being composed.
/// Calling this function indicates that the user is done composing that
/// region.
///
/// Calling this will notify all the listeners of this [TextEditingController]
/// that they need to update (it calls [notifyListeners]). For this reason,
/// this method should only be called between frames, e.g. in response to user
/// actions, not during the build, layout, or paint phases.   ¥BÄŒ¥ãA/// Check that the [selection] is inside of the bounds of [text]. ¥ß¥∂   µÄ‰µ\@/// Check that the [selection] is inside of the composing range. µ}µå    µ¸ÜM∏Åó/// Toolbar configuration for [EditableText].
///
/// Toolbar is a context menu that will show up when user right click or long
/// press the [EditableText]. It includes several options: cut, copy, paste,
/// and select all.
///
/// [EditableText] and its derived widgets have their own default [ToolbarOptions].
/// Create a custom [ToolbarOptions] if you want explicit control over the toolbar
/// option. ∏Åt ππ%{/// Create a toolbar configuration with given options.
///
/// All options default to false if they are not explicitly set.π,π2  πCπI  πYπ_  πqπw  
∏ú∏ù∏ßπ∏≠∏÷π8πNπfπÇπísπÌ</// An instance of [ToolbarOptions] with no options enabled.πı∫∫∫
\∫bF/// Whether to show copy option in toolbar.
///
/// Defaults to false. ∫kÄ≤ªÄô/// Whether to show cut option in toolbar.
///
/// If [EditableText.readOnly] is set to true, cut will be disabled regardless.
///
/// Defaults to false. ª"Ä∏ª’Äù/// Whether to show paste option in toolbar.
///
/// If [EditableText.readOnly] is set to true, paste will be disabled regardless.
///
/// Defaults to false. ªﬂgº=L/// Whether to show select all option in toolbar.
///
/// Defaults to false.   ∑î∑ï∑ü∑ˇ∑£∑ ºKâ©Ω´ÅY/// Configures the ability to insert media content through the soft keyboard.
///
/// The configuration provides a handler for any rich content inserted through
/// the system input method, and also provides the ability to limit the mime
/// types of the inserted content.
///
/// See also:
///
/// * [EditableText.contentInsertionConfiguration] ΩÕÅÓ øø)Å0/// Creates a content insertion configuration with the specified options.
///
/// A handler for inserted content, in the form of [onContentInserted], must
/// be supplied.
///
/// The allowable mime types of inserted content may also
/// be provided via [allowedMimeTypes], which cannot be an empty list.ø0ø?  øU9ø[  ømøóøùøπøûøÆøØøøÇv¿ B$Ç/// Called when a user inserts content through the virtual / on-screen keyboard,
/// currently only used on Android.
///
/// [KeyboardInsertedContent] holds the data representing the inserted content.
///
/// {@tool dartpad}
///
/// This example shows how to access the data for inserted content in your
/// `TextField`.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_content_inserted.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * <https://developer.android.com/guide/topics/text/image-keyboard> ¿ B:É∑¿ E·Ée/// {@template flutter.widgets.contentInsertionConfiguration.allowedMimeTypes}
/// Used when a user inserts image-based content through the device keyboard,
/// currently only used on Android.
///
/// The passed list of strings will determine which MIME types are allowed to
/// be inserted via the device keyboard.
///
/// The default mime types are given by [kDefaultContentInsertionMimeTypes].
/// These are all the mime types that are able to be handled and inserted
/// from keyboards.
///
/// This field cannot be an empty list.
///
/// {@tool dartpad}
/// This example shows how to limit image insertion to specific file types.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_content_inserted.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * <https://developer.android.com/guide/topics/text/image-keyboard>
/// {@endtemplate}    ¿ F8ÇØ¿ F>  ¿ FL' ¿ FR¿ F[ ¿ F\	¿ Fb  ¿ Fg
¿ Fm   ¿ F°Å÷¿ Fæ <¿ FÂ¿ Hv¿ F⁄¿ F‰¿ F€¿ FÎ¿ FÙ¿ Fˇ¿ Fı¿ F˛¿ G¿ G¿ G#¿ G¿ G"¿ G3¿ G<¿ GJ¿ G=¿ GF¿ GW¿ G`¿ Gm¿ Ga¿ Gj¿ G{¿ GÑ¿ Gí¿ GÖ¿ Gé¿ Gü¿ G®¿ G≥¿ G©¿ G≤¿ G√¿ GÃ¿ G◊¿ GÕ¿ G÷¿ GÁ¿ G¿ G˛¿ GÒ¿ G˙¿ H¿ H¿ H!¿ H¿ H¿ H/¿ H8¿ HF¿ H9¿ HB¿ HS¿ H\¿ Hg¿ H]¿ Hf¿ HΩ¿ H   ¿ H“¿ Hﬂ     ¿ HÈá©¿ HÔ  ¿ I"`¿ I=¿ I>¿ IN  	¿ IS¿ IW¿ IX¿ IY¿ IÄ¿ IZ¿ Ic¿ Id¿ I¿ IÖÅ¶¿ I†¿ I°¿ I¢ ¿ I£¿ I©  ¿ I¥¿ I∫  ¿ IÃ¿ I“¿ IË¿ I”¿ I›¿ Iﬁ¿ IÒ¿ I˜¿ J¿ J¿ I¯¿ J¿ J¿ J¿ J¿ J¿ J$¿ J*¿ J˜¿ K)¿ J+¿ JÙ¿ Jı¿ Jˆ¿ J˘¿ K/¿ K<  ¿ KL ¿ Kb  ¿ L)¿ L- ¿ LB ¿ Kq(¿ KÑ  ¿ Ká¿ Kè  ¿ Kq¿ Kr¿ Kù<¿ KÆ  ¿ Kµ¿ KΩ  ¿ Kù¿ Kû¿ LHÑH¿ L[  ¿ L]¿ Le  ¿ LH¿ LI ¿ Pî¿#¿ Ån∞”/// A basic text input field.
///
/// This widget interacts with the [TextInput] service to let the user edit the
/// text it contains. It also provides scrolling, selection, and cursor
/// movement.
///
/// The [EditableText] widget is a low-level widget that is intended as a
/// building block for custom widget sets. For a complete user experience,
/// consider using a [TextField] or [CupertinoTextField].
///
/// ## Handling User Input
///
/// Currently the user may change the text this widget contains via keyboard or
/// the text selection menu. When the user inserted or deleted text, you will be
/// notified of the change and get a chance to modify the new text value:
///
/// * The [inputFormatters] will be first applied to the user input.
///
/// * The [controller]'s [TextEditingController.value] will be updated with the
///   formatted result, and the [controller]'s listeners will be notified.
///
/// * The [onChanged] callback, if specified, will be called last.
///
/// ## Input Actions
///
/// A [TextInputAction] can be provided to customize the appearance of the
/// action button on the soft keyboard for Android and iOS. The default action
/// is [TextInputAction.done].
///
/// Many [TextInputAction]s are common between Android and iOS. However, if a
/// [textInputAction] is provided that is not supported by the current
/// platform in debug mode, an error will be thrown when the corresponding
/// EditableText receives focus. For example, providing iOS's "emergencyCall"
/// action when running on an Android device will result in an error when in
/// debug mode. In release mode, incompatible [TextInputAction]s are replaced
/// either with "unspecified" on Android, or "default" on iOS. Appropriate
/// [textInputAction]s can be chosen by checking the current platform and then
/// selecting the appropriate action.
///
/// {@template flutter.widgets.EditableText.lifeCycle}
/// ## Lifecycle
///
/// Upon completion of editing, like pressing the "done" button on the keyboard,
/// two actions take place:
///
///   1st: Editing is finalized. The default behavior of this step includes
///   an invocation of [onChanged]. That default behavior can be overridden.
///   See [onEditingComplete] for details.
///
///   2nd: [onSubmitted] is invoked with the user's input value.
///
/// [onSubmitted] can be used to manually move focus to another input widget
/// when a user finishes with the currently focused input widget.
///
/// When the widget has focus, it will prevent itself from disposing via
/// [AutomaticKeepAliveClientMixin.wantKeepAlive] in order to avoid losing the
/// selection. Removing the focus will allow it to be disposed.
/// {@endtemplate}
///
/// Rather than using this widget directly, consider using [TextField], which
/// is a full-featured, material-design text input field with placeholder text,
/// labels, and [Form] integration.
///
/// ## Text Editing [Intent]s and Their Default [Action]s
///
/// This widget provides default [Action]s for handling common text editing
/// [Intent]s such as deleting, copying and pasting in the text field. These
/// [Action]s can be directly invoked using [Actions.invoke] or the
/// [Actions.maybeInvoke] method. The default text editing keyboard [Shortcuts]
/// also use these [Intent]s and [Action]s to perform the text editing
/// operations they are bound to.
///
/// The default handling of a specific [Intent] can be overridden by placing an
/// [Actions] widget above this widget. See the [Action] class and the
/// [Action.overridable] constructor for more information on how a pre-defined
/// overridable [Action] can be overridden.
///
/// ### Intents for Deleting Text and Their Default Behavior
///
/// | **Intent Class**                 | **Default Behavior when there's selected text**      | **Default Behavior when there is a [caret](https://en.wikipedia.org/wiki/Caret_navigation) (The selection is [TextSelection.collapsed])**  |
/// | :------------------------------- | :--------------------------------------------------- | :----------------------------------------------------------------------- |
/// | [DeleteCharacterIntent]          | Deletes the selected text                            | Deletes the user-perceived character before or after the caret location. |
/// | [DeleteToNextWordBoundaryIntent] | Deletes the selected text and the word before/after the selection's [TextSelection.extent] position | Deletes from the caret location to the previous or the next word boundary |
/// | [DeleteToLineBreakIntent]        | Deletes the selected text, and deletes to the start/end of the line from the selection's [TextSelection.extent] position | Deletes from the caret location to the logical start or end of the current line |
///
/// ### Intents for Moving the [Caret](https://en.wikipedia.org/wiki/Caret_navigation)
///
/// | **Intent Class**                                                                     | **Default Behavior when there's selected text**                  | **Default Behavior when there is a caret ([TextSelection.collapsed])**  |
/// | :----------------------------------------------------------------------------------- | :--------------------------------------------------------------- | :---------------------------------------------------------------------- |
/// | [ExtendSelectionByCharacterIntent](`collapseSelection: true`)                        | Collapses the selection to the logical start/end of the selection | Moves the caret past the user-perceived character before or after the current caret location. |
/// | [ExtendSelectionToNextWordBoundaryIntent](`collapseSelection: true`)                 | Collapses the selection to the word boundary before/after the selection's [TextSelection.extent] position | Moves the caret to the previous/next word boundary. |
/// | [ExtendSelectionToNextWordBoundaryOrCaretLocationIntent](`collapseSelection: true`)  | Collapses the selection to the word boundary before/after the selection's [TextSelection.extent] position, or [TextSelection.base], whichever is closest in the given direction | Moves the caret to the previous/next word boundary. |
/// | [ExtendSelectionToLineBreakIntent](`collapseSelection: true`)                        | Collapses the selection to the start/end of the line at the selection's [TextSelection.extent] position | Moves the caret to the start/end of the current line .|
/// | [ExtendSelectionVerticallyToAdjacentLineIntent](`collapseSelection: true`)           | Collapses the selection to the position closest to the selection's [TextSelection.extent], on the previous/next adjacent line | Moves the caret to the closest position on the previous/next adjacent line. |
/// | [ExtendSelectionVerticallyToAdjacentPageIntent](`collapseSelection: true`)           | Collapses the selection to the position closest to the selection's [TextSelection.extent], on the previous/next adjacent page | Moves the caret to the closest position on the previous/next adjacent page. |
/// | [ExtendSelectionToDocumentBoundaryIntent](`collapseSelection: true`)                 | Collapses the selection to the start/end of the document | Moves the caret to the start/end of the document. |
///
/// #### Intents for Extending the Selection
///
/// | **Intent Class**                                                                     | **Default Behavior when there's selected text**                  | **Default Behavior when there is a caret ([TextSelection.collapsed])**  |
/// | :----------------------------------------------------------------------------------- | :--------------------------------------------------------------- | :---------------------------------------------------------------------- |
/// | [ExtendSelectionByCharacterIntent](`collapseSelection: false`)                       | Moves the selection's [TextSelection.extent] past the user-perceived character before/after it |
/// | [ExtendSelectionToNextWordBoundaryIntent](`collapseSelection: false`)                | Moves the selection's [TextSelection.extent] to the previous/next word boundary |
/// | [ExtendSelectionToNextWordBoundaryOrCaretLocationIntent](`collapseSelection: false`) | Moves the selection's [TextSelection.extent] to the previous/next word boundary, or [TextSelection.base] whichever is closest in the given direction | Moves the selection's [TextSelection.extent] to the previous/next word boundary. |
/// | [ExtendSelectionToLineBreakIntent](`collapseSelection: false`)                       | Moves the selection's [TextSelection.extent] to the start/end of the line |
/// | [ExtendSelectionVerticallyToAdjacentLineIntent](`collapseSelection: false`)          | Moves the selection's [TextSelection.extent] to the closest position on the previous/next adjacent line |
/// | [ExtendSelectionVerticallyToAdjacentPageIntent](`collapseSelection: false`)          | Moves the selection's [TextSelection.extent] to the closest position on the previous/next adjacent page |
/// | [ExtendSelectionToDocumentBoundaryIntent](`collapseSelection: false`)                | Moves the selection's [TextSelection.extent] to the start/end of the document |
/// | [SelectAllTextIntent]  | Selects the entire document |
///
/// ### Other Intents
///
/// | **Intent Class**                        | **Default Behavior**                                 |
/// | :-------------------------------------- | :--------------------------------------------------- |
/// | [DoNothingAndStopPropagationTextIntent] | Does nothing in the input field, and prevents the key event from further propagating in the widget tree. |
/// | [ReplaceTextIntent]                     | Replaces the current [TextEditingValue] in the input field's [TextEditingController], and triggers all related user callbacks and [TextInputFormatter]s. |
/// | [UpdateSelectionIntent]                 | Updates the current selection in the input field's [TextEditingController], and triggers the [onSelectionChanged] callback. |
/// | [CopySelectionTextIntent]               | Copies or cuts the selected text into the clipboard |
/// | [PasteTextIntent]                       | Inserts the current text in the clipboard after the caret location, or replaces the selected text if the selection is not collapsed. |
///
/// ## Gesture Events Handling
///
/// When [rendererIgnoresPointer] is false (the default), this widget provides
/// rudimentary, platform-agnostic gesture handling for user actions such as
/// tapping, long-pressing, and scrolling.
///
/// To provide more complete gesture handling, including double-click to select
/// a word, drag selection, and platform-specific handling of gestures such as
/// long presses, consider setting [rendererIgnoresPointer] to true and using
/// [TextSelectionGestureDetectorBuilder].
///
/// {@template flutter.widgets.editableText.showCaretOnScreen}
/// ## Keep the caret visible when focused
///
/// When focused, this widget will make attempts to keep the text area and its
/// caret (even when [showCursor] is `false`) visible, on these occasions:
///
///  * When the user focuses this text field and it is not [readOnly].
///  * When the user changes the selection of the text field, or changes the
///    text when the text field is not [readOnly].
///  * When the virtual keyboard pops up.
/// {@endtemplate}
///
/// {@template flutter.widgets.editableText.accessibility}
/// ## Troubleshooting Common Accessibility Issues
///
/// ### Customizing User Input Accessibility Announcements
///
/// To customize user input accessibility announcements triggered by text
/// changes, use [SemanticsService.announce] to make the desired
/// accessibility announcement.
///
/// On iOS, the on-screen keyboard may announce the most recent input
/// incorrectly when a [TextInputFormatter] inserts a thousands separator to
/// a currency value text field. The following example demonstrates how to
/// suppress the default accessibility announcements by always announcing
/// the content of the text field as a US currency value (the `\$` inserts
/// a dollar sign, the `$newText` interpolates the `newText` variable):
///
/// ```dart
/// onChanged: (String newText) {
///   if (newText.isNotEmpty) {
///     SemanticsService.announce('\$$newText', Directionality.of(context));
///   }
/// }
/// ```
///
/// {@endtemplate}
///
/// See also:
///
///  * [TextField], which is a full-featured, material-design text input field
///    with placeholder text, labels, and [Form] integration. ¿ Åñóh ¿ Ñ[¿ ÑgÇ™/// Creates a basic text input control.
///
/// The [maxLines] property can be set to null to remove the restriction on
/// the number of lines. By default, it is one, meaning this is a single-line
/// text field. [maxLines] must be null or greater than zero.
///
/// If [keyboardType] is not set or is null, its value will be inferred from
/// [autofillHints], if [autofillHints] is not empty. Otherwise it defaults to
/// [TextInputType.text] if [maxLines] is exactly one, and
/// [TextInputType.multiline] if [maxLines] is null or greater than one.
///
/// The text cursor is not shown if [showCursor] is false or if [showCursor]
/// is null (the default) and [readOnly] is true.G¿ Ñn	¿ Ñu  ¿ Ñ}¿ Ñå  ¿ Ñõ¿ Ñ™  ¿ Ñ∏¿ Ñæ  ¿ Ñ”¿ ÑŸ  ¿ Ñˆ¿ Ñ¸  ¿ Ö¿ Ö  ¿ Ö1 ¿ ÖC  ¿ ÖW ¿ Öi  ¿ Ö}¿ ÖÉ  ¿ Ö†¿ ÖØ  ¿ Öπ¿ Ö∆  ¿ Ö’¿ Ö‰  ¿ ÖÙ#¿ Ü  ¿ Ü ¿ Ü#  ¿ ÜC¿ ÜI  ¿ Ü[¿ Üa  ¿ ÜlÄ˜¿ áU  ¿ ái¿ áo  ¿ á~¿ áÑ  ¿ áï¿ áõ  ¿ á®¿ áÆ  ¿ á¬¿ á»  ¿ á›¿ á„  ¿ á˙+¿ à   ¿ à+¿ à1  ¿ àG¿ àN  ¿ à]!¿ àc  ¿ àÑ¿ àä  ¿ àù¿ à£  ¿ àπ¿ à…  ¿ à⁄¿ à‡  ¿ àÙ1¿ à˙  ¿ â+¿ â1  ¿ â?¿ âE  ¿ â[¿ âa  ¿ âq¿ âw  ¿ âè¿ âï  ¿ â¨¿ â≤  ¿ âŒ¿ â‘  ¿ âÂ)¿ ä   ¿ ä¿ ä  ¿ ä*#¿ ä0  ¿ äS¿ äY  ¿ äo¿ äu  ¿ äÜ¿ äå  ¿ äù"¿ ä£  ¿ ä≈¿ äÀ  ¿ ä‹!¿ ä‚  ¿ ã3¿ ã	  ¿ ã<1¿ ãB  ¿ ãs/¿ ãy  ¿ ã®*¿ ãÆ  ¿ ãÿ0¿ ãﬁ  ¿ å ¿ å  ¿ å4¿ å:  ¿ åO¿ åU  ¿ åg ¿ åm  ¿ åçÄõ¿ ç  ¿ ç.%¿ ç4  ¿ çY¿ ç_  ¿ çr!¿ çx  ¿ çô¿ çü  ¿ ç±¿ ç∑  ¿ ç ¿ ç–  ¿ çÎ)¿ çÒ  ¿ é"¿ é   ¿ éB¿ éH  ¿ é_¿ ée  ¿ éÅA¿ éá  ¿ é»¿ éŒ  ÅE¿ Ñ»¿ ÑÌ¿ Ö	¿ Ö'¿ Öñ¿ Ü.¿ Ü7¿ Ü8¿ Ül¿ Üm¿ Üw¿ áI¿ Ü¿ Ü†¿ á¿ áé¿ á∑¿ á”¿ à¿ à¿ à¿ à<¿ ày¿ â¿ â ¿ â!¿ äH¿ äf¿ ä∫¿ ä¯¿ ã¿ ã!¿ ã"¿ ã0¿ ã1¿ ãW¿ ãY¿ ãZ¿ ãg¿ ãh¿ ãà¿ ãé¿ ãò¿ ãô¿ ãú¿ ã°¿ ãù¿ ã¬¿ ãÃ¿ ãÕ¿ ãÒ¿ å¿ å¿ åç¿ åé¿ åò¿ ç¿ å†¿ åÀ¿ çC¿ çQ¿ çR¿ çI¿ çP¿ çJ¿ çÜ¿ çä¿ çã¿ ç·¿ é¿ éü¿ éπ¿ é∫¿ é‰¿ éÍ¿ è	¿ è¿ éÎ¿ é˝¿ é˛¿ è¿ è#¿ è¿ è5¿ è%¿ è8¿ èy¿ èE¿ è`¿ è9¿ èG¿ èV¿ èW¿ èb¿ èq¿ èr¿ èì¿ èÉ¿ è•¿ èï¿ è®¿ èÈ¿ èµ¿ è–¿ è©¿ è∑¿ è∆¿ è«¿ è“¿ è·¿ è‚¿ èÛ¿ è˘¿ ê¿ ê¿ ê¿ è˙¿ ê¿ ê¿ ê¿ ê¿ ê$¿ ê*¿ êw¿ ê¥¿ ê^¿ êH¿ ê5¿ êF¿ ê?¿ ê6¿ êB¿ êK¿ ê\¿ êU¿ êL¿ êX¿ êa¿ êv¿ êk¿ êb¿ ên¿ êÇ¿ êæ¿ êƒ¿ ë¿ ëO¿ êÿ¿ êœ¿ ê–¿ ê€¿ ë ¿ êÌ¿ êÂ¿ ê‹¿ êË¿ ê˘¿ ê¿ ê¸¿ ë¿ ëY¿ ë_¿ ë}¿ ë•¿ ëm¿ ë`¿ ëa¿ ëy¿ ëp¿ ë|¿ ë¿ ë ¿ ëØ¿ ëÁ¿ ëÃ¿ ëÍ¿ í¿ ëı¿ ëÎ¿ ëÏ¿ ë¯¿ ë˘¿ í¿ í¿ íj¿ íÅ¿ íP¿ í1¿ í¿ í4¿ íb¿ íS¿ íe¿ íl¿ íz¿ í{¿ íí¿ íÉ¿ í†¿ ï˘¿ íº¿ î0¿ í°¿ íæ¿ î¿ ìM¿ ì•¿ íø¿ ìO¿ ì]¿ ì^¿ ìß¿ ì≠¿ ìª¿ î¿ ì›¿ ì‘¿ ìﬂ¿ î¿ ì¸¿ î¿ î2¿ ï¯¿ î~¿ ï9¿ î3¿ îÄ¿ îÜ¿ îî¿ îˆ¿ î∂¿ î≠¿ î∏¿ îŸ¿ î’¿ î€¿ ï;¿ ïA¿ ïO¿ ï˜¿ ïl¿ ïh¿ ïn¿ ïé¿ ïã¿ ïê¿ ï∂¿ ï≠¿ ï∏¿ ï⁄¿ ï’¿ ï‹¿ ñ¿ ñ	¿ ñ∆¿ ó:¿ ñÜ¿ ñ5¿ ñ-¿ ñ¿ ñ0¿ ñZ¿ ñB¿ ñ]¿ ñc¿ ñz¿ ñ{¿ ñÉ¿ ñÑ¿ ñø¿ ñì¿ ñ™¿ ñ´¿ ñ¬¿ ñ“¿ óP¿ óD¿ óR¿ ór¿ óe¿ óÅ¿ ót¿ óÑ¿ óñ¿ ó«¿ ó§¿ óó¿ ó¶¿ óΩ¿ óµ¿ óø¿ ó·¿ ó—¿ ó¸¿ òø¿ óÏ¿ ó„¿ óÔ¿ ò¿ ò≤¿ ó˛¿ ò¿ óˇ¿ ò#¿ ò>¿ ò?¿ òc¿ òv¿ òf¿ òy¿ ò¿ òá¿ òö¿ òà¿ òõ¿ òú¿ ò°¿ ò¢¿ ò¡¿ ò‰¿ òŸ¿ òÒ¿ òÊ¿ òÙ¿ òıG¿ ôL¿ ôD#/// Controls the text being edited. ¿ ôSP¿ ôö4/// Controls whether this widget has keyboard focus. ¿ ô®Å¿ ö¥ÄÚ/// {@template flutter.widgets.editableText.obscuringCharacter}
/// Character used for obscuring text if [obscureText] is true.
///
/// Must be only a single character.
///
/// Defaults to the character U+2022 BULLET (‚Ä¢).
/// {@endtemplate} ¿ öÀÅ∆¿ úÜÅõ/// {@template flutter.widgets.editableText.obscureText}
/// Whether to hide the text being edited (e.g., for passwords).
///
/// When this is set to true, all the characters in the text field are
/// replaced by [obscuringCharacter], and the text in the field cannot be
/// copied with copy or cut. If [readOnly] is also true, then the text cannot
/// be selected.
///
/// Defaults to false.
/// {@endtemplate} ¿ úñV¿ ú⁄'/// {@macro dart.ui.textHeightBehavior} ¿ úÒ^¿ ùA8/// {@macro flutter.painting.textPainter.textWidthBasis} ¿ ùTÅ3¿ ûÅ/// {@template flutter.widgets.editableText.readOnly}
/// Whether the text can be changed.
///
/// When this is set to true, the text cannot be modified
/// by any shortcut or keyboard operation. The text is still selectable.
///
/// Defaults to false.
/// {@endtemplate} ¿ ûåÅj¿ üÌÅA/// Whether the text will take the full width regardless of the text width.
///
/// When this is set to false, the width will be based on text width, which
/// will also be affected by [textWidthBasis].
///
/// Defaults to true.
///
/// See also:
///
///  * [textWidthBasis], which controls the calculation of text width. ¿ ü˚Åe¿ °RÅ5/// Configuration of toolbar options.
///
/// By default, all options are enabled. If [readOnly] is true, paste and cut
/// will be disabled regardless. If [obscureText] is true, cut and copy will
/// be disabled regardless. If [readOnly] and [obscureText] are both true,
/// select all will also be disabled. ¿ °eÅq¿ ¢¬Å?/// Whether to show selection handles.
///
/// When a selection is active, there will be two handles at each side of
/// boundary, or one handle if the selection is collapsed. The handles can be
/// dragged to adjust the selection.
///
/// See also:
///
///  * [showCursor], which controls the visibility of the cursor. ¿ ¢€ÅO¿ § Å'/// {@template flutter.widgets.editableText.showCursor}
/// Whether to show cursor.
///
/// The cursor refers to the blinking caret when the [EditableText] is focused.
/// {@endtemplate}
///
/// See also:
///
///  * [showSelectionHandles], which controls the visibility of the selection handles. ¿ §/Ä¨¿ §–Äã/// {@template flutter.widgets.editableText.autocorrect}
/// Whether to enable autocorrection.
///
/// Defaults to true.
/// {@endtemplate} ¿ §‡l¿ •=D/// {@macro flutter.services.TextInputConfiguration.smartDashesType} ¿ •Ql¿ •ÆD/// {@macro flutter.services.TextInputConfiguration.smartQuotesType} ¿ •¬e¿ ¶F/// {@macro flutter.services.TextInputConfiguration.enableSuggestions} ¿ ¶,H¿ ¶o0/// The text style to use for the editable text. ¿ ¶yÄµ¿ ß ÄÉ/// Controls the undo state of the current editable text.
///
/// If null, this widget will create its own [UndoHistoryController]. ¿ ≠¿ ≠-  ¿ ≠=Ä≈¿ ≠˘Ä°/// {@template flutter.widgets.editableText.textAlign}
/// How the text should be aligned horizontally.
///
/// Defaults to [TextAlign.start].
/// {@endtemplate} ¿ ÆÇ‚¿ ∞‹Ç°/// {@template flutter.widgets.editableText.textDirection}
/// The directionality of the text.
///
/// This decides how [textAlign] values like [TextAlign.start] and
/// [TextAlign.end] are interpreted.
///
/// This is also used to disambiguate how to render bidirectional text. For
/// example, if the text is an English phrase followed by a Hebrew phrase,
/// in a [TextDirection.ltr] context the English phrase will be on the left
/// and the Hebrew phrase to its right, while in a [TextDirection.rtl]
/// context, the English phrase will be on the right and the Hebrew phrase on
/// its left.
///
/// Defaults to the ambient [Directionality], if any.
/// {@endtemplate} ¿ ∞ÓÇ¿ ≤ÎÅ«/// {@template flutter.widgets.editableText.textCapitalization}
/// Configures how the platform keyboard will select an uppercase or
/// lowercase keyboard.
///
/// Only supports text keyboards, other keyboard types will ignore this
/// configuration. Capitalization is locale-aware.
///
/// Defaults to [TextCapitalization.none].
///
/// See also:
///
///  * [TextCapitalization], for a description of each capitalization behavior.
///
/// {@endtemplate} ¿ ≥Åi¿ ¥eÅF/// Used to select a font when the same Unicode character can
/// be rendered differently, depending on the locale.
///
/// It's rarely necessary to set this property. By default its value
/// is inherited from the enclosing app with `Localizations.localeOf(context)`.
///
/// See [RenderEditable.locale] for more information. ¿ ¥pÇ¯¿ ∑YÅÈ/// {@template flutter.widgets.editableText.textScaleFactor}
/// Deprecated. Will be removed in a future version of Flutter. Use
/// [textScaler] instead.
///
/// The number of font pixels for each logical pixel.
///
/// For example, if the text scale factor is 1.5, text will be 50% larger than
/// the specified font size.
///
/// Defaults to the [MediaQueryData.textScaleFactor] obtained from the ambient
/// [MediaQuery], or 1.0 if there is no [MediaQuery] in scope.
/// {@endtemplate}¿ ∂r¿ ∂s¿ ∂}¿ ∑G¿ ∂É¿ ∂¢¿ ∑¿ ∑mS¿ ∑∂4/// {@macro flutter.painting.textPainter.textScaler} ¿ ∑≈H¿ ∏./// The color to use when painting the cursor. ¿ ∏ÅÚ¿ πÈÅµ/// The color to use when painting the autocorrection Rect.
///
/// For [CupertinoTextField]s, the value is set to the ambient
/// [CupertinoThemeData.primaryColor] with 20% opacity. For [TextField]s, the
/// value is null on non-iOS platforms and the same color used in [CupertinoTextField]
/// on iOS.
///
/// Currently the autocorrection Rect only appears on iOS.
///
/// Defaults to null, which disables autocorrection Rect painting. ¿ ∫	ÄË¿ ∫‹Äæ/// The color to use when painting the background cursor aligned with the text
/// while rendering the floating cursor.
///
/// Typically this would be set to [CupertinoColors.inactiveGray]. ¿ ∫ˆà¬¿ √∞àD/// {@template flutter.widgets.editableText.maxLines}
/// The maximum number of lines to show at one time, wrapping if necessary.
///
/// This affects the height of the field itself and does not limit the number
/// of lines that can be entered into the field.
///
/// If this is 1 (the default), the text will not wrap, but will scroll
/// horizontally instead.
///
/// If this is null, there is no limit to the number of lines, and the text
/// container will start with enough vertical space for one line and
/// automatically grow to accommodate additional lines as they are entered, up
/// to the height of its constraints.
///
/// If this is not null, the value must be greater than zero, and it will lock
/// the input to the given number of lines and take up enough horizontal space
/// to accommodate that number of lines. Setting [minLines] as well allows the
/// input to grow and shrink between the indicated range.
///
/// The full set of behaviors possible with [minLines] and [maxLines] are as
/// follows. These examples apply equally to [TextField], [TextFormField],
/// [CupertinoTextField], and [EditableText].
///
/// Input that occupies a single line and scrolls horizontally as needed.
/// ```dart
/// const TextField()
/// ```
///
/// Input whose height grows from one line up to as many lines as needed for
/// the text that was entered. If a height limit is imposed by its parent, it
/// will scroll vertically when its height reaches that limit.
/// ```dart
/// const TextField(maxLines: null)
/// ```
///
/// The input's height is large enough for the given number of lines. If
/// additional lines are entered the input scrolls vertically.
/// ```dart
/// const TextField(maxLines: 2)
/// ```
///
/// Input whose height grows with content between a min and max. An infinite
/// max is possible with `maxLines: null`.
/// ```dart
/// const TextField(minLines: 2, maxLines: 4)
/// ```
///
/// See also:
///
///  * [minLines], which sets the minimum number of lines visible.
/// {@endtemplate}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ √Ωáá¿ À<á/// {@template flutter.widgets.editableText.minLines}
/// The minimum number of lines to occupy when the content spans fewer lines.
///
/// This affects the height of the field itself and does not limit the number
/// of lines that can be entered into the field.
///
/// If this is null (default), text container starts with enough vertical space
/// for one line and grows to accommodate additional lines as they are entered.
///
/// This can be used in combination with [maxLines] for a varying set of behaviors.
///
/// If the value is set, it must be greater than zero. If the value is greater
/// than 1, [maxLines] should also be set to either null or greater than
/// this value.
///
/// When [maxLines] is set as well, the height will grow between the indicated
/// range of lines. When [maxLines] is null, it will grow as high as needed,
/// starting from [minLines].
///
/// A few examples of behaviors possible with [minLines] and [maxLines] are as follows.
/// These apply equally to [TextField], [TextFormField], [CupertinoTextField],
/// and [EditableText].
///
/// Input that always occupies at least 2 lines and has an infinite max.
/// Expands vertically as needed.
/// ```dart
/// TextField(minLines: 2)
/// ```
///
/// Input whose height starts from 2 lines and grows up to 4 lines at which
/// point the height limit is reached. If additional lines are entered it will
/// scroll vertically.
/// ```dart
/// const TextField(minLines:2, maxLines: 4)
/// ```
///
/// Defaults to null.
///
/// See also:
///
///  * [maxLines], which sets the maximum number of lines visible, and has
///    several examples of how minLines and maxLines interact to produce
///    various behaviors.
/// {@endtemplate}
///  * [expands], which determines whether the field should fill the height of
///    its parent. ¿ ÀIÉ¿ ŒIÇ /// {@template flutter.widgets.editableText.expands}
/// Whether this widget's height will be sized to fill its parent.
///
/// If set to true and wrapped in a parent widget like [Expanded] or
/// [SizedBox], the input will expand to fill the parent.
///
/// [maxLines] and [minLines] must both be null when this is set to true,
/// otherwise an error is thrown.
///
/// Defaults to false.
///
/// See the examples in [maxLines] for the complete picture of how [maxLines],
/// [minLines], and [expands] interact to produce various behaviors.
///
/// Input that matches the height of its parent:
/// ```dart
/// const Expanded(
///   child: TextField(maxLines: null, expands: true),
/// )
/// ```
/// {@endtemplate} ¿ ŒUÅÓ¿ –:Å\/// {@template flutter.widgets.editableText.autofocus}
/// Whether this text field should focus itself if nothing else is already
/// focused.
///
/// If true, the keyboard will open as soon as this text field obtains focus.
/// Otherwise, the keyboard is only shown after the user taps the text field.
///
/// Defaults to false.
/// {@endtemplate} ¿ –HÅ§¿ —ﬁÅx/// The color to use when painting the selection.
///
/// If this property is null, this widget gets the selection color from the
/// [DefaultSelectionStyle].
///
/// For [CupertinoTextField]s, the value is set to the ambient
/// [CupertinoThemeData.primaryColor] with 20% opacity. For [TextField]s, the
/// value is set to the ambient [TextSelectionThemeData.selectionColor]. ¿ —ÒÉ·¿ ’¡Éé/// {@template flutter.widgets.editableText.selectionControls}
/// Optional delegate for building the text selection handles.
///
/// Historically, this field also controlled the toolbar. This is now handled
/// by [contextMenuBuilder] instead. However, for backwards compatibility, when
/// [selectionControls] is set to an object that does not mix in
/// [TextSelectionHandleControls], [contextMenuBuilder] is ignored and the
/// [TextSelectionControls.buildToolbar] method is used instead.
/// {@endtemplate}
///
/// See also:
///
///  * [CupertinoTextField], which wraps an [EditableText] and which shows the
///    selection toolbar upon user events that are appropriate on the iOS
///    platform.
///  * [TextField], a Material Design themed wrapper of [EditableText], which
///    shows the selection toolbar upon appropriate user events based on the
///    user's platform set in [ThemeData.platform]. ¿ ’◊Å¿ ÷ÂÄÌ/// {@template flutter.widgets.editableText.keyboardType}
/// The type of keyboard to use for editing the text.
///
/// Defaults to [TextInputType.text] if [maxLines] is one and
/// [TextInputType.multiline] otherwise.
/// {@endtemplate} ¿ ÷ˆe¿ ◊L</// The type of action button to use with the soft keyboard. ¿ ◊`âŒ¿ ·%âP/// {@template flutter.widgets.editableText.onChanged}
/// Called when the user initiates a change to the TextField's
/// value: when they have inserted or deleted text.
///
/// This callback doesn't run when the TextField's text is changed
/// programmatically, via the TextField's [controller]. Typically it
/// isn't necessary to be notified of such changes, since they're
/// initiated by the app itself.
///
/// To be notified of all changes to the TextField's text, cursor,
/// and selection, one can add a listener to its [controller] with
/// [TextEditingController.addListener].
///
/// [onChanged] is called before [onSubmitted] when user indicates completion
/// of editing, such as when pressing the "done" button on the keyboard. That
/// default behavior can be overridden. See [onEditingComplete] for details.
///
/// {@tool dartpad}
/// This example shows how onChanged could be used to check the TextField's
/// current value each time the user inserts or deletes a character.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_changed.0.dart **
/// {@end-tool}
/// {@endtemplate}
///
/// ## Handling emojis and other complex characters
/// {@template flutter.widgets.EditableText.onChanged}
/// It's important to always use
/// [characters](https://pub.dev/packages/characters) when dealing with user
/// input text that may contain complex characters. This will ensure that
/// extended grapheme clusters and surrogate pairs are treated as single
/// characters, as they appear to the user.
///
/// For example, when finding the length of some user input, use
/// `string.characters.length`. Do NOT use `string.length` or even
/// `string.runes.length`. For the complex character "üë®‚Äçüë©‚Äçüë¶", this
/// appears to the user as a single character, and `string.characters.length`
/// intuitively returns 1. On the other hand, `string.length` returns 8, and
/// `string.runes.length` returns 5!
/// {@endtemplate}
///
/// See also:
///
///  * [inputFormatters], which are called before [onChanged]
///    runs and can validate and change ("format") the input value.
///  * [onEditingComplete], [onSubmitted], [onSelectionChanged]:
///    which are more specialized input change notifications.
///  * [TextEditingController], which implements the [Listenable] interface
///    and notifies its listeners on [TextEditingValue] changes. ¿ ·3É•¿ ‰«É[/// {@template flutter.widgets.editableText.onEditingComplete}
/// Called when the user submits editable content (e.g., user presses the "done"
/// button on the keyboard).
///
/// The default implementation of [onEditingComplete] executes 2 different
/// behaviors based on the situation:
///
///  - When a completion action is pressed, such as "done", "go", "send", or
///    "search", the user's content is submitted to the [controller] and then
///    focus is given up.
///
///  - When a non-completion action is pressed, such as "next" or "previous",
///    the user's content is submitted to the [controller], but focus is not
///    given up because developers may want to immediately move focus to
///    another input widget within [onSubmitted].
///
/// Providing [onEditingComplete] prevents the aforementioned default behavior.
/// {@endtemplate} ¿ ‰›Éñ¿ ËhÉF/// {@template flutter.widgets.editableText.onSubmitted}
/// Called when the user indicates that they are done editing the text in the
/// field.
///
/// By default, [onSubmitted] is called after [onChanged] when the user
/// has finalized editing; or, if the default behavior has been overridden,
/// after [onEditingComplete]. See [onEditingComplete] for details.
///
/// ## Testing
/// The following is the recommended way to trigger [onSubmitted] in a test:
///
/// ```dart
/// await tester.testTextInput.receiveAction(TextInputAction.done);
/// ```
///
/// Sending a `LogicalKeyboardKey.enter` via `tester.sendKeyEvent` will not
/// trigger [onSubmitted]. This is because on a real device, the engine
/// translates the enter key to a done action, but `tester.sendKeyEvent` sends
/// the key to the framework only.
/// {@endtemplate} ¿ ËxÑ¿ Ï{Éø/// {@template flutter.widgets.editableText.onAppPrivateCommand}
/// This is used to receive a private command from the input method.
///
/// Called when the result of [TextInputClient.performPrivateCommand] is
/// received.
///
/// This can be used to provide domain-specific features that are only known
/// between certain input methods and their clients.
///
/// See also:
///   * [performPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputConnection#performPrivateCommand\(java.lang.String,%20android.os.Bundle\)),
///     which is the Android documentation for performPrivateCommand, used to
///     send a command from the input method.
///   * [sendAppPrivateCommand](https://developer.android.com/reference/android/view/inputmethod/InputMethodManager#sendAppPrivateCommand),
///     which is the Android documentation for sendAppPrivateCommand, used to
///     send a command to the input method.
/// {@endtemplate} ¿ ÏìÄÈ¿ ÌjÄÆ/// {@template flutter.widgets.editableText.onSelectionChanged}
/// Called when the user changes the selection of text (including the cursor
/// location).
/// {@endtemplate} ¿ ÌÅs¿ Ì›E/// {@macro flutter.widgets.SelectionOverlay.onSelectionHandleTapped} ¿ Ì˘áƒ¿ ı±áR/// {@template flutter.widgets.editableText.onTapOutside}
/// Called for each tap that occurs outside of the[TextFieldTapRegion] group
/// when the text field is focused.
///
/// If this is null, [FocusNode.unfocus] will be called on the [focusNode] for
/// this text field when a [PointerDownEvent] is received on another part of
/// the UI. However, it will not unfocus as a result of mobile application
/// touch events (which does not include mouse clicks), to conform with the
/// platform conventions. To change this behavior, a callback may be set here
/// that operates differently from the default.
///
/// When adding additional controls to a text field (for example, a spinner, a
/// button that copies the selected text, or modifies formatting), it is
/// helpful if tapping on that control doesn't unfocus the text field. In
/// order for an external widget to be considered as part of the text field
/// for the purposes of tapping "outside" of the field, wrap the control in a
/// [TextFieldTapRegion].
///
/// The [PointerDownEvent] passed to the function is the event that caused the
/// notification. It is possible that the event may occur outside of the
/// immediate bounding box defined by the text field, although it will be
/// within the bounding box of a [TextFieldTapRegion] member.
/// {@endtemplate}
///
/// {@tool dartpad}
/// This example shows how to use a `TextFieldTapRegion` to wrap a set of
/// "spinner" buttons that increment and decrement a value in the [TextField]
/// without causing the text field to lose keyboard focus.
///
/// This example includes a generic `SpinnerField<T>` class that you can copy
/// into your own project and customize.
///
/// ** See code in examples/api/lib/widgets/tap_region/text_field_tap_region.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [TapRegion] for how the region group is determined. ¿ ı¬Ç‹¿ ¯èÇê/// {@template flutter.widgets.editableText.inputFormatters}
/// Optional input validation and formatting overrides.
///
/// Formatters are run in the provided order when the user changes the text
/// this widget contains. When this parameter changes, the new formatters will
/// not be applied until the next time the user inserts or deletes text.
/// Similar to the [onChanged] callback, formatters don't run when the text is
/// changed programmatically via [controller].
///
/// See also:
///
///  * [TextEditingController], which implements the [Listenable] interface
///    and notifies its listeners on [TextEditingValue] changes.
/// {@endtemplate} ¿ ¯£Åÿ¿ ˙pÅß/// The cursor for a mouse pointer when it enters or is hovering over the
/// widget.
///
/// If this property is null, [SystemMouseCursors.text] will be used.
///
/// The [mouseCursor] is the only property of [EditableText] that controls the
/// appearance of the mouse pointer. All other properties related to "cursor"
/// stands for the text cursor, which is usually a blinking vertical line at
/// the editing position. ¿ ˙ÄÑ?¿ ˛©ÉÒ/// Whether the caller will provide gesture handling (true), or if the
/// [EditableText] is expected to handle basic gestures (false).
///
/// When this is false, the [EditableText] (or more specifically, the
/// [RenderEditable]) enables some rudimentary gestures (tap to position the
/// cursor, long-press to select all, and some scrolling behavior).
///
/// These behaviors are sufficient for debugging purposes but are inadequate
/// for user-facing applications. To enable platform-specific behaviors, use a
/// [TextSelectionGestureDetectorBuilder] to wrap the [EditableText], and set
/// [rendererIgnoresPointer] to true.
///
/// When [rendererIgnoresPointer] is true true, the [RenderEditable] created
/// by this widget will not handle pointer events.
///
/// This property is false by default.
///
/// See also:
///
///  * [RenderEditable.ignorePointer], which implements this feature.
///  * [TextSelectionGestureDetectorBuilder], which implements platform-specific
///    gestures and behaviors. ¿ ˛ƒÇ ¿ πÅ—/// {@template flutter.widgets.editableText.cursorWidth}
/// How thick the cursor will be.
///
/// Defaults to 2.0.
///
/// The cursor will draw under the text. The cursor width will extend
/// to the right of the boundary between characters for left-to-right text
/// and to the left for right-to-left text. This corresponds to extending
/// downstream relative to the selected position. Negative values may be used
/// to reverse this behavior.
/// {@endtemplate} ¿ …ÄÁ¿§Ä¬/// {@template flutter.widgets.editableText.cursorHeight}
/// How tall the cursor will be.
///
/// If this property is null, [RenderEditable.preferredLineHeight] will be used.
/// {@endtemplate} ¿µÄ‘¿}ÄØ/// {@template flutter.widgets.editableText.cursorRadius}
/// How rounded the corners of the cursor should be.
///
/// By default, the cursor has no radius.
/// {@endtemplate} ¿éÅa¿⁄Å2/// {@template flutter.widgets.editableText.cursorOpacityAnimates}
/// Whether the cursor will animate from fully transparent to fully opaque
/// during each cursor blink.
///
/// By default, the cursor opacity will animate on iOS platforms and will not
/// animate on Android platforms.
/// {@endtemplate} ¿ÙV¿>9///{@macro flutter.rendering.RenderEditable.cursorOffset} ¿Oc¿ûA///{@macro flutter.rendering.RenderEditable.paintCursorAboveText} ¿∑Äª¿^Äà/// Controls how tall the selection highlight boxes are computed to be.
///
/// See [ui.BoxHeightStyle] for details on available styles. ¿wÄ∏¿Äá/// Controls how wide the selection highlight boxes are computed to be.
///
/// See [ui.BoxWidthStyle] for details on available styles. ¿4ÄÆ¿–ÄÄ/// The appearance of the keyboard.
///
/// This setting is only honored on iOS devices.
///
/// Defaults to [Brightness.light]. ¿ÁÇÉ¿	]ÇP/// {@template flutter.widgets.editableText.scrollPadding}
/// Configures padding to edges surrounding a [Scrollable] when the Textfield scrolls into view.
///
/// When this widget receives focus and is not completely visible (for example scrolled partially
/// off the screen or overlapped by the keyboard)
/// then it will attempt to make itself visible by scrolling a surrounding [Scrollable], if one is present.
/// This value controls how far from the edges of a [Scrollable] the TextField will be positioned after the scroll.
///
/// Defaults to EdgeInsets.all(20.0).
/// {@endtemplate} ¿	oÇ|¿—Ç:/// {@template flutter.widgets.editableText.enableInteractiveSelection}
/// Whether to enable user interface affordances for changing the
/// text selection.
///
/// For example, setting this to true will enable features such as
/// long-pressing the TextField to select text and show the
/// cut/copy/paste menu, and tapping to move the text caret.
///
/// When this is false, the text selection cannot be adjusted by
/// the user, text cannot be copied, and the user cannot paste into
/// the text field from the clipboard.
///
/// Defaults to true.
/// {@endtemplate} ¿Å°¿qÅd/// Setting this property to true makes the cursor stop blinking or fading
/// on and off once the cursor appears on focus. This property is useful for
/// testing purposes.
///
/// It does not affect the necessity to focus the EditableText for the cursor
/// to appear in the first place.
///
/// Defaults to false, resulting in a typical blinking cursor.¿å¿ñe¿Í9/// {@macro flutter.widgets.scrollable.dragStartBehavior} ¿ Å0¿ Ä˘/// {@template flutter.widgets.editableText.scrollController}
/// The [ScrollController] to use when vertically scrolling the input.
///
/// If null, it will instantiate a new ScrollController.
///
/// See [Scrollable.controller].
/// {@endtemplate} ¿5Å„¿Å™/// {@template flutter.widgets.editableText.scrollPhysics}
/// The [ScrollPhysics] to use when vertically scrolling the input.
///
/// If not specified, it will behave according to the current platform.
///
/// See [Scrollable.physics].
/// {@endtemplate}
///
/// If an explicit [ScrollBehavior] is provided to [scrollBehavior], the
/// [ScrollPhysics] provided by that behavior will take precedence after
/// [scrollPhysics]. ¿Äı¿ÄÃ/// {@template flutter.widgets.editableText.scribbleEnabled}
/// Whether iOS 14 Scribble features are enabled for this widget.
///
/// Only available on iPads.
///
/// Defaults to true.
/// {@endtemplate} ¿;é˘¿"'éG/// {@template flutter.widgets.editableText.autofillHints}
/// A list of strings that helps the autofill service identify the type of this
/// text input.
///
/// When set to null, this text input will not send its autofill information
/// to the platform, preventing it from participating in autofills triggered
/// by a different [AutofillClient], even if they're in the same
/// [AutofillScope]. Additionally, on Android and web, setting this to null
/// will disable autofill for this text field.
///
/// The minimum platform SDK version that supports Autofill is API level 26
/// for Android, and iOS 10.0 for iOS.
///
/// Defaults to an empty list.
///
/// ### Setting up iOS autofill:
///
/// To provide the best user experience and ensure your app fully supports
/// password autofill on iOS, follow these steps:
///
/// * Set up your iOS app's
///   [associated domains](https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app).
/// * Some autofill hints only work with specific [keyboardType]s. For example,
///   [AutofillHints.name] requires [TextInputType.name] and [AutofillHints.email]
///   works only with [TextInputType.emailAddress]. Make sure the input field has a
///   compatible [keyboardType]. Empirically, [TextInputType.name] works well
///   with many autofill hints that are predefined on iOS.
///
/// ### Troubleshooting Autofill
///
/// Autofill service providers rely heavily on [autofillHints]. Make sure the
/// entries in [autofillHints] are supported by the autofill service currently
/// in use (the name of the service can typically be found in your mobile
/// device's system settings).
///
/// #### Autofill UI refuses to show up when I tap on the text field
///
/// Check the device's system settings and make sure autofill is turned on,
/// and there are available credentials stored in the autofill service.
///
/// * iOS password autofill: Go to Settings -> Password, turn on "Autofill
///   Passwords", and add new passwords for testing by pressing the top right
///   "+" button. Use an arbitrary "website" if you don't have associated
///   domains set up for your app. As long as there's at least one password
///   stored, you should be able to see a key-shaped icon in the quick type
///   bar on the software keyboard, when a password related field is focused.
///
/// * iOS contact information autofill: iOS seems to pull contact info from
///   the Apple ID currently associated with the device. Go to Settings ->
///   Apple ID (usually the first entry, or "Sign in to your iPhone" if you
///   haven't set up one on the device), and fill out the relevant fields. If
///   you wish to test more contact info types, try adding them in Contacts ->
///   My Card.
///
/// * Android autofill: Go to Settings -> System -> Languages & input ->
///   Autofill service. Enable the autofill service of your choice, and make
///   sure there are available credentials associated with your app.
///
/// #### I called `TextInput.finishAutofillContext` but the autofill save
/// prompt isn't showing
///
/// * iOS: iOS may not show a prompt or any other visual indication when it
///   saves user password. Go to Settings -> Password and check if your new
///   password is saved. Neither saving password nor auto-generating strong
///   password works without properly setting up associated domains in your
///   app. To set up associated domains, follow the instructions in
///   <https://developer.apple.com/documentation/safariservices/supporting_associated_domains_in_your_app>.
///
/// {@endtemplate}
/// {@macro flutter.services.AutofillConfiguration.autofillHints} ¿"9Å¿#/Ä◊/// The [AutofillClient] that controls this input field's autofill behavior.
///
/// When null, this widget's [EditableTextState] will be used as the
/// [AutofillClient]. This property may override [autofillHints]. ¿#Bv¿#¨X/// {@macro flutter.material.Material.clipBehavior}
///
/// Defaults to [Clip.hardEdge]. ¿#ΩÇÓ¿&ûÇ∞/// Restoration ID to save and restore the scroll offset of the
/// [EditableText].
///
/// If a restoration id is provided, the [EditableText] will persist its
/// current scroll offset and restore it during state restoration.
///
/// The scroll offset is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
///
/// Persisting and restoring the content of the [EditableText] is the
/// responsibility of the owner of the [controller], who may use a
/// [RestorableTextEditingController] for that purpose.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter. ¿&∞Çˆ¿)òÇ≥/// {@template flutter.widgets.shadow.scrollBehavior}
/// A [ScrollBehavior] that will be applied to this widget individually.
///
/// Defaults to null, wherein the inherited [ScrollBehavior] is copied and
/// modified to alter the viewport decoration, like [Scrollbar]s.
/// {@endtemplate}
///
/// [ScrollBehavior]s also provide [ScrollPhysics]. If an explicit
/// [ScrollPhysics] is provided in [scrollPhysics], it will take precedence,
/// followed by [scrollBehavior], and then the inherited ancestor
/// [ScrollBehavior].
///
/// The [ScrollBehavior] of the inherited [ScrollConfiguration] will be
/// modified by default to only apply a [Scrollbar] if [maxLines] is greater
/// than 1. ¿)´}¿*R/// {@macro flutter.services.TextInputConfiguration.enableIMEPersonalizedLearning} ¿*-ÖÅ¿/ëÖ/// {@template flutter.widgets.editableText.contentInsertionConfiguration}
/// Configuration of handler for media content inserted via the system input
/// method.
///
/// Defaults to null in which case media content insertion will be disabled,
/// and the system will display a message informing the user that the text field
/// does not support inserting media content.
///
/// Set [ContentInsertionConfiguration.onContentInserted] to provide a handler.
/// Additionally, set [ContentInsertionConfiguration.allowedMimeTypes]
/// to limit the allowable mime types for inserted content.
///
/// {@tool dartpad}
///
/// This example shows how to access the data for inserted content in your
/// `TextField`.
///
/// ** See code in examples/api/lib/widgets/editable_text/editable_text.on_content_inserted.0.dart **
/// {@end-tool}
///
/// If [contentInsertionConfiguration] is not provided, by default
/// an empty list of mime types will be sent to the Flutter Engine.
/// A handler function must be provided in order to customize the allowable
/// mime types for inserted content.
///
/// If rich content is inserted without a handler, the system will display
/// a message informing the user that the current text input does not support
/// inserting rich content.
/// {@endtemplate} ¿/≥áS¿6ÙÜ /// {@template flutter.widgets.EditableText.contextMenuBuilder}
/// Builds the text selection toolbar when requested by the user.
///
/// `primaryAnchor` is the desired anchor position for the context menu, while
/// `secondaryAnchor` is the fallback location if the menu doesn't fit.
///
/// `buttonItems` represents the buttons that would be built by default for
/// this widget.
///
/// For backwards compatibility, when [selectionControls] is set to an object
/// that does not mix in [TextSelectionHandleControls], [contextMenuBuilder]
/// is ignored and the [TextSelectionControls.buildToolbar] method is used
/// instead.
///
/// {@tool dartpad}
/// This example shows how to customize the menu, in this case by keeping the
/// default buttons for the platform but modifying their appearance.
///
/// ** See code in examples/api/lib/material/context_menu/editable_text_toolbar_builder.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows how to show a custom button only when an email address
/// is currently selected.
///
/// ** See code in examples/api/lib/material/context_menu/editable_text_toolbar_builder.1.dart **
/// {@end-tool}
///
/// See also:
///   * [AdaptiveTextSelectionToolbar], which builds the default text selection
///     toolbar for the current platform, but allows customization of the
///     buttons.
///   * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the
///     button Widgets for the current platform given
///     [ContextMenuButtonItem]s.
///   * [BrowserContextMenu], which allows the browser's context menu on web
///     to be disabled and Flutter-rendered context menus to appear.
/// {@endtemplate}
///
/// If not provided, no context menu will be shown. ¿7Çß¿9õÇX/// {@template flutter.widgets.EditableText.spellCheckConfiguration}
/// Configuration that details how spell check should be performed.
///
/// Specifies the [SpellCheckService] used to spell check text input and the
/// [TextStyle] used to style text with misspelled words.
///
/// If the [SpellCheckService] is left null, spell check is disabled by
/// default unless the [DefaultSpellCheckService] is supported, in which case
/// it is used. It is currently supported only on Android and iOS.
///
/// If this configuration is left null, then spell check is disabled by default.
/// {@endtemplate} ¿9∑Å¿:©Ä∆/// {@macro flutter.widgets.magnifier.TextMagnifierConfiguration.intro}
///
/// {@macro flutter.widgets.magnifier.intro}
///
/// {@macro flutter.widgets.magnifier.TextMagnifierConfiguration.details} ¿ ß3ÖÂ¿ ¨iÑˆ/// {@template flutter.widgets.editableText.strutStyle}
/// The strut style used for the vertical layout.
///
/// [StrutStyle] is used to establish a predictable vertical layout.
/// Since fonts may vary depending on user input and due to font
/// fallback, [StrutStyle.forceStrutHeight] is enabled by default
/// to lock all lines to the height of the base [TextStyle], provided by
/// [style]. This ensures the typed text fits within the allotted space.
///
/// If null, the strut used will inherit values from the [style] and will
/// have [StrutStyle.forceStrutHeight] set to true. When no [style] is
/// passed, the theme's [TextStyle] will be used to generate [strutStyle]
/// instead.
///
/// To disable strut-based vertical alignment and allow dynamic vertical
/// layout based on the glyphs typed, use [StrutStyle.disabled].
///
/// Flutter's strut is based on [typesetting strut](https://en.wikipedia.org/wiki/Strut_(typesetting))
/// and CSS's [line-height](https://www.w3.org/TR/CSS2/visudet.html#line-height).
/// {@endtemplate}
///
/// Within editable text and text fields, [StrutStyle] will not use its standalone
/// default values, and will instead inherit omitted/null properties from the
/// [TextStyle] instead. See [StrutStyle.inheritFromTextStyle].   ¿Å ¿Ä€/// {@template flutter.widgets.editableText.selectionEnabled}
/// Same as [enableInteractiveSelection].
///
/// This getter exists primarily for consistency with
/// [RenderEditable.selectionEnabled].
/// {@endtemplate}   ¿:ƒ\¿:Õ    ¿;$ç‹¿>ƒÉZ/// Returns the [ContextMenuButtonItem]s representing the buttons in this
/// platform's default selection menu for an editable field.
///
/// For example, [EditableText] uses this to generate the default buttons for
/// its context menu.
///
/// See also:
///
/// * [EditableTextState.contextMenuButtonItems], which gives the
///   [ContextMenuButtonItem]s for a specific EditableText.
/// * [SelectableRegion.getSelectableButtonItems], which performs a similar
///   role but for content that is selectable but not editable.
/// * [AdaptiveTextSelectionToolbar], which builds the toolbar itself, and can
///   take a list of [ContextMenuButtonItem]s with
///   [AdaptiveTextSelectionToolbar.buttonItems].
/// * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the button
///   Widgets for the current platform given [ContextMenuButtonItem]s. 	¿>·/¿?  ¿?#¿?4  ¿??"¿?]  ¿?g$¿?Ö  ¿?ë(¿?Ø  ¿?ø%¿?›  ¿?Í(¿@  ¿@$¿@6  ¿@B,¿@`   ¿IMûm¿Ib  ¿I{(¿Ió  ¿I©¿I∏   ¿gæC¿g‹   ¿gæ¿gø¿hå}¿h  ¿h*&¿hG  ¿h¿h ¿tÜ¿Ã÷¿t¨/// State for a [EditableText].  0¿uë¿uò  ¿vj9¿v  ¿vß`¿vΩ ¿vŸ¿vÙ¿vı¿w¿w¿wO¿w& ¿wB¿wO¿wT¿wP¿wU¿wZ¿wV¿w_*¿wo ¿w~¿wá¿wà¿wéÅ‡¿w€,/// Detects whether the clipboard can paste.	¿y-¿yS¿wÌ¿y/¿yJ¿yK¿yU¿yl¿ym¿ysÅ	¿z2Äì/// Detects whether the Live Text input is enabled.
///
/// See also:
///  * [LiveText], where the availability of Live Text input can be obtained.¿zV¿z]¿zO¿zX¿z_¿zz¿z{¿zÅ)¿zñ  ¿z˙'¿{  ¿{&,¿{6 ¿{G¿{P¿{Q¿{V+¿{h  ¿|/¿| ¿|%¿|.¿|/¿|43¿|D ¿|\¿|e¿|f¿|k1¿|{ ¿|ë¿|ö¿|õ¿|°¿|¶ ¿|∂¿|¿)¿|‘  ¿}è5¿}¨  ¿}»¿}◊  ¿ÄdÅN¿Å°Å/// The most up-to-date spell check results for text input.
///
/// These results will be updated via calls to spell check through a
/// [SpellCheckService] and used by this widget to build the [TextSpan] tree
/// for text input and menus for replacement suggestions of misspelled words. ¿ÇBÄ°¿Ç≤T/// The text processing service used to retrieve the native text processing actions.¿Ç»¿Ç·¿Ç‚¿ÇËÄí¿ÉOF/// The list of native text processing actions provided by the engine.¿Éx¿Éy¿Ée¿Éw¿Éf¿ÜéL¿Ü§ ¿Üø¿Ü«¿ÜŸ¿Ü‘¿Ü»¿Ü÷¿Üﬂ3¿ÜÙ  ¿á¿á$  ¿ﬂ9¿ﬂ> ¿ﬂP¿ˆﬁÇ¿¯…Å∆/// The last known [TextEditingValue] of the platform text input plugin.
///
/// This value is updated when the platform text input plugin sends a new
/// update via [updateEditingValue], or when [EditableText] calls
/// [TextInputConnection.setEditingState] to overwrite the platform text input
/// plugin's [TextEditingValue].
///
/// Used in [_updateRemoteEditingValueIfNeeded] to determine whether the
/// remote value is outdated and needs updating. ¿¯¿   ¿t¿Ç  ¿‚¿Í  ¿7¿?  ¿-W¿-[ ¿-m¿E˘(¿E˛ ¿F¿N'¿N$ ¿NA¿a[K¿aq ¿aã¿aì¿a•¿a†¿aî¿a¢¿a™>¿aΩ ¿a‘¿a⁄¿a€¿aÌ(¿aÚ ¿b¿nˆ ¿o  ¿â$¿â ¿â;¿â@¿âE  ¿û$¿ü  ¿≤gÅ&¿≥:Ä∞/// The renderer for this widget's descendant.
///
/// This property is typically used to notify the renderer of input gestures
/// when [RenderEditable.ignorePointer] is true.¿≥|¿≥z¿≥f¿≥K¿≥W¿≥X¿≥g¿≥h¿≥x¿≥y¿≥¿…S¿…W ¿…n¿…o¿“Â"¿“  ¿Ï9Äì¿Ïf 	¿ÏÉ¿Ïë¿Ï´¿Ïí¿Ï¨¿ÏÀ¿Ïµ¿Ï≠¿Ï∑¿ÔKs¿Ôp 	¿ÔÖ¿Ôì¿Ô•¿Ôî¿Ô¶¿ÔΩ¿ÔØ¿Ôß¿Ô±¿ [ÄÉ¿ Ñ 	¿ ù¿ ´¿ ¡¿ ¨¿ ¬¿ ›¿ À¿ √¿ Õ¿ „Ä¡¿3 ¿Z¿~¿ù¿¿û¿£¿ü¿oéÛ¿î ÅO¿µ¿a¿ü¿¥¿†¿¶¿¨¿≥¿≠¿‡¿ª¿‚¿Ò¿¿˝¿Ú¿ˇ¿¿¿¿K¿6¿M¿¿i¿Å¿ó¿ò¿§¿•¿π¿¨¿ª¿…¿◊¿ ¿ÿ¿¯¿·¿Ÿ¿„¿	#¿	¿	%¿	5¿	ë¿	6¿	G¿	]¿	H¿	^¿	ê¿	_¿	e¿	y¿	∂¿	ò¿	∏¿	»¿
,¿	…¿	⁄¿	˘¿	€¿	˙¿
+¿	˚¿
¿
¿
J¿
3¿
L¿
\¿
Æ¿
]¿
n¿
Ü¿
o¿
á¿
≠¿
à¿
é¿
ö¿
Û¿
”¿
ı¿¿ô¿¿ ¿A¿!¿B¿ò¿C¿I¿]¿ë¿v¿ì¿ª¿†¿Ω¿Õ¿¿Œ¿‹¿¯¿›¿˘¿¿¿˙¿¿I¿"¿K¿[¿Ù¿\¿v¿û¿w¿ü¿Û¿†¿¶¿π¿Ì¿“¿Ô¿(¿˚¿*¿:¿Ÿ¿;¿U¿Ç¿V¿É¿ÿ¿Ñ¿ä¿û¿“¿∑¿‘¿ ¿‡¿¿¿ô¿¿-¿N¿.¿O¿ò¿P¿V¿b¿í¿w¿î¿Õ¿†¿œ¿ﬂ¿˛¿‡¿2¿¿4¿D¿c¿E¿•¿j¿ß¿∑¿e¿∏¿“¿¿”¿¿d¿¿¿*¿^¿C¿`¿ì¿l¿ï¿•¿>¿¶¿¿¿Ë¿¡¿È¿=¿Í¿¿¿7¿¿9¿{¿E¿}¿ç¿5¿é¿®¿ﬂ¿©¿‡¿4¿·¿Á¿˙¿.¿¿0¿Z¿<¿\¿l¿¿¿m¿{¿ö¿|¿õ¿ø¿§¿ú¿¶¿”¿«¿’¿„¿¿‰¿Ò¿¿˙¿Ú¿¸¿C¿#¿E¿U¿Ï¿V¿p¿ë¿q¿í¿Î¿ì¿ô¿•¿’¿∫¿◊¿Â¿›¿Á¿¿Û¿¿,¿Ê¿-¿G¿o¿H¿p¿Â¿q¿w¿ä¿∫¿ü¿º¿ ¿¬¿Ã¿ﬂ¿“¿·¿¿ ¿¿%¿<¿&¿6¿;¿7¿Z¿C¿\¿l¿á¿m¿Å¿Ü¿Ç¿ù¿é¿ü¿Ø¿¿∞¿æ¿Œ¿ø¿œ¿¿ÿ¿–¿⁄¿¿/¿¿1¿A¿\¿B(¿u®Äø¿u¿    ¿zÆH¿z∑    ¿{Öx¿{ö    ¿|ÌM¿}   ¿|Ì¿|Ó¿}>M¿}Q    ¿}‚Åó¿EÅ#/// Configuration that determines how spell check will be performed.
///
/// If possible, this configuration will contain a default for the
/// [SpellCheckService] if it is not otherwise specified.
///
/// See also:
///  * [DefaultSpellCheckService], the spell check service used by default.  ¿¿¿}Ä„¿Ä Äë/// Whether or not spell check is enabled.
///
/// Spell check is enabled when a [SpellCheckConfiguration] has been specified
/// for the widget.   ¿Å∑Äá¿Å¿    ¿ÉÇÉ¿Ö«Ç$/// Whether to create an input connection with the platform for text editing
/// or not.
///
/// Read-only input fields do not need a connection with the platform since
/// there's no need for text editing capabilities (e.g. virtual keyboard).
///
/// On the web, we always need a connection because we want some browser
/// functionalities to continue to work on read-only input fields like:
///
/// - Relevant context menu.
/// - cmd/ctrl+c shortcut to copy.
/// - cmd/ctrl+a to select all.
/// - Changing the selection using a physical keyboard.   ¿á9@¿áN   ¿á9¿á:¿á}ÄŒ¿áá    ¿àOÅ1¿àd   ¿àO¿àP¿âÑÅ¿âô   ¿âÑ¿âÖ¿äãÅ¿ä†   ¿äã¿äå¿ãõÉ©¿ã∞   ¿ãõ¿ãú¿èHÅ!¿è]   ¿èH¿èI¿êmÅ%¿êÇ   ¿êm¿ên¿ëñÅÊ¿ë´   ¿ëñ¿ëó¿ìÄÄ„¿ìï   ¿ìÄ¿ìÅ¿ïãÅ¿ï†    ¿ûú]¿û•    ¿ÀÉ‘¿ÃRÅ/// {@template flutter.widgets.EditableText.getAnchors}
/// Returns the anchor points for the default context menu.
/// {@endtemplate}
///
/// See also:
///
///  * [contextMenuButtonItems], which provides the [ContextMenuButtonItem]s
///    for the default context menu buttons.   ¿Œ„à¿“ãÉg/// Returns the [ContextMenuButtonItem]s representing the buttons in this
/// platform's default selection menu for [EditableText].
///
/// See also:
///
/// * [EditableText.getEditableButtonItems], which performs a similar role,
///   but for any editable field, not just specifically EditableText.
/// * [SelectableRegionState.contextMenuButtonItems], which performs a similar
///   role but for content that is selectable but not editable.
/// * [contextMenuAnchors], which provides the anchor points for the default
///   context menu.
/// * [AdaptiveTextSelectionToolbar], which builds the toolbar itself, and can
///   take a list of [ContextMenuButtonItem]s with
///   [AdaptiveTextSelectionToolbar.buttonItems].
/// * [AdaptiveTextSelectionToolbar.getAdaptiveButtons], which builds the
///   button Widgets for the current platform given [ContextMenuButtonItem]s.   ¿÷ËÑà¿◊    ¿¯ÓC¿˘   ¿¯Ó¿¯Ô¿=V¿H    ¿2>7¿2S    ¿2xM¿2|  ¿2É¿2ï   ¿2…0¿2“    ¿2¸.¿3    ¿<èÄ»¿<˜Z/// Whether to send the autofill information to the autofill service. True by
/// default.   ¿Ür¿Ü#    ¿ÜêÄ·¿á/|/// Whether the blinking cursor is actually visible at this precise moment
/// (it's hidden half the time, since it blinks).  ¿á¿á¿áuÅ¿àTÄ∂/// The cursor blink interval (the amount of time the cursor is in the "on"
/// state or the "off" state). A complete cursor blink period is twice this
/// value (half on, half off).  ¿à2¿à3¿àáÄç¿àÓ5/// The current status of the text selection handles.  ¿àø¿à¿¿≤W¿≤    ¿≥í<¿≥≥   ¿≥í¿≥ì¿≥“G¿≥›    ¿Ãú>¿Ã≥   ¿Ãú¿Ãù¿ÃﬁÖÑ¿Õ   ¿Ãﬁ¿Ãﬂc¿îgÄä¿îl    ¿îıÄí¿î˙    ¿ñõÑÖ¿ñŸ*/// Copy current selection to [Clipboard]. ¿ñÁ¿ñ˛  ¿ñ»¿ñ…¿õ$Ét¿õa)/// Cut current selection to [Clipboard]. ¿õn¿õÖ  ¿õP¿õQ¿û˝Å£¿ü9 /// Paste text from [Clipboard]. ¿üC¿üZ  ¿ü ¿ü!¿†§ÉÊ¿†©  ¿†¥¿†À  ¿†—¿†Ÿ   ¿§éÑ|¿§√!/// Select the entire text value. ¿§Õ¿§‰  ¿§≤¿§≥¿©Ç-¿©ÔÄ«/// Look up the current selection,
/// as in the "Look Up" edit menu button on iOS.
///
/// Currently this is only implemented for iOS.
///
/// Throws an error if the selection is empty or collapsed. ¿©ˇ¿™   ¿´?Çà¿¨YÄ˛/// Launch a web search on the current selection,
/// as in the "Search Web" edit menu button on iOS.
///
/// Currently this is only implemented for iOS.
///
/// When 'obscureText' is true or the selection is empty,
/// this function will not do anything ¿¨o¿¨Ü   ¿≠ÀÇè¿Æ˜Å/// Launch the share interface for the current selection,
/// as in the "Share..." edit menu button on iOS.
///
/// Currently this is only implemented for iOS and Android.
///
/// When 'obscureText' is true or the selection is empty,
/// this function will not do anything ¿Ø¿Ø   ¿∞^Å¿∞c  ¿∞w¿∞é   ¿±iÖh¿≤√Å9/// Finds specified [SuggestionSpan] that matches the provided index using
/// binary search.
///
/// See also:
///
///  * [SpellCheckSuggestionsToolbar], the Material style spell check
///    suggestions toolbar that uses this method to render the correct
///    suggestions in the toolbar for a misspelled word. ¿≤„¿≤Ë   ¿∂’áb¿∑πÄº/// Infers the [SpellCheckConfiguration] used to perform spell check.
///
/// If spell check is enabled, this will try to infer a value for
/// the [SpellCheckService] if left unspecified. ¿∑◊&¿∑Ò   ¿æ;ÖÜ¿ø,H/// Returns the [ContextMenuButtonItem]s for the given [ToolbarOptions]. ¿øJ¿ø[  ¿æÜ¿æá¿æë¿ø¿æó¿æ‘¿√≈áB¿ƒ>f/// Gets the line heights at the start and end of the selection for the given
/// [EditableTextState].   ¿€ãÇ¿€ú   ¿€ã¿€å¿›¨Å¿ﬁ/q/// Query the engine to initialize the list of text processing actions to show
/// in the text selection toolbar.   ¿ﬂYáe¿ﬂj   ¿ﬂY¿ﬂZ¿Ê¬ãØ¿Ê”  ¿Ê„¿ÊÒ  ¿Ê¬¿Ê√¿ÚuÑ?¿ÚÜ   ¿Úu¿Úv¿˘5åH¿˘F  ¿˘Y¿˘k  ¿˘5¿˘6¿ÅÅj¿Ü  ¿†¿≤   ¿ÔÑ1¿   ¿¿  ¿Ô¿¿$Ää¿5  ¿K¿S  ¿Z¿p  ¿$¿%¿≤Ä¯¿√  ¿—¿Í  ¿≤¿≥¿óäû¿®  ¿Ω¿’  ¿ó¿ò¿9àÄ¿>    ¿"Ωäñ¿"Ô  ¿# ¿#  ¿#¿#(  ¿"Ω¿"æ¿"ƒ¿"Ê¿"≈¿-sÅà¿.ÀÅF/// Begins a new batch edit, within which new updates made to the text editing
/// value will not be sent to the platform text input plugin.
///
/// Batch edits nest. When the outermost batch edit finishes, [endBatchEdit]
/// will attempt to send [currentTextEditingValue] to the text input plugin if
/// it detected a change.   ¿.ˇÅ÷¿0 ÄÒ/// Ends the current batch edit started by the last call to [beginBatchEdit],
/// and send [currentTextEditingValue] to the text input plugin if needed.
///
/// Throws an error in debug mode if this [EditableText] is not in a batch
/// edit.   ¿0ŸÅa¿0ﬁ    ¿5.á]¿5=  ¿5U	¿5[   ¿=∑Ü/¿=º    ¿CÍÅ¿CÔ    ¿DÛÅ¿D¯    ¿F%ÄΩ¿F*    ¿G˛É®¿H    ¿K´ÄŒ¿Kº  ¿K“¿KÂ  ¿K¿L  ¿K´¿K¨¿L}Ä˙¿Lé   ¿L}¿L~¿N≠ÄÉ¿N≤    ¿O4Äâ¿O9    ¿O¡Çâ¿Q]Åà/// Express interest in interacting with the keyboard.
///
/// If this control is already attached to the keyboard, this function will
/// request that the keyboard become visible. Otherwise, this function will
/// ask the focus system that it become focused. If successful in acquiring
/// focus, the control will then attach to the keyboard and request that the
/// keyboard become visible.   ¿RNÅ¿RS    ¿SSf¿SX    ¿SΩÉÌ¿S“    ¿WÆâd¿W‡  ¿W¯¿X  ¿X¿X)  ¿WÆ¿WØ¿Wµ¿W◊¿W∂¿båÿ¿b  ¿b;¿bJ   ¿oÇƒ¿o,   ¿o¿o¿q„É˝¿q  ¿r¿r   ¿u‰ãc¿v  ¿v)¿v;  ¿vA¿vY  ¿v`¿vf  ¿u‰¿uÂ¿uÎ¿v¿uÏ¿vw¿ÅKÉQ¿ÅP  ¿Åo¿Å~  ¿Åã¿Åö  ¿Åß¿Åø   ¿Ñ†Åv¿Ñ•    ¿âaÇÜ¿âf    ¿ãÎÉô¿ã    ¿èàÄÁ¿èç  ¿è†¿è¶  ¿è∂¿êsÄÆ¿êx    ¿ë%ÉŒ¿ë*    ¿î˜É"¿î¸    ¿òÇí¿ò,    ¿ö≥Åâ¿ö∏  ¿öÀ¿ö“   ¿úúÄ⁄¿ú°    ¿ùzÅs¿ù  ¿ù§¿ùØ   ¿üãP¿ü  ¿ü5¿ü;  ¿üB¿´ÆÇZ¿´≥    ¿∞ÅÅá¿∞Ü    ¿¥É’¿¥.  ¿¥I¿¥[  ¿¥a¿¥y  ¿¥¿¥¿∑ˆÅ?¿∏  ¿∏¿∏#  ¿∑ˆ¿∑˜¿π9ÉÜ¿∫,ÄŸ/// Shows the selection toolbar at the location of the current cursor.
///
/// Returns `false` if a toolbar couldn't be shown, such as when the toolbar
/// is already shown, or when no text selection currently exists.  ¿∫¿∫¿º√ÅA¿º‘  ¿º·¿ºÁ  ¿º√¿ºƒ¿ºÙ¿æÅ9¿æ:*/// Toggles the visibility of the toolbar. ¿æI¿æO  ¿æ\¿øEÖ∂¿øøp/// Shows toolbar with spell check suggestions of misspelled words that are
/// available for click-and-replace.   ¿ƒˇÇ~¿∆cÅN/// Shows the magnifier at the position given by `positionToShow`,
/// if there is no magnifier visible.
///
/// Updates the magnifier to the position given by `positionToShow`,
/// if there is a magnifier visible.
///
/// Does nothing if a magnifier couldn't be shown, such as when the selection
/// overlay does not currently exist. ¿∆q¿∆y   ¿«ÅÄ·¿«≤)/// Hides the magnifier if it is visible.   ¿…uÅ!¿…Ü  ¿…ú	¿…¢  ¿…u¿…v¿ öÄø¿ ´   ¿ ö¿ õ¿À]Å;¿Àn  ¿À~¿ÀÜ  ¿À]¿À^¿“fO¿“w  ¿“Ä¿“í  ¿“f¿“g¿”Ä§¿”  ¿”:	¿”?  ¿”E¿”J  ¿”¿”¿”¥Å©¿”¬  ¿””¿”Î   ¿’aÅ£¿’o  ¿’¿’ó   ¿◊ÅÍ¿◊  ¿◊(¿◊@   ¿Ÿ±Çd¿Ÿæ  ¿Ÿ÷¿Ÿ‰  ¿ŸÎ¿ŸÒ  ¿Ÿ˘¿⁄   ¿›”ÜH¿›‡  ¿›Ù¿ﬁ  ¿ﬁ	¿ﬁ  ¿ﬁ¿ﬁ%   ¿‰r{¿‰    ¿‰ÄÄ¿‰˝    ¿Âse¿ÂÄ    ¿Â€D¿ÂË    ¿Ê"B¿Ê/    ¿ÊhÄù¿Êr ¿ÊÉ¿ÊÉ¿Êï¿Ê†   ¿Á	Ö-¿Ë(Å/// Transpose the characters immediately before and after the current
/// collapsed selection.
///
/// When the cursor is at the end of the text, transposes the last two
/// characters, if they exist.
///
/// When the cursor is at the start of the text, does nothing. ¿Ë= ¿ËX   ¿Ï—Çw¿Ï÷  ¿Ï„¿Ïˆ   ¿3ÄÎ¿8  ¿R%¿r   ¿Ò"Ñ¿ÒÇV/// Handles [ScrollIntent] by scrolling the [Scrollable] inside of
/// [EditableText]. ¿Òä¿Òò   ¿ı=àH¿ı≠f/// Extend the selection down by page if the `forward` parameter is true, or
/// up by page otherwise. ¿ıƒ"¿ı·   ¿˝âÇœ¿˝é  ¿˝ü¿˝∂   ¿©Ä–¿±  ¿«¿÷   ¿~ÑÌ¿Äç/// The default behavior used if [onTapOutside] is null.
///
/// The `event` argument is the [PointerDownEvent] that caused the notification. ¿,¿>   ¿gû‘¿z  ¿Ä¿é  ¿g¿h¿5?å¿6Ä¬/// Builds [TextSpan] from current editing value.
///
/// By default makes text in composing range appear as underlined.
/// Descendants can override this method to customize appearance of text.    ¿A^ñí¿Ad  ¿AóÖ ¿Aó¿A† '¿Aß	¿AÆ  ¿A∂¿A≈  ¿A‘¿A„  ¿AÌ"¿A¸  ¿B ¿B$  ¿B;¿BA  ¿BQ¿BW  ¿Bq¿BÄ  ¿Bè¿Bû  ¿B¨¿Bª  ¿B»¿BŒ  ¿BÂ¿BÙ  ¿C¿C  ¿C#¿C2  ¿C?¿CE  ¿CR¿Ca  ¿Cm¿Cs  ¿CÇ¿Cà  ¿Cõ¿C™  ¿Cπ¿C»  ¿C÷¿CÂ  ¿C˜¿C˝  ¿D ¿D  ¿D.¿D=  ¿DM¿D\  ¿Dg#¿Dm  ¿Dê¿Dü  ¿DØ¿Dµ  ¿D∆¿DÃ  ¿D›¿DÏ  ¿D˝"¿E  ¿E%3¿E+  ¿E^1¿Ed  ¿Eï&¿Eõ  ¿E¡#¿E–  ¿EÍ¿E˘  ¿F¿F  ¿F(¿F.  ¿FB¿FQ  ¿DÖ¿EA¿EC¿ED¿ER¿ES¿Ey¿E{¿E|¿Eâ¿Eä¿E∑¿Fe¿Fj¿F≠¿Fs¿Fk¿Fu¿F¿FÄ¿Fï¿F¨¿Fñ¿F¢&¿F≥¿Fƒ  ¿F“¿FÈ  ¿FÚ¿Fˇ  ¿G$¿G  ¿G6"¿GF  ¿G\"¿Gi  ¿GÇ$¿Gú  ¿G™¿Gµ  ¿G¬¿GÕ  ¿GŸ¿G‰  ¿G¿G˚  ¿H¿H  ¿H¿H)  ¿H4¿HF  ¿HT¿Ha  ¿Hs¿HÑ  ¿Hí¿H¢  ¿HØ!¿H√  ¿H‘¿H‚  ¿HÏ¿H˘  ¿I¿I  ¿I),¿IC  ¿IY#¿In  ¿IÄ¿Iï  ¿Iü!¿I™  ¿Iƒ¿I—  ¿I‡¿IÓ  ¿I˛¿J  ¿J¿J)  ¿J9¿JD  ¿J\,¿Jt  ¿Jå*¿J£  ¿J∫%¿J≈  ¿J„1¿Jˇ  ¿K¿K%  ¿K9 ¿KJ  ¿K]¿Kj  ¿K}¿Kà   ¿KôÜ ¿K¥  ¿K«¿K’  ¿Kô¿Kö¿QùÜQ¿QÆ  ¿Q¡¿Qœ  ¿Q◊¿QÁ  ¿Qù¿Qû ¿WÚÖz¿X  ¿XÅ/ ¿X ¿X1 	¿X8¿XG  ¿XV¿Xe  ¿Xs¿XÇ  ¿Xî¿X£  ¿X≤ ¿X¡  ¿Xÿ¿XÁ  ¿XÚ¿Y  ¿Y¿Y   ¿Y0¿Y?   	¿YM¿Y]  ¿Yj!¿Y~  ¿Yè¿Y†  ¿YÆ,¿Y»  ¿Yﬁ¿YÏ  ¿Yˆ¿Z  ¿Z¿Z   ¿Z/¿Z:  ¿ZB¿ZS   ¿ZbÉ¿Zs  ¿Z{¿Zé   ¿WÚ¿WÛ¿]nÅ’¿]t  ¿]¢Ä∏ ¿]®¿]∫ ¿]¡¿]–  ¿]⁄¿]È  ¿]˜¿^  ¿^"¿^%  ¿^>¿^M   ¿^^¿^k  ¿^t¿^Ñ  ¿^ë¿^°  ¿^∞'¿^√  ¿^€¿^Ê   ¿^ÚO¿_   ¿^Ú¿^Û ¿_Eâ¿_K  ¿_£V ¿_£¿_∫  
¿_—¿_æ¿_”¿_Ï¿_Í¿_‘¿_Ì¿_Ó¿_ˆ¿_˜¿bﬂ%¿bÍ ¿c¿c¿c  ¿blo¿bÄ    ¿c,?¿cC   ¿c,¿c-¿f¢ÅW¿f∑   ¿f¢¿f£¿_˝Äõ¿`   ¿_˝¿_˛¿`úÅW¿`≠  ¿`Ω¿`—  ¿`ú¿`ù¿a˜q¿b   ¿a˜¿a¯¿coÄÿ¿cÄ  ¿cê¿cò  ¿co¿cp¿dKÇS¿d\  ¿dm	¿ds  ¿dK¿dL¿g˝M¿h  ¿h¿h$  ¿g˝¿g˛ ¿hNÉ	¿hT  ¿hÄT ¿hÜ¿hö ¿h°¿h±  ¿hª¿h    ¿hÿl¿i@Z/// The size of the span, used in place of adding a placeholder size to the [TextPainter].  ¿iIÇ¿iZ  ¿i`¿iu  ¿iÉ,¿iè  ¿iµ'¿i”  ¿iI¿iJ¿iõ¿i•¿i¶ ¿kYàç¿oÉ´/// A text boundary that uses code points as logical boundaries.
///
/// A code point represents a single character. This may be smaller than what is
/// represented by a user-perceived character, or grapheme. For example, a
/// single grapheme (in this case a Unicode extended grapheme cluster) like
/// "üë®‚Äçüë©‚Äçüë¶" consists of five code points: the man emoji, a zero
/// width joiner, the woman emoji, another zero width joiner, and the boy emoji.
/// The [String] has a length of eight because each emoji consists of two code
/// units.
///
/// Code units are the units by which Dart's String class is measured, which is
/// encoded in UTF-16.
///
/// See also:
///
///  * [String.runes], which deals with code points like this class.
///  * [String.characters], which deals with graphemes.
///  * [CharacterBoundary], which is a [TextBoundary] like this class, but whose
///    boundaries are graphemes instead of code points. ¿o-% ¿o3¿oE ¿oF
¿oL   ¿oV¿oc   ¿oæÅ ¿o√  ¿oÿ¿o›   ¿p¬ÅÉ¿p”  ¿pÏ¿pÒ  ¿p¬¿p√¿rIÅõ¿rZ  ¿rt¿ry  ¿rI¿rJ ¿t9Ü˝¿t? ¿tQ&¿tQ¿tñM ¿tñ¿tß ¿t®
¿tÆ  ¿t¥¿t∫  ¿t ¿t–   ¿tÁ¿tˇ  ¿u-¿u&  ¿u9+¿uR  ¿z”a¿zË   ¿z”¿z‘¿uiÖf¿u}  ¿uÑ¿uá  ¿uè¿uû  ¿ui¿uj ¿{8é\¿{> ¿{Y(¿{Y¿{†Ä” ¿{†¿{∫ ¿{¿
¿{∆  ¿{–¿{÷  ¿{Í¿{  ¿|)¿|  ¿|7¿|=  ¿|R¿|X  ¿|G¿|g¿|w¿|è  ¿|ò&¿|£  ¿|¬¿|Õ  ¿|Ÿ¿|‰  ¿|ı-¿}  ¿}&*¿}?  ¿}U'¿}f ¿}z¿âKG¿â`   ¿âK¿âL¿}„Åz¿}Ë  ¿}˛¿~   ¿¡Å@¿∆  ¿ﬁ¿Ï   ¿ÅàB¿Å  ¿Å ¿Å#  ¿Å+¿Å:  ¿Å¿Å ¿âñâÓ¿âú ¿â¡(¿â¡¿ä1 ¿ä¿ä, ¿ä-
¿ä3   ¿ä=¿äU  ¿ä_.¿äy  ¿äë¿ä†  ¿ì;G¿ìP   ¿ì;¿ì<¿ä≤Ç»¿ä∑    ¿ç~Öπ¿çè  ¿çñ¿çô  ¿ç°¿ç∞  ¿ç~¿ç ¿ìÜÅ¸¿ìå  ¿ìÃ ¿ìÃ¿ì‹ ¿ì›
¿ì„   ¿ìÌ¿î  ¿ï:F¿ïO   ¿ï:¿ï;¿îÅ'¿î#  ¿î*¿î?  ¿îG¿îV  ¿î¿î ¿ïÑÅÁ¿ïä  ¿ï“! ¿ï“¿ïÊ ¿ïÁ
¿ïÌ   ¿ï˜¿ñ  ¿ñ˚n¿ó   ¿ñ˚¿ñ¸¿ñÄﬁ¿ñ*  ¿ñ1¿ñJ  ¿ñR¿ña  ¿ñ¿ñ ¿ómÅ*¿óπ:/// The start and end glyph heights of some range of text. ¿óÀK ¿ó—¿óﬁ ¿óÂ¿óÙ  ¿ó˛¿ò   ¿ò<¿òQ'/// The glyph height of the first line. ¿ò[9¿òë&/// The glyph height of the last line.   ¿ó®¿ó©¿òôÅ¶¿ôsÄ”/// A [ClipboardStatusNotifier] whose [value] is hardcoded to
/// [ClipboardStatus.pasteable].
///
/// Useful to avoid showing a permission dialog on web, which happens when
/// [Clipboard.hasStrings] is called.  ¿ô≥=¿ôœ ¿ô≥¿ô¥¿ô◊¿ôÊ¿ôÁ ¿ôıH¿ö   ¿ôı¿ôˆ        áÄ›áõt/// Signature for the callback that reports when the user changes the selection
/// (including the cursor location).  áƒá”  á›áı   á˝Ä©àRL/// Signature for the callback that reports the app private command results.  à|àÑ  àãà°   à®Å_âîÄ„/// Signature for a widget builder that builds a context menu for the given
/// [EditableTextState].
///
/// See also:
///
///  * [SelectableRegionContextMenuBuilder], which performs the same role for
///    [SelectableRegion].  â»â÷  â‡#âÛ   äëUäô   äƒ   ä“   äÿ     ã©Dã∏ ã“ã⁄ãÏãÁã€ãÈåb0ål åëåïÅGçBÄô/// The default mime types to be used when allowedMimeTypes is not provided.
///
/// The default value supports inserting images of any supported format.çnç€çfçmçgçrçÅçêçüçØçæçŒ  ñ{ <ÄÜÄ§Ä•Ä∫Ä÷Ä˝Ä˛ÅQÅ{Å∫Å„ÇÇ4Ç5ÇLÇdÇàÇùÇ¥ÇÕÇıÉ
É1É_É|ÉóÉ∂ÉœÉÏÑÑ ÑDÑeÑÉÑ¢ÑºÑﬁÑ˜ÖÖ,Ö@ÖdÖÇÖ∞ÖœÖÎÖˇÜÜÜ…Ü Ü‚á ááánáìá¸á˝àJàßà®àÙââââ#âqâåâ∆âﬁäää	äVäëäÁäËã/ã~ã©ãÔãå;åbåîåïå‚åÊç/çpççéçùç≠çºçÃç€çﬁçﬂé"éâé∏éŒéœé€èèXè\èhè√è¯ê1êrêñêöêúêùê◊ëëëLëmënëéëßë∆ëﬂëÙíí1í[ísíyí}í~íäíƒí◊ì$ì*ìLìPìRìSìÄìÑì√îîaîØîºî¿ïïMïQï¢ïÔñ3ñ7ñÖñŒóólóµòòLòãò–ò‘ô!ôCôGôïôﬂôÛö?öäöÆö≤õõõ"õ0õ4õÖõ¨õˆú(ú÷ùùSùYù¶ù¥ùﬁû1û2ûåûíû÷ûˆü1ü?üëü·†2†\†e†ì†î†¬†„°4°Ç°œ¢¢¢P¢ú¢È££-£I£^£ö£º£√£«£»£‘£˝§	§N§ü§Ò•• •<•@•A•u•{•Ã¶¶x¶œß ßpßº®®®=®n®t®u®ﬁ© ©5©I©e©•©∑©ÿ™™™Z™c™j™n™o™î™ö™Í´´:´ã´Ÿ¨&¨d¨j¨ß¨Ó≠;≠b≠h≠∂≠„ÆÆGÆäÆêÆ≥ØØ$ØCØëØïØñØ∂Øº∞∞9∞?∞ê∞ﬁ±/±m±~±—±’±÷≤≤≤\≤ß≤µ≤ª≥≥Z≥´≥È¥¥;¥?¥@¥Ñ¥¬µµµµUµòµıµ˘µ˚µ¸∂*∂.∂|∂…∂›∂·∑5∑à∑î∑°∑»∑ˇ∏∏∏Q∏W∏ö∏©∏“πππ(π?πUπmπâπèπêπœ∫∫∫6∫<∫U∫h∫i∫ñ∫ú∫Ó∫Ùªªª ªOªUª©ªØª»ª‹ª›ººº0ºHºJºKºôºùºÏΩ9Ω\Ω`ΩnΩrΩ•ΩÀææælææÖæ¡ø
ø,øQøêøºøΩ¿ @¿ @6¿ @<¿ @é¿ @î¿ @™¿ @∞¿ @˝¿ A¿ A¿ A~¿ Aê¿ Añ¿ A¶¿ A¨¿ Aˆ¿ B7¿ B8¿ Bâ¿ BŸ¿ Bˇ¿ C¿ CU¿ CÄ¿ CÜ¿ C’¿ D!¿ D7¿ D=¿ Dg¿ Dm¿ DÉ¿ D—¿ D◊¿ E?¿ EQ¿ EW¿ Eg¿ Em¿ E∑¿ EÃ¿ EÛ¿ Eı¿ Eˆ¿ F8¿ FJ¿ Ft¿ Fü¿ FÁ¿ G¿ G/¿ GS¿ Gw¿ Gõ¿ Gø¿ G„¿ H¿ H+¿ HO¿ Ht¿ Hy¿ Hz¿ Hª¿ H–¿ HÊ¿ HË¿ HÈ¿ I ¿ IÉ¿ I∆¿ IÎ¿ J¿ J0¿ Jl¿ J©¿ J√¿ Jœ¿ JŸ¿ JÓ¿ K,¿ K-¿ KI¿ KJ¿ Kn¿ Ko¿ K{¿ Kö¿ Kõ¿ Kß¿ K⁄¿ K€¿ L'¿ LE¿ LF¿ LR¿ Ll¿ Lñ¿ Ló¿ LÊ¿ M0¿ MT¿ Mi¿ MÅ¿ M∑¿ N¿ N#¿ N:¿ N_¿ Nl¿ Nî¿ N≠¿ N≥¿ N¥¿ N˝¿ OK¿ Ot¿ O®¿ O‚¿ P ¿ P¿ P¿ P/¿ P5¿ P6¿ P\¿ Pç¿ Pë¿ Pì¿ Pî¿ P≤¿ P∂¿ Q¿ QN¿ Q\¿ Q`¿ Q™¿ Qı¿ R/¿ R3¿ RN¿ RR¿ R¢¿ RÛ¿ S=¿ SA¿ SÜ¿ Sä¿ S⁄¿ T%¿ T)¿ Tl¿ Tp¿ TÖ¿ Tâ¿ T‘¿ U#¿ UB¿ UF¿ Uî¿ U€¿ V&¿ Vt¿ V¡¿ W¿ WZ¿ W©¿ Wœ¿ W”¿ X
¿ X¿ X¿ Xp¿ Xå¿ Xê¿ X‹¿ Y)¿ YT¿ YX¿ Yô¿ Yù¿ YÍ¿ Z,¿ Z0¿ Zy¿ Z»¿ [¿ [¿ [¿ [m¿ [Ω¿ [·¿ [Â¿ \¿ \#¿ \o¿ \º¿ ] ¿ ]P¿ ]ó¿ ]π¿ ]Ω¿ ^¿ ^T¿ ^£¿ ^œ¿ ^”¿ _¿ _¿ `¿ `¨¿ aW¿ b2¿ c(¿ c,¿ cÉ¿ cá¿ dq¿ e[¿ f\¿ g[¿ h†¿ iü¿ j ¿ kı¿ l¡¿ l≈¿ lÚ¿ lˆ¿ m‡¿ n ¿ oà¿ p7¿ q~¿ r'¿ rÓ¿ sµ¿ tb¿ tü¿ t£¿ tπ¿ tΩ¿ u$¿ uã¿ v&¿ vÒ¿ wü¿ x¿ xº¿ x¿¿ xﬂ¿ x„¿ y2¿ y¿ y™¿ yÆ¿ y˛¿ zM¿ zõ¿ z∆¿ z ¿ {	¿ {4¿ {8¿ {á¿ {“¿ {÷¿ |¿ |j¿ |ù¿ |«¿ |⁄¿ |ﬁ¿ }¿ }L¿ }P¿ }ã¿ }è¿ }Ÿ¿ ~¿ ~:¿ ~>¿ ~Ñ¿ ~—¿ ¿ f¿ ±¿ ˘¿ ˝¿ Ä	¿ Ä+¿ ÄK¿ Äò¿ Ä†¿ Ä¶¿ ÄÆ¿ Ä≤¿ Ä≈¿ Ä…¿ Ä◊¿ Ä€¿ Å*¿ Åh¿ Åî¿ Åæ¿ Åƒ¿ Ç¿ Çb¿ Ç¢¿ Ç®¿ Ç˜¿ ÉH¿ ÉÖ¿ É–¿ É÷¿ Ñ%¿ ÑY¿ Ñj¿ Ñy¿ Ñó¿ Ñ¥¿ Ñœ¿ ÑÚ¿ Ö¿ Ö-¿ ÖS¿ Öy¿ Öú¿ Öµ¿ Ö—¿ Ö¿ Ü¿ Ü?¿ ÜW¿ Üh¿ Üy¿ Üö¿ á	¿ áE¿ áK¿ áe¿ áz¿ áë¿ á§¿ áæ¿ áŸ¿ áˆ¿ à'¿ àC¿ àY¿ àÄ¿ àô¿ àµ¿ à÷¿ à¿ â'¿ â;¿ âW¿ âm¿ âã¿ â®¿ â ¿ â·¿ ä¿ ä&¿ äO¿ äk¿ äÇ¿ äô¿ ä¡¿ äÿ¿ äˇ¿ ã8¿ ão¿ ã§¿ ã‘¿ å
¿ å0¿ åK¿ åc¿ åâ¿ åö¿ å≈¿ ç ¿ ç¿ ç*¿ çU¿ çn¿ çï¿ ç≠¿ ç∆¿ çÁ¿ é¿ é>¿ é[¿ é}¿ éƒ¿ é›¿ è¿ è|¿ èÏ¿ ê¿ ê,¿ êy¿ ê≠¿ ê∑¿ ê∆¿ ë¿ ëH¿ ëR¿ ë®¿ í¿ íï¿ í≠¿ í»¿ ì¿ ì:¿ ìd¿ ìí¿ ìΩ¿ ìÂ¿ î	¿ î!¿ î<¿ îk¿ îñ¿ îæ¿ î·¿ î¯¿ ï&¿ ïQ¿ ït¿ ïñ¿ ïæ¿ ï‚¿ ï¸¿ ñ¿ ñ8¿ ñâ¿ ñ»¿ ó3¿ ó=¿ ó^¿ ó ¿ óÒ¿ ò¿ òT¿ ò•¿ ò¥¿ ò“¿ òˇ¿ ô ¿ ô&¿ ôP¿ ôQ¿ ôà¿ ô•¿ ô¶¿ ôË¿ ö*¿ ö0¿ öW¿ ö]¿ öê¿ ö•¿ ö»¿ ö…¿ õ¿ õG¿ õM¿ õñ¿ õ‚¿ ú2¿ úE¿ úK¿ úd¿ úy¿ úì¿ úî¿ úæ¿ úÓ¿ úÔ¿ ù*¿ ùQ¿ ùR¿ ùä¿ ù±¿ ù∑¿ ùÛ¿ û>¿ ûD¿ û]¿ ûr¿ ûâ¿ ûä¿ ûÿ¿ ûﬁ¿ ü,¿ ü]¿ üc¿ ü{¿ üÅ¿ üë¿ üó¿ ü‡¿ ü¯¿ ü˘¿ †!¿ †'¿ †w¿ †∆¿ °¿ °;¿ °b¿ °c¿ °å¿ °í¿ °ﬁ¿ ¢.¿ ¢U¿ ¢[¿ ¢k¿ ¢q¿ ¢µ¿ ¢ÿ¿ ¢Ÿ¿ £¿ £1¿ £7¿ £â¿ £û¿ £§¿ £¥¿ £∫¿ §¿ §,¿ §-¿ §h¿ §ê¿ §ñ¿ §Æ¿ §√¿ §›¿ §ﬁ¿ •%¿ •N¿ •O¿ •ñ¿ •ø¿ •¿¿ ¶	¿ ¶)¿ ¶*¿ ¶]¿ ¶v¿ ¶w¿ ¶≥¿ ¶π¿ ß¿ ß0¿ ß1¿ ßk¿ ßü¿ ß•¿ ßÏ¿ ®/¿ ®s¿ ®æ¿ ©	¿ ©¿ ©[¿ ©§¿ ©¿ ©ˇ¿ ™¿ ™P¿ ™ì¿ ™ô¿ ´¿ ´V¿ ´k¿ ´q¿ ´∆¿ ¨¿ ¨X¿ ¨v¿ ¨ï¿ ¨€¿ ¨·¿ ≠¿ ≠¿ ≠:¿ ≠;¿ ≠t¿ ≠ß¿ ≠≠¿ ≠“¿ ≠Á¿ Æ¿ Æ¿ ÆB¿ Æh¿ Æn¿ Æ≥¿ Æ⁄¿ Æ‡¿ Ø.¿ Ø{¿ Ø…¿ ∞¿ ∞b¿ ∞r¿ ∞x¿ ∞∞¿ ∞≈¿ ∞Î¿ ∞Ï¿ ±.¿ ±u¿ ±è¿ ±ï¿ ±ﬂ¿ ≤¿ ≤¿ ≤G¿ ≤M¿ ≤]¿ ≤c¿ ≤µ¿ ≤ª¿ ≤–¿ ≤ˇ¿ ≥ ¿ ≥@¿ ≥x¿ ≥~¿ ≥≈¿ ¥¿ ¥¿ ¥U¿ ¥m¿ ¥n¿ ¥≠¿ ¥Û¿ µ¿ µ¿ µM¿ µS¿ µ§¿ µ√¿ µ…¿ ∂¿ ∂[¿ ∂p¿ ∂¿ ∂û¿ ∑¿ ∑E¿ ∑I¿ ∑j¿ ∑k¿ ∑¢¿ ∑¬¿ ∑√¿ ∑Ù¿ ∏¿ ∏¿ ∏N¿ ∏T¿ ∏ï¿ ∏Â¿ π>¿ πL¿ πR¿ πè¿ πï¿ π⁄¿ ∫¿ ∫¿ ∫X¿ ∫É¿ ∫â¿ ∫Œ¿ ∫Û¿ ∫Ù¿ ª,¿ ªz¿ ªÄ¿ ª–¿ º¿ º	¿ ºS¿ ºo¿ ºu¿ º√¿ Ω
¿ Ω[¿ ΩÉ¿ Ωâ¿ Ω⁄¿ æ+¿ æ|¿ æ∏¿ ææ¿ ø¿ øZ¿ øä¿ øê¿ ø‹¿ øÍ¿ ¿¿ ¿¿ ¿¿ ¿a¿ ¿±¿ ¿Ú¿ ¡ ¿ ¡&¿ ¡0¿ ¡6¿ ¡Å¿ ¡¬¿ ¡–¿ ¡Û¿ ¡˝¿ ¬¿ ¬R¿ ¬¿ ¬ç¿ ¬Ω¿ ¬«¿ ¬Õ¿ ¬›¿ ¬„¿ √(¿ √=¿ √é¿ √£¿ √∫¿ √ª¿ √Û¿ ƒC¿ ƒI¿ ƒô¿ ƒÃ¿ ƒ“¿ ≈$¿ ≈v¿ ≈|¿ ≈“¿ ≈ÿ¿ ∆)¿ ∆t¿ ∆Ü¿ ∆å¿ ∆›¿ «,¿ «L¿ «R¿ «¨¿ «˝¿ »¿ »¿ »h¿ »å¿ »ö¿ »∑¿ »¡¿ »«¿ …¿ …f¿ …¿ …ç¿ …º¿ …∆¿ …Ã¿ …‰¿ …Í¿ …˙¿   ¿  M¿  ò¿  ¥¿  …¿ À¿ À/¿ ÀF¿ ÀG¿ À~¿ À√¿ À…¿ Ã¿ ÃL¿ ÃR¿ Ãû¿ Ã¬¿ Ã»¿ Ã·¿ ÃÁ¿ Õ8¿ Õ¿ ÕÖ¿ Õ∏¿ Õ∆¿ Õ‹¿ Œ¿ Œ¿ Œ'¿ Œ<¿ ŒR¿ ŒS¿ Œå¿ ŒŸ¿ ŒË¿ ŒÓ¿ œ>¿ œé¿ œî¿ œ≠¿ œ¬¿ –¿ –-¿ –E¿ –F¿ –z¿ –Ä¿ –Œ¿ –Ì¿ –Û¿ —4¿ —Ñ¿ —œ¿ —Ó¿ —Ô¿ “0¿ “q¿ “w¿ “«¿ ”¿ ”\¿ ”©¿ ”Ï¿ ‘¿ ‘¿ ‘¿ ‘¿ ‘n¿ ‘∫¿ ‘Õ¿ ’¿ ’l¿ ’¢¿ ’‘¿ ’’¿ ÷¿ ÷I¿ ÷O¿ ÷è¿ ÷∫¿ ÷œ¿ ÷Û¿ ÷Ù¿ ◊3¿ ◊]¿ ◊^¿ ◊ó¿ ◊ÿ¿ ÿ¿ ÿ¿ ÿY¿ ÿ†¿ ÿ‰¿ Ÿ¿ Ÿ¿ ŸR¿ Ÿó¿ Ÿ¬¿ Ÿ»¿ ⁄¿ ⁄h¿ ⁄∑¿ ⁄Ω¿ ⁄”¿ €!¿ €h¿ €n¿ €Õ¿ €ﬂ¿ €Ù¿ €˙¿ ‹0¿ ‹i¿ ‹å¿ ‹€¿ ›'¿ ›r¿ ›†¿ ›¶¿ ›È¿ ﬁ.¿ ﬁv¿ ﬁ∆¿ ﬂ¿ ﬂ<¿ ﬂQ¿ ﬂW¿ ﬂg¿ ﬂm¿ ﬂ≠¿ ﬂÛ¿ ‡6¿ ‡v¿ ‡ƒ¿ ·¿ ·0¿ ·1¿ ·r¿ ·≈¿ ·‰¿ ·Í¿ ‚7¿ ‚_¿ ‚e¿ ‚¥¿ „¿ „ ¿ „&¿ „v¿ „≈¿ ‰¿ ‰D¿ ‰J¿ ‰ú¿ ‰±¿ ‰⁄¿ ‰€¿ Â¿ Âf¿ Âs¿ Ây¿ Â√¿ Ê¿ ÊW¿ Ê]¿ Ên¿ ÊΩ¿ Ê√¿ Ê—¿ Á¿ Á!¿ Á'¿ Áu¿ Áø¿ Ë¿ Ë5¿ ËJ¿ Ëu¿ Ëv¿ Ëπ¿ È ¿ È¿ ÈQ¿ Èa¿ Èg¿ È∂¿ ÈÌ¿ ÈÛ¿ Í¿ Í∑¿ Î¿ Î7¿ Î≈¿ Ï¿ ÏC¿ ÏX¿ Ïê¿ Ïë¿ Ï”¿ Ì"¿ Ì3¿ ÌH¿ Ì~¿ Ì¿ Ì«¿ Ìˆ¿ Ì˜¿ Ó3¿ ÓÇ¿ Ó®¿ ÓÆ¿ Óˇ¿ ÔN¿ Ôõ¿ ÔÈ¿ 9¿ k¿ q¿ ¬¿ Ò¿ ÒY¿ Òß¿ Ò˜¿ Ú¿ Ú¿ Új¿ Úµ¿ Û¿ ÛA¿ ÛV¿ Û\¿ Ûr¿ Ûæ¿ Ù¿ ÙK¿ ÙQ¿ Ù°¿ ÙÃ¿ Ù“¿ ı+¿ ı=¿ ıC¿ ıS¿ ıY¿ ıñ¿ ıø¿ ı¿¿ ıˇ¿ ˆ9¿ ˆ?¿ ˆç¿ ˆﬁ¿ ˜)¿ ˜z¿ ˜´¿ ˜±¿ ˜¡¿ ˜«¿ ¯¿ ¯X¿ ¯m¿ ¯†¿ ¯°¿ ¯Ì¿ ¯˚¿ ˘¿ ˘I¿ ˘O¿ ˘†¿ ˘¿ ˙?¿ ˙[¿ ˙}¿ ˙~¿ ˙«¿ ˚
¿ ˚¿ ˚X¿ ˚ß¿ ˚Ì¿ ˚Û¿ ¸B¿ ¸ì¿ ¸„¿ ˝¿ ˝¿ ˝`¿ ˝ï¿ ˝õ¿ ˝ƒ¿ ˝ ¿ ˝⁄¿ ˝‡¿ ˛(¿ ˛{¿ ˛ú¿ ˛¡¿ ˛¬¿ ˛˝¿ ˇ!¿ ˇ'¿ ˇ>¿ ˇD¿ ˇå¿ ˇŸ¿ %¿ u¿ ï¿ ™¿ ∆¿ «¿¿&¿,¿¿î¿≤¿≥¿Ô¿&¿,¿X¿m¿ã¿å¿—¿¿>¿D¿î¿∏¿Õ¿Ò¿Ú¿.¿L¿M¿ë¿¥¿µ¿ˇ¿¿D¿t¿u¿ø¿≈¿¿1¿2¿X¿^¿ë¿ó¿Ω¿‰¿Â¿"¿Ö¿ã¿Ô¿#¿ë¿	¿	¿	5¿	J¿	l¿	m¿	∑¿	˚¿
¿
¿
\¿
ö¿
Ÿ¿
ﬂ¿"¿h¿ë¿ó¿Ø¿ƒ¿Ì¿Ó¿;¿ä¿¢¿®¿¯¿¿"¿c¿ì¿î¿–¿˝¿˛¿>¿á¿ç¿»¿Œ¿Ò¿¿2¿3¿p¿∂¿º¿¿¿,¿A¿G¿í¿›¿Ù¿¿¿Z¿û¿§¿√¿…¿·¿ˆ¿¿¿U¿Å¿á¿ø¿Ë¿˝¿8¿9¿v¿»¿⁄¿‡¿/¿~¿¡¿¿@¿F¿î¿Ω¿√¿‰¿Í¿¿¿`¿î¿ö¿∏¿:¿å¿·¿7¿á¿ƒ¿ ¿Ì¿Û¿C¿î¿‡¿¿¿N¿T¿¢¿Ï¿Ú¿?¿è¿€¿)¿w¿«¿Õ¿¿h¿∂¿¿W¿h¿n¿π¿¿O¿U¿°¿º¿¬¿ ¿ ^¿ ¨¿ ˙¿!@¿!Æ¿!¥¿!…¿"¿"6¿"7¿"Ü¿"å¿"”¿#¿#?¿#@¿#v¿#|¿#ü¿#∫¿#ª¿#˝¿$¿$¿$d¿$©¿$Ø¿$˙¿%F¿%L¿%î¿%Ÿ¿&¿&¿&)¿&/¿&|¿&é¿&≠¿&Æ¿&Ê¿'1¿'7¿'Ñ¿'»¿'›¿'„¿((¿(w¿(ª¿(”¿(Ÿ¿)#¿)r¿)Ä¿)®¿)©¿)˛¿**¿*+¿*x¿*«¿*’¿*€¿+*¿+}¿+≠¿+≥¿,¿,N¿,å¿,í¿,®¿,Æ¿,˚¿-¿-¿-|¿-é¿-î¿-Ÿ¿.¿.m¿.î¿.ö¿.Á¿/7¿/U¿/j¿/∞¿/±¿/Û¿07¿0=¿0é¿0ÿ¿0ﬁ¿1,¿1?¿1E¿1ï¿1‰¿21¿2@¿2F¿2\¿2¨¿2Û¿2˘¿3]¿3o¿3u¿3ã¿3€¿3¯¿3˛¿4b¿4t¿4z¿4ä¿4‹¿5(¿5;¿5â¿5¡¿5Â¿64¿6{¿6ê¿6ñ¿6Ã¿7¿7	¿7P¿7ñ¿7ú¿7Î¿8'¿8-¿8w¿8«¿9¿9¿9e¿9z¿9¥¿9µ¿9ˇ¿:¿:4¿::¿:Ü¿:¡¿:¬¿;!¿;"¿;n¿;≠¿;≥¿<¿<¿<!¿<1¿<7¿<{¿<π¿=¿=I¿=ö¿=œ¿>¿>V¿>ü¿>›¿?¿?;¿?c¿?ç¿?ª¿?Ê¿@¿@>¿@p¿@w¿@À¿@Ã¿@˙¿AC¿Aí¿Aﬂ¿AÔ¿A¿B7¿Bî¿Bï¿BÃ¿BÁ¿C¿C&¿CS¿C`¿C|¿Cù¿Cº¿CÍ¿C˜¿D¿D5¿DU¿DÑ¿Dë¿D ¿DÎ¿E¿E:¿EG¿Eh¿Eâ¿E≠¿E‡¿EÌ¿F¿F,¿FM¿F}¿Fä¿F´¿FÃ¿F¿G#¿G0¿Gj¿Gã¿G´¿G⁄¿GÁ¿GÒ¿G˜¿G¯¿H#¿HF¿Hx¿Hú¿Hœ¿HŸ¿Hﬂ¿H‡¿H˝¿I¿I¿IK¿Iw¿I•¿I¡¿I»¿J¿JM¿JS¿JT¿Jä¿Jã¿J‹¿K/¿KÅ¿K’¿K‹¿L-¿L~¿Lµ¿L»¿LÔ¿M¿M3¿Mä¿M∆¿N#¿N`¿Nú¿NÚ¿O0¿Ok¿O≠¿OÁ¿PD¿P°¿P˛¿Q3¿Qê¿QÌ¿R)¿Re¿R¬¿S ¿S]¿Sñ¿S—¿T¿Tq¿TŒ¿U¿Uk¿U§¿U±¿U≤¿V ¿V&¿VG¿VS¿Vx¿Vù¿V¿¿VÂ¿Vˆ¿V˛¿W¿W¿W¿WD¿WJ¿WK¿Wû¿W›¿X$¿Xd¿Xõ¿X’¿Y¿YL¿YÑ¿Y∫¿Z¿ZG¿Zè¿Z÷¿[¿[S¿[í¿[À¿\¿\K¿\Ñ¿\º¿\Ò¿]6¿]g¿]õ¿]…¿]¸¿^/¿^k¿^£¿^ÿ¿_¿_<¿_q¿_ß¿_›¿`¿`F¿`Å¿`¥¿`‰¿a%¿an¿a∫¿aÒ¿b8¿b¿b∆¿c¿cS¿cô¿cﬂ¿d¿dY¿dú¿d‚¿e#¿eg¿eß¿eÌ¿f3¿fv¿fŒ¿g¿g9¿gl¿gs¿gt¿g∑¿gª¿gº¿g»¿h¿h¿h¿hT¿h¿hŸ¿i%¿iÖ¿iﬂ¿j>¿jÂ¿kå¿k˜¿l"¿l{¿l‡¿m7¿mö¿m‚¿n-¿nÖ¿n·¿oK¿o¿¿p,¿põ¿q¿q}¿r ¿r}¿rÛ¿s}¿t¿tÉ¿tÖ¿tÜ¿t¶¿uè¿u¶¿u‡¿v)¿v<¿vd¿vh¿v•¿w	¿w
¿w]¿wã¿wå¿wª¿wÙ¿xE¿xñ¿x„¿y'¿yM¿yp¿yq¿yß¿y≠¿yΩ¿z¿zI¿z~¿z¿z¨¿z˜¿z¯¿{#¿{$¿{T¿{É¿{˛¿{ˇ¿|2¿|i¿|û¿|ü¿|Ω¿|æ¿|Î¿|˜¿};¿}<¿}å¿}ç¿}∆¿}ﬂ¿}‡¿~'¿~-¿~r¿~Æ¿~¥¿~ƒ¿¿'¿z¿{¿®¿Æ¿ˇ¿Ä¿Äa¿Äb¿Ä†¿Ä¶¿ÄÌ¿Å<¿Åå¿Å¥¿Åµ¿Ç?¿Ç@¿Çó¿ÇÂ¿ÇÊ¿É/¿É|¿É}¿ÉÃ¿É⁄¿É‡¿Ñ.¿Ñ{¿ÑÅ¿ÑÃ¿Ö¿Ö¿Ö;¿Ö`¿ÖÇ¿Öº¿Ü¿Ü¿ÜO¿Üå¿Ü‹¿Ü›¿á¿á¿á6¿á7¿áC¿áz¿á{¿áñ¿à¿àH¿àL¿àM¿àY¿àq¿àµ¿â¿â¿â*¿âI¿â}¿âÅ¿âÇ¿âé¿âß¿âÎ¿ä+¿ä1¿äP¿äÑ¿äà¿äâ¿äï¿äØ¿äÛ¿ã1¿ã7¿ãS¿ãî¿ãò¿ãô¿ã•¿ã√¿å¿åá¿åç¿åé¿åπ¿å’¿å˚¿ç¿ç¿ç¿ç;¿ç\¿çr¿çë¿ç¡¿ç¯¿é¿é>¿é_¿éÇ¿é≤¿éË¿è;¿èA¿èE¿èF¿èR¿èm¿è§¿è∏¿èæ¿è›¿ê¿êf¿êj¿êk¿êw¿êï¿êÃ¿ê‡¿êÊ¿êÁ¿ë¿ë9¿ëè¿ëì¿ëî¿ë†¿ë∫¿ëﬂ¿í¿í!¿íD¿í{¿í’¿íˆ¿ì¿ì:¿ì]¿ìs¿ìy¿ì}¿ì~¿ìä¿ì¨¿ìı¿î¿î0¿î`¿îd¿îe¿îä¿îú¿îÊ¿îÓ¿îÚ¿îÛ¿ï¿ï.¿ï|¿ïÑ¿ïà¿ïâ¿ï»¿ñ¿ñ7¿ñm¿ñs¿ñî¿ñò¿ñô¿ñ∆¿ñ“¿ó¿óF¿ó}¿óã¿óë¿ó¿¿ò¿ò:¿òr¿òå¿òç¿ò¥¿ò’¿ò¯¿ô¿ô@¿ôQ¿ôv¿ôõ¿ô·¿ö¿ö%¿öP¿ö™¿öπ¿ö‰¿öÒ¿ö˘¿öˇ¿õ¿õ!¿õ"¿õN¿õZ¿õç¿õæ¿õÃ¿õ“¿ú¿úA¿úb¿úp¿úv¿úæ¿ù¿ù=¿ùá¿ù¬¿ùŸ¿û¿û¿û\¿ûq¿ûw¿ûï¿ûô¿ûö¿û≥¿ûˆ¿û˙¿û˚¿ü¿ü*¿üh¿üÄ¿üé¿üî¿üƒ¿üˇ¿†N¿†f¿†t¿†z¿†ù¿†°¿†¢¿†‡¿†¯¿°¿°¿°¿°Z¿°q¿°±¿¢¿¢^¿¢§¿¢´¿¢¨¿¢Ã¿£¿£¿£¿£M¿£ó¿£“¿£È¿§%¿§/¿§l¿§Å¿§á¿§ã¿§å¿§∞¿§º¿§Ï¿•¿•g¿•~¿•å¿•í¿•≤¿•”¿¶0¿¶9¿¶F¿¶M¿¶N¿¶Ä¿¶ß¿¶Ã¿¶Ì¿ß¿ß#¿ßF¿ßi¿ßé¿ßß¿ßØ¿ß÷¿ß˚¿® ¿®C¿®h¿®§¿®«¿®Ë¿®˘¿©¿©¿©¿©¿©1¿©d¿©j¿©ú¿©¢¿©‡¿™$¿™E¿™F¿™ú¿™ ¿™ÿ¿™ﬁ¿´¿´%¿´1¿´8¿´<¿´=¿´q¿´ß¿´≠¿´ﬂ¿´Â¿¨!¿¨J¿¨î¿¨µ¿¨”¿¨·¿¨Á¿¨Ë¿≠>¿≠Y¿≠ã¿≠ß¿≠µ¿≠æ¿≠ƒ¿≠»¿≠…¿Æ¿Æ9¿Æ?¿Æ}¿ÆÉ¿Æø¿ÆË¿Ø+¿ØL¿Øj¿Øx¿Ø~¿Ø¿Ø’¿Ø¿∞"¿∞:¿∞H¿∞Q¿∞W¿∞[¿∞\¿∞ñ¿∞∑¿∞≈¿∞À¿∞Í¿±¿±¿±G¿±\¿±b¿±f¿±g¿±¥¿±…¿±œ¿±ﬂ¿±Â¿≤-¿≤v¿≤±¿≤ˆ¿≥¿≥h¿≥∂¿≥Â¿≥¯¿≥˛¿≥ˇ¿¥T¿¥k¿¥ú¿¥≤¿¥≥¿¥Ÿ¿µ¿µ\¿µ¢¿µ£¿µÒ¿∂¿∂#¿∂U¿∂x¿∂Ä¿∂ç¿∂Ø¿∂∑¿∂Ω¿∂Œ¿∂“¿∂”¿∑¿∑!¿∑e¿∑ò¿∏¿∏T¿∏Ÿ¿πç¿π⁄¿∫'¿∫r¿∫•¿∫∑¿ª	¿ª-¿ªN¿ªu¿ª∆¿º¿º\¿º¨¿ºÂ¿ºˆ¿Ω¿ΩH¿ΩW¿Ωd¿Ωn¿ΩÉ¿Ωè¿Ω∆¿ΩÃ¿ΩÕ¿æ4¿æ8¿æ9¿æÑ¿æì¿æ–¿ø	¿ø¿øm¿øÆ¿ø‡¿øÛ¿ø˘¿¿¿¿I¿¿h¿¿Ç¿¿ª¿¿»¿¿Û¿¿˛¿¡,¿¡K¿¡e¿¡ü¿¡¨¿¡ÿ¿¡„¿¬¿¬2¿¬L¿¬Ç¿¬è¿¬º¿¬«¿¬ˇ¿√¿√8¿√n¿√{¿√¨¿√∑¿√æ¿√¬¿√√¿ƒ¿ƒ.¿ƒS¿ƒì¿ƒî¿ƒŸ¿≈#¿≈s¿≈ª¿∆
¿∆R¿∆{¿∆≠¿∆›¿«¿«_¿«{¿«Æ¿«ﬂ¿«Ë¿«Ó¿«Ô¿»4¿»ã¿»„¿…¿…;¿…C¿…ò¿…Ó¿ '¿ A¿ I¿ c¿ ≤¿ ˝¿À¿À¿À	¿ÀC¿ÀÅ¿Àñ¿Àú¿À¨¿À≤¿Ã¿Ã0¿Ãg¿Ã¶¿Ã–¿Õ¿Õ¿Õ$¿Õ%¿Õ`¿Õ†¿ÕÃ¿Œ¿Œ>¿Œ_¿Œã¿Œ≥¿Œ’¿Œ‹¿Œ‡¿Œ·¿œ-¿œi¿œo¿œ¿œÖ¿œ”¿–¿–l¿–Æ¿–˝¿—¿—d¿—ô¿—Õ¿“¿“i¿“§¿“ˆ¿”$¿”>¿”}¿”è¿”ß¿”Â¿”˜¿‘¿‘N¿‘`¿‘Ñ¿‘ø¿‘—¿‘Ô¿’0¿’B¿’f¿’≠¿’ø¿’€¿÷¿÷-¿÷Y¿÷û¿÷∞¿÷·¿÷Â¿÷Ê¿◊+¿◊z¿◊∫¿ÿ¿ÿ!¿ÿ'¿ÿ(¿ÿj¿ÿó¿ÿ¥¿ÿ“¿Ÿ%¿ŸN¿Ÿœ¿⁄(¿⁄n¿⁄¶¿⁄Ó¿€¿€ ¿€.¿€:¿€E¿€O¿€U¿€m¿€q¿€r¿€à¿€â¿€ï¿€™¿€¡¿‹¿‹C¿‹Ç¿‹π¿‹Ô¿›(¿›Ü¿›•¿›©¿›™¿›˚¿ﬁ ¿ﬁQ¿ﬁr¿ﬁ¿¿ﬁƒ¿ﬁ≈¿ﬂ¿ﬂ7¿ﬂV¿ﬂW¿ﬂc¿ﬂÑ¿ﬂß¿ﬂ®¿ﬂ‘¿‡¿‡7¿‡8¿‡â¿‡Ω¿‡Ú¿·"¿·c¿·i¿·j¿·ò¿·¥¿·Ô¿‚ ¿‚@¿‚~¿‚à¿‚∏¿‚æ¿‚ø¿„¿„=¿„l¿„ñ¿„∑¿„‘¿‰¿‰-¿‰5¿‰;¿‰<¿‰¶¿‰¥¿‰∫¿‰ª¿Â¿ÂM¿Âq¿Âó¿Â•¿Â´¿Â÷¿Â¸¿Ê5¿ÊQ¿ÊY¿Êñ¿Ê≠¿Êµ¿Êª¿Êø¿Ê¿¿ÊÃ¿Ê˝¿Á#¿ÁX¿Áü¿Á‡¿Ë¿Ë¿ËZ¿ËÉ¿Ëâ¿ËŒ¿Ëœ¿È¿Èi¿È™¿È∞¿È±¿È‰¿Í#¿Í\¿Íu¿Í{¿Í|¿ÍΩ¿Î!¿ÎY¿Î_¿Î`¿Îâ¿Î∞¿Î‚¿Ï6¿Ït¿Ï∏¿Ïÿ¿Ì¿Ì¿Ì¿ÌB¿Ìu¿Ì“¿Ì⁄¿Ì‡¿Ì·¿Ó ¿Ó9¿Óñ¿Óû¿Ó§¿Ó•¿Ó–¿Ô!¿Ô@¿Ôn¿Ôª¿Ô’¿Ôˆ¿¿G¿l¿ï¿æ¿Â¿¿¯¿˛¿ˇ¿Ò4¿Ò]¿Òc¿Òµ¿ÒÃ¿Ú	¿ÚH¿Úh¿Ún¿Úr¿Ús¿Ú¿Úí¿Úº¿ÚÔ¿Û1¿Û`¿Ûã¿Û∞¿Û“¿ÛÓ¿Ù¿Ù<¿Ùm¿Ùè¿Ù≠¿ÙÁ¿ı¿ıb¿ıá¿ı∆¿ıÂ¿ˆ¿ˆN¿ˆc¿ˆ±¿ˆµ¿ˆ∂¿ˆ€¿ˆ‹¿˜'¿˜-¿˜y¿˜Ω¿¯¿¯1¿¯7¿¯Ç¿¯µ¿¯Î¿¯Ï¿¯¯¿˘2¿˘3¿˘?¿˘s¿˘¿¿˙¿˙Y¿˙Z¿˙®¿˙…¿˙Ú¿˚ ¿˚¿˚¿˚3¿˚õ¿˚°¿˚¢¿˚Ω¿¸¿¸(¿¸c¿¸i¿¸ó¿¸ò¿¸≥¿¸ˇ¿˝9¿˝{¿˝â¿˝è¿˝ê¿˝‹¿˛¿˛(¿˛g¿˛ó¿˛∆¿ˇ¿ˇD¿ˇS¿ˇÉ¿ˇã¿ˇ¬¿ˇœ¿ˇˆ¿ E¿ ã¿ Â¿¿	¿/¿0¿k¿•¿¿_¿`¿√¿¿^¿d¿e¿ú¿Ï¿¿6¿<¿=¿å¿⁄¿'¿E¿z¿~¿¿∫¿¿-¿r¿´¿Ë¿Ï¿Ì¿˘¿(¿>¿b¿≠¿ı¿	¿&¿_¿i¿ä¿©¿ ¿Ô¿	¿	3¿	j¿	ï¿	ø¿	‡¿
¿
#¿
K¿
ñ¿
ﬂ¿¿¿!¿"¿.¿w¿´¿Ø¿∞¿º¿Ù¿\¿ß¿´¿¨¿ˆ¿¿¿e¿r¿ï¿ñ¿‡¿˛¿ˇ¿5¿S¿T¿•¿ı¿;¿î¿ï¿°¿›¿¿,¿\¿w¿°¿‹¿¿6¿@¿w¿®¿€¿,¿N¿y¿z¿°¿—¿˜¿@¿k¿ê¿⁄¿Î¿¿ô¿˜¿¿¿0¿‘¿¿e¿ê¿⁄¿=¿>¿°¿,¿å¿¥¿◊¿Ù¿,¿s¿™¿"¿,¿2¿6¿7¿]¿⁄¿¿y¿¬¿¿W¿°¿¡¿¬¿¿a¿∞¿ˇ¿C¿D¿ê¿÷¿¿`¿ì¿ ¿ Ö¿ ç¿ ≠¿ Õ¿ Ó¿!¿!¿!b¿!¬¿""¿"#¿"∞¿"∂¿"∫¿"ª¿"Ë¿#9¿#Ñ¿#∞¿#º¿#·¿$¿$:¿$Z¿$r¿$ê¿$‰¿$¿$¯¿%¿%C¿%ì¿%‘¿%˛¿&¿&3¿&X¿&Ñ¿&©¿&Ã¿&Û¿'¿'G¿'l¿'í¿'¿¿'Ë¿(¿(5¿(_¿(à¿(∂¿(¿¿(»¿(Œ¿(œ¿)¿)0¿)>¿)D¿)E¿)à¿)í¿)≤¿)”¿*¿*%¿*;¿*W¿*£¿*≠¿*≥¿*¥¿+¿+S¿+†¿+Õ¿,	¿,¿,a¿,±¿,ˇ¿-¿-&¿-J¿-P¿-T¿-U¿-p¿-q¿-¬¿.¿.¿.W¿.®¿.ƒ¿.ﬁ¿.¯¿.¸¿.˝¿/M¿/ö¿/†¿/Ì¿/˘¿0¿0+¿07¿0S¿0¢¿0©¿0“¿0÷¿0◊¿1¿1;¿1I¿1O¿1¿1π¿1«¿1Õ¿2¿27¿2;¿2<¿2v¿2ù¿2¬¿2∆¿2«¿2˙¿3+¿3,¿3y¿3»¿4¿4+¿40¿4|¿4Õ¿5¿5,¿5b¿5†¿5Î¿5Ò¿5Ú¿6%¿6H¿6e¿6f¿6¿6π¿6Â¿7¿7`¿7°¿7È¿8¿8¿8k¿8º¿8Ú¿9#¿9@¿9[¿9¶¿9Ø¿9∞¿9Ù¿:/¿:à¿:Ø¿:µ¿:∂¿;¿;¿;D¿;w¿;©¿;€¿;‚¿;„¿<+¿<à¿<å¿<ç¿<›¿<Ï¿=X¿=Y¿={¿=µ¿=’¿=˛¿>¿>¿>2¿>d¿>e¿>¥¿>˘¿?¿?¿?e¿?≤¿@¿@$¿@p¿@Œ¿A!¿AB¿Ao¿Aã¿Aü¿A»¿AÌ¿B¿B?¿Bf¿Bp¿Bñ¿B®¿Bƒ¿C¿C>¿Co¿Cw¿C¨¿Cπ¿C›¿C„¿CÁ¿CË¿D¿D0¿DU¿Dx¿Dß¿D«¿DÊ¿DÏ¿D¿DÒ¿E ¿E`¿E~¿Eõ¿E¬¿EÏ¿EÚ¿Eˆ¿E˜¿F#¿FI¿Fp¿F~¿FÑ¿F¨¿Fﬂ¿F„¿G.¿G3¿GÄ¿GÕ¿G¸¿H"¿HK¿Hå¿Hö¿H†¿H√¿H‰¿I¿I¿Iu¿Iﬁ¿J0¿JZ¿J[¿Jm¿J|¿Jé¿Jµ¿Jÿ¿Jˇ¿K&¿KK¿KS¿Kt¿K£¿Kß¿K®¿K©¿Kµ¿L¿L<¿LV¿Lp¿Lv¿Lz¿L{¿Lá¿L£¿L¬¿L˙¿M¿ML¿Mn¿Mt¿Mx¿My¿MΩ¿N	¿N¿NH¿NI¿Nñ¿N´¿N…¿N¿O-¿O1¿O2¿OR¿Oz¿O∫¿Oæ¿Oø¿O¯¿O˛¿PL¿Pö¿PË¿Q7¿QV¿Qq¿QÜ¿Q§¿Q±¿QÕ¿RA¿RG¿RK¿RL¿RÄ¿R•¿Rº¿RÁ¿Rˆ¿S¿S>¿SF¿SL¿SP¿SQ¿Sn¿Sò¿S∂¿S∫¿Sª¿SÓ¿TH¿Tê¿T∏¿T–¿TÂ¿U¿U0¿Uc¿Uí¿U∂¿UÈ¿V¿V;¿Vz¿VØ¿Væ¿V·¿W¿W¿W-¿W:¿WE¿WÇ¿Wâ¿Wä¿Wß¿W´¿W¨¿WŸ¿X1¿XÄ¿XŒ¿XÒ¿Y6¿YD¿YJ¿YK¿Yx¿Yy¿YΩ¿Z¿ZE¿ZÉ¿Z±¿Z∆¿Z◊¿[¿[*¿[W¿[É¿[Æ¿[‘¿[˛¿\¿\D¿\]¿\z¿\Ñ¿\ä¿\€¿\ˇ¿]¿],¿]S¿]ä¿]ô¿]ƒ¿]Ã¿^¿^;¿^A¿^é¿^µ¿^Ì¿^˜¿_0¿_Q¿_Ö¿_£¿_π¿_’¿`'¿`1¿`7¿`8¿`à¿`ø¿`Ó¿a	¿a¿a¿a¿aY¿a®¿aÍ¿aÎ¿b¿b¿b[¿bÇ¿bê¿bñ¿bæ¿c ¿c+¿cx¿c√¿c¿d>¿d_¿dö¿d»¿dÿ¿d‡¿d·¿e%¿e&¿et¿eÆ¿eË¿f"¿fl¿fô¿f“¿fÍ¿g¿g¿g]¿gy¿g®¿g¿¿gÕ¿h¿h1¿hg¿hÄ¿hã¿hì¿hî¿hœ¿h˘¿h˙¿i^¿i¨¿i≠¿iÃ¿j¿j1¿j[¿jj¿j«¿k¿kb¿kà¿kÆ¿k⁄¿kÎ¿l4¿l~¿là¿lê¿lë¿l¨¿l—¿l¿m¿mD¿mO¿mt¿m¨¿mŸ¿n ¿n¿n¿nQ¿nv¿nÆ¿nπ¿n¡¿nÔ¿nÛ¿nÙ¿o¿o¿o%¿oA¿oU¿oc¿oi¿oõ¿o’¿p¿pG¿p}¿p∏¿q¿qa¿qõ¿q£¿q©¿q‹¿q‡¿q·¿r¿r(¿rå¿rç¿rõ¿r√¿s¿s"¿s#¿sY¿sz¿sò¿s‡¿s·¿t¿t_¿to¿tw¿tx¿t∏¿tÂ¿u¿u:¿uX¿un¿uä¿uÕ¿u◊¿u›¿u·¿u‚¿v¿vÅ¿vØ¿vÈ¿wH¿wë¿wí¿w∫¿x¿x_¿xn¿xΩ¿y¿y\¿y¨¿yÊ¿yÚ¿z2¿zC¿z∏¿zÃ¿zÕ¿{$¿{N¿{X¿{{¿{±¿{—¿{È¿|¿|O¿|[¿|c¿|i¿|j¿|±¿|≤¿|ˇ¿}@¿}V¿}j¿}ª¿~¿~Y¿~i¿~Ö¿~°¿~÷¿¿D¿î¿ö¿∆¿Ó¿˙¿Ä'¿ÄJ¿ÄÄ¿Ä†¿Ä∏¿Ä÷¿Å¿Å"¿Å*¿Å0¿ÅD¿ÅH¿ÅI¿Å«¿ÅÏ¿Ç¿Ç,¿Çd¿Çó¿Ç≈¿Çœ¿Ç¿É¿É6¿ÉY¿Éå¿É–¿É˛¿ÑM¿Ñ}¿Ñâ¿Ñì¿Ñô¿Ñù¿Ñû¿Ñº¿Ö1¿ÖÑ¿Ü¿Ü¿Ü¿Üç¿Üé¿Ü€¿á¿á$¿ár¿ás¿á¡¿à¿à0¿àE¿àÑ¿àÖ¿àΩ¿à“¿â¿â¿â>¿â^¿â_¿â|¿âÌ¿ä¿ä¿ä¿ä;¿äI¿äO¿äk¿äö¿äÀ¿äŸ¿äﬂ¿ã¿ão¿ã|¿ãﬁ¿ã‰¿ãË¿ãÈ¿å¿å.¿åí¿åΩ¿å ¿å˘¿ç¿ç¿ç!¿ç"¿çJ¿çh¿ç∑¿çŒ¿éa¿én¿é±¿è¿è¿è{¿èÅ¿èÖ¿èÜ¿è¿¿èÔ¿ê¿ê$¿ê>¿êf¿êl¿êp¿êq¿êú¿êº¿ê÷¿ê˝¿ë¿ë¿ë"¿ë#¿ëI¿ë{¿ëœ¿í!¿íF¿íò¿í‹¿ì"¿ìc¿ìi¿ìí¿ìπ¿ìÈ¿î9¿îZ¿î°¿î¿îÙ¿îı¿ï¿ï?¿ïf¿ïñ¿ï´¿ï˘¿ñ*¿ñk¿ñâ¿ñ¬¿ñ ¿ó¿ó?¿óx¿óÄ¿óç¿ó¡¿ó˘¿óˇ¿ò¿ò¿ò¿òN¿òl¿òØ¿òË¿ô¿ôN¿ô^¿ô¿ôñ¿ô¿¿ô…¿ôı¿öI¿öê¿öñ¿ö¨¿ö∞¿ö±¿ö⁄¿õ¿õf¿õÖ¿õ¡¿õœ¿õ’¿õÍ¿ú¿ú9¿ú=¿ú>¿ú`¿úö¿úΩ¿úË¿ù+¿ùs¿ùw¿ùx¿ùª¿ù€¿ùÈ¿ùÔ¿û¿û0¿ûP¿ûÑ¿ûØ¿û„¿ûÍ¿ûÓ¿ü¿ü¿üL¿üû¿ü¨¿ü≤¿ü≥¿†¿†B¿†P¿†V¿†W¿†è¿†Ò¿°+¿°}¿°Õ¿°‘¿°’¿¢¿¢0¿¢S¿¢x¿¢ü¿£¿£¿£E¿£n¿£è¿£ñ¿£ó¿£≈¿£Â¿§1¿§m¿§{¿§Å¿§¶¿§ß¿§‡¿§˚¿•H¿•W¿•´¿•¿¶¿¶e¿¶¨¿¶˘¿ß¿ß¿ßB¿ß[¿ßò¿ßÁ¿®"¿®O¿®`¿®j¿®≥¿®‡¿©¿©:¿©ä¿©˜¿™¿™	¿™,¿™2¿™f¿™j¿™k¿™∂¿™ª¿´
¿´Y¿´Ç¿´á¿´¨¿´‘¿¨¿¨ ¿¨s¿¨π¿¨⁄¿≠¿≠k¿≠ƒ¿≠ ¿Æ¿Æ	¿Æ
¿ÆQ¿ÆV¿Æ£¿Æ¿Ø/¿Ø4¿ØÄ¿Øœ¿∞¿∞Q¿∞V¿∞¿∞£¿∞‚¿±¿±#¿±)¿±}¿±“¿≤¿≤	¿≤
¿≤d¿≤e¿≤ñ¿≤ú¿≤Î¿≥¿≥è¿≥ê¿≥ú¿≥œ¿≥–¿¥¿¥¿¥'¿¥Å¿¥≈¿µ¿µD¿µp¿µâ¿µ§¿µ€¿µ·¿µ‚¿∂2¿∂Å¿∂ ¿∂Ô¿∑¿∑5¿∑^¿∑ï¿∑ù¿∑´¿∑±¿∑≤¿∑Ô¿∑Û¿∑Ù¿∏ ¿∏.¿∏x¿∏ƒ¿∏≈¿∏¯¿π2¿π6¿π7¿πÄ¿πÜ¿π’¿∫¿∫%¿∫<¿∫ç¿∫›¿ª-¿ªx¿ªπ¿ªÈ¿ª˝¿º¿º¿º)¿º=¿ºC¿ºg¿ºÖ¿º´¿ºº¿º¿¿º¡¿ºÕ¿º˝¿Ω¿Ω?¿Ω`¿Ωü¿Ω”¿Ω˚¿æ¿æ¿æ¿æ3¿æe¿æ»¿æ…¿æˆ¿ø¿ø#¿ø8¿ø>¿øB¿øC¿øë¿ø∏¿ø‰¿¿0¿¿~¿¿´¿¿‰¿¡0¿¡K¿¡k¿¡Ü¿¡´¿¡“¿¬1¿¬|¿¬À¿¬ﬂ¿¬Â¿¬Ê¿¬Ú¿√>¿√~¿√¬¿√◊¿√ﬁ¿√ﬂ¿√ˆ¿ƒ¿ƒ@¿ƒj¿ƒù¿ƒ¥¿ƒ»¿ƒ’¿ƒ‡¿ƒÁ¿ƒ¯¿ƒ¸¿ƒ˝¿≈B¿≈j¿≈p¿≈∑¿≈ﬁ¿≈‰¿∆4¿∆\¿∆ä¿∆Ø¿∆Ω¿∆√¿∆ƒ¿∆ı¿«/¿«<¿«t¿«z¿«~¿«¿«´¿«ƒ¿«È¿«˜¿«˝¿«˛¿»/¿»Y¿»_¿»c¿»d¿»∞¿»ª¿»¿¿…¿…Q¿…r¿…s¿…¿…©¿…Ã¿…⁄¿…‡¿…·¿ ¿ ¿ %¿ &¿ 8¿ ã¿ ì¿ ó¿ ò¿ §¿ ≈¿À¿À¿À¿À¿À-¿ÀN¿ÀV¿ÀZ¿À[¿Àg¿Àï¿À÷¿À◊¿ÀÒ¿Ã3¿ÃW¿Ãá¿Ãè¿Ãï¿Ãô¿Ãö¿Ã¶¿Ã€¿Ã‹¿ÃË¿Õ¿Õu¿Õ√¿Õ‚¿Œ
¿Œ2¿Œj¿Œt¿Œú¿Œù¿Œ¿¿ŒÊ¿œ¿œ.¿œU¿œÑ¿œ≥¿œÊ¿–&¿–É¿–•¿–ƒ¿–Õ¿—¿—7¿—k¿—∂¿—˚¿“¿“X¿“_¿“c¿“d¿“p¿“∂¿“∑¿“„¿”	¿”
¿”¿”P¿”b¿”•¿”≠¿”±¿”≤¿”ˆ¿‘¿‘.¿‘r¿‘å¿‘›¿‘Í¿’¿’D¿’L¿’Z¿’^¿’_¿’¢¿’≈¿’⁄¿÷¿÷7¿÷Ü¿÷ì¿÷∂¿÷Î¿÷Û¿◊¿◊¿◊¿◊K¿◊n¿◊É¿◊«¿◊‚¿ÿ5¿ÿu¿ÿÇ¿ÿß¿ÿŸ¿ÿ·¿ÿÔ¿ÿÛ¿ÿÙ¿ŸF¿Ÿí¿ŸØ¿⁄¿⁄6¿⁄X¿⁄¨¿⁄ˇ¿€Q¿€ü¿€Ê¿‹¿‹¿‹¿‹b¿‹ò¿‹ù¿‹Í¿›9¿›á¿›—¿ﬁ4¿ﬁT¿ﬁo¿ﬁé¿ﬁ∞¿ﬁ›¿ﬂ¿ﬂ4¿ﬂ>¿ﬂé¿ﬂÀ¿‡¿‡C¿‡©¿‡ﬂ¿·¿·(¿·.¿·v¿·Æ¿·˙¿‚K¿‚í¿‚‹¿„%¿„8¿„¡¿‰¿‰¿‰¿‰o¿‰p¿‰Ó¿Âq¿ÂŸ¿Ê ¿Êe¿Êf¿Ê∞¿Á¿Á¿Á¿ÁO¿Áj¿Áp¿Áπ¿Á⁄¿Á‡¿Ë!¿Ëa¿Ëå¿Ëµ¿Ë‰¿ËÚ¿Ë¯¿Ë˘¿È¿ÈT¿Èê¿ÈÊ¿È˜¿Í¿Í#¿ÍP¿ÍV¿Íç¿Íé¿ÍÆ¿Í∆¿ÍÌ¿Î¿ÎP¿Îw¿Î£¿ÎÚ¿Î˝¿Ï¿Ï,¿Ï3¿Ï7¿ÏŒ¿Ïœ¿Ïˇ¿Ì-¿Ì|¿Ìõ¿Ìπ¿Ì¿¿Ì¯¿Ì˘¿ÓD¿Óë¿Ó‡¿Ó˚¿Ô¿Ô?¿ÔE¿ÔI¿Ô¿¿Ô¡¿¿1¿{¿ï¿‘¿·¿Ò¿Ò¿Ò¿Ò ¿Òe¿Ò{¿Ò°¿Ò‘¿Ò‚¿ÒË¿ÒÈ¿Ú)¿ÚI¿ÚÉ¿Úë¿Úó¿Úò¿ÚÈ¿Û-¿Û{¿Ûâ¿Ûè¿Ûê¿Û‰¿Ù7¿Ùc¿ÙÜ¿Ù¶¿Ù∆¿ÙÕ¿Ù˜¿ı¿ı¿ı6¿ı:¿ı;¿ıä¿ı¶¿ıÍ¿ˆ
¿ˆ¿ˆ¿ˆ¿ˆF¿ˆá¿ˆ¶¿ˆ≠¿˜¿˜D¿˜R¿˜f¿˜±¿˜Ÿ¿˜‚¿˜È¿¯)¿¯C¿¯Ñ¿¯î¿¯ú¿¯¬¿˘¿˘T¿˘™¿˘ﬂ¿˙¿˙M¿˙\¿˙ç¿˙∂¿˙ø¿˙Ã¿˙¸¿˚¿˚¿˚:¿˚y¿˚ ¿˚Ù¿¸$¿¸b¿¸q¿¸¢¿¸À¿¸‘¿¸⁄¿¸€¿˝¿˝$¿˝U¿˝{¿˝Ç¿˝Ü¿˝á¿˝ø¿˝À¿˛¿˛ß¿˛Æ¿˛∫¿ˇ¿ˇî¿ˇõ¿ˇú¿ˇÀ¿ˇÎ¿ :¿ N¿ U¿ Y¿ ‡¿ ·¿T¿¶¿ß¿ﬂ¿¿1¿D¿J¿v¿z¿{¿|¿∑¿Ω¿¿F¿è¿¨¿—¿Ù¿¿6¿Ñ¿“¿¿¿5¿_¿m¿ò¿ƒ¿¯¿%¿M¿{¿œ¿Ÿ¿˙¿¿>¿b¿h¿l¿m¿∑¿¿2¿e¿®¿˚¿¸¿	
¿	î¿
/¿
±¿
≤¿
œ¿ú¿¿˜¿‹¿ú¿¿f¿h¿A¿8¿√¿¿¿¿Ô¿È¿Í¿¸¿?¿ä¿¿¿_¿d¿e¿q¿ò¿∆¿¿¿M¿Ø¿È¿;¿ã¿í¿ì¿¥¿·¿¿&¿|¿∂¿“¿¿-¿L¿~¿¶¿‹¿/¿@¿ü¿“¿Ú¿¿¿-¿L¿^¿_¿ê¿ª¿Ë¿¿D¿s¿ø¿	¿-¿C¿r¿Õ¿)¿F¿a¿s¿t¿◊¿Ë¿ $¿ v¿  ¿!¿!T¿!—¿!‚¿"¿">¿"Z¿"á¿"∞¿"Ú¿#¿#<¿#j¿#ƒ¿#ı¿$&¿$e¿$ú¿$Ò¿%C¿%|¿%·¿&¿&6¿&K¿&û¿&‘¿'¿'+¿'g¿'°¿'ﬂ¿(¿(I¿(~¿(π¿(Ó¿)"¿)b¿)¿)´¿)⁄¿*#¿*h¿*°¿*Ã¿+¿+T¿+ó¿+–¿,¿,8¿,o¿,¶¿,€¿-¿-y¿-Ê¿.¿.\¿.ï¿.–¿/¿/|¿/ø¿0
¿0G¿0s¿0∆¿1¿1B¿1Å¿1œ¿2¿2k¿2∫¿3¿3I¿3ä¿3–¿4!¿4`¿4}¿4ò¿4±¿4»¿4›¿4¿5¿5¿5¿5(¿51¿58¿5<¿5=¿5q¿5w¿5º¿6¿6%¿6&¿6D¿6e¿6õ¿6Â¿71¿7M¿7í¿7 ¿7”¿89¿8ë¿8≤¿9¿9B¿9ë¿9õ¿9£¿9’¿9€¿:.¿:~¿:œ¿:È¿;R¿;≥¿</¿<>¿<¶¿<Æ¿<Î¿=4¿=O¿=ï¿=†¿=©¿=Ø¿=Ì¿>¿>f¿>∏¿?¿?a¿?b¿?¿¿?¡¿?ˆ¿@¿@)¿@9¿@p¿@å¿@ï¿@õ¿@ú¿@”¿@ˇ¿A¿A,¿AP¿AW¿A[¿A]¿A^¿Aï¿A£¿A≤¿A–¿AÈ¿B¿B7¿BM¿Bm¿Bã¿B®¿Bƒ¿B·¿C¿C¿C;¿CN¿Ci¿C~¿Có¿Cµ¿C“¿CÛ¿D¿D*¿DI¿Dc¿Då¿D´¿D¬¿DŸ¿D˘¿E!¿EZ¿Eë¿EΩ¿EÊ¿F
¿F$¿F>¿F^¿F∞¿F±¿F–¿F¿G¿G4¿GZ¿GÄ¿G®¿G¿¿G◊¿GÓ¿H¿H¿H2¿HR¿Hq¿Hê¿H≠¿H“¿HÍ¿I¿I'¿IW¿I~¿Iù¿I¬¿Iﬁ¿I¸¿J¿J7¿JZ¿Jä¿J∏¿J·¿K¿K7¿K[¿K{¿Kñ¿Kó¿K£¿Kﬂ¿K˙¿L¿L2¿Ld¿Lí¿L∆¿L‰¿M ¿M¿M4¿MN¿Mh¿MÄ¿Mû¿Mƒ¿M‚¿M˛¿N"¿N`¿NÇ¿Nò¿N≈¿NÛ¿O¿OA¿Og¿Oá¿O©¿OÀ¿OÌ¿P¿PQ¿PÅ¿Pø¿PÛ¿Q¿QE¿Qm¿Qè¿Qñ¿Qö¿Qõ¿Qß¿Qˆ¿R¿R!¿RC¿Rw¿Rß¿R›¿R˝¿S¿S7¿SS¿So¿Sã¿S•¿S≈¿SÌ¿T¿T+¿TQ¿Të¿Tµ¿TÕ¿T¸¿U,¿UT¿UÑ¿U¶¿U»¿UÏ¿V¿V4¿Vh¿Vö¿V⁄¿W¿W<¿Wp¿Wö¿Wæ¿WÎ¿WÔ¿WÒ¿WÚ¿W˝¿X¿X4¿XR¿Xo¿Xê¿XÆ¿X‘¿XÓ¿Y¿Y,¿YD¿YJ¿YK¿Yh¿Yç¿Y¨¿Y‹¿YÙ¿Z¿Z-¿Z@¿Z_¿Z`¿Zñ¿Z∏¿Z·¿ZÁ¿[!¿[c¿[ü¿\+¿\_¿\ù¿\€¿]¿]g¿]k¿]m¿]n¿]†¿]Ω¿]÷¿]Û¿^¿^:¿^U¿^[¿^\¿^r¿^è¿^Æ¿^Ÿ¿^Ô¿^¿^¸¿_B¿_D¿_E¿_°¿_˙¿_˚¿`¿`¿`3¿`M¿`è¿`ï¿`ô¿`ö¿`¶¿`›¿a¿a3¿au¿a{¿a|¿a¨¿aÍ¿a¿aÙ¿aı¿b¿b¿bP¿be¿bi¿bj¿b‹¿b›¿c¿c)¿c*¿c6¿cl¿cm¿cy¿c°¿c∆¿d!¿dD¿dH¿dI¿dU¿dz¿d§¿d—¿dÂ¿dÎ¿e¿e(¿e.¿eZ¿en¿et¿e¥¿eÊ¿fG¿fõ¿fü¿f†¿f¨¿f¿¿g¿g9¿gQ¿gW¿gè¿gˆ¿g˙¿g˚¿h¿h.¿hG¿hK¿hM¿hN¿h~¿hù¿h∑¿hœ¿h’¿h÷¿i3¿iF¿iG¿iS¿i¿i±¿iﬁ¿iÂ¿j¿j0¿jD¿jä¿jê¿j¨¿j€¿k¿k¿k#¿k7¿kL¿kR¿kV¿kX¿kY¿kö¿kû¿kÔ¿l:¿lÜ¿l…¿m¿mi¿mt¿mx¿m»¿mﬂ¿m„¿mÒ¿mı¿n:¿nr¿n√¿n˚¿o+¿oS¿oT¿oj¿ok¿oº¿oË¿p1¿px¿pª¿pø¿p¿¿pÃ¿p¸¿q%¿q8¿q>¿qW¿qg¿qm¿që¿q¨¿q≤¿qœ¿qÊ¿qÏ¿qÌ¿r¿r.¿rB¿rF¿rG¿rS¿rÑ¿rπ¿rÃ¿r“¿rÍ¿r˙¿s ¿s(¿sC¿sI¿sf¿s}¿sÉ¿sÑ¿s≤¿s…¿s·¿sÂ¿sÁ¿sË¿t9¿tî¿t‰¿tÂ¿u¿u7¿uf¿ug¿us¿u©¿uÂ¿v¿v¿v¿v;¿vÉ¿v«¿vÈ¿w3¿w\¿w¡¿x¿x¿x6¿xH¿xú¿x•¿x´¿x¨¿y¿y¿yE¿yf¿y ¿z¿z9¿z@¿z[¿zk¿z≈¿zÃ¿z–¿z—¿z›¿{5¿{7¿{8¿{û¿{º¿{Ã¿{Ê¿|¿|3¿|N¿|n¿|t¿|u¿|ñ¿|¿¿|◊¿|Û¿}$¿}R¿}S¿}~¿}¿}…¿}·¿~¿~B¿~Ñ¿~´¿~≤¿¿Z¿^¿_¿•¿ø¿˜¿Ä$¿Äh¿Äo¿Ä°¿Ä˛¿Å¿Å¿Å¿ÅE¿ÅÅ¿Å†¿Å°¿Ç ¿ÇW¿Çî¿Ç™¿É¿É-¿É7¿É=¿É>¿Éj¿Éπ¿É¿Ñ¿ÑO¿Ñn¿Ñè¿Ñö¿Ñ·¿Ö ¿Ö!¿ÖL¿ÖW¿Ö_¿Öe¿Öf¿Ü¿Üã¿Üˇ¿á-¿áß¿á®¿áË¿à[¿à–¿âD¿âH¿âI¿âU¿âì¿âï¿âñ¿ä¿ä:¿ä;¿ä\¿ä]¿äè¿äØ¿ä∞¿ä‰¿ã¿ã;¿ãg¿ãu¿ã{¿ãß¿ãı¿åR¿å∞¿ç¿ç2¿çU¿çq¿çw¿ç{¿ç|¿çà¿çª¿çÁ¿çË¿éG¿éó¿éª¿é…¿éœ¿é–¿è¿è%¿èA¿èG¿èH¿èç¿èÔ¿è¿êD¿ê¶¿êÚ¿ë ¿ë;¿ëù¿ë÷¿í¿í1¿í2¿íF¿íV¿í®¿íØ¿í·¿ì
¿ì.¿ì4¿ì8¿ì9¿ìE¿ìÉ¿ìÖ¿ìÜ¿ì ¿ìÍ¿ìÎ¿î¿î¿î¿îa¿î|¿îå¿î©¿îø¿ï¿ï#¿ï,¿ï3¿ï7¿ï8¿ïD¿ïÅ¿ïÉ¿ïÑ¿ï–¿ïÙ¿ïı¿ñ¿ñ¿ñ#¿ñl¿ñê¿ñ∏¿ñ≈¿ñÓ¿ñÙ¿ñ¯¿ñ˘¿ó¿ój¿ól¿óm¿ó®¿ó≥¿ó…¿ó·¿ó˙¿ò¿ò¿ò¿òB¿òX¿òY¿òÇ¿òñ¿òò¿òô¿ò◊¿ò¯¿ò¸¿ôG¿ôm¿ô±¿ôΩ¿ôÚ¿ôÛ¿ôˇ¿ö¿ö:¿ö>¿ö@    _kCursorBlinkHalfPeriod"_kObscureShowLatestCharCursorTicks!kDefaultContentInsertionMimeTypes_CompositionCallback_RenderCompositionCallbackTextEditingControllerToolbarOptionsContentInsertionConfiguration	_KeyFrame_DiscreteKeyFrameSimulationEditableTextEditableTextState	_Editable_ScribbleCacheKey_ScribbleFocusable_ScribbleFocusableState_ScribblePlaceholder_CodePointBoundary_DeleteTextAction_UpdateTextSelectionAction$_UpdateTextSelectionVerticallyAction_SelectAllAction_CopySelectionAction_GlyphHeights_WebClipboardStatusNotifier KÄ