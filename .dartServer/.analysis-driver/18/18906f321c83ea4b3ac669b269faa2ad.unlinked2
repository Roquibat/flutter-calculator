ÄƒbodyappBar	bodyScrimbottomSheetsnackBarmaterialBannerpersistentFooterbottomNavigationBarfloatingActionButtondrawer	endDrawer	statusBarchildofmaybeOfcreateState
_scaffolds_materialBanners_materialBannerController
_snackBars_snackBarController_snackBarTimer_accessibleNavigationdidChangeDependencies	_register_unregister_updateScaffolds_isRootshowSnackBar_handleSnackBarStatusChangedremoveCurrentSnackBarhideCurrentSnackBarclearSnackBarsshowMaterialBanner"_handleMaterialBannerStatusChangedremoveCurrentMaterialBannerhideCurrentMaterialBannerclearMaterialBannersbuilddispose_scaffoldMessengerStateupdateShouldNotifyfloatingActionButtonSizebottomSheetSizecontentBottom
contentTop	minInsetsminViewPaddingscaffoldSizesnackBarSizematerialBannerSizetextDirectionbeginendanimatorprogress	getOffsettoStringbottomNavigationBarTopfloatingActionButtonArea_scaleFloatingActionButtoncopyWithcontextfloatingActionButtonScalegeometryvalue_updateWithbottomWidgetsHeightappBarHeightmaterialBannerHeight==hashCode
extendBodyextendBodyBehindAppBargeometryNotifier$previousFloatingActionButtonLocation#currentFloatingActionButtonLocation)floatingActionButtonMoveAnimationProgress"floatingActionButtonMotionAnimatorisSnackBarFloatingsnackBarWidthextendBodyBehindMaterialBannerperformLayoutshouldRelayoutfabMoveAnimationfabMotionAnimatorcurrentController_previousController_previousScaleAnimation_previousRotationAnimation_currentScaleAnimation_extendedCurrentScaleAnimation_currentRotationAnimation_previousChild	initStatedidUpdateWidget_entranceTurnTween_updateAnimations%_handlePreviousAnimationStatusChanged_isExtendedFloatingActionButton_onProgressChanged_updateGeometryScalefloatingActionButtonLocationfloatingActionButtonAnimatorpersistentFooterButtonspersistentFooterAlignmentonDrawerChangedonEndDrawerChangeddrawerScrimColorbackgroundColorresizeToAvoidBottomInsetprimarydrawerDragStartBehaviordrawerEdgeDragWidthdrawerEnableOpenDragGestureendDrawerEnableOpenDragGesturerestorationId
geometryOf	hasDrawerrestoreState
_drawerKey_endDrawerKey_bodyKey	hasAppBarhasEndDrawerhasFloatingActionButton_appBarMaxHeightappBarMaxHeight_drawerOpened_endDrawerOpenedisDrawerOpenisEndDrawerOpen_drawerOpenedCallback_endDrawerOpenedCallback
openDraweropenEndDrawer_scaffoldMessenger_messengerSnackBar_updateSnackBar_messengerMaterialBanner_updateMaterialBanner_dismissedBottomSheets_currentBottomSheet_currentBottomSheetKey_persistentSheetHistoryEntry _maybeBuildPersistentBottomSheet_closeCurrentBottomSheetcloseDrawercloseEndDrawer_updatePersistentBottomSheet_buildBottomSheetshowBottomSheet#_floatingActionButtonMoveController_floatingActionButtonAnimator%_previousFloatingActionButtonLocation_floatingActionButtonLocation)_floatingActionButtonVisibilityController$_floatingActionButtonVisibilityValue_showFloatingActionButton_moveFloatingActionButton_handleStatusBarTap_geometryNotifier_resizeToAvoidBottomInset_addIfNonNull_buildEndDrawer_buildDrawer_showBodyScrim_bodyScrimColorshowBodyScrim	isEnabledinvoke_widget
_completerclosedclosesetStatestartingPointcurve	transformanimationController
enableDrag	onClosingonDismissed	onDisposebuilderisPersistent	elevationshapeclipBehaviorconstraintsanimationCurve_handleDragStart_handleDragEnd_handleStatusChangeextentChanged_isLocalHistoryEntry%_kDefaultFloatingActionButtonLocation%_kDefaultFloatingActionButtonAnimator_standardBottomSheetCurve _kBottomSheetDominatesPercentage_kMinBottomSheetScrimOpacity_kMaxBottomSheetScrimOpacity_ScaffoldSlotScaffoldMessengerScaffoldMessengerState_ScaffoldMessengerScopeScaffoldPrelayoutGeometry_TransitionSnapshotFabLocationScaffoldGeometry_ScaffoldGeometryNotifier_BodyBoxConstraints_BodyBuilder_ScaffoldLayout_FloatingActionButtonTransition$_FloatingActionButtonTransitionStateScaffoldScaffoldState_DismissDrawerActionScaffoldFeatureController_BottomSheetSuspendedCurve_StandardBottomSheet_StandardBottomSheetStatePersistentBottomSheetController_ScaffoldScopeÅÁ
lerpDoubleDragStartBehaviorFloatingActionButtonLocationendFloatFloatingActionButtonAnimatorscalingCurvestandardEasingdoubleSnackBarMaterialBannerBuildContextofshowSnackBarshowMaterialBannerdebugCheckHasScaffoldMessengerStatefulWidgetWidget	GlobalKeyMaterialAppscaffoldMessengerKey"dependOnInheritedWidgetOfExactType_scaffoldMessengerStateoverrideStateTickerProviderStateMixinLinkedHashSetQueueMaterialBannerClosedReasonAnimationControllerSnackBarClosedReasonTimerboolvoid
MediaQueryaccessibleNavigationOfcontextisActivereasontimeoutdidChangeDependenciesadd
isNotEmpty_updateSnackBar_updateMaterialBannerremovescaffoldfindAncestorStateOfTypecontainsdurationclosebehaviorSnackBarBehaviorfloatingfloatingActionButtonpersistentFooterButtonsbottomNavigationBarcreateAnimationControllervsyncaddStatusListenerisEmptyisDismissedforward_withAnimationfallbackKey	UniqueKey	CompleterfirstsetStateaddLast	exceptionFlutterErrorStringdiagnosticstoDescriptionListDiagnosticsNodeErrorSummaryErrorDescription	ErrorHintdescribeOwnershipChain	fromPartsAnimationStatus	dismissedremoveFirst	completedreverse
_completerisCompletedcompletecancelvaluehidestatusthenmountedcleardebugCheckHasMediaQuery
ModalRoutedynamic	isCurrent_widgetactionscaffoldMessengerStatechildwidgetdisposeInheritedWidgetFloatingActionButtonOffset	immutableSizezeroBottomSheetbody
EdgeInsetsbottomappBartopMediaQueryDatapaddingresizeToAvoidBottomInsetviewPadding
viewInsetsTextDirection	getOffsetbeginendprogressobjectRuntimeTypeValueNotifier
geometryOfBottomAppBarRectbottomNavigationBarToplerpcenterfloatingActionButtonAreaChangeNotifierValueListenableRenderObjectfindRenderObjectownerdebugDoingPaint_scaleFloatingActionButtonfloatingActionButtonScalecopyWithnotifyListenersBoxConstraintsObjectmaterialBannerHeightbottomWidgetsHeightappBarHeightinthashhashCodeStatelessWidgetLayoutBuilderbuilderconstraintsmaxdataMultiChildLayoutDelegateloosetightenwidthheighthasChildlayoutChildpositionChildpersistentFootermaxWidth	maxHeightmaterialBannerclampDouble	bodyScrimsnackBarbottomSheetbottomSheetSizecontentBottom
contentTopfloatingActionButtonSize	minInsetsscaffoldSizesnackBarSizematerialBannerSizetextDirectionminViewPaddingstartTop	centerTopendTopminiStartTopminiCenterTop
miniEndTopstartDocked
startFloatcenterDockedcenterFloatendContained	endDockedminiStartDockedminiStartFloatminiCenterDockedminiCenterFloatminiEndDockedminiEndFloatsizeminrtlltr	statusBardrawertight	endDrawer_updateWith)floatingActionButtonMoveAnimationProgress$previousFloatingActionButtonLocation#currentFloatingActionButtonLocation
extendBodyextendBodyBehindAppBar	Animation	initStatekFloatingActionButtonSeguecurrentControllerdidUpdateWidgetfabMotionAnimatorfabMoveAnimationkey
AnimatableTween!kFloatingActionButtonTurnIntervalchain
CurveTweencurveCurveseaseInCurvedAnimationparentanimatedrivegetScaleAnimationgetRotationAnimationAnimationMinIntervalTrainHoppingAnimationaddListener
isExtendedStack	alignment	AlignmentcenterRightchildrenFadeTransitionopacityScaleTransitionscaleRotationTransitionturnsgeometryNotifiershowBottomSheetTextCenterAppBarSafeAreaDraggableScrollableSheetshowBodyScrimTabBar
TabBarViewTabControllerDrawerBottomNavigationBarshowModalBottomSheetAlignmentDirectional	centerEndstartCircularNotchedRectanglebackgroundColorPreferredSizeWidgetSizedBoxexpandListView
TextButtonOverflowBar
openDrawercloseDrawer	NavigatorpopdrawerEnableOpenDragGestureDrawerCallbackopenEndDrawercloseEndDrawerendDrawerEnableOpenDragGestureDrawerThemeData
scrimColorColorsblack54ColorMaterial	ThemeDatascaffoldBackgroundColorLocalHistoryEntryBottomSheetThemeDataprimaryRestorationBucketRestorationScopeRestorationManagerBuilderdescribeElementregisterForUpdates	hasDrawerRestorationMixinrestorationIdregisterForRestorationDrawerControllerStateRestorableBoolcurrentStateonDrawerChangedcallonEndDrawerChanged
IconButtonopen
_snackBars_materialBannersDraggableScrollableNotificationextentinitialExtentprecisionErrorToleranceonRemoveDraggableScrollableActuatorresetaddLocalHistoryEntrygrowablesheetanimationControllerNotificationListeneronNotificationStatefulBuilderStateSettershrinkisPersistent_isLocalHistoryEntryfuturewhenCompleteWidgetBuilderShapeBorderClipblackwithOpacity
enableDrag	onClosingonDismissed	onDispose shouldDisposeAnimationController	elevationshapeclipBehaviorVoidCallbackfntransitionAnimationController
lowerBound
upperBoundTickerFutureisAnimatinggetAnimationRestartfromScrollControllerPrimaryScrollControllermaybeOf
hasClients	animateToDurationmillisecondseaseOutCircfloatingActionButtonLocationfloatingActionButtonAnimator_unregister	_registerLayoutIdremovePadding
removeLeftremoveLeftPadding	removeTopremoveTopPaddingremoveRightremoveRightPaddingremoveBottomremoveBottomPaddingremoveBottomInsetremoveViewInsetsmaintainBottomViewPaddingidDrawerControllerDrawerAlignmentdrawerCallbackdragStartBehaviordrawerDragStartBehaviordrawerScrimColoredgeDragWidthdrawerEdgeDragWidthenableOpenDragGestureisDrawerOpenModalBarrierdebugCheckHasDirectionalityThemeDirectionalityKeyedSubtreedismissiblecolor	paddingOfpreferredHeightForpreferredSizeisFiniteConstrainedBoxFlexibleSpaceBarcreateSettingscurrentExtentbottomCentersnackBarThemefixedMaterialBannerThemeDataMaterialBannerTheme	Container
decorationBoxDecorationborderBorderDividercreateBorderSideIntrinsicHeightpersistentFooterAlignmentallspacingoverflowAlignmentOverflowBarAlignmentplatformTargetPlatformiOSmacOSGestureDetectorHitTestBehavioropaqueonTapexcludeFromSemanticsandroidfuchsialinuxwindowsviewInsetsOfviewPaddingOfScrollNotificationObserverAnimatedBuilder	animationActionsactionsTypeActionIntentDismissIntentCustomMultiChildLayoutdelegate"floatingActionButtonMotionAnimatorisSnackBarFloatingextendBodyBehindMaterialBannersnackBarWidthDismissActionisEndDrawerOpenFutureeaseOutParametricCurveeaseOutCubic	transformdescribeIdentityDragStartDetailslinearDragEndDetails$_floatingActionButtonVisibilityValue	minExtentshouldCloseOnMinExtentAligntopStartheightFactor	Semantics	container	onDismissonDragStart	onDragEndStatefulWidgetStateTickerProviderStateMixinInheritedWidgetFloatingActionButtonLocationChangeNotifierValueListenableBoxConstraintsStatelessWidgetMultiChildLayoutDelegateRestorationMixinDismissActionParametricCurveScaffoldFeatureControllerkhË#Lp‚*Zeßß›ª≥    Ä¶  
dart:async  Äª  dart:collection  Ä’  ÄÁmathÄÍ	dart:mathÅÅ
lerpDouble ÄÒ  dart:ui  Å  package:flutter/foundation.dartÅdÅzDragStartBehavior Å>  package:flutter/gestures.dart  Å}  package:flutter/widgets.dart  Å•  app_bar.dart  Åº  banner.dart  Å“  banner_theme.dart  ÅÓ  bottom_sheet.dart  Ç
  colors.dart  Ç   curves.dart  Ç6  
debug.dart  ÇK  divider.dart  Çb  drawer.dart  Çx  flexible_space_bar.dart  Çö  floating_action_button.dart  Ç¿  $floating_action_button_location.dart  ÇÔ  material.dart  É  snack_bar.dart  É   snack_bar_theme.dart  É?  
theme.dart    	dart:core¿ Î∞ ¿˘≥åÍ <ÄÜÄ§Ä•Ä∫Ä‘ÄÅÅÅ=Å|Å£Å§ÅªÅ—ÅÌÇ	ÇÇ5ÇJÇaÇwÇôÇøÇÓÉÉÉ>ÉSÉTÉlÉëÉ∑É”ÉÈÑÑÑÉÑÙÑıÖ-ÖyÖùÖ“ÜÜ4Ü5ÜJÜRÜ\ÜiÜxÜÑÜñÜ™Ü¡ÜŸÜ„ÜÜ˝Üˇá áJáNáëáïáÂàààhà≤à„ââ"âjâªääYä|äÄäîä„äÁã:ãJãNãëãïã£ãßãıåFåòåÏç:çeçøçé<éXégéÄéÜéáé∑éΩéÓèèèUèdèjèÄèÃêêêkê}êÉê÷ë(ëtëæëÛë˘íí_í¨íÛì>ìäìØìµîîî%îqî´î±î¡î«ïïVï¶ï”ññCñDñ∂ñ‡ñ‰ñÂó5óLóRó•ó´óªó¡ò
òYòöòõôô8ô<ô=ôIôçôèôêôµôπö öQöúöÁöıö˘õ,õäõ‹úîú∆ù`ùåù•ùƒù≈ù—ùÚûDûîûﬁü.üTü}üûü¿üË†)†/†a†Ñ†à†â†¥†“†”†°°7°?°@°i°ì°õ°°°•°¶°”¢	¢<¢Q¢U¢V¢r¢©¢»¢Ï£££$£(£)£y£¡£Í§G§Ç§Ü§á§ô§ö§È•6•}•¢•®•˜¶D¶ì¶°¶ß¶¯¶˛ßOßèßﬁ®®®\®|®Ç®ò®È®Ô©Y©k©q©•©´©˝™M™õ™Ì´=´ì´µ´ª´—¨"¨(¨í¨§¨™¨¿≠+≠1≠õ≠≠≠≥ÆÆÆ:ÆâÆ∂ÆΩØ	ØBØ`ØêØ∂Øº∞∞Y∞®∞¯±±e±é±õ±Õ±Ó±˘≤R≤Y≤c≤w≤ü≤©≤√≤›≤≥≥g≥π¥¥Z¥z¥…µµVµgµÄµ‘∂*∂o∂∆∑∑[∑l∑ö∑È∑˙∏	∏@∏L∏V∏k∏w∏Ü∏å∏ç∏§∏®∏©∏Á∏˝π#πJπ`πÑπêπ¨π—π˚∫∫+∫A∫k∫º∫»∫‰ªªª;ªJªPªTªUªüª≤ª∏º	ºWºµº”º·ºÁΩ:Ω\Ω~ΩÑΩ¢ΩΩΩ˜ææ!æ"æmæsæπøømø{øÅø‘øˆ¿ @¿ @@¿ @M¿ @å¿ @•¿ @À¿ @Ò¿ @˚¿ A¿ A¿ A)¿ AD¿ AH¿ AI¿ Aí¿ A”¿ AÌ¿ BG¿ BU¿ B[¿ B√¿ B€¿ C ¿ C¿ C¿ C ¿ C9¿ C:¿ Cè¿ C‚¿ D/¿ DT¿ DZ¿ DØ¿ E¿ E]¿ Ek¿ Eq¿ EŒ¿ F¿ Fc¿ Fò¿ Fû¿ FÁ¿ G¿ G¿ G#¿ Gz¿ GÄ¿ G¿ H¿ H~¿ Hä¿ Hß¿ H¸¿ I)¿ I0¿ Ià¿ I«¿ IÎ¿ J!¿ JM¿ JS¿ JÆ¿ K¿ K^¿ KÆ¿ KÕ¿ L'¿ LV¿ Le¿ Lõ¿ L¿¿ L…¿ M(¿ M/¿ MA¿ Mm¿ Mu¿ Mç¿ M§¿ M®¿ M©¿ MÌ¿ N¿ N)¿ NV¿ Nl¿ Nñ¿ N¢¿ Næ¿ NÈ¿ O¿ O#¿ OI¿ Oe¿ Oâ¿ Oò¿ Oº¿ OÀ¿ O—¿ O’¿ O÷¿ P&¿ P9¿ P?¿ Pñ¿ PÍ¿ QZ¿ Q~¿ Qå¿ Qí¿ QÒ¿ R¿ R5¿ R;¿ R<¿ Rv¿ R¢¿ R¶¿ Rß¿ R¯¿ R˛¿ SD¿ S∞¿ T¿ T$¿ T*¿ Tâ¿ T´¿ TŸ¿ T˚¿ U¿ UM¿ Uf¿ Uå¿ U≤¿ Uº¿ U∆¿ UÃ¿ U–¿ U—¿ V"¿ Vk¿ Vã¿ VÒ¿ Vˇ¿ W¿ WÖ¿ W£¿ W‘¿ Wı¿ W˘¿ W˙¿ X¿ X-¿ X[¿ X£¿ X§¿ X≈¿ Y¿ Y4¿ Y~¿ Yº¿ Yı¿ Z	¿ ZQ¿ Zõ¿ Z™¿ ZÔ¿ [H¿ [^¿ [l¿ [≥¿ [¡¿ [À¿ [”¿ [Ÿ¿ [⁄¿ [˛¿ \"¿ \=¿ \D¿ \H¿ \I¿ \U¿ \h¿ \í¿ \∂¿ \‘¿ \Ô¿ ]¿ ]¿ ]
¿ ]¿ ]C¿ ]e¿ ]¿ ]ª¿ ]Ù¿ ]ı¿ ^-¿ ^.¿ ^:¿ ^¨¿ ^Æ¿ ^Ø¿ ^¸¿ _#¿ _'¿ _a¿ _©¿ _Â¿ _È¿ `)¿ `^¿ `i¿ `ã¿ `‹¿ a$¿ aH¿ ak¿ aå¿ a™¿ a÷¿ aÛ¿ b¿ b5¿ bU¿ b{¿ bú¿ b¢¿ b£¿ bÿ¿ bﬁ¿ c*¿ cQ¿ cR¿ cÜ¿ cå¿ cŒ¿ cÓ¿ d¿ d¿ dU¿ dl¿ dr¿ d∑¿ e¿ eO¿ ef¿ el¿ eº¿ f	¿ fY¿ fs¿ fë¿ fí¿ fŸ¿ f¿ fˆ¿ g;¿ gÇ¿ g∞¿ g∂¿ h¿ hS¿ h£¿ h∑¿ h“¿ h”¿ i¿ i4¿ i:¿ iÑ¿ iß¿ i˚¿ j(¿ j.¿ jl¿ j¢¿ j¿¿ j¡¿ k¿ k'¿ k-¿ k|¿ k ¿ l¿ lf¿ lâ¿ l¨¿ l≠¿ l◊¿ l›¿ m,¿ mx¿ m≠¿ m≥¿ n ¿ nN¿ nû¿ n«¿ nÕ¿ o¿ o?¿ oZ¿ o[¿ oå¿ oí¿ o·¿ o¸¿ o˝¿ p4¿ p:¿ pè¿ p∞¿ p±¿ pÔ¿ q¿ q¿ q¿ qc¿ qg¿ q∞¿ r¿ r¿ rh¿ ri¿ r≈¿ r∆¿ rÚ¿ s¿ sK¿ sd¿ se¿ sq¿ s≤¿ s—¿ t¿ t-¿ tG¿ tN¿ tR¿ tS¿ t_¿ tu¿ tÔ¿ tÛ¿ tı¿ tˆ¿ uC¿ uG¿ uâ¿ u∏¿ uº¿ v¿ v[¿ v_¿ v´¿ vÌ¿ w	¿ w¿ w[¿ w†¿ w´¿ wƒ¿ x¿ x#¿ xD¿ xg¿ xm¿ xn¿ x∑¿ y¿ y
¿ y@¿ yh¿ yi¿ y©¿ yØ¿ yÛ¿ z¿ z¿ z`¿ z~¿ zë¿ zó¿ zò¿ z∂¿ z’¿ {¿ {¿ {¿ {¿ {F¿ {z¿ {ö¿ {≠¿ {µ¿ {Ú¿ {ˆ¿ {˜¿ |O¿ |e¿ |É¿ |ß¿ |À¿ |“¿ |Ô¿ }D¿ }ü¿ }¶¿ }™¿ }¨¿ }≠¿ ~¿ ~M¿ ~N¿ ~l¿ ~ë¿ ~Æ¿ ~Ø¿ ~ª¿ ~⁄¿ ~Í¿ /¿ y¿ ï¿ È¿ Ä?¿ Äû¿ Ä©¿ Ä±¿ Äƒ¿ ÄŒ¿ Å¿ Å¿ Å¿ Å4¿ ÅX¿ Å|¿ Å£¿ Å™¿ Ç¿ Ç.¿ Çd¿ Çû¿ Ç•¿ Çº¿ Ç¿¿ Ç¬¿ Ç√¿ É¿ Éa¿ Éd¿ ÉØ¿ Ñ¿ ÑQ¿ Ñü¿ ÑÓ¿ Ö¿ ÖC¿ Öa¿ Öu¿ Öä¿ Ö±¿ Ö—¿ Ö˘¿ Ü"¿ ÜD¿ Ün¿ Üo¿ Üì¿ Ü∞¿ Ü’¿ Ü÷¿ á'¿ áx¿ áÀ¿ à¿ à ¿ àC¿ à]¿ àq¿ àw¿ àü¿ à›¿ â¿ âH¿ âL¿ âM¿ âY¿ â≈¿ â«¿ â»¿ ä¿ äl¿ äà¿ äã¿ ä‡¿ ã/¿ ã\¿ ãs¿ ãë¿ ãª¿ ã”¿ ãŸ¿ ã⁄¿ ãÔ¿ å¿ å-¿ å.¿ å:¿ åa¿ åì¿ å¶¿ å¨¿ å≠¿ å«¿ ç¿ çc¿ ç¢¿ ç£¿ çÃ¿ é¿ éB¿ éC¿ éu¿ éü¿ éÚ¿ è¿ è¿ è/¿ èQ¿ èÄ¿ èò¿ è∂¿ è≈¿ è“¿ èÈ¿ èÙ¿ è˝¿ ê¿ ê¿ ê
¿ ê¿ êD¿ êX¿ êu¿ êó¿ ê∏¿ ê‹¿ ê˛¿ ë6¿ ëm¿ ë™¿ ë‡¿ í¿ í'¿ íE¿ ío¿ í°¿ íß¿ í®¿ í¡¿ íÊ¿ ì¿ ì'¿ ìL¿ ìÄ¿ ìÅ¿ ìÃ¿ î¿ îP¿ îô¿ îö¿ îª¿ î⁄¿ î€¿ ï¿ ï	¿ ï¿ ï7¿ ï¿ ïÄ¿ ïŒ¿ ñ¿ ñm¿ ñ©¿ ñ™¿ ó¿ ó.¿ óK¿ óq¿ óê¿ óë¿ óª¿ ò¿ òP¿ òà¿ òé¿ òè¿ ò≥¿ òÍ¿ ôf¿ ôû¿ ôÍ¿ öG¿ öM¿ öN¿ öÇ¿ ö¡¿ öÚ¿ õ?¿ õH¿ õª¿ õ¿ ú_¿ úe¿ úf¿ úè¿ ú¡¿ ù¿ ùk¿ ùl¿ ùü¿ ùÃ¿ ù˝¿ û¿ û¿ û¿ ûZ¿ ûû¿ û¿¿ ü*¿ ü+¿ üS¿ üõ¿ üú¿ ü¥¿ ü‚¿ †D¿ †ù¿ †•¿ †¶¿ †Ë¿ °¿ °;¿ °t¿ °π¿ °›¿ °Ê¿ ¢¿ ¢`¿ ¢f¿ ¢g¿ ¢π¿ £¿ £O¿ £ô¿ £†¿ £ı¿ §8¿ §Ü¿ §”¿ •#¿ •J¿ •K¿ •q¿ •î¿ •¡¿ ¶
¿ ¶;¿ ¶]¿ ¶f¿ ¶Ø¿ ¶Í¿ ¶¿ ¶Ò¿ ß7¿ ßc¿ ß¶¿ ßˆ¿ ß¸¿ ß˝¿ ®,¿ ®p¿ ®°¿ ®ﬂ¿ ®Ë¿ ©@¿ ©Ã¿ ©“¿ ©”¿ ©˚¿ ™3¿ ™ë¿ ™í¿ ™‡¿ ´¿ ´W¿ ´Å¿ ´ß¿ ´Ò¿ ¨T¿ ¨v¿ ¨°¿ ¨ø¿ ¨€¿ ¨ˇ¿ ≠/¿ ≠U¿ ≠}¿ ≠Ü¿ ≠Ï¿ ÆT¿ Æ°¿ Æ√¿ Æ‚¿ Ø¿ Ø(¿ Øl¿ Ø¢¿ Ø®¿ Ø©¿ Ø’¿ ∞-¿ ∞T¿ ∞x¿ ∞ö¿ ∞ﬁ¿ ∞È¿ ∞Ò¿ ∞Ú¿ ±¿ ±i¿ ±ó¿ ±…¿ ±¯¿ ≤-¿ ≤c¿ ≤†¿ ≤—¿ ≥¿ ≥9¿ ≥m¿ ≥¢¿ ≥‘¿ ¥¿ ¥=¿ ¥t¿ ¥≠¿ ¥Â¿ µ¿ µY¿ µâ¿ µí¿ µ¿ ∂¿ ∂~¿ ∂è¿ ∂Õ¿ ∂◊¿ ∂Ê¿ ∑*¿ ∑z¿ ∑À¿ ∏¿ ∏,¿ ∏x¿ ∏©¿ ∏ﬁ¿ ∏˘¿ π¿ π¿ π¿ π:¿ πe¿ πß¿ πÈ¿ πÙ¿ π¸¿ ∫e¿ ∫f¿ ∫w¿ ∫∏¿ ∫√¿ ª(¿ ªä¿ ªı¿ º¿ ºp¿ ºí¿ ºŒ¿ Ω¿ Ω5¿ Ωî¿ ΩÎ¿ æB¿ æî¿ æ•¿ ææ¿ ø/¿ ø@¿ øP¿ ø\¿ øf¿ ø{¿ øá¿ øç¿ øé¿ øª¿ ¿¿ ¿W¿ ¿]¿ ¿^¿ ¿à¿ ¿Õ¿ ¡¿ ¡¿ ¡¿ ¡9¿ ¡Å¿ ¡º¿ ¡¬¿ ¡√¿ ¡Â¿ ¬¿ ¬U¿ ¬\¿ ¬`¿ ¬a¿ ¬m¿ ¬¢¿ ¬–¿ √¿ √:¿ √¶¿ ƒ¿ ƒh¿ ƒñ¿ ƒ›¿ ƒ·¿ ƒ„¿ ƒ‰¿ ≈1¿ ≈5¿ ≈~¿ ≈Ç¿ ≈Ω¿ ∆¿ ∆A¿ ∆{¿ ∆∫¿ ∆‰¿ ∆˝¿ «!¿ «F¿ «j¿ «è¿ «ï¿ «ñ¿ «≠¿ «Ÿ¿ »¿ »E¿ »F¿ »Å¿ »∞¿ »±¿ »Ω¿ …¿ …¿ … ¿ …ö¿ …Ù¿  )¿  Y¿  ã¿  ¿¿ À9¿ Àj¿ À£¿ À◊¿ ÀÒ¿ ÀÚ¿ À˛¿ Ã¿ Ã*¿ Ã+¿ ÃZ¿ ÃÜ¿ Ãô¿ Ã⁄¿ ÃÛ¿ ÃÙ¿ Õ¿ Õg¿ ÕÅ¿ Õ≠¿ Õ∫¿ Œ¿ ŒT¿ Œu¿ Œ{¿ Œ¿ ŒÄ¿ Œå¿ Œü¿ Œ¬¿ Œ◊¿ Œ€¿ Œ‹¿ ŒË¿ œ,¿ œR¿ œŒ¿ –¿ –6¿ –<¿ –u¿ –´¿ —¿ —¿ —¿ —[¿ —ù¿ —Ÿ¿ “(¿ “c¿ “Ç¿ “¶¿ “‘¿ “ﬁ¿ “Ì¿ ”<¿ ”ä¿ ”’¿ ”ˇ¿ ‘¿ ‘<¿ ‘S¿ ‘Å¿ ‘â¿ ‘è¿ ‘ì¿ ‘î¿ ‘⁄¿ ’¿ ’¿ ’I¿ ’J¿ ’g¿ ’ò¿ ’‡¿ ÷¿ ÷¿ ÷&¿ ÷è¿ ÷¶¿ ÷À¿ ÷È¿ ÷Ú¿ ÷˘¿ ÷˙¿ ◊E¿ ◊m¿ ◊â¿ ◊ê¿ ÿ¿ ÿ¿ ÿ:¿ ÿ∏¿ Ÿ<¿ Ÿ=¿ Ÿ^¿ Ÿ¬¿ ⁄(¿ ⁄ò¿ ⁄ô¿ €¿ €w¿ €x¿ €¥¿ €Ò¿ €ı¿ €ˆ¿ ‹=¿ ‹O¿ ‹ò¿ ‹Ê¿ ›¿ ›¿ ›"¿ ›&¿ ›'¿ ›`¿ ›ä¿ ›®¿ ›¨¿ ›≠¿ ›π¿ ›‡¿ ›Ú¿ ﬁ¿ ﬁ4¿ ﬁy¿ ﬁ∏¿ ﬁ‘¿ ﬂ¿ ﬂ)¿ ﬂ7¿ ﬂF¿ ﬂc¿ ﬂë¿ ﬂ∫¿ ﬂÌ¿ ‡¿ ‡%¿ ‡4¿ ‡o¿ ‡ä¿ ‡Ω¿ ‡‡¿ ·¿ ·2¿ ·A¿ ·M¿ ·Z¿ ·u¿ ·†¿ ·«¿ ·˜¿ ‚¿ ‚)¿ ‚6¿ ‚?¿ ‚F¿ ‚J¿ ‚K¿ ‚i¿ ‚ ¿ ‚Œ¿ ‚œ¿ ‚˚¿ „$¿ „L¿ „S¿ „W¿ „Y¿ „Z¿ „ú¿ „†¿ „‰¿ „Ë¿ ‰¿ ‰n¿ ‰ú¿ ‰†¿ ‰¥¿ Â¿ ÂN¿ Âñ¿ Âæ¿ Â¬¿ Ê¿ Ê¿ Ê¿ Ê3¿ ÊÅ¿ Ê–¿ Á¿ ÁY¿ Á]¿ Á¬¿ Á∆¿ Ë¿ Ë¿ Ë#¿ Ë7¿ ËÑ¿ Ë’¿ È!¿ ÈY¿ È®¿ Èﬂ¿ È„¿ ÍF¿ ÍJ¿ Íì¿ Í£¿ Íß¿ Í„¿ ÍÁ¿ Î.¿ Îu¿ Îº¿ Ï¿ ÏG¿ Ï|¿ Ï¿¿ Ì¿ Ì¿ Ì¿ ÌU¿ Ìõ¿ Ì€¿ Ó¿ ÓT¿ Óï¿ ÓØ¿ Ó≥¿ Ó˙¿ Ó˛¿ Ô=¿ Ôå¿ Ô‡¿ Ô‰¿ 3¿ õ¿ ‡¿ ‰¿ ÒL¿ Ò°¿ Ò•¿ Òº¿ Ò¿¿ ÒŸ¿ Ò›¿ Ú¿ ÚQ¿ Úè¿ ÚΩ¿ Ú¡¿ Û¿ ÛE¿ Ûì¿ Û›¿ Ù"¿ Ù-¿ Ù1¿ ÙE¿ Ùñ¿ Ù‡¿ Ù‰¿ Ù¿ ı=¿ ıi¿ ı¿ ı√¿ ı˘¿ ˆ¿ ˆ¿ ˆ¿ ˆ¿ ˆ,¿ ˆ0¿ ˆt¿ ˆ≥¿ ˆÍ¿ ˆÓ¿ ˆ¸¿ ˜ ¿ ˜P¿ ˜t¿ ˜√¿ ˜˛¿ ¯O¿ ¯†¿ ¯Ó¿ ˘6¿ ˘G¿ ˘ñ¿ ˘ﬂ¿ ˘¿ ˙A¿ ˙ê¿ ˙·¿ ˚¿ ˚o¿ ˚¨¿ ˚Ù¿ ¸C¿ ¸x¿ ¸Ã¿ ˝¿ ˝[¿ ˝∏¿ ˝‡¿ ˛¿ ˛0¿ ˛?¿ ˛P¿ ˛_¿ ˛~¿ ˛•¿ ˛Ã¿ ˛Ó¿ ˇ3¿ ˇD¿ ˇ^¿ ˇr¿ ˇè¿ ˇ≠¿ ˇ√¿ ˇ›¿  ¿ ¿ U¿ r¿ õ¿ ∂¿ ‘¿¿1¿I¿O¿P¿ñ¿·¿)¿Q¿W¿§¿Ú¿¯¿?¿Ö¿—¿¿`¿f¿v¿|¿ƒ¿È¿¿¿Q¿ù¿À¿—¿¿0¿6¿_¿e¿u¿{¿≈¿ﬂ¿¿¿=¿b¿c¿é¿î¿ÿ¿¿e¿≤¿Â¿Î¿	9¿	ä¿	Ÿ¿
 ¿
I¿
O¿
ù¿
Ì¿:¿o¿Ö¿Ü¿“¿ÿ¿¿(¿)¿w¿}¿Ë¿,¿-¿à¿é¿¯¿<¿=¿Ü¿å¿÷¿¿$¿]¿c¿û¿–¿ˇ¿ ¿O¿U¿â¿¡¿¬¿¿X¿Ç¿à¿§¿™¿Ò¿˜¿J¿y¿¿ï¿œ¿¿a¿k¿q¿√¿’¿Ì¿Ó¿E¿n¿o¿π¿˛¿(¿.¿J¿P¿ö¿†¿ˆ¿%¿+¿A¿q¿µ¿¿¿¿o¿Å¿ú¿ù¿˜¿#¿$¿¿Ö¿œ¿	¿*¿+¿x¿~¿¿¿‡¿·¿)¿/¿}¿û¿§¿Ù¿
¿/¿0¿^¿d¿≥¿¿7¿=¿ç¿ﬁ¿*¿Q¿W¿ü¿Ï¿¿ ¿m¿∂¿À¿—¿¿h¿¥¿‘¿⁄¿Í¿¿ >¿ u¿ ª¿!¿!I¿!f¿!g¿!∞¿!ˇ¿"K¿"Q¿"ô¿"Í¿#6¿#<¿#T¿#|¿#}¿#∆¿#Ã¿$¿$b¿$h¿$¨¿$Õ¿$„¿$‰¿%'¿%Z¿%[¿%•¿%≥¿%π¿%ˇ¿&I¿&ó¿&·¿'¿'>¿'c¿'d¿'®¿'¡¿'«¿( ¿(¿(?¿(i¿(j¿(¨¿(≈¿(À¿)¿)
¿)C¿)p¿)q¿)∑¿)Ω¿*¿*;¿*A¿*é¿*ﬂ¿*Â¿*ı¿*˚¿+H¿+Z¿+y¿+z¿+«¿+È¿+Ô¿,<¿,Ä¿,Ü¿,∆¿,Ã¿,‚¿-2¿-c¿-i¿-∑¿-…¿-œ¿-Â¿.5¿.Ä¿.Õ¿/¿/e¿/w¿/}¿/À¿/›¿/„¿00¿0{¿0À¿1¿1U¿1[¿1´¿1Ù¿28¿2>¿2ã¿2“¿3¿3X¿3r¿3á¿3ç¿3¡¿3’¿4&¿4/¿4G¿4≤¿5¿5g¿5p¿5Å¿5‰¿6<¿6i¿6∞¿6π¿6 ¿7*¿7à¿7Ê¿8G¿8§¿8˛¿9+¿94¿9k¿9s¿9w¿9x¿9≈¿9Á¿9Ì¿:>¿:Ü¿:å¿:Ã¿:“¿:‚¿:Ë¿;1¿;|¿;î¿;Ã¿<	¿<¿<¿<[¿<ã¿<ë¿<‘¿<⁄¿=$¿=n¿=º¿=Œ¿=‘¿>!¿>o¿>µ¿>‰¿>Í¿?5¿?Ñ¿?”¿@¿@/¿@}¿@Â¿A¿A<¿AR¿A≠¿A∏¿A“¿B6¿Bã¿Bñ¿B©¿C¿Ch¿Có¿C‡¿CÎ¿C˛¿D`¿D¿¿E ¿Eä¿Eï¿EŒ¿Eÿ¿Eﬁ¿F	¿F¿F¿F\¿Fj¿Fp¿FΩ¿G¿GX¿G©¿Gæ¿Gƒ¿H¿H
¿H¿H ¿Hq¿H∂¿I
¿I(¿Iç¿I∏¿I≈¿J¿JH¿JN¿JR¿JS¿J_¿Jë¿Jì¿Jî¿J∞¿J¥¿K ¿K(¿KÜ¿Kí¿K«¿K»¿K‘¿L¿LW¿Lò¿Lú¿Lù¿L≠¿LÆ¿M¿Me¿Mf¿Mê¿Më¿Mœ¿M˛¿N<¿Nk¿N¨¿N·¿O-¿Ox¿Oy¿Oï¿O∆¿OÃ¿P¿PH¿PÜ¿P«¿P»¿P˜¿P˝¿Q¿Q¿Q_¿Qt¿Q§¿Q•¿Q◊¿Q›¿QÌ¿QÛ¿RC¿RZ¿Rê¿Rë¿Rø¿S¿S!¿SI¿SS¿SÅ¿Sá¿Sã¿Så¿SΩ¿T¿T%¿TP¿TZ¿Tã¿Të¿Tï¿Tñ¿Tπ¿Tø¿U¿UB¿UH¿Uñ¿UÊ¿UÙ¿U˙¿V?¿VV¿V\¿V≠¿V√¿W¿W6¿W<¿Wa¿We¿Wf¿Wí¿Wò¿WÏ¿X'¿X-¿X{¿XÀ¿XŸ¿Xﬂ¿Y'¿Y>¿YD¿Yï¿YÆ¿Y¿Z¿Z¿ZF¿ZJ¿ZK¿ZÑ¿Z≤¿Z≥¿Z≈¿[¿[¿[d¿[¿\¿\1¿\A¿\B¿\u¿\â¿\π¿\√¿\…¿\Õ¿\Œ¿\Á¿\Ë¿]A¿]v¿]Ÿ¿]⁄¿^-¿^N¿^È¿_¿_.¿_/¿_n¿_Ç¿_æ¿_»¿_Œ¿_“¿_”¿_Ù¿_ı¿`:¿`Ü¿`ô¿`Ô¿a'¿a_¿aí¿aì¿aø¿b¿bY¿b´¿b÷¿cF¿c§¿c˛¿d4¿dÄ¿d«¿d¿e*¿e]¿em¿e∆¿e“¿f¿f?¿fI¿f_¿fg¿fh¿f¿¿g¿g6¿ge¿gﬂ¿h¿hG¿hQ¿hÅ¿hâ¿hä¿hπ¿h⁄¿i"¿ib¿ií¿i∏¿iÂ¿j-¿ju¿jà¿jô¿j®¿jµ¿j¿¿j‹¿k¿k¿k¿k!¿k"¿kF¿km¿k•¿kÀ¿k”¿kÂ¿l&¿lU¿la¿lv¿lÇ¿là¿lå¿lç¿l«¿lÕ¿m¿m5¿mY¿mÄ¿mÖ¿mâ¿mä¿m«¿mÕ¿n¿n8¿nc¿né¿nî¿nò¿nô¿n¡¿n˚¿nˇ¿o ¿o5¿oR¿or¿o®¿oƒ¿o€¿oÛ¿p¿p,¿pB¿pt¿p{¿pã¿p‚¿p˛¿qI¿qä¿qÊ¿qÒ¿q˘¿r¿r¿r¿rP¿r∏¿r„¿r‰¿s¿s"¿s#¿sZ¿sv¿s®¿sÿ¿t¿t¿t¿t¿t:¿tU¿t~¿té¿tñ¿t—¿u¿u'¿u(¿uB¿uw¿u¿uÄ¿u¨¿u¿¿u‡¿v¿v=¿vG¿vH¿vç¿væ¿v∆¿v‚¿vË¿vÈ¿w¿w(¿wQ¿w∞¿wÿ¿w‰¿w¿wÒ¿x¿x>¿x]¿xv¿xì¿xõ¿x°¿x¢¿x ¿xÂ¿y¿yD¿yZ¿yÖ¿yó¿y°¿yﬁ¿y˝¿z¿z¿zZ¿zr¿z™¿z∏¿z¬¿zÀ¿z·¿z˛¿{¿{M¿{v¿{Ä¿{â¿{°¿{√¿{Î¿|¿|¿|=¿|]¿|d¿|e¿|~¿|∫¿|¿¿|¡¿|Ô¿}¿}¿}'¿}>¿}b¿}™¿}ø¿}∆¿} ¿}À¿~¿~Z¿~`¿~≤¿~∆¿~Ã¿¿\¿o¿u¿¿¿Ä¿Ä3¿Ä9¿Äå¿Ä“¿Å¿Å%¿Åu¿Å√¿Å˜¿Å˝¿ÇL¿Çö¿Ç–¿Ç÷¿É&¿Éw¿É√¿ÉÍ¿É¿Ñ¿ÑP¿Ñö¿Ñ ¿Ñ–¿Ö3¿ÖE¿ÖU¿Ö[¿Ö™¿Öæ¿Ü
¿ÜW¿Üg¿Ü∏¿á¿ág¿áö¿á∑¿á”¿áÍ¿à¿à¿à;¿àQ¿àâ¿àê¿à†¿à»¿à‰¿â/¿âp¿âÃ¿â◊¿âﬂ¿âÚ¿â¸¿ä*¿ä+¿äK¿ä—¿ä„¿ã¿ã#¿ã@¿ãi¿ãì¿ã±¿ã«¿ãÎ¿å¿å-¿å~¿åá¿åè¿å∞¿å¥¿åµ¿å’¿ç¿çX¿çü¿çﬁ¿çﬂ¿é%¿é&¿ég¿éé¿éÙ¿éı¿è6¿è]¿èõ¿èÁ¿ê#¿ê_¿êf¿êj¿êk¿êú¿ê…¿ë	¿ë¿ë¿ë`¿ë≥¿í¿í.¿í§¿íﬂ¿ì™¿î%¿î+¿î,¿î>¿î~¿î±¿îπ¿î∫¿ï¿ïu¿ïä¿ï◊¿ï€¿ï‹¿ñ¿ñ¿ñ^¿ñ™¿ñ‘¿ñÛ¿óS¿ó§¿óÕ¿ó⁄¿ò¿ò3¿ò<¿òB¿òF¿òG¿òV¿òW¿òã¿òå¿ò≥¿òÁ¿òÎ¿òÏ¿ò¯¿ô¿ô$¿ôz¿ôÏ¿ö^¿ö©¿öË¿ö˚¿õ¿õ=¿õD¿õE¿õä¿õ∂¿õ…¿õ–¿õ‘¿õ’¿õ·¿ú¿ú4¿úß¿ù ¿ùt¿ùz¿ù”¿ûB¿ûH¿û¿ûë¿ûÛ¿ü-¿üG¿ü†¿ü⁄¿üÈ¿† ¿†9¿†ñ¿†—¿†‡¿†Ó¿†¯¿°¿°¿°A¿°e¿°µ¿°·¿°¿¢¿¢ ¿¢&¿¢*¿¢+¿¢7¿¢X¿¢©¿¢‡¿£A¿£ë¿£∑¿§¿§B¿§H¿§ç¿§¿¿§È¿§Í¿•¿•5¿•9¿•:¿•F¿•Y¿•z¿•≠¿•Ê¿¶¿¶.¿¶N¿¶c¿¶g¿¶h¿¶~¿¶õ¿¶Æ¿¶ƒ¿¶È¿ß¿ß3¿ßZ¿ß~¿ß™¿ß±¿ßÒ¿®¿®9¿®`¿®â¿®ê¿®≠¿®Â¿®Î¿®Ï¿©2¿©N¿©ó¿©†¿©¶¿©ß¿©¿¿©‘¿©Ê¿©˝¿™4¿™?¿™H¿™N¿™R¿™S¿™¢¿™∆¿™‚¿™˜¿´	¿´#¿´A¿´k¿´ü¿´‹¿¨¿¨@¿¨à¿¨∏¿¨‹¿¨Á¿≠¿≠L¿≠ã¿≠¨¿≠Ï¿Æ¿Æ¿Æ¿Æ#¿Æ$¿Æp¿Æë¿Æ™¿Æø¿Æ—¿ÆÎ¿Ø¿Ø2¿Øc¿Ø†¿Øœ¿∞¿∞I¿∞v¿∞ó¿∞¢¿∞¿¿±¿±C¿±d¿±§¿±»¿±—¿±◊¿±€¿±‹¿±˚¿≤#¿≤$¿≤j¿≤ù¿≤Ê¿≤Ù¿≤˙¿≥¿≥*¿≥e¿≥m¿≥q¿≥r¿≥~¿≥•¿≥”¿¥¿¥8¿¥|¿¥}¿¥Ø¿¥¬¿¥“¿µ¿µ*¿µi¿µ©¿µ≤¿µÃ¿µÏ¿∂¿∂<¿∂•¿∂Ÿ¿∂‡¿∂˙¿∑¿∑!¿∑7¿∑U¿∑w¿∑Ç¿∑£¿∑ƒ¿∑‰¿∏¿∏)¿∏2¿∏8¿∏9¿∏Z¿∏¥¿π¿πb¿πw¿πâ¿π°¿πÊ¿∫¿∫F¿∫i¿∫v¿∫Å¿∫ü¿∫¡¿∫‚¿ª¿ª(¿ª1¿ª7¿ª8¿ª]¿ªx¿ªy¿ª≈¿ªÁ¿º¿º.¿ºS¿ºú¿ºß¿º∞¿º≈¿º◊¿ºÊ¿Ω	¿Ω+¿ΩK¿Ωn¿Ω¶¿ΩØ¿Ωµ¿Ω∂¿Ωﬂ¿æ¿æZ¿æÜ¿æ©¿æÛ¿øM¿øN¿øc¿øu¿øö¿ø∫¿ø‹¿ø¸¿¿¿¿ä¿¿…¿¿“¿¿ÿ¿¿Ÿ¿¡
¿¡9¿¡e¿¡∏¿¬$¿¬]¿¬^¿¬s¿¬Ö¿¬∞¿¬÷¿¬¯¿√)¿√L¿√o¿√Æ¿√∑¿√Ω¿√æ¿√¿ƒ¿ƒ¿ƒ*¿ƒO¿ƒk¿ƒ≠¿ƒº¿ƒ…¿ƒ‰¿ƒ¸¿≈ ¿≈@¿≈}¿≈Ø¿≈”¿≈Ò¿∆0¿∆m¿∆Ä¿∆ë¿∆†¿∆≠¿∆∏¿∆‡¿«¿«"¿«E¿«Ü¿«≈¿«Œ¿«‘¿«’¿»¿»¿»*¿»N¿»y¿»õ¿»ª¿»ﬁ¿…¿…A¿…J¿…P¿…Q¿…d¿…t¿…õ¿…⁄¿ ¿ A¿ á¿ ≥¿ º¿ Ê¿À¿À#¿ÀC¿Àd¿Àk¿Àl¿Àé¿À≠¿ÀŒ¿ÀÂ¿À˘¿Ã¿ÃB¿Ãj¿ÃÀ¿ÃÛ¿Õ ¿Õ#¿ÕG¿Õi¿Õé¿Õ≥¿Õæ¿Õ·¿Œ¿Œ%¿ŒH¿ŒW¿Œ]¿Œ^¿ŒÄ¿Œ≠¿Œ›¿ŒÍ¿œ¿œG¿œM¿œN¿œñ¿œﬂ¿–8¿–?¿–@¿–ä¿–¡¿—¿—{¿—Ç¿—É¿—≤¿—˙¿—˚¿“¿“2¿“]¿“Ü¿“ü¿“Ì¿”o¿”ã¿”∫¿”¯¿‘	¿‘6¿‘a¿‘ã¿‘‘¿‘¸¿’.¿’Ö¿’Ì¿÷B¿÷y¿÷Ÿ¿◊	¿◊C¿◊ï¿◊≈¿◊ÿ¿◊¸¿ÿ¿ÿ¿ÿ*¿ÿ5¿ÿ>¿ÿE¿ÿI¿ÿK¿ÿL¿ÿ¿ÿ•¿ÿ¶¿ÿƒ¿ÿ≈¿ÿ—¿ÿ˙¿ŸP¿ŸT¿ŸU¿Ÿa¿Ÿá¿ŸØ¿Ÿ⁄¿Ÿﬁ¿Ÿ‡¿Ÿ·¿⁄¿⁄!¿⁄e¿⁄ä¿⁄¡¿€ ¿€3¿€T¿€U¿€¶¿€”¿€‘¿‹4¿‹P¿‹Q¿‹°¿‹¿¿‹¬¿‹√¿›¿›_¿›∞¿ﬁ¿ﬁ5¿ﬁ9¿ﬁÑ¿ﬁŒ¿ﬂ¿ﬂ5¿ﬂ9¿ﬂÜ¿ﬂ”¿‡#¿‡n¿‡¶¿‡È¿·
¿·.¿·J¿·t¿·~¿·¿·∑¿·Ω¿·Î¿‚	¿‚
¿‚B¿‚W¿‚X¿‚d¿‚É¿‚•¿‚ﬂ¿‚‡¿‚˝¿„¿„¿„¿„(¿„8¿„>¿„?¿„ã¿„ ¿‰¿‰¿‰¿‰¿‰(¿‰h¿‰l¿‰n¿‰o¿‰£¿‰¬¿‰—¿‰¯¿Â¿Â1¿ÂP¿Âk¿Âä¿Â§¿Â∏¿Â»¿Âﬂ¿Âı¿Ê	¿Ê¿Ê¿ÊÇ¿Êõ¿Êº¿Êﬂ¿Á ¿Á¿Á:¿ÁZ¿Áu¿Áë¿Á≠¿Á“¿Á”¿Áﬂ¿Ë)¿Ë+¿Ë,¿Ër¿Ë∏¿Ëπ¿Ë≈¿Ë⁄¿ËÒ¿Ë˝¿È@¿Èã¿Èí¿ÈŸ¿È›¿Èﬁ¿ÈÍ¿È˝¿Í¿Í0¿Í4¿Í5¿ÍA¿Íz¿Í†¿ÍÈ¿ÍÌ¿ÍÓ¿Íˇ¿Î)¿ÎG¿ÎK¿ÎL¿ÎÄ¿Î≈¿ÎÈ¿ÎÌ¿ÎÓ¿Ï3¿ÏÄ¿Ï±¿ÏŸ¿Ì¿Ì¿Ì¿Ì¿ÌB¿Ìq¿Ìì¿Ìô¿Ìù¿Ìû¿Ì„¿Ó!¿ÓZ¿Óò¿Ô¿Ô5¿Ô[¿Ô±¿Ôª¿Ô»¿¿-¿3¿Ä¿π¿Ë¿Ò¿Ò&¿Ò,¿Ò>¿ÒB¿ÒC¿ÒO¿Òv¿Òí¿Òø¿Òˆ¿Ú¿Ú@¿Úî¿Ú¨¿Ú∑¿Ú¿¿Úÿ¿ÚÒ¿Û)¿Ûp¿Ûô¿Û∑¿ÛÙ¿Ù¿ÙJ¿Ùq¿Ùõ¿Ù¿¿Ùı¿ı¿ı?¿ın¿ıõ¿ı®¿ı≥¿ıº¿ı√¿ı«¿ı»¿ı ¿ıÀ¿ˆ	¿ˆ¿ˆZ¿ˆ^¿ˆ©¿ˆÎ¿˜¿˜m¿˜ò¿˜™¿˜ø¿˜–¿˜¿¯¿¯ ¿¯!¿¯D¿¯F¿¯G¿¯v¿¯è¿¯¨¿¯–¿¯Í¿¯¿¯Ò¿˘	¿˘=¿˘>¿˘J¿˘Ä¿˘≠¿˘±¿˘≥    Ä•  Ä∫  Ä‘ÄÎ Ä ÅÅÅ  Å= ÅdÅzÅ|  Å§  Åª  Å—  ÅÌ  Ç	  Ç  Ç5  ÇJ  Ça  Çw  Çô  Çø  ÇÓ  É  É  É>    á íéç≈Üæ/// Manages [SnackBar]s and [MaterialBanner]s for descendant [Scaffold]s.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=lytQi-slT5Y}
///
/// This class provides APIs for showing snack bars and material banners at the
/// bottom and top of the screen, respectively.
///
/// To display one of these notifications, obtain the [ScaffoldMessengerState]
/// for the current [BuildContext] via [ScaffoldMessenger.of] and use the
/// [ScaffoldMessengerState.showSnackBar] or the
/// [ScaffoldMessengerState.showMaterialBanner] functions.
///
/// When the [ScaffoldMessenger] has nested [Scaffold] descendants, the
/// ScaffoldMessenger will only present the notification to the root Scaffold of
/// the subtree of Scaffolds. In order to show notifications for the inner, nested
/// Scaffolds, set a new scope by instantiating a new ScaffoldMessenger in
/// between the levels of nesting.
///
/// {@tool dartpad}
/// Here is an example of showing a [SnackBar] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.0.dart **
/// {@end-tool}
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=lytQi-slT5Y}
///
/// See also:
///
///  * [SnackBar], which is a temporary notification typically shown near the
///    bottom of the app using the [ScaffoldMessengerState.showSnackBar] method.
///  * [MaterialBanner], which is a temporary notification typically shown at the
///    top of the app using the [ScaffoldMessengerState.showMaterialBanner] method.
///  * [debugCheckHasScaffoldMessenger], which asserts that the given context
///    has a [ScaffoldMessenger] ancestor.
///  * Cookbook: [Display a SnackBar](https://flutter.dev/docs/cookbook/design/snackbars) çÚÄì éDéUI/// Creates a widget that manages [SnackBar]s for [Scaffold] descendants.é\	éc  ékéz   éâyé˝`/// The widget below this widget in the tree.
///
/// {@macro flutter.widgets.ProxyWidget.child}  èá‹ïÛÜÖ/// The state from the closest instance of this class that encloses the given
/// context.
///
/// {@tool dartpad}
/// Typical usage of the [ScaffoldMessenger.of] function is to call it in
/// response to a user gesture or an application state change.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.of.0.dart **
/// {@end-tool}
///
/// A less elegant but more expedient solution is to assign a [GlobalKey] to the
/// [ScaffoldMessenger], then use the `key.currentState` property to obtain the
/// [ScaffoldMessengerState] rather than using the [ScaffoldMessenger.of]
/// function. The [MaterialApp.scaffoldMessengerKey] refers to the root
/// ScaffoldMessenger that is provided by default.
///
/// {@tool dartpad}
/// Sometimes [SnackBar]s are produced by code that doesn't have ready access
/// to a valid [BuildContext]. One such example of this is when you show a
/// SnackBar from a method outside of the `build` function. In these
/// cases, you can assign a [GlobalKey] to the [ScaffoldMessenger]. This
/// example shows a key being used to obtain the [ScaffoldMessengerState]
/// provided by the [MaterialApp].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger.of.1.dart **
/// {@end-tool}
///
/// If there is no [ScaffoldMessenger] in scope, then this will assert in
/// debug mode, and throw an exception in release mode.
///
/// See also:
///
///  * [maybeOf], which is a similar function but will return null instead of
///    throwing if there is no [ScaffoldMessenger] ancestor.
///  * [debugCheckHasScaffoldMessenger], which asserts that the given context
///    has a [ScaffoldMessenger] ancestor. ïˆñ   ñÁÇTòzÅa/// The state from the closest instance of this class that encloses the given
/// context, if any.
///
/// Will return null if a [ScaffoldMessenger] is not found in the given context.
///
/// See also:
///
///  * [of], which is a similar function, except that it will throw an
///    exception if a [ScaffoldMessenger] is not found in the given context. òÇòê   ô?Môb   ô?ô@ ôê¿ Cyõ2Åõ/// State for a [ScaffoldMessenger].
///
/// A [ScaffoldMessengerState] object can be used to [showSnackBar] or
/// [showMaterialBanner] for every registered [Scaffold] that is a descendant of
/// the associated [ScaffoldMessenger]. Scaffolds will register to receive
/// [SnackBar]s and [MaterialBanner]s from their closest ScaffoldMessenger
/// ancestor.
///
/// Typically obtained via [ScaffoldMessenger.of].  õåNõØ õºõ…õ◊õ õÿõŸõﬁÄ¥ú1 
úDúIúèúJúcúéúdútúêúëúñ.ú´  ú»Äñù 
ùù!ù[ù"ù;ùZù<ùFù\ù]ùb(ùw  ùéùï  ùßù≠   ù«Ç¿ùÿ   ù«ù»†ãÅ†ê  †ö†©   °®Ä¨°≠  °π°»   ¢XÄœ¢]    £√Ä¬£»  £–£ﬂ   §úî≠Ôà∏/// Shows a [SnackBar] across all registered [Scaffold]s. Scaffolds register
/// to receive snack bars from their closest [ScaffoldMessenger] ancestor.
/// If there are several registered scaffolds the snack bar is shown
/// simultaneously on all of them.
///
/// A scaffold can show at most one snack bar at a time. If this function is
/// called while another snack bar is already visible, the given snack bar
/// will be added to a queue and displayed after the earlier snack bars have
/// closed.
///
/// To control how long a [SnackBar] remains visible, use [SnackBar.duration].
///
/// To remove the [SnackBar] with an exit animation, use [hideCurrentSnackBar]
/// or call [ScaffoldFeatureController.close] on the returned
/// [ScaffoldFeatureController]. To remove a [SnackBar] suddenly (without an
/// animation), use [removeCurrentSnackBar].
///
/// See [ScaffoldMessenger.of] for information about how to obtain the
/// [ScaffoldMessengerState].
///
/// {@tool dartpad}
/// Here is an example of showing a [SnackBar] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_snack_bar.0.dart **
/// {@end-tool}
///
/// ## Relative positioning of floating SnackBars
///
/// A [SnackBar] with [SnackBar.behavior] set to [SnackBarBehavior.floating] is
/// positioned above the widgets provided to [Scaffold.floatingActionButton],
/// [Scaffold.persistentFooterButtons], and [Scaffold.bottomNavigationBar].
/// If some or all of these widgets take up enough space such that the SnackBar
/// would not be visible when positioned above them, an error will be thrown.
/// In this case, consider constraining the size of these widgets to allow room for
/// the SnackBar to be visible.
///
/// {@tool dartpad}
/// Here is an example showing how to display a [SnackBar] with [showSnackBar]
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_snack_bar.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// Here is an example showing that a floating [SnackBar] appears above [Scaffold.floatingActionButton].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_snack_bar.1.dart **
/// {@end-tool}
/// ≠¸Æ   ∏´Ç®∏∞  ∏Õ∏ﬁ   ªWÇ…º^Ä˜/// Removes the current [SnackBar] (if any) immediately from registered
/// [Scaffold]s.
///
/// The removed snack bar does not run its normal exit animation. If there are
/// any queued snack bars, they begin their entrance animation immediately. ºv9ºå  ºîº®º©æ$É#æ¿Äê/// Removes the current [SnackBar] by running its normal exit animation.
///
/// The closed completer is called after the animation is complete. æ÷7æÏ  æÙøø	¿ AKÅ”¿ A⁄ÄÖ/// Removes all the snackBars currently in queue by clearing the queue
/// and running normal exit animation on the current snackBar.   ¿ C<äk¿ HJÑô/// Shows a [MaterialBanner] across all registered [Scaffold]s. Scaffolds register
/// to receive material banners from their closest [ScaffoldMessenger] ancestor.
/// If there are several registered scaffolds the material banner is shown
/// simultaneously on all of them.
///
/// A scaffold can show at most one material banner at a time. If this function is
/// called while another material banner is already visible, the given material banner
/// will be added to a queue and displayed after the earlier material banners have
/// closed.
///
/// To remove the [MaterialBanner] with an exit animation, use [hideCurrentMaterialBanner]
/// or call [ScaffoldFeatureController.close] on the returned
/// [ScaffoldFeatureController]. To remove a [MaterialBanner] suddenly (without an
/// animation), use [removeCurrentMaterialBanner].
///
/// See [ScaffoldMessenger.of] for information about how to obtain the
/// [ScaffoldMessengerState].
///
/// {@tool dartpad}
/// Here is an example of showing a [MaterialBanner] when the user presses a button.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_messenger_state.show_material_banner.0.dart **
/// {@end-tool} ¿ H]¿ Hm   ¿ M´Ç)¿ M∞  ¿ M”¿ M‰   ¿ OÿÇÕ¿ PÒÅ	/// Removes the current [MaterialBanner] (if any) immediately from registered
/// [Scaffold]s.
///
/// The removed material banner does not run its normal exit animation. If there are
/// any queued material banners, they begin their entrance animation immediately. ¿ QE¿ Q+  ¿ Q3¿ QM¿ QN¿ R©É&¿ SKÄñ/// Removes the current [MaterialBanner] by running its normal exit animation.
///
/// The closed completer is called after the animation is complete. ¿ SgC¿ SÉ  ¿ Sã¿ S•¿ S¶¿ U”Ç%¿ VrÄï/// Removes all the [MaterialBanner]s currently in queue by clearing the queue
/// and running normal exit animation on the current [MaterialBanner].   ¿ W¸ÑK¿ X  ¿ X¿ X#  ¿ W¸¿ W˝¿ \KÄº¿ \\   ¿ \K¿ \L ¿ ]Å¢¿ ]  ¿ ]EÄÆ ¿ ]K¿ ]b ¿ ]i¿ ]y  ¿ ]É6¿ ]§  ¿ ]⁄¿ ]¬¿ ]‹¿ ]˜4¿ ^   ¿ ^0{¿ ^A  ¿ ^T¿ ^m  ¿ ^0¿ ^1 ¿ ^Øíf¿ `oÅÆ/// The geometry of the [Scaffold] after all its contents have been laid out
/// except the [FloatingActionButton].
///
/// The [Scaffold] passes this pre-layout geometry to its
/// [FloatingActionButtonLocation], which produces an [Offset] that the
/// [Scaffold] uses to position the [FloatingActionButton].
///
/// For a description of the [Scaffold]'s geometry after it has
/// finished laying out, see the [ScaffoldGeometry]. ¿ `çÇ ¿ a,¿ aEÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.
¿ aL¿ a[  ¿ ao¿ a~  ¿ aê¿ aü  ¿ aÆ&¿ aΩ  ¿ a⁄¿ aÈ  ¿ a˜¿ b  ¿ b¿ b(  ¿ b9¿ bH  ¿ bY ¿ bh  ¿ b¿ bé   
¿ b•Ä™¿ c7ÄÄ/// The [Size] of [Scaffold.floatingActionButton].
///
/// If [Scaffold.floatingActionButton] is null, this will be [Size.zero]. ¿ cTÄ∂¿ c˚Äì/// The [Size] of the [Scaffold]'s [BottomSheet].
///
/// If the [Scaffold] is not currently showing a [BottomSheet],
/// this will be [Size.zero]. ¿ dÇÄ¿ fÇÇM/// The vertical distance from the Scaffold's origin to the bottom of
/// [Scaffold.body].
///
/// This is useful in a [FloatingActionButtonLocation] designed to
/// place the [FloatingActionButton] at the bottom of the screen, while
/// keeping it above the [BottomSheet], the [Scaffold.bottomNavigationBar],
/// or the keyboard.
///
/// The [Scaffold.body] is laid out with respect to [minInsets] already. This
/// means that a [FloatingActionButtonLocation] does not need to factor in
/// [EdgeInsets.bottom] of [minInsets] when aligning a [FloatingActionButton]
/// to [contentBottom]. ¿ fîÇ<¿ h∆Ç/// The vertical distance from the [Scaffold]'s origin to the top of
/// [Scaffold.body].
///
/// This is useful in a [FloatingActionButtonLocation] designed to
/// place the [FloatingActionButton] at the top of the screen, while
/// keeping it below the [Scaffold.appBar].
///
/// The [Scaffold.body] is laid out with respect to [minInsets] already. This
/// means that a [FloatingActionButtonLocation] does not need to factor in
/// [EdgeInsets.top] of [minInsets] when aligning a [FloatingActionButton] to
/// [contentTop]. ¿ h’ÅÈ¿ jµÅ∫/// The minimum padding to inset the [FloatingActionButton] by for it
/// to remain visible.
///
/// This value is the result of calling [MediaQueryData.padding] in the
/// [Scaffold]'s [BuildContext],
/// and is useful for insetting the [FloatingActionButton] to avoid features like
/// the system status bar or the keyboard.
///
/// If [Scaffold.resizeToAvoidBottomInset] is set to false,
/// [EdgeInsets.bottom] of [minInsets] will be 0.0. ¿ j√ÅÁ¿ lúÅ∑/// The minimum padding to inset interactive elements to be within a safe,
/// un-obscured space.
///
/// This value reflects the [MediaQueryData.viewPadding] of the [Scaffold]'s
/// [BuildContext] when [Scaffold.resizeToAvoidBottomInset] is false or and
/// the [MediaQueryData.viewInsets] > 0.0. This helps distinguish between
/// different types of obstructions on the screen, such as software keyboards
/// and physical device notches. ¿ lØÇ©¿ oLÇw/// The [Size] of the whole [Scaffold].
///
/// If the [Size] of the [Scaffold]'s contents is modified by values such as
/// [Scaffold.resizeToAvoidBottomInset] or the keyboard opening, then the
/// [scaffoldSize] will not reflect those changes.
///
/// This means that [FloatingActionButtonLocation]s designed to reposition
/// the [FloatingActionButton] based on events such as the keyboard popping
/// up should use [minInsets] to make sure that the [FloatingActionButton] is
/// inset by enough to remain visible.
///
/// See [minInsets] and [MediaQueryData.padding] for more information on the
/// appropriate insets to apply. ¿ o]Äù¿ oÓ/// The [Size] of the [Scaffold]'s [SnackBar].
///
/// If the [Scaffold] is not showing a [SnackBar], this will be [Size.zero]. ¿ oˇÄØ¿ púÄã/// The [Size] of the [Scaffold]'s [MaterialBanner].
///
/// If the [Scaffold] is not showing a [MaterialBanner], this will be [Size.zero]. ¿ p≥_¿ q;/// The [TextDirection] of the [Scaffold]'s [BuildContext].   ¿ `^¿ `_¿ qÉ›¿ r"Ä˘/// A snapshot of a transition between two [FloatingActionButtonLocation]s.
///
/// [ScaffoldState] uses this to seamlessly change transition animations
/// when a running [FloatingActionButtonLocation] transition is interrupted by a new transition. ¿ rkY ¿ rq¿ rè ¿ rê
¿ rñ  ¿ rú¿ r¢  ¿ r¶¿ r¨  ¿ rµ¿ rª   ¿ r»(¿ rÎ  ¿ rÙ&¿ s  ¿ s+¿ sA  ¿ sM¿ sZ   ¿ sgÄÍ¿ sz  ¿ sÑ*¿ sü  ¿ sg¿ sh¿ tUÄù¿ th   ¿ tU¿ tV¿ r¿ r¿ tˆàµ¿ w±Ç©/// Geometry information for [Scaffold] components after layout is finished.
///
/// To get a [ValueNotifier] for the scaffold geometry of a given
/// [BuildContext], use [Scaffold.geometryOf].
///
/// The ScaffoldGeometry is only available during the paint phase, because
/// its value is computed during the animation and layout phases prior to painting.
///
/// For an example of using the [ScaffoldGeometry], see the [BottomAppBar],
/// which uses the [ScaffoldGeometry] to paint a notch around the
/// [FloatingActionButton].
///
/// For information about the [Scaffold]'s geometry that is used while laying
/// out the [FloatingActionButton], see [ScaffoldPrelayoutGeometry]. ¿ w∆Ä¶ ¿ x¿ x A/// Create an object that describes the geometry of a [Scaffold].¿ x'¿ x-  ¿ xH¿ xN   ¿ xpÄˆ¿ yPÄ…/// The distance from the [Scaffold]'s top edge to the top edge of the
/// rectangle in which the [Scaffold.bottomNavigationBar] bar is laid out.
///
/// Null if [Scaffold.bottomNavigationBar] is null. ¿ ykÄÆ¿ zÄÉ/// The [Scaffold.floatingActionButton]'s bounding rectangle.
///
/// This is null when there is no floating action button showing.  ¿ zÅ◊¿ z/  ¿ zJ¿ zR   ¿ {˘Å∞¿ |xi/// Creates a copy of this [ScaffoldGeometry] but with the given fields replaced with
/// the new values. ¿ |á¿ |ê  ¿ |´¿ |≤   ¿ w†¿ w°¿ }≠Ö¿ }≥  ¿ ~7 ¿ ~¿ ~. ¿ ~/¿ ~5  ¿ ~>¿ ~D   ¿ ~P¿ ~c  ¿ ~n!¿ ~v  ¿ ~ì¿ ~§  ¿ ~±Çl¿ ~“   ¿ ~±¿ ~≤¿ Å!Åû¿ Å&  ¿ Å8¿ ÅA  ¿ Å\¿ Åc  ¿ ÅÄ!¿ Åâ    ¿ ÖÑ∂¿ Ö  ¿ ÖEÅ( ¿ ÖK¿ Ö^ ¿ Öe¿ Öl  ¿ Öy¿ ÖÄ  ¿ Öé!¿ Öù  ¿ Öµ¿ Öƒ  ¿ Ö’"¿ Ö‰  ¿ Ü ¿ Ü¿ Ü¿ Ü¿ Ü¿ Ü¿ Ü)¿ Ü/¿ ÜA¿ Ü=¿ Ü0¿ Ü@¿ ÜK¿ ÜQ¿ Ük¿ Üg¿ ÜR¿ Üj¿ Üq ¿ Ü~  ¿ Üï¿ Ü¢  ¿ Ü≤!¿ Üø  ¿ âOu¿ âc   ¿ âO¿ âP¿ àÅ5¿ à0  ¿ à3¿ à;  ¿ à¿ à ¿ ã/Ñ⁄¿ ã5  ¿ ã^z ¿ ãd¿ ãp ¿ ãw¿ ãÜ  ¿ ãï$¿ ã§  ¿ ãø¿ ãŒ   ¿ ã‹¿ ãÈ  ¿ ãÒ¿ ã¸  ¿ å
!¿ å   ¿ å0É◊¿ åC  ¿ åI¿ åW  ¿ å0¿ å1 ¿ ê¥◊¿ ê  ¿ êFÇ` ¿ êF¿ êU ¿ ê\¿ êk  ¿ êy¿ êà  ¿ êõ¿ ê™  ¿ êº¿ êÀ  ¿ ë2¿ ë  ¿ ë:1¿ ëI  ¿ ëq7¿ ëÄ  ¿ ëÆ0¿ ëΩ  ¿ ë‰ ¿ ëÛ  ¿ í
¿ í  ¿ í+¿ í:  ¿ íI$¿ íX  ¿ ís,¿ íÇ   ¿ í™¿ íµ  ¿ í√!¿ íŒ  ¿ íË¿ í˘  ¿ ì¿ ì  ¿ ì)!¿ ì=  ¿ ìN0¿ ìn  ¿ ìÉG¿ ì¶  ¿ ìŒF¿ ìÒ  ¿ î6¿ î%  ¿ îRE¿ îu  ¿ îú¿ îß  ¿ îΩ¿ îÀ  ¿ î›)¿ îË   ¿ ï≠T¿ ï  ¿ ï*	¿ ï0  ¿ ï¿ ï¿ ¬cÇ}¿ ¬t  ¿ ¬É¿ ¬î  ¿ ¬c¿ ¬d ¿ ƒ‰Ñ:¿ ∆ÅÅñ/// Handler for scale and rotation animations in the [FloatingActionButton].
///
/// Currently, there are two types of [FloatingActionButton] animations:
///
/// * Entrance/Exit animations, which this widget triggers
///   when the [FloatingActionButton] is added, updated, or removed.
/// * Motion animations, which are triggered by the [Scaffold]
///   when its [FloatingActionButtonLocation] is updated. ¿ ∆ºÄÿ ¿ ∆¬¿ ∆· ¿ ∆Ë¿ ∆˜  ¿ «¿ «  ¿ «%¿ «4  ¿ «J¿ «Y  ¿ «n¿ «}   ¿ «ò¿ «¶  ¿ «Ø(¿ ««  ¿ «€4¿ «˛  ¿ »0¿ »3  ¿ »Hf¿ »ù8/// Controls the current child widget.child as it exits.  ¿ »≥i¿ »‰   ¿ »≥¿ »¥ ¿ … ö8¿ …&   ¿  +,¿  D  ¿  [.¿  r  ¿  ç1¿  §  ¿ À;-¿ ÀR  ¿ Àl5¿ ÀÉ  ¿ À•0¿ Àº  ¿ ÀŸ¿ À·  ¿ ‘ñÄ±¿ ‘∂ ¿ ‘À¿ ‘–¿ ‘◊¿ ‘—¿ ‘ÿ¿ ’¿ ‘„¿ ‘ﬁ¿ ‘È¿ ‘Â¿ ‘Î¿ ’¿ ’¿ ’¿ ’¿ ’ ¿ ’%¿ ’F¿ ’&¿ ’0¿ ’E¿ ’6¿ ’1¿ ’8¿ ’>¿ ’? 	¿ ÀÙÇä¿ Ã   ¿ ÀÙ¿ Àı¿ ŒÇX¿ Œì   ¿ ŒÇ¿ ŒÉ¿ ŒﬁÖ¥¿ ŒÔ  ¿ Œˇ)¿ œ   ¿ Œﬁ¿ Œﬂ¿ ’LÜ®¿ ’Q    ¿ €¯Å-¿ €˝  ¿ ‹#¿ ‹4   ¿ ›)ÄÇ¿ ›.  ¿ ›N¿ ›W   ¿ ›ØÑö¿ ›¬  ¿ ›»¿ ›÷  ¿ ›Ø¿ ›∞¿ ‚MÄÄ¿ ‚R    ¿ ‚—ÄÖ¿ ‚÷  ¿ ‚Î¿ ‚Û    ¿ „Z¿ g8¿ ˝æö]/// Implements the basic Material Design visual layout structure.
///
/// This class provides APIs for showing drawers and bottom sheets.
///
/// To display a persistent bottom sheet, obtain the
/// [ScaffoldState] for the current [BuildContext] via [Scaffold.of] and use the
/// [ScaffoldState.showBottomSheet] function.
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with a [body] and [FloatingActionButton].
/// The [body] is a [Text] placed in a [Center] in order to center the text
/// within the [Scaffold]. The [FloatingActionButton] is connected to a
/// callback that increments a counter.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with a blueGrey [backgroundColor], [body]
/// and [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in
/// order to center the text within the [Scaffold]. The [FloatingActionButton]
/// is connected to a callback that increments a counter.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_background_color.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.1.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// This example shows a [Scaffold] with an [AppBar], a [BottomAppBar] and a
/// [FloatingActionButton]. The [body] is a [Text] placed in a [Center] in order
/// to center the text within the [Scaffold]. The [FloatingActionButton] is
/// centered and docked within the [BottomAppBar] using
/// [FloatingActionButtonLocation.centerDocked]. The [FloatingActionButton] is
/// connected to a callback that increments a counter.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/material/scaffold_bottom_app_bar.png)
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.2.dart **
/// {@end-tool}
///
/// ## Scaffold layout, the keyboard, and display "notches"
///
/// The scaffold will expand to fill the available space. That usually
/// means that it will occupy its entire window or device screen. When
/// the device's keyboard appears the Scaffold's ancestor [MediaQuery]
/// widget's [MediaQueryData.viewInsets] changes and the Scaffold will
/// be rebuilt. By default the scaffold's [body] is resized to make
/// room for the keyboard. To prevent the resize set
/// [resizeToAvoidBottomInset] to false. In either case the focused
/// widget will be scrolled into view if it's within a scrollable
/// container.
///
/// The [MediaQueryData.padding] value defines areas that might
/// not be completely visible, like the display "notch" on the iPhone
/// X. The scaffold's [body] is not inset by this padding value
/// although an [appBar] or [bottomNavigationBar] will typically
/// cause the body to avoid the padding. The [SafeArea]
/// widget can be used within the scaffold's body to avoid areas
/// like display notches.
///
/// ## Floating action button with a draggable scrollable bottom sheet
///
/// If [Scaffold.bottomSheet] is a [DraggableScrollableSheet],
/// [Scaffold.floatingActionButton] is set, and the bottom sheet is dragged to
/// cover greater than 70% of the Scaffold's height, two things happen in parallel:
///
///   * Scaffold starts to show scrim (see [ScaffoldState.showBodyScrim]), and
///   * [Scaffold.floatingActionButton] is scaled down through an animation with a [Curves.easeIn], and
///     disappears when the bottom sheet covers the entire Scaffold.
///
/// And as soon as the bottom sheet is dragged down to cover less than 70% of the [Scaffold], the scrim
/// disappears and [Scaffold.floatingActionButton] animates back to its normal size.
///
/// ## Troubleshooting
///
/// ### Nested Scaffolds
///
/// The Scaffold is designed to be a top level container for
/// a [MaterialApp]. This means that adding a Scaffold
/// to each route on a Material app will provide the app with
/// Material's basic visual layout structure.
///
/// It is typically not necessary to nest Scaffolds. For example, in a
/// tabbed UI, where the [bottomNavigationBar] is a [TabBar]
/// and the body is a [TabBarView], you might be tempted to make each tab bar
/// view a scaffold with a differently titled AppBar. Rather, it would be
/// better to add a listener to the [TabController] that updates the
/// AppBar
///
/// {@tool snippet}
/// Add a listener to the app's tab controller so that the [AppBar] title of the
/// app's one and only scaffold is reset each time a new tab is selected.
///
/// ```dart
/// TabController(vsync: tickerProvider, length: tabCount)..addListener(() {
///   if (!tabController.indexIsChanging) {
///     setState(() {
///       // Rebuild the enclosing scaffold with a new AppBar title
///       appBarTitle = 'Tab ${tabController.index}';
///     });
///   }
/// })
/// ```
/// {@end-tool}
///
/// Although there are some use cases, like a presentation app that
/// shows embedded flutter content, where nested scaffolds are
/// appropriate, it's best to avoid nesting scaffolds.
///
/// See also:
///
///  * [AppBar], which is a horizontal bar typically shown at the top of an app
///    using the [appBar] property.
///  * [BottomAppBar], which is a horizontal bar typically shown at the bottom
///    of an app using the [bottomNavigationBar] property.
///  * [FloatingActionButton], which is a circular button typically shown in the
///    bottom right corner of the app using the [floatingActionButton] property.
///  * [Drawer], which is a vertical panel that is typically displayed to the
///    left of the body (and often hidden on phones) using the [drawer]
///    property.
///  * [BottomNavigationBar], which is a horizontal array of buttons typically
///    shown along the bottom of the app using the [bottomNavigationBar]
///    property.
///  * [BottomSheet], which is an overlay typically shown near the bottom of the
///    app. A bottom sheet can either be persistent, in which case it is shown
///    using the [ScaffoldState.showBottomSheet] method, or modal, in which case
///    it is shown using the [showModalBottomSheet] function.
///  * [SnackBar], which is a lightweight message with an optional action which
///    briefly displays at the bottom of the screen. Use the
///    [ScaffoldMessengerState.showSnackBar] method to show snack bars.
///  * [MaterialBanner], which displays an important, succinct message, at the
///    top of the screen, below the app bar. Use the
///    [ScaffoldMessengerState.showMaterialBanner] method to show material banners.
///  * [ScaffoldState], which is the state associated with this widget.
///  * <https://material.io/design/layout/responsive-layout-grid.html>
///  * Cookbook: [Add a Drawer to a screen](https://flutter.dev/docs/cookbook/design/drawer) ¿ ˝‚Él ¿ ˛%¿ ˛-:/// Creates a visual scaffold for Material Design widgets.¿ ˛4	¿ ˛;  ¿ ˛C¿ ˛I  ¿ ˛T	¿ ˛Z  ¿ ˛c¿ ˛i  ¿ ˛Ç!¿ ˛à  ¿ ˛©!¿ ˛Ø  ¿ ˛–¿ ˛÷  ¿ ˛Ú?¿ ˛¯  ¿ ˇ7¿ ˇ=  ¿ ˇH¿ ˇN  ¿ ˇb¿ ˇh  ¿ ˇv¿ ˇ|  ¿ ˇì¿ ˇô  ¿ ˇ±¿ ˇ∑  ¿ ˇ«¿ ˇÕ  ¿ ˇ·¿ ˇÁ  ¿ ¿ 
  ¿ 6¿ #  ¿ Y¿ _  ¿ v#¿ |  ¿ ü¿ •  ¿ ∫¿ ¿  ¿ ÿ'¿ ﬁ  ¿*¿  ¿5¿;  ¿ ˇ¿ ˇ'¿ ˇ(¿ ¿ <¿ M¿ N¿ k¿ î¿ ˚¿+¿RÉÆ¿ˆÉt/// If true, and [bottomNavigationBar] or [persistentFooterButtons]
/// is specified, then the [body] extends to the bottom of the Scaffold,
/// instead of only extending to the top of the [bottomNavigationBar]
/// or the [persistentFooterButtons].
///
/// If true, a [MediaQuery] widget whose bottom padding matches the height
/// of the [bottomNavigationBar] will be added above the scaffold's [body].
///
/// This property is often useful when the [bottomNavigationBar] has
/// a non-rectangular shape, like [CircularNotchedRectangle], which
/// adds a [FloatingActionButton] sized notch to the top edge of the bar.
/// In this case specifying `extendBody: true` ensures that scaffold's
/// body will be visible through the bottom navigation bar's notch.
///
/// See also:
///
///  * [extendBodyBehindAppBar], which extends the height of the body
///    to the top of the scaffold. ¿Å˝¿ÏÅ¡/// If true, and an [appBar] is specified, then the height of the [body] is
/// extended to include the height of the app bar and the top of the body
/// is aligned with the top of the app bar.
///
/// This is useful if the app bar's [AppBar.backgroundColor] is not
/// completely opaque.
///
/// This property is false by default.
///
/// See also:
///
///  * [extendBody], which extends the height of the body to the bottom
///    of the scaffold. ¿Y¿Z5/// An app bar to display at the top of the scaffold. ¿eÑ¿ÉÁ/// The primary content of the scaffold.
///
/// Displayed below the [appBar], above the bottom of the ambient
/// [MediaQuery]'s [MediaQueryData.viewInsets], and behind the
/// [floatingActionButton] and [drawer]. If [resizeToAvoidBottomInset] is
/// false then the body is not resized when the onscreen keyboard appears,
/// i.e. it is not inset by `viewInsets.bottom`.
///
/// The widget in the body of the scaffold is positioned at the top-left of
/// the available space between the app bar and the bottom of the scaffold. To
/// center this widget instead, consider putting it in a [Center] widget and
/// having that be the body. To expand this widget instead, consider
/// putting it in a [SizedBox.expand].
///
/// If you have a column of widgets that should normally fit on the screen,
/// but may overflow and would in such cases need to scroll, consider using a
/// [ListView] as the body of the scaffold. This is also a good choice for
/// the case where your body is a scrollable list. ¿àÄû¿u/// A button displayed floating above [body], in the bottom right corner.
///
/// Typically a [FloatingActionButton]. ¿+Äˇ¿Ä∏/// Responsible for determining where the [floatingActionButton] should go.
///
/// If null, the [ScaffoldState] will use the default location, [FloatingActionButtonLocation.endFloat]. ¿/Å¿Äƒ/// Animator to move the [floatingActionButton] to a new [floatingActionButtonLocation].
///
/// If null, the [ScaffoldState] will use the default animator, [FloatingActionButtonAnimator.scaling]. ¿?Åæ¿ÊÅÄ/// A set of buttons that are displayed at the bottom of the scaffold.
///
/// Typically this is a list of [TextButton] widgets. These buttons are
/// persistently visible, even if the [body] of the scaffold scrolls.
///
/// These widgets will be wrapped in an [OverflowBar].
///
/// The [persistentFooterButtons] are rendered above the
/// [bottomNavigationBar] but below the [body]. ¿ÄΩ¿¶ÄÇ/// The alignment of the [persistentFooterButtons] inside the [OverflowBar].
///
/// Defaults to [AlignmentDirectional.centerEnd]. ¿ƒÉ'¿ÂÇÏ/// A panel displayed to the side of the [body], often hidden on mobile
/// devices. Swipes in from either left-to-right ([TextDirection.ltr]) or
/// right-to-left ([TextDirection.rtl])
///
/// Typically a [Drawer].
///
/// To open the drawer, use the [ScaffoldState.openDrawer] function.
///
/// To close the drawer, use either [ScaffoldState.closeDrawer], [Navigator.pop]
/// or press the escape key on the keyboard.
///
/// {@tool dartpad}
/// To disable the drawer edge swipe on mobile, set the
/// [Scaffold.drawerEnableOpenDragGesture] to false. Then, use
/// [ScaffoldState.openDrawer] to open the drawer and [Navigator.pop] to close
/// it.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.drawer.0.dart **
/// {@end-tool} ¿|¿]T/// Optional callback that is called when the [Scaffold.drawer] is opened or closed. ¿qÉ)¿ëÇÎ/// A panel displayed to the side of the [body], often hidden on mobile
/// devices. Swipes in from right-to-left ([TextDirection.ltr]) or
/// left-to-right ([TextDirection.rtl])
///
/// Typically a [Drawer].
///
/// To open the drawer, use the [ScaffoldState.openEndDrawer] function.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer], [Navigator.pop]
/// or press the escape key on the keyboard.
///
/// {@tool dartpad}
/// To disable the drawer edge swipe, set the
/// [Scaffold.endDrawerEnableOpenDragGesture] to false. Then, use
/// [ScaffoldState.openEndDrawer] to open the drawer and [Navigator.pop] to
/// close it.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.end_drawer.0.dart **
/// {@end-tool} ¿üÄÇ¿W/// Optional callback that is called when the [Scaffold.endDrawer] is opened or closed. ¿&Å¿Ä‹/// The color to use for the scrim that obscures primary content while a drawer is open.
///
/// If this is null, then [DrawerThemeData.scrimColor] is used. If that
/// is also null, then it defaults to [Colors.black54]. ¿-Ä±¿œÄé/// The color of the [Material] widget that underlies the entire Scaffold.
///
/// The theme's [ThemeData.scaffoldBackgroundColor] by default. ¿„ÅJ¿Å/// A bottom navigation bar to display at the bottom of the scaffold.
///
/// Snack bars slide from underneath the bottom navigation bar while bottom
/// sheets are stacked on top.
///
/// The [bottomNavigationBar] is rendered below the [persistentFooterButtons]
/// and the [body]. ¿2Ü2¿!YÖ⁄/// The persistent bottom sheet to display.
///
/// A persistent bottom sheet shows information that supplements the primary
/// content of the app. A persistent bottom sheet remains visible even when
/// the user interacts with other parts of the app.
///
/// A closely related widget is a modal bottom sheet, which is an alternative
/// to a menu or a dialog and prevents the user from interacting with the rest
/// of the app. Modal bottom sheets can be created and displayed with the
/// [showModalBottomSheet] function.
///
/// Unlike the persistent bottom sheet displayed by [showBottomSheet]
/// this bottom sheet is not a [LocalHistoryEntry] and cannot be dismissed
/// with the scaffold appbar's back button.
///
/// If a persistent bottom sheet created with [showBottomSheet] is already
/// visible, it must be closed before building the Scaffold with a new
/// [bottomSheet].
///
/// The value of [bottomSheet] can be any widget at all. It's unlikely to
/// actually be a [BottomSheet], which is used by the implementations of
/// [showBottomSheet] and [showModalBottomSheet]. Typically it's a widget
/// that includes [Material].
///
/// See also:
///
///  * [showBottomSheet], which displays a bottom sheet as a route that can
///    be dismissed with the scaffold's back button.
///  * [showModalBottomSheet], which displays a modal bottom sheet.
///  * [BottomSheetThemeData], which can be used to customize the default
///    bottom sheet property values when using a [BottomSheet]. ¿!iÇ¿#bÅ⁄/// If true the [body] and the scaffold's floating widgets should size
/// themselves to avoid the onscreen keyboard whose height is defined by the
/// ambient [MediaQuery]'s [MediaQueryData.viewInsets] `bottom` property.
///
/// For example, if there is an onscreen keyboard displayed above the
/// scaffold, the body can be resized to avoid overlapping the keyboard, which
/// prevents widgets inside the body from being obscured by the keyboard.
///
/// Defaults to true. ¿#Åb¿$⁄ÅA/// Whether this scaffold is being displayed at the top of the screen.
///
/// If true then the height of the [appBar] will be extended by the height
/// of the screen's status bar, i.e. the top padding for [MediaQuery].
///
/// The default value of this property, like the default value of
/// [AppBar.primary], is true. ¿$Êr¿%A@/// {@macro flutter.material.DrawerController.dragStartBehavior} ¿%]Ç¿'NÅ–/// The width of the area within which a horizontal swipe will open the
/// drawer.
///
/// By default, the value used is 20.0 added to the padding edge of
/// `MediaQuery.paddingOf(context)` that corresponds to the surrounding
/// [TextDirection]. This ensures that the drag area for notched devices is
/// not obscured. For example, if `TextDirection.of(context)` is set to
/// [TextDirection.ltr], 20.0 will be added to
/// `MediaQuery.paddingOf(context).left`. ¿'fÅ¿(LÄŒ/// Determines if the [Scaffold.drawer] can be opened with a drag
/// gesture on mobile.
///
/// On desktop platforms, the drawer is not draggable.
///
/// By default, the drag gesture is enabled on mobile. ¿(lÅ¿)PÄÃ/// Determines if the [Scaffold.endDrawer] can be opened with a
/// gesture on mobile.
///
/// On desktop platforms, the drawer is not draggable.
///
/// By default, the drag gesture is enabled on mobile. ¿)sÇ¿+jÅ–/// Restoration ID to save and restore the state of the [Scaffold].
///
/// If it is non-null, the scaffold will persist and restore whether the
/// [drawer] and [endDrawer] was open or closed.
///
/// The state of this widget is persisted in a [RestorationBucket] claimed
/// from the surrounding [RestorationScope] using the provided restoration ID.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.  ¿+|ç˙¿2Èá/// Finds the [ScaffoldState] from the closest instance of this class that
/// encloses the given context.
///
/// If no instance of this class encloses the given context, will cause an
/// assert in debug mode, and throw an exception in release mode.
///
/// This method can be expensive (it walks the element tree).
///
/// {@tool dartpad}
/// Typical usage of the [Scaffold.of] function is to call it from within the
/// `build` method of a child of a [Scaffold].
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.of.0.dart **
/// {@end-tool}
///
/// {@tool dartpad}
/// When the [Scaffold] is actually created in the same `build` function, the
/// `context` argument to the `build` function can't be used to find the
/// [Scaffold] (since it's "above" the widget being returned in the widget
/// tree). In such cases, the following technique with a [Builder] can be used
/// to provide a new scope with a [BuildContext] that is "under" the
/// [Scaffold]:
///
/// ** See code in examples/api/lib/material/scaffold/scaffold.of.1.dart **
/// {@end-tool}
///
/// A more efficient solution is to split your build function into several
/// widgets. This introduces a new context from which you can obtain the
/// [Scaffold]. In this solution, you would have an outer widget that creates
/// the [Scaffold] populated by instances of your new inner widgets, and then
/// in these inner widgets you would use [Scaffold.of].
///
/// A less elegant but more expedient solution is assign a [GlobalKey] to the
/// [Scaffold], then use the `key.currentState` property to obtain the
/// [ScaffoldState] rather than using the [Scaffold.of] function.
///
/// If there is no [Scaffold] in scope, then this will throw an exception.
/// To return null if there is no [Scaffold], use [maybeOf] instead. ¿2Ï¿2˙   ¿9zÇí¿;¨Ç/// Finds the [ScaffoldState] from the closest instance of this class that
/// encloses the given context.
///
/// If no instance of this class encloses the given context, will return null.
/// To throw an exception instead, use [of] instead of this function.
///
/// This method can be expensive (it walks the element tree).
///
/// See also:
///
///  * [of], a similar function to this one that throws if no instance
///    encloses the given context. Also includes some sample code in its
///    documentation. ¿;¥¿;¬   ¿<â¸¿@ZÉ¯/// Returns a [ValueListenable] for the [ScaffoldGeometry] for the closest
/// [Scaffold] ancestor of the given context.
///
/// The [ValueListenable.value] is only available at paint time.
///
/// Notifications are guaranteed to be sent before the first paint pass
/// with the new geometry, but there is no guarantee whether a build or
/// layout passes are going to happen between the notification and the next
/// paint pass.
///
/// The closest [Scaffold] ancestor for the context might change, e.g when
/// an element is moved from one scaffold to another. For [StatefulWidget]s
/// using this listenable, a change of the [Scaffold] ancestor will
/// trigger a [State.didChangeDependencies].
///
/// A typical pattern for listening to the scaffold geometry would be to
/// call [Scaffold.geometryOf] in [State.didChangeDependencies], compare the
/// return value with the previous listenable, if it has changed, unregister
/// the listener, and register a listener to the new [ScaffoldGeometry]
/// listenable. ¿@e¿@s   ¿FÑA¿HƒÇâ/// Whether the Scaffold that most tightly encloses the given context has a
/// drawer.
///
/// If this is being used during a build (for example to decide whether to
/// show an "open drawer" button), set the `registerForUpdates` argument to
/// true. This will then set up an [InheritedWidget] relationship with the
/// [Scaffold] so that the client widget gets rebuilt whenever the [hasDrawer]
/// value changes.
///
/// This method can be expensive (it walks the element tree).
///
/// See also:
///
///  * [Scaffold.of], which provides access to the [ScaffoldState] object as a
///    whole, from which you can show bottom sheets, and so forth. ¿HŒ¿H‹  ¿HÊ¿HÏ  ¿I ¿JU;¿Jo   ¿JU¿JV ¿Jî¿ ç∂¿K.Äì/// State for a [Scaffold].
///
/// Can display [BottomSheet]s. Retrieve a [ScaffoldState] from the current
/// [BuildContext] using [Scaffold.of].  ¿L∞V¿L◊ ¿L‰¿LÌ¿M¿LÓ¿M¿M¿M
Y¿M1 ¿MA¿MJ¿M`¿MK¿Ma¿Mb¿Mh&¿Mx ¿MÉ¿Må¿Mç¿O{¿OÉ  ¿PJ:¿P_ ¿Po¿P}¿PÉ¿P~¿Pà=¿Pù ¿P∞¿Pæ¿Pƒ¿Pø¿ZÜ*¿Zû  ¿Z«M¿[  ¿]x_¿]ø  ¿`õR¿`º ¿`Î¿`Ï¿`’¿`Í¿`÷¿`Ò4¿a  ¿a)4¿a9 ¿aR¿a[¿a\¿aa/¿at  ¿å◊<¿å  ¿ç?¿ç9  ¿çZC¿çx  ¿ç°;¿çø  ¿ç·B¿ç˙  ¿òY0¿òx  ¿±ﬁ¿±„ ¿±Ù¿±˝$¿≤ ¿≤¿≤¿≤¿Kà>¿K†   ¿Kà¿Kâ¿Mìj¿M⁄;/// Whether this scaffold has a non-null [Scaffold.appBar].   ¿N j¿NG;/// Whether this scaffold has a non-null [Scaffold.drawer].   ¿Nms¿N∑>/// Whether this scaffold has a non-null [Scaffold.endDrawer].   ¿N„Äî¿O8I/// Whether this scaffold has a non-null [Scaffold.floatingActionButton].   ¿OóÄ∞¿P#y/// The max height the [Scaffold.appBar] uses.
///
/// This is based on the appBar preferred height plus the top padding.   ¿P ÄŸ¿QÄü/// Whether the [Scaffold.drawer] is opened.
///
/// See also:
///
///  * [ScaffoldState.openDrawer], which opens the [Scaffold.drawer] of a
///    [Scaffold].   ¿QßÄË¿ReÄ®/// Whether the [Scaffold.endDrawer] is opened.
///
/// See also:
///
///  * [ScaffoldState.openEndDrawer], which opens the [Scaffold.endDrawer] of
///    a [Scaffold].   ¿é(ÄÀ¿éõc/// Gets the current value of the visibility animation for the
/// [Scaffold.floatingActionButton].   ¿é˜År¿ècc/// Sets the current value of the visibility animation for the
/// [Scaffold.floatingActionButton]. ¿èà¿èê   ¿òé\¿òó    ¿K Ä—¿K€  ¿KË¿K¸  ¿L¿L  ¿K ¿KÀ¿RìÄ˜¿Rò  ¿RÆ¿R¥   ¿SéÅ¿Sì  ¿S¨¿S≤   ¿TòÇÃ¿V¥Å¸/// Opens the [Drawer] (if any).
///
/// If the scaffold has a non-null [Scaffold.drawer], this function will cause
/// the drawer to begin its entrance animation.
///
/// Normally this is not needed since the [Scaffold] automatically shows an
/// appropriate [IconButton], and handles the edge-swipe gesture, to show the
/// drawer.
///
/// To close the drawer, use either [ScaffoldState.closeDrawer] or
/// [Navigator.pop].
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿WhÇ·¿YúÇ/// Opens the end side [Drawer] (if any).
///
/// If the scaffold has a non-null [Scaffold.endDrawer], this function will cause
/// the end side drawer to begin its entrance animation.
///
/// Normally this is not needed since the [Scaffold] automatically shows an
/// appropriate [IconButton], and handles the edge-swipe gesture, to show the
/// drawer.
///
/// To close the drawer, use either [ScaffoldState.closeEndDrawer] or
/// [Navigator.pop].
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿[fÅf¿[k    ¿^/Å¢¿^4    ¿aïâã¿aö    ¿k$Åg¿k)    ¿lèÄ˘¿m%Ää/// Closes [Scaffold.drawer] if it is currently opened.
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿måÅ¿n%Äç/// Closes [Scaffold.endDrawer] if it is currently opened.
///
/// See [Scaffold.of] for information about how to obtain the [ScaffoldState].   ¿nõc¿n†    ¿oé«¿o"  
¿o9¿oH  ¿oV¿oe  ¿ov0¿oî  ¿o¨¿o¥  ¿o»¿o—  ¿oﬂ¿oÌ  ¿o˜¿o˛  ¿p¿p   ¿p0¿p7  ¿pF,¿pL  ¿pn¿}ÕéÊ¿áââ;/// Shows a Material Design bottom sheet in the nearest [Scaffold]. To show
/// a persistent bottom sheet, use the [Scaffold.bottomSheet].
///
/// Returns a controller that can be used to close and otherwise manipulate the
/// bottom sheet.
///
/// To rebuild the bottom sheet (e.g. if it is stateful), call
/// [PersistentBottomSheetController.setState] on the controller returned by
/// this method.
///
/// The new bottom sheet becomes a [LocalHistoryEntry] for the enclosing
/// [ModalRoute] and a back button is added to the app bar of the [Scaffold]
/// that closes the bottom sheet.
///
/// The [transitionAnimationController] controls the bottom sheet's entrance and
/// exit animations. It's up to the owner of the controller to call
/// [AnimationController.dispose] when the controller is no longer needed.
///
/// To create a persistent bottom sheet that is not a [LocalHistoryEntry] and
/// does not add a back button to the enclosing Scaffold's app bar, use the
/// [Scaffold.bottomSheet] constructor parameter.
///
/// A persistent bottom sheet shows information that supplements the primary
/// content of the app. A persistent bottom sheet remains visible even when
/// the user interacts with other parts of the app.
///
/// A closely related widget is a modal bottom sheet, which is an alternative
/// to a menu or a dialog and prevents the user from interacting with the rest
/// of the app. Modal bottom sheets can be created and displayed with the
/// [showModalBottomSheet] function.
///
/// {@tool dartpad}
/// This example demonstrates how to use [showBottomSheet] to display a
/// bottom sheet when a user taps a button. It also demonstrates how to
/// close a bottom sheet using the Navigator.
///
/// ** See code in examples/api/lib/material/scaffold/scaffold_state.show_bottom_sheet.0.dart **
/// {@end-tool}
/// See also:
///
///  * [BottomSheet], which becomes the parent of the widget returned by the
///    `builder`.
///  * [showBottomSheet], which calls this method given a [BuildContext].
///  * [showModalBottomSheet], which can be used to display a modal bottom
///    sheet.
///  * [Scaffold.of], for information about how to obtain the [ScaffoldState].
///  * The Material 2 spec at <https://m2.material.io/components/sheets-bottom>.
///  * The Material 3 spec at <https://m3.material.io/components/bottom-sheets/overview>. ¿áû¿á≠  ¿áª¿á√  ¿á◊¿á‡  ¿áÓ¿á¸  ¿à¿à  ¿à¿à/  ¿à?¿àF  ¿àU2¿àk   ¿êmÄü¿ê´./// Shows the [Scaffold.floatingActionButton].   ¿ëbÑx¿ëg  ¿ëÅ.¿ë•   ¿ñ÷Åo¿ñ€    ¿òÓÇÂ¿òˇ   ¿òÓ¿òÔ¿õ◊ÜR¿õË  ¿õ¯¿ú  ¿õ◊¿õÿ¿¢-É¿¢>   ¿¢-¿¢.¿•<Å*¿•M   ¿•<¿•=¿¶jÉÁ¿¶o  	¿¶Ç¿¶í  ¿¶ü¿¶®  ¿¶≤¿¶∫  ¿¶»¿¶◊  ¿¶Ì¿¶¸  ¿ß ¿ß   ¿ß7!¿ßF  ¿ß^¿ßd  ¿ßÇ&¿ßà  ¿ßw¿ß£¿™UÉÕ¿™Z  ¿™j¿™z  ¿™É¿™í   ¿Æ&É¥¿Æ+  ¿Æ8¿ÆH  ¿ÆQ¿Æ`   ¿≤&ÅJ¿≤qC/// Whether to show a [ModalBarrier] over the body of the scaffold. ¿≤
¿≤Ö  ¿≤ã¿≤ì   ¿≥t§‘¿≥á  ¿≥ç¿≥õ  ¿≥t¿≥u ¿ÿLÅì¿ÿR  ¿ÿÅ# ¿ÿÅ¿ÿï ¿ÿñ¿ÿú   ¿ÿ®¿ÿª   ¿ÿ«Äå¿ÿÿ  ¿ÿ‚¿ÿÒ  ¿ÿ«¿ÿ»¿ŸWÄÜ¿Ÿh  ¿Ÿo¿Ÿ~  ¿ŸW¿ŸX ¿Ÿ·Ç‡¿⁄êÄ®/// An interface for controlling a feature of a [Scaffold].
///
/// Commonly obtained from [ScaffoldMessengerState.showSnackBar] or
/// [ScaffoldState.showBottomSheet].¿⁄™¿⁄™¿⁄º¿⁄º¿⁄√\¿⁄‚¿⁄„¿⁄‰ ¿⁄Â¿⁄Î  ¿⁄Û¿⁄˘  ¿€
¿€
  ¿€¿€   ¿€"¿€*  ¿€5¿€H  ¿€÷x¿‹I]/// Remove the feature (e.g., bottom sheet, snack bar, or material banner) from the scaffold. ¿‹Sk¿‹∂M/// Mark the feature (e.g., bottom sheet or snack bar) as needing to rebuild. ¿€W{¿€∂N/// Completes when the feature controlled by this object is no longer visible.     ¿›_á¿‡¨ÉF/// A curve that progresses linearly until a specified [startingPoint], at which
/// point [curve] will begin. Unlike [Interval], [curve] will not start at zero,
/// but will use [startingPoint] as the Y position.
///
/// For example, if [startingPoint] is set to `0.5`, and [curve] is set to
/// [Curves.easeOut], then the bottom-left quarter of the curve will be a
/// straight line, and the top-right quarter will contain the entire contents of
/// [Curves.easeOut].
///
/// This is useful in situations where a widget must track the user's finger
/// (which requires a linear animation), and afterwards can be flung using a
/// curve specified with the [curve] argument, after the finger is released. In
/// such a case, the value of [startingPoint] would be the progress of the
/// animation at the time when the finger was released. ¿‡ÎÄí ¿·¿·,/// Creates a suspended curve.¿·4¿·:  ¿·R ¿·X  ¿·_¿·e¿·f¿·ÅÄÜ¿·˙e/// The progress value at which [curve] should begin.
///
/// This defaults to [Curves.easeOutCubic]. ¿‚I¿‚P5/// The curve to use when [startingPoint] is reached.  ¿‚ZÅ™¿‚m  ¿‚w¿‚  ¿‚Z¿‚[¿‰c¿‰   ¿‰¿‰	 ¿‰oÉª¿‰u  ¿‰•Åi ¿‰´¿‰ø ¿‰∆	¿‰Õ  ¿‰’!¿‰‰  ¿‰¸¿Â  ¿Â¿Â'  ¿Â5¿ÂD  ¿ÂT¿Âc  ¿Âo¿Âu  ¿Âé¿Âî  ¿Â®¿ÂÆ  ¿Âº
¿Â¬  ¿ÂÃ¿Â“  ¿Â„¿ÂÈ  ¿Â˘¿Âˇ  ¿Â¿ÂÉ¿Ê-¿Ê,  ¿ÊÑ¿Êè  ¿Êù¿Ê±  ¿Êæ¿Ê“  ¿Ê·¿Êı  ¿Á¿Á  ¿Á!¿Á,  ¿Á<¿ÁI  ¿Á\¿Áj  ¿Áw¿Áä  ¿Áì¿Áü  ¿ÁØ!¿Á≈   ¿Á’S¿Á˚   ¿Á’¿Á÷ ¿Ë,çù¿Ë2   ¿ËtB¿Ëå ¿Ëù 	¿ËªÅ!¿ËÃ   ¿Ëª¿Ëº¿È‡S¿ÈÒ   ¿È‡¿È·¿Í7Äµ¿ÍH  ¿ÍX¿Ín  ¿Í7¿Í8¿ÍZ¿Íı    ¿ÎNÄû¿ÎS  ¿Îd¿Îv   ¿ÎÅ¿Îı  ¿Ï¿Ï  ¿Ï¿Ï%   ¿ÌÄç¿Ì  ¿Ì(¿Ì9   ¿Ì†É°¿Ì•  ¿Ì≥,¿Ì‘   ¿ÒEÑÅ¿ÒX  ¿Ò^¿Òl  ¿ÒE¿ÒF ¿ıÀÇz¿˜Å;/// A [ScaffoldFeatureController] for standard bottom sheets.
///
/// This is the type of objects returned by [ScaffoldState.showBottomSheet].
///
/// This controller is used to display both standard and persistent bottom
/// sheets. A bottom sheet is only persistent if it is set as the
/// [Scaffold.bottomSheet]. ¿˜oÄ∞¿˜î¿˜ï¿˜ñ ¿˜ú¿˜£  ¿˜Æ¿˜µ  ¿˜√¿˜   ¿˜‘¿˜Á  ¿˜Ù¿˜˙  ¿¯¿¯¿¯¿¯¿¯¿¯#¿¯.     ¿¯GÅk¿¯M  ¿¯xw ¿¯~¿¯å ¿¯ì¿¯¢  ¿¯∞¿¯ø  ¿¯‘¿¯‰   ¿¯Û¿¯˛  ¿˘0¿˘+   ¿˘@p¿˘Q  ¿˘d¿˘t  ¿˘@¿˘A  Ü5Ä…Ü:   ÜLÜL  ÜTÜT  Ü^	Ü^  ÜkÜk  ÜzÜz  ÜÜÜÜ  ÜòÜò  Ü¨Ü¨  Ü√Ü√  Ü€Ü€  ÜÂ	ÜÂ  ÜÚ	ÜÚ            ÑpÑ4 Ñ\ÑxÑyÑÉoÑ¶ ÑŒÑÍÑÎÑı6Ö ÖÖù3Ö™ ÖÕÖ“/Öﬂ Ö˛Ü/Ü Ü/  åÍ <ÄÜÄ§Ä•Ä∫Ä‘ÄÅÅÅ=Å|Å£Å§ÅªÅ—ÅÌÇ	ÇÇ5ÇJÇaÇwÇôÇøÇÓÉÉÉ>ÉSÉTÉlÉëÉ∑É”ÉÈÑÑÑÉÑÙÑıÖ-ÖyÖùÖ“ÜÜ4Ü5ÜJÜRÜ\ÜiÜxÜÑÜñÜ™Ü¡ÜŸÜ„ÜÜ˝Üˇá áJáNáëáïáÂàààhà≤à„ââ"âjâªääYä|äÄäîä„äÁã:ãJãNãëãïã£ãßãıåFåòåÏç:çeçøçé<éXégéÄéÜéáé∑éΩéÓèèèUèdèjèÄèÃêêêkê}êÉê÷ë(ëtëæëÛë˘íí_í¨íÛì>ìäìØìµîîî%îqî´î±î¡î«ïïVï¶ï”ññCñDñ∂ñ‡ñ‰ñÂó5óLóRó•ó´óªó¡ò
òYòöòõôô8ô<ô=ôIôçôèôêôµôπö öQöúöÁöıö˘õ,õäõ‹úîú∆ù`ùåù•ùƒù≈ù—ùÚûDûîûﬁü.üTü}üûü¿üË†)†/†a†Ñ†à†â†¥†“†”†°°7°?°@°i°ì°õ°°°•°¶°”¢	¢<¢Q¢U¢V¢r¢©¢»¢Ï£££$£(£)£y£¡£Í§G§Ç§Ü§á§ô§ö§È•6•}•¢•®•˜¶D¶ì¶°¶ß¶¯¶˛ßOßèßﬁ®®®\®|®Ç®ò®È®Ô©Y©k©q©•©´©˝™M™õ™Ì´=´ì´µ´ª´—¨"¨(¨í¨§¨™¨¿≠+≠1≠õ≠≠≠≥ÆÆÆ:ÆâÆ∂ÆΩØ	ØBØ`ØêØ∂Øº∞∞Y∞®∞¯±±e±é±õ±Õ±Ó±˘≤R≤Y≤c≤w≤ü≤©≤√≤›≤≥≥g≥π¥¥Z¥z¥…µµVµgµÄµ‘∂*∂o∂∆∑∑[∑l∑ö∑È∑˙∏	∏@∏L∏V∏k∏w∏Ü∏å∏ç∏§∏®∏©∏Á∏˝π#πJπ`πÑπêπ¨π—π˚∫∫+∫A∫k∫º∫»∫‰ªªª;ªJªPªTªUªüª≤ª∏º	ºWºµº”º·ºÁΩ:Ω\Ω~ΩÑΩ¢ΩΩΩ˜ææ!æ"æmæsæπøømø{øÅø‘øˆ¿ @¿ @@¿ @M¿ @å¿ @•¿ @À¿ @Ò¿ @˚¿ A¿ A¿ A)¿ AD¿ AH¿ AI¿ Aí¿ A”¿ AÌ¿ BG¿ BU¿ B[¿ B√¿ B€¿ C ¿ C¿ C¿ C ¿ C9¿ C:¿ Cè¿ C‚¿ D/¿ DT¿ DZ¿ DØ¿ E¿ E]¿ Ek¿ Eq¿ EŒ¿ F¿ Fc¿ Fò¿ Fû¿ FÁ¿ G¿ G¿ G#¿ Gz¿ GÄ¿ G¿ H¿ H~¿ Hä¿ Hß¿ H¸¿ I)¿ I0¿ Ià¿ I«¿ IÎ¿ J!¿ JM¿ JS¿ JÆ¿ K¿ K^¿ KÆ¿ KÕ¿ L'¿ LV¿ Le¿ Lõ¿ L¿¿ L…¿ M(¿ M/¿ MA¿ Mm¿ Mu¿ Mç¿ M§¿ M®¿ M©¿ MÌ¿ N¿ N)¿ NV¿ Nl¿ Nñ¿ N¢¿ Næ¿ NÈ¿ O¿ O#¿ OI¿ Oe¿ Oâ¿ Oò¿ Oº¿ OÀ¿ O—¿ O’¿ O÷¿ P&¿ P9¿ P?¿ Pñ¿ PÍ¿ QZ¿ Q~¿ Qå¿ Qí¿ QÒ¿ R¿ R5¿ R;¿ R<¿ Rv¿ R¢¿ R¶¿ Rß¿ R¯¿ R˛¿ SD¿ S∞¿ T¿ T$¿ T*¿ Tâ¿ T´¿ TŸ¿ T˚¿ U¿ UM¿ Uf¿ Uå¿ U≤¿ Uº¿ U∆¿ UÃ¿ U–¿ U—¿ V"¿ Vk¿ Vã¿ VÒ¿ Vˇ¿ W¿ WÖ¿ W£¿ W‘¿ Wı¿ W˘¿ W˙¿ X¿ X-¿ X[¿ X£¿ X§¿ X≈¿ Y¿ Y4¿ Y~¿ Yº¿ Yı¿ Z	¿ ZQ¿ Zõ¿ Z™¿ ZÔ¿ [H¿ [^¿ [l¿ [≥¿ [¡¿ [À¿ [”¿ [Ÿ¿ [⁄¿ [˛¿ \"¿ \=¿ \D¿ \H¿ \I¿ \U¿ \h¿ \í¿ \∂¿ \‘¿ \Ô¿ ]¿ ]¿ ]
¿ ]¿ ]C¿ ]e¿ ]¿ ]ª¿ ]Ù¿ ]ı¿ ^-¿ ^.¿ ^:¿ ^¨¿ ^Æ¿ ^Ø¿ ^¸¿ _#¿ _'¿ _a¿ _©¿ _Â¿ _È¿ `)¿ `^¿ `i¿ `ã¿ `‹¿ a$¿ aH¿ ak¿ aå¿ a™¿ a÷¿ aÛ¿ b¿ b5¿ bU¿ b{¿ bú¿ b¢¿ b£¿ bÿ¿ bﬁ¿ c*¿ cQ¿ cR¿ cÜ¿ cå¿ cŒ¿ cÓ¿ d¿ d¿ dU¿ dl¿ dr¿ d∑¿ e¿ eO¿ ef¿ el¿ eº¿ f	¿ fY¿ fs¿ fë¿ fí¿ fŸ¿ f¿ fˆ¿ g;¿ gÇ¿ g∞¿ g∂¿ h¿ hS¿ h£¿ h∑¿ h“¿ h”¿ i¿ i4¿ i:¿ iÑ¿ iß¿ i˚¿ j(¿ j.¿ jl¿ j¢¿ j¿¿ j¡¿ k¿ k'¿ k-¿ k|¿ k ¿ l¿ lf¿ lâ¿ l¨¿ l≠¿ l◊¿ l›¿ m,¿ mx¿ m≠¿ m≥¿ n ¿ nN¿ nû¿ n«¿ nÕ¿ o¿ o?¿ oZ¿ o[¿ oå¿ oí¿ o·¿ o¸¿ o˝¿ p4¿ p:¿ pè¿ p∞¿ p±¿ pÔ¿ q¿ q¿ q¿ qc¿ qg¿ q∞¿ r¿ r¿ rh¿ ri¿ r≈¿ r∆¿ rÚ¿ s¿ sK¿ sd¿ se¿ sq¿ s≤¿ s—¿ t¿ t-¿ tG¿ tN¿ tR¿ tS¿ t_¿ tu¿ tÔ¿ tÛ¿ tı¿ tˆ¿ uC¿ uG¿ uâ¿ u∏¿ uº¿ v¿ v[¿ v_¿ v´¿ vÌ¿ w	¿ w¿ w[¿ w†¿ w´¿ wƒ¿ x¿ x#¿ xD¿ xg¿ xm¿ xn¿ x∑¿ y¿ y
¿ y@¿ yh¿ yi¿ y©¿ yØ¿ yÛ¿ z¿ z¿ z`¿ z~¿ zë¿ zó¿ zò¿ z∂¿ z’¿ {¿ {¿ {¿ {¿ {F¿ {z¿ {ö¿ {≠¿ {µ¿ {Ú¿ {ˆ¿ {˜¿ |O¿ |e¿ |É¿ |ß¿ |À¿ |“¿ |Ô¿ }D¿ }ü¿ }¶¿ }™¿ }¨¿ }≠¿ ~¿ ~M¿ ~N¿ ~l¿ ~ë¿ ~Æ¿ ~Ø¿ ~ª¿ ~⁄¿ ~Í¿ /¿ y¿ ï¿ È¿ Ä?¿ Äû¿ Ä©¿ Ä±¿ Äƒ¿ ÄŒ¿ Å¿ Å¿ Å¿ Å4¿ ÅX¿ Å|¿ Å£¿ Å™¿ Ç¿ Ç.¿ Çd¿ Çû¿ Ç•¿ Çº¿ Ç¿¿ Ç¬¿ Ç√¿ É¿ Éa¿ Éd¿ ÉØ¿ Ñ¿ ÑQ¿ Ñü¿ ÑÓ¿ Ö¿ ÖC¿ Öa¿ Öu¿ Öä¿ Ö±¿ Ö—¿ Ö˘¿ Ü"¿ ÜD¿ Ün¿ Üo¿ Üì¿ Ü∞¿ Ü’¿ Ü÷¿ á'¿ áx¿ áÀ¿ à¿ à ¿ àC¿ à]¿ àq¿ àw¿ àü¿ à›¿ â¿ âH¿ âL¿ âM¿ âY¿ â≈¿ â«¿ â»¿ ä¿ äl¿ äà¿ äã¿ ä‡¿ ã/¿ ã\¿ ãs¿ ãë¿ ãª¿ ã”¿ ãŸ¿ ã⁄¿ ãÔ¿ å¿ å-¿ å.¿ å:¿ åa¿ åì¿ å¶¿ å¨¿ å≠¿ å«¿ ç¿ çc¿ ç¢¿ ç£¿ çÃ¿ é¿ éB¿ éC¿ éu¿ éü¿ éÚ¿ è¿ è¿ è/¿ èQ¿ èÄ¿ èò¿ è∂¿ è≈¿ è“¿ èÈ¿ èÙ¿ è˝¿ ê¿ ê¿ ê
¿ ê¿ êD¿ êX¿ êu¿ êó¿ ê∏¿ ê‹¿ ê˛¿ ë6¿ ëm¿ ë™¿ ë‡¿ í¿ í'¿ íE¿ ío¿ í°¿ íß¿ í®¿ í¡¿ íÊ¿ ì¿ ì'¿ ìL¿ ìÄ¿ ìÅ¿ ìÃ¿ î¿ îP¿ îô¿ îö¿ îª¿ î⁄¿ î€¿ ï¿ ï	¿ ï¿ ï7¿ ï¿ ïÄ¿ ïŒ¿ ñ¿ ñm¿ ñ©¿ ñ™¿ ó¿ ó.¿ óK¿ óq¿ óê¿ óë¿ óª¿ ò¿ òP¿ òà¿ òé¿ òè¿ ò≥¿ òÍ¿ ôf¿ ôû¿ ôÍ¿ öG¿ öM¿ öN¿ öÇ¿ ö¡¿ öÚ¿ õ?¿ õH¿ õª¿ õ¿ ú_¿ úe¿ úf¿ úè¿ ú¡¿ ù¿ ùk¿ ùl¿ ùü¿ ùÃ¿ ù˝¿ û¿ û¿ û¿ ûZ¿ ûû¿ û¿¿ ü*¿ ü+¿ üS¿ üõ¿ üú¿ ü¥¿ ü‚¿ †D¿ †ù¿ †•¿ †¶¿ †Ë¿ °¿ °;¿ °t¿ °π¿ °›¿ °Ê¿ ¢¿ ¢`¿ ¢f¿ ¢g¿ ¢π¿ £¿ £O¿ £ô¿ £†¿ £ı¿ §8¿ §Ü¿ §”¿ •#¿ •J¿ •K¿ •q¿ •î¿ •¡¿ ¶
¿ ¶;¿ ¶]¿ ¶f¿ ¶Ø¿ ¶Í¿ ¶¿ ¶Ò¿ ß7¿ ßc¿ ß¶¿ ßˆ¿ ß¸¿ ß˝¿ ®,¿ ®p¿ ®°¿ ®ﬂ¿ ®Ë¿ ©@¿ ©Ã¿ ©“¿ ©”¿ ©˚¿ ™3¿ ™ë¿ ™í¿ ™‡¿ ´¿ ´W¿ ´Å¿ ´ß¿ ´Ò¿ ¨T¿ ¨v¿ ¨°¿ ¨ø¿ ¨€¿ ¨ˇ¿ ≠/¿ ≠U¿ ≠}¿ ≠Ü¿ ≠Ï¿ ÆT¿ Æ°¿ Æ√¿ Æ‚¿ Ø¿ Ø(¿ Øl¿ Ø¢¿ Ø®¿ Ø©¿ Ø’¿ ∞-¿ ∞T¿ ∞x¿ ∞ö¿ ∞ﬁ¿ ∞È¿ ∞Ò¿ ∞Ú¿ ±¿ ±i¿ ±ó¿ ±…¿ ±¯¿ ≤-¿ ≤c¿ ≤†¿ ≤—¿ ≥¿ ≥9¿ ≥m¿ ≥¢¿ ≥‘¿ ¥¿ ¥=¿ ¥t¿ ¥≠¿ ¥Â¿ µ¿ µY¿ µâ¿ µí¿ µ¿ ∂¿ ∂~¿ ∂è¿ ∂Õ¿ ∂◊¿ ∂Ê¿ ∑*¿ ∑z¿ ∑À¿ ∏¿ ∏,¿ ∏x¿ ∏©¿ ∏ﬁ¿ ∏˘¿ π¿ π¿ π¿ π:¿ πe¿ πß¿ πÈ¿ πÙ¿ π¸¿ ∫e¿ ∫f¿ ∫w¿ ∫∏¿ ∫√¿ ª(¿ ªä¿ ªı¿ º¿ ºp¿ ºí¿ ºŒ¿ Ω¿ Ω5¿ Ωî¿ ΩÎ¿ æB¿ æî¿ æ•¿ ææ¿ ø/¿ ø@¿ øP¿ ø\¿ øf¿ ø{¿ øá¿ øç¿ øé¿ øª¿ ¿¿ ¿W¿ ¿]¿ ¿^¿ ¿à¿ ¿Õ¿ ¡¿ ¡¿ ¡¿ ¡9¿ ¡Å¿ ¡º¿ ¡¬¿ ¡√¿ ¡Â¿ ¬¿ ¬U¿ ¬\¿ ¬`¿ ¬a¿ ¬m¿ ¬¢¿ ¬–¿ √¿ √:¿ √¶¿ ƒ¿ ƒh¿ ƒñ¿ ƒ›¿ ƒ·¿ ƒ„¿ ƒ‰¿ ≈1¿ ≈5¿ ≈~¿ ≈Ç¿ ≈Ω¿ ∆¿ ∆A¿ ∆{¿ ∆∫¿ ∆‰¿ ∆˝¿ «!¿ «F¿ «j¿ «è¿ «ï¿ «ñ¿ «≠¿ «Ÿ¿ »¿ »E¿ »F¿ »Å¿ »∞¿ »±¿ »Ω¿ …¿ …¿ … ¿ …ö¿ …Ù¿  )¿  Y¿  ã¿  ¿¿ À9¿ Àj¿ À£¿ À◊¿ ÀÒ¿ ÀÚ¿ À˛¿ Ã¿ Ã*¿ Ã+¿ ÃZ¿ ÃÜ¿ Ãô¿ Ã⁄¿ ÃÛ¿ ÃÙ¿ Õ¿ Õg¿ ÕÅ¿ Õ≠¿ Õ∫¿ Œ¿ ŒT¿ Œu¿ Œ{¿ Œ¿ ŒÄ¿ Œå¿ Œü¿ Œ¬¿ Œ◊¿ Œ€¿ Œ‹¿ ŒË¿ œ,¿ œR¿ œŒ¿ –¿ –6¿ –<¿ –u¿ –´¿ —¿ —¿ —¿ —[¿ —ù¿ —Ÿ¿ “(¿ “c¿ “Ç¿ “¶¿ “‘¿ “ﬁ¿ “Ì¿ ”<¿ ”ä¿ ”’¿ ”ˇ¿ ‘¿ ‘<¿ ‘S¿ ‘Å¿ ‘â¿ ‘è¿ ‘ì¿ ‘î¿ ‘⁄¿ ’¿ ’¿ ’I¿ ’J¿ ’g¿ ’ò¿ ’‡¿ ÷¿ ÷¿ ÷&¿ ÷è¿ ÷¶¿ ÷À¿ ÷È¿ ÷Ú¿ ÷˘¿ ÷˙¿ ◊E¿ ◊m¿ ◊â¿ ◊ê¿ ÿ¿ ÿ¿ ÿ:¿ ÿ∏¿ Ÿ<¿ Ÿ=¿ Ÿ^¿ Ÿ¬¿ ⁄(¿ ⁄ò¿ ⁄ô¿ €¿ €w¿ €x¿ €¥¿ €Ò¿ €ı¿ €ˆ¿ ‹=¿ ‹O¿ ‹ò¿ ‹Ê¿ ›¿ ›¿ ›"¿ ›&¿ ›'¿ ›`¿ ›ä¿ ›®¿ ›¨¿ ›≠¿ ›π¿ ›‡¿ ›Ú¿ ﬁ¿ ﬁ4¿ ﬁy¿ ﬁ∏¿ ﬁ‘¿ ﬂ¿ ﬂ)¿ ﬂ7¿ ﬂF¿ ﬂc¿ ﬂë¿ ﬂ∫¿ ﬂÌ¿ ‡¿ ‡%¿ ‡4¿ ‡o¿ ‡ä¿ ‡Ω¿ ‡‡¿ ·¿ ·2¿ ·A¿ ·M¿ ·Z¿ ·u¿ ·†¿ ·«¿ ·˜¿ ‚¿ ‚)¿ ‚6¿ ‚?¿ ‚F¿ ‚J¿ ‚K¿ ‚i¿ ‚ ¿ ‚Œ¿ ‚œ¿ ‚˚¿ „$¿ „L¿ „S¿ „W¿ „Y¿ „Z¿ „ú¿ „†¿ „‰¿ „Ë¿ ‰¿ ‰n¿ ‰ú¿ ‰†¿ ‰¥¿ Â¿ ÂN¿ Âñ¿ Âæ¿ Â¬¿ Ê¿ Ê¿ Ê¿ Ê3¿ ÊÅ¿ Ê–¿ Á¿ ÁY¿ Á]¿ Á¬¿ Á∆¿ Ë¿ Ë¿ Ë#¿ Ë7¿ ËÑ¿ Ë’¿ È!¿ ÈY¿ È®¿ Èﬂ¿ È„¿ ÍF¿ ÍJ¿ Íì¿ Í£¿ Íß¿ Í„¿ ÍÁ¿ Î.¿ Îu¿ Îº¿ Ï¿ ÏG¿ Ï|¿ Ï¿¿ Ì¿ Ì¿ Ì¿ ÌU¿ Ìõ¿ Ì€¿ Ó¿ ÓT¿ Óï¿ ÓØ¿ Ó≥¿ Ó˙¿ Ó˛¿ Ô=¿ Ôå¿ Ô‡¿ Ô‰¿ 3¿ õ¿ ‡¿ ‰¿ ÒL¿ Ò°¿ Ò•¿ Òº¿ Ò¿¿ ÒŸ¿ Ò›¿ Ú¿ ÚQ¿ Úè¿ ÚΩ¿ Ú¡¿ Û¿ ÛE¿ Ûì¿ Û›¿ Ù"¿ Ù-¿ Ù1¿ ÙE¿ Ùñ¿ Ù‡¿ Ù‰¿ Ù¿ ı=¿ ıi¿ ı¿ ı√¿ ı˘¿ ˆ¿ ˆ¿ ˆ¿ ˆ¿ ˆ,¿ ˆ0¿ ˆt¿ ˆ≥¿ ˆÍ¿ ˆÓ¿ ˆ¸¿ ˜ ¿ ˜P¿ ˜t¿ ˜√¿ ˜˛¿ ¯O¿ ¯†¿ ¯Ó¿ ˘6¿ ˘G¿ ˘ñ¿ ˘ﬂ¿ ˘¿ ˙A¿ ˙ê¿ ˙·¿ ˚¿ ˚o¿ ˚¨¿ ˚Ù¿ ¸C¿ ¸x¿ ¸Ã¿ ˝¿ ˝[¿ ˝∏¿ ˝‡¿ ˛¿ ˛0¿ ˛?¿ ˛P¿ ˛_¿ ˛~¿ ˛•¿ ˛Ã¿ ˛Ó¿ ˇ3¿ ˇD¿ ˇ^¿ ˇr¿ ˇè¿ ˇ≠¿ ˇ√¿ ˇ›¿  ¿ ¿ U¿ r¿ õ¿ ∂¿ ‘¿¿1¿I¿O¿P¿ñ¿·¿)¿Q¿W¿§¿Ú¿¯¿?¿Ö¿—¿¿`¿f¿v¿|¿ƒ¿È¿¿¿Q¿ù¿À¿—¿¿0¿6¿_¿e¿u¿{¿≈¿ﬂ¿¿¿=¿b¿c¿é¿î¿ÿ¿¿e¿≤¿Â¿Î¿	9¿	ä¿	Ÿ¿
 ¿
I¿
O¿
ù¿
Ì¿:¿o¿Ö¿Ü¿“¿ÿ¿¿(¿)¿w¿}¿Ë¿,¿-¿à¿é¿¯¿<¿=¿Ü¿å¿÷¿¿$¿]¿c¿û¿–¿ˇ¿ ¿O¿U¿â¿¡¿¬¿¿X¿Ç¿à¿§¿™¿Ò¿˜¿J¿y¿¿ï¿œ¿¿a¿k¿q¿√¿’¿Ì¿Ó¿E¿n¿o¿π¿˛¿(¿.¿J¿P¿ö¿†¿ˆ¿%¿+¿A¿q¿µ¿¿¿¿o¿Å¿ú¿ù¿˜¿#¿$¿¿Ö¿œ¿	¿*¿+¿x¿~¿¿¿‡¿·¿)¿/¿}¿û¿§¿Ù¿
¿/¿0¿^¿d¿≥¿¿7¿=¿ç¿ﬁ¿*¿Q¿W¿ü¿Ï¿¿ ¿m¿∂¿À¿—¿¿h¿¥¿‘¿⁄¿Í¿¿ >¿ u¿ ª¿!¿!I¿!f¿!g¿!∞¿!ˇ¿"K¿"Q¿"ô¿"Í¿#6¿#<¿#T¿#|¿#}¿#∆¿#Ã¿$¿$b¿$h¿$¨¿$Õ¿$„¿$‰¿%'¿%Z¿%[¿%•¿%≥¿%π¿%ˇ¿&I¿&ó¿&·¿'¿'>¿'c¿'d¿'®¿'¡¿'«¿( ¿(¿(?¿(i¿(j¿(¨¿(≈¿(À¿)¿)
¿)C¿)p¿)q¿)∑¿)Ω¿*¿*;¿*A¿*é¿*ﬂ¿*Â¿*ı¿*˚¿+H¿+Z¿+y¿+z¿+«¿+È¿+Ô¿,<¿,Ä¿,Ü¿,∆¿,Ã¿,‚¿-2¿-c¿-i¿-∑¿-…¿-œ¿-Â¿.5¿.Ä¿.Õ¿/¿/e¿/w¿/}¿/À¿/›¿/„¿00¿0{¿0À¿1¿1U¿1[¿1´¿1Ù¿28¿2>¿2ã¿2“¿3¿3X¿3r¿3á¿3ç¿3¡¿3’¿4&¿4/¿4G¿4≤¿5¿5g¿5p¿5Å¿5‰¿6<¿6i¿6∞¿6π¿6 ¿7*¿7à¿7Ê¿8G¿8§¿8˛¿9+¿94¿9k¿9s¿9w¿9x¿9≈¿9Á¿9Ì¿:>¿:Ü¿:å¿:Ã¿:“¿:‚¿:Ë¿;1¿;|¿;î¿;Ã¿<	¿<¿<¿<[¿<ã¿<ë¿<‘¿<⁄¿=$¿=n¿=º¿=Œ¿=‘¿>!¿>o¿>µ¿>‰¿>Í¿?5¿?Ñ¿?”¿@¿@/¿@}¿@Â¿A¿A<¿AR¿A≠¿A∏¿A“¿B6¿Bã¿Bñ¿B©¿C¿Ch¿Có¿C‡¿CÎ¿C˛¿D`¿D¿¿E ¿Eä¿Eï¿EŒ¿Eÿ¿Eﬁ¿F	¿F¿F¿F\¿Fj¿Fp¿FΩ¿G¿GX¿G©¿Gæ¿Gƒ¿H¿H
¿H¿H ¿Hq¿H∂¿I
¿I(¿Iç¿I∏¿I≈¿J¿JH¿JN¿JR¿JS¿J_¿Jë¿Jì¿Jî¿J∞¿J¥¿K ¿K(¿KÜ¿Kí¿K«¿K»¿K‘¿L¿LW¿Lò¿Lú¿Lù¿L≠¿LÆ¿M¿Me¿Mf¿Mê¿Më¿Mœ¿M˛¿N<¿Nk¿N¨¿N·¿O-¿Ox¿Oy¿Oï¿O∆¿OÃ¿P¿PH¿PÜ¿P«¿P»¿P˜¿P˝¿Q¿Q¿Q_¿Qt¿Q§¿Q•¿Q◊¿Q›¿QÌ¿QÛ¿RC¿RZ¿Rê¿Rë¿Rø¿S¿S!¿SI¿SS¿SÅ¿Sá¿Sã¿Så¿SΩ¿T¿T%¿TP¿TZ¿Tã¿Të¿Tï¿Tñ¿Tπ¿Tø¿U¿UB¿UH¿Uñ¿UÊ¿UÙ¿U˙¿V?¿VV¿V\¿V≠¿V√¿W¿W6¿W<¿Wa¿We¿Wf¿Wí¿Wò¿WÏ¿X'¿X-¿X{¿XÀ¿XŸ¿Xﬂ¿Y'¿Y>¿YD¿Yï¿YÆ¿Y¿Z¿Z¿ZF¿ZJ¿ZK¿ZÑ¿Z≤¿Z≥¿Z≈¿[¿[¿[d¿[¿\¿\1¿\A¿\B¿\u¿\â¿\π¿\√¿\…¿\Õ¿\Œ¿\Á¿\Ë¿]A¿]v¿]Ÿ¿]⁄¿^-¿^N¿^È¿_¿_.¿_/¿_n¿_Ç¿_æ¿_»¿_Œ¿_“¿_”¿_Ù¿_ı¿`:¿`Ü¿`ô¿`Ô¿a'¿a_¿aí¿aì¿aø¿b¿bY¿b´¿b÷¿cF¿c§¿c˛¿d4¿dÄ¿d«¿d¿e*¿e]¿em¿e∆¿e“¿f¿f?¿fI¿f_¿fg¿fh¿f¿¿g¿g6¿ge¿gﬂ¿h¿hG¿hQ¿hÅ¿hâ¿hä¿hπ¿h⁄¿i"¿ib¿ií¿i∏¿iÂ¿j-¿ju¿jà¿jô¿j®¿jµ¿j¿¿j‹¿k¿k¿k¿k!¿k"¿kF¿km¿k•¿kÀ¿k”¿kÂ¿l&¿lU¿la¿lv¿lÇ¿là¿lå¿lç¿l«¿lÕ¿m¿m5¿mY¿mÄ¿mÖ¿mâ¿mä¿m«¿mÕ¿n¿n8¿nc¿né¿nî¿nò¿nô¿n¡¿n˚¿nˇ¿o ¿o5¿oR¿or¿o®¿oƒ¿o€¿oÛ¿p¿p,¿pB¿pt¿p{¿pã¿p‚¿p˛¿qI¿qä¿qÊ¿qÒ¿q˘¿r¿r¿r¿rP¿r∏¿r„¿r‰¿s¿s"¿s#¿sZ¿sv¿s®¿sÿ¿t¿t¿t¿t¿t:¿tU¿t~¿té¿tñ¿t—¿u¿u'¿u(¿uB¿uw¿u¿uÄ¿u¨¿u¿¿u‡¿v¿v=¿vG¿vH¿vç¿væ¿v∆¿v‚¿vË¿vÈ¿w¿w(¿wQ¿w∞¿wÿ¿w‰¿w¿wÒ¿x¿x>¿x]¿xv¿xì¿xõ¿x°¿x¢¿x ¿xÂ¿y¿yD¿yZ¿yÖ¿yó¿y°¿yﬁ¿y˝¿z¿z¿zZ¿zr¿z™¿z∏¿z¬¿zÀ¿z·¿z˛¿{¿{M¿{v¿{Ä¿{â¿{°¿{√¿{Î¿|¿|¿|=¿|]¿|d¿|e¿|~¿|∫¿|¿¿|¡¿|Ô¿}¿}¿}'¿}>¿}b¿}™¿}ø¿}∆¿} ¿}À¿~¿~Z¿~`¿~≤¿~∆¿~Ã¿¿\¿o¿u¿¿¿Ä¿Ä3¿Ä9¿Äå¿Ä“¿Å¿Å%¿Åu¿Å√¿Å˜¿Å˝¿ÇL¿Çö¿Ç–¿Ç÷¿É&¿Éw¿É√¿ÉÍ¿É¿Ñ¿ÑP¿Ñö¿Ñ ¿Ñ–¿Ö3¿ÖE¿ÖU¿Ö[¿Ö™¿Öæ¿Ü
¿ÜW¿Üg¿Ü∏¿á¿ág¿áö¿á∑¿á”¿áÍ¿à¿à¿à;¿àQ¿àâ¿àê¿à†¿à»¿à‰¿â/¿âp¿âÃ¿â◊¿âﬂ¿âÚ¿â¸¿ä*¿ä+¿äK¿ä—¿ä„¿ã¿ã#¿ã@¿ãi¿ãì¿ã±¿ã«¿ãÎ¿å¿å-¿å~¿åá¿åè¿å∞¿å¥¿åµ¿å’¿ç¿çX¿çü¿çﬁ¿çﬂ¿é%¿é&¿ég¿éé¿éÙ¿éı¿è6¿è]¿èõ¿èÁ¿ê#¿ê_¿êf¿êj¿êk¿êú¿ê…¿ë	¿ë¿ë¿ë`¿ë≥¿í¿í.¿í§¿íﬂ¿ì™¿î%¿î+¿î,¿î>¿î~¿î±¿îπ¿î∫¿ï¿ïu¿ïä¿ï◊¿ï€¿ï‹¿ñ¿ñ¿ñ^¿ñ™¿ñ‘¿ñÛ¿óS¿ó§¿óÕ¿ó⁄¿ò¿ò3¿ò<¿òB¿òF¿òG¿òV¿òW¿òã¿òå¿ò≥¿òÁ¿òÎ¿òÏ¿ò¯¿ô¿ô$¿ôz¿ôÏ¿ö^¿ö©¿öË¿ö˚¿õ¿õ=¿õD¿õE¿õä¿õ∂¿õ…¿õ–¿õ‘¿õ’¿õ·¿ú¿ú4¿úß¿ù ¿ùt¿ùz¿ù”¿ûB¿ûH¿û¿ûë¿ûÛ¿ü-¿üG¿ü†¿ü⁄¿üÈ¿† ¿†9¿†ñ¿†—¿†‡¿†Ó¿†¯¿°¿°¿°A¿°e¿°µ¿°·¿°¿¢¿¢ ¿¢&¿¢*¿¢+¿¢7¿¢X¿¢©¿¢‡¿£A¿£ë¿£∑¿§¿§B¿§H¿§ç¿§¿¿§È¿§Í¿•¿•5¿•9¿•:¿•F¿•Y¿•z¿•≠¿•Ê¿¶¿¶.¿¶N¿¶c¿¶g¿¶h¿¶~¿¶õ¿¶Æ¿¶ƒ¿¶È¿ß¿ß3¿ßZ¿ß~¿ß™¿ß±¿ßÒ¿®¿®9¿®`¿®â¿®ê¿®≠¿®Â¿®Î¿®Ï¿©2¿©N¿©ó¿©†¿©¶¿©ß¿©¿¿©‘¿©Ê¿©˝¿™4¿™?¿™H¿™N¿™R¿™S¿™¢¿™∆¿™‚¿™˜¿´	¿´#¿´A¿´k¿´ü¿´‹¿¨¿¨@¿¨à¿¨∏¿¨‹¿¨Á¿≠¿≠L¿≠ã¿≠¨¿≠Ï¿Æ¿Æ¿Æ¿Æ#¿Æ$¿Æp¿Æë¿Æ™¿Æø¿Æ—¿ÆÎ¿Ø¿Ø2¿Øc¿Ø†¿Øœ¿∞¿∞I¿∞v¿∞ó¿∞¢¿∞¿¿±¿±C¿±d¿±§¿±»¿±—¿±◊¿±€¿±‹¿±˚¿≤#¿≤$¿≤j¿≤ù¿≤Ê¿≤Ù¿≤˙¿≥¿≥*¿≥e¿≥m¿≥q¿≥r¿≥~¿≥•¿≥”¿¥¿¥8¿¥|¿¥}¿¥Ø¿¥¬¿¥“¿µ¿µ*¿µi¿µ©¿µ≤¿µÃ¿µÏ¿∂¿∂<¿∂•¿∂Ÿ¿∂‡¿∂˙¿∑¿∑!¿∑7¿∑U¿∑w¿∑Ç¿∑£¿∑ƒ¿∑‰¿∏¿∏)¿∏2¿∏8¿∏9¿∏Z¿∏¥¿π¿πb¿πw¿πâ¿π°¿πÊ¿∫¿∫F¿∫i¿∫v¿∫Å¿∫ü¿∫¡¿∫‚¿ª¿ª(¿ª1¿ª7¿ª8¿ª]¿ªx¿ªy¿ª≈¿ªÁ¿º¿º.¿ºS¿ºú¿ºß¿º∞¿º≈¿º◊¿ºÊ¿Ω	¿Ω+¿ΩK¿Ωn¿Ω¶¿ΩØ¿Ωµ¿Ω∂¿Ωﬂ¿æ¿æZ¿æÜ¿æ©¿æÛ¿øM¿øN¿øc¿øu¿øö¿ø∫¿ø‹¿ø¸¿¿¿¿ä¿¿…¿¿“¿¿ÿ¿¿Ÿ¿¡
¿¡9¿¡e¿¡∏¿¬$¿¬]¿¬^¿¬s¿¬Ö¿¬∞¿¬÷¿¬¯¿√)¿√L¿√o¿√Æ¿√∑¿√Ω¿√æ¿√¿ƒ¿ƒ¿ƒ*¿ƒO¿ƒk¿ƒ≠¿ƒº¿ƒ…¿ƒ‰¿ƒ¸¿≈ ¿≈@¿≈}¿≈Ø¿≈”¿≈Ò¿∆0¿∆m¿∆Ä¿∆ë¿∆†¿∆≠¿∆∏¿∆‡¿«¿«"¿«E¿«Ü¿«≈¿«Œ¿«‘¿«’¿»¿»¿»*¿»N¿»y¿»õ¿»ª¿»ﬁ¿…¿…A¿…J¿…P¿…Q¿…d¿…t¿…õ¿…⁄¿ ¿ A¿ á¿ ≥¿ º¿ Ê¿À¿À#¿ÀC¿Àd¿Àk¿Àl¿Àé¿À≠¿ÀŒ¿ÀÂ¿À˘¿Ã¿ÃB¿Ãj¿ÃÀ¿ÃÛ¿Õ ¿Õ#¿ÕG¿Õi¿Õé¿Õ≥¿Õæ¿Õ·¿Œ¿Œ%¿ŒH¿ŒW¿Œ]¿Œ^¿ŒÄ¿Œ≠¿Œ›¿ŒÍ¿œ¿œG¿œM¿œN¿œñ¿œﬂ¿–8¿–?¿–@¿–ä¿–¡¿—¿—{¿—Ç¿—É¿—≤¿—˙¿—˚¿“¿“2¿“]¿“Ü¿“ü¿“Ì¿”o¿”ã¿”∫¿”¯¿‘	¿‘6¿‘a¿‘ã¿‘‘¿‘¸¿’.¿’Ö¿’Ì¿÷B¿÷y¿÷Ÿ¿◊	¿◊C¿◊ï¿◊≈¿◊ÿ¿◊¸¿ÿ¿ÿ¿ÿ*¿ÿ5¿ÿ>¿ÿE¿ÿI¿ÿK¿ÿL¿ÿ¿ÿ•¿ÿ¶¿ÿƒ¿ÿ≈¿ÿ—¿ÿ˙¿ŸP¿ŸT¿ŸU¿Ÿa¿Ÿá¿ŸØ¿Ÿ⁄¿Ÿﬁ¿Ÿ‡¿Ÿ·¿⁄¿⁄!¿⁄e¿⁄ä¿⁄¡¿€ ¿€3¿€T¿€U¿€¶¿€”¿€‘¿‹4¿‹P¿‹Q¿‹°¿‹¿¿‹¬¿‹√¿›¿›_¿›∞¿ﬁ¿ﬁ5¿ﬁ9¿ﬁÑ¿ﬁŒ¿ﬂ¿ﬂ5¿ﬂ9¿ﬂÜ¿ﬂ”¿‡#¿‡n¿‡¶¿‡È¿·
¿·.¿·J¿·t¿·~¿·¿·∑¿·Ω¿·Î¿‚	¿‚
¿‚B¿‚W¿‚X¿‚d¿‚É¿‚•¿‚ﬂ¿‚‡¿‚˝¿„¿„¿„¿„(¿„8¿„>¿„?¿„ã¿„ ¿‰¿‰¿‰¿‰¿‰(¿‰h¿‰l¿‰n¿‰o¿‰£¿‰¬¿‰—¿‰¯¿Â¿Â1¿ÂP¿Âk¿Âä¿Â§¿Â∏¿Â»¿Âﬂ¿Âı¿Ê	¿Ê¿Ê¿ÊÇ¿Êõ¿Êº¿Êﬂ¿Á ¿Á¿Á:¿ÁZ¿Áu¿Áë¿Á≠¿Á“¿Á”¿Áﬂ¿Ë)¿Ë+¿Ë,¿Ër¿Ë∏¿Ëπ¿Ë≈¿Ë⁄¿ËÒ¿Ë˝¿È@¿Èã¿Èí¿ÈŸ¿È›¿Èﬁ¿ÈÍ¿È˝¿Í¿Í0¿Í4¿Í5¿ÍA¿Íz¿Í†¿ÍÈ¿ÍÌ¿ÍÓ¿Íˇ¿Î)¿ÎG¿ÎK¿ÎL¿ÎÄ¿Î≈¿ÎÈ¿ÎÌ¿ÎÓ¿Ï3¿ÏÄ¿Ï±¿ÏŸ¿Ì¿Ì¿Ì¿Ì¿ÌB¿Ìq¿Ìì¿Ìô¿Ìù¿Ìû¿Ì„¿Ó!¿ÓZ¿Óò¿Ô¿Ô5¿Ô[¿Ô±¿Ôª¿Ô»¿¿-¿3¿Ä¿π¿Ë¿Ò¿Ò&¿Ò,¿Ò>¿ÒB¿ÒC¿ÒO¿Òv¿Òí¿Òø¿Òˆ¿Ú¿Ú@¿Úî¿Ú¨¿Ú∑¿Ú¿¿Úÿ¿ÚÒ¿Û)¿Ûp¿Ûô¿Û∑¿ÛÙ¿Ù¿ÙJ¿Ùq¿Ùõ¿Ù¿¿Ùı¿ı¿ı?¿ın¿ıõ¿ı®¿ı≥¿ıº¿ı√¿ı«¿ı»¿ı ¿ıÀ¿ˆ	¿ˆ¿ˆZ¿ˆ^¿ˆ©¿ˆÎ¿˜¿˜m¿˜ò¿˜™¿˜ø¿˜–¿˜¿¯¿¯ ¿¯!¿¯D¿¯F¿¯G¿¯v¿¯è¿¯¨¿¯–¿¯Í¿¯¿¯Ò¿˘	¿˘=¿˘>¿˘J¿˘Ä¿˘≠¿˘±¿˘≥    %_kDefaultFloatingActionButtonLocation%_kDefaultFloatingActionButtonAnimator_standardBottomSheetCurve _kBottomSheetDominatesPercentage_kMinBottomSheetScrimOpacity_kMaxBottomSheetScrimOpacity_ScaffoldSlotScaffoldMessengerScaffoldMessengerState_ScaffoldMessengerScopeScaffoldPrelayoutGeometry_TransitionSnapshotFabLocationScaffoldGeometry_ScaffoldGeometryNotifier_BodyBoxConstraints_BodyBuilder_ScaffoldLayout_FloatingActionButtonTransition$_FloatingActionButtonTransitionStateScaffoldScaffoldState_DismissDrawerActionScaffoldFeatureController_BottomSheetSuspendedCurve_StandardBottomSheet_StandardBottomSheetStatePersistentBottomSheetController_ScaffoldScope ÃÌ